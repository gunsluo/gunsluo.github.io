<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>我的笔记，区块链概念！</title>
    <url>/%E7%AC%94%E8%AE%B0/blockchain-concept-20170418.html</url>
    <content><![CDATA[<p>每个人都认为区块链技术（blockchain）会彻底改变企业的交易方式。我们首先介绍一下相关背景。</p>
<a id="more"></a>

<h3 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h3><p>以下术语在此规范的有限范围内定义，以帮助读者清楚准确的了解这里所描述的概念。</p>
<ul>
<li><p>交易(Transaction)<br>是区块链上执行功能的一个请求。功能是使用链节点(chainnode)来实现的。</p>
</li>
<li><p>交易者(Transactor)<br>是向客户端应用这样发出交易的实体。</p>
</li>
<li><p>总账(Ledger)<br>是一系列包含交易和当前世界状态(World State)的加密的链接块。</p>
</li>
<li><p>世界状态(World State)<br>是包含交易执行结果的变量集合。</p>
</li>
<li><p>链码(Chaincode)<br>是作为交易的一部分保存在总账上的应用级的代码（如智能合约）。链节点运行的交易可能会改变世界状态。</p>
</li>
<li><p>验证Peer(Validating Peer)<br>是网络中负责达成共识，验证交易并维护总账的一个计算节点。</p>
</li>
<li><p>非验证Peer(Non-validating Peer)<br>是网络上作为代理把交易员连接到附近验证节点的计算节点。非验证Peer只验证交易但不执行它们。它还承载事件流服务和REST服务。</p>
</li>
<li><p>带有权限的总账(Permissioned Ledger)<br>是一个由每个实体或节点都是网络成员所组成的区块链网络。匿名节点是不允许连接的。</p>
</li>
<li><p>隐私(Privacy)<br>是链上的交易者需要隐瞒自己在网络上身份。虽然网络的成员可以查看交易，但是交易在没有得到特殊的权限前不能连接到交易者。</p>
</li>
<li><p>保密(Confidentiality)<br>是交易的内容不能被非利益相关者访问到的功能。</p>
</li>
<li><p>可审计性(Auditability)<br>作为商业用途的区块链需要遵守法规，很容易让监管机构审计交易记录。所以区块链是必须的。</p>
</li>
</ul>
<h3 id="模块介绍"><a href="#模块介绍" class="headerlink" title="模块介绍"></a>模块介绍</h3><p>Fabric的构架由成员服务（Membership）、区块链服务（Blockchain）和链码服务（Chaincode）三个主要类别构成。这些类别仅仅是Fabric的逻辑结构，并不是在物理上将组件划分成不同的进程、地址空间或者虚拟机。</p>
<p><img src="http://wx1.sinaimg.cn/mw690/0065glrAgy1ffmeoic9nxj30fa09i75r.jpg" alt="Alt text"></p>
<h4 id="成员服务（Membership）"><a href="#成员服务（Membership）" class="headerlink" title="成员服务（Membership）"></a>成员服务（Membership）</h4><p>成员服务为网络提供身份管理，隐私，保密和可审计性的服务。在一个不带权限的区块链中，参与者是不需要被授权的，且所有的节点都可以同样的提交交易并把它们汇集到可接受的块中，如：它们没有角色的区分。成员服务通过公钥基础设施(Public Key Infrastructure (PKI))和去中心化的/共识技术使得不带权限的区块链变成带权限的区块链。在后者中，通过实体注册来获得长时间的，可能根据实体类型生成的身份凭证（登记证书enrollment certificates）。在用户使用过程中，这样的证书允许交易证书颁发机构（Transaction Certificate Authority (TCA)）颁发匿名证书。这样的证书，如交易证书，被用来对提交交易授权。交易证书存储在区块链中，并对审计集群授权，否则交易是不可链接的。</p>
<h4 id="区块链服务"><a href="#区块链服务" class="headerlink" title="区块链服务"></a>区块链服务</h4><p>区块链服务通过 HTTP/2 上的点对点（peer-to-peer）协议来管理分布式总账。为了提供最高效的哈希算法来维护世界状态的复制，数据结构进行了高度的优化。每个部署中可以插入和配置不同的共识算法（PBFT, Raft, PoW, PoS）</p>
<h4 id="链码服务"><a href="#链码服务" class="headerlink" title="链码服务"></a>链码服务</h4><p>链码服务提供一个安全的，轻量的沙箱在验证节点上执行链码。环境是一个“锁定的”且安全的包含签过名的安全操作系统镜像和链码语言，Go，Java 和 Node.js 的运行时和 SDK 层。可以根据需要来启用其他语言。</p>
<h4 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h4><p>验证 peers 和链码可以向在网络上监听并采取行动的应用发送事件。这是一些预定义好的事件集合，链码可以生成客户化的事件。事件会被一个或多个事件适配器消费。之后适配器可能会把事件投递到其他设备，如 Web hooks 或 Kafka。</p>
<h4 id="应用编程接口-API"><a href="#应用编程接口-API" class="headerlink" title="应用编程接口(API)"></a>应用编程接口(API)</h4><p>fabric的主要接口是 REST API，并通过 Swagger 2.0 来改变。API 允许注册用户，区块链查询和发布交易。链码与执行交易的堆间的交互和交易的结果查询会由 API 集合来规范</p>
<h4 id="命令行界面-CLI"><a href="#命令行界面-CLI" class="headerlink" title="命令行界面(CLI)"></a>命令行界面(CLI)</h4><p>CLI包含REST API的一个子集使得开发者能更快的测试链码或查询交易状态。CLI 是通过 Go 语言来实现，并可在多种操作系统上操作。</p>
<h3 id="技术架构"><a href="#技术架构" class="headerlink" title="技术架构"></a>技术架构</h3><p><img src="http://wx4.sinaimg.cn/mw690/0065glrAgy1ffmeoew2q8j30go07lgn3.jpg" alt="Alt text"></p>
<p>其中最明显、最表层的变化，就是曾经的Validating/Non-Validating Peer没有了，取而代之的是Endorser（背书节点）和 Committer（提交节点）以及从Peer中剥离出的共识模块Orderer。而MemberService（成员管理）、Certificate Authority（证书管理）以及加密算法等模块目前我还没有发现有明显的变动。</p>
<h3 id="扩展模块"><a href="#扩展模块" class="headerlink" title="扩展模块"></a>扩展模块</h3><ul>
<li>Blockchain-explorer<br>是为了便于Hyperledger应用浏览/查询区块信息、交易相关信息、网络信息（名称、状态，关联节点）、智能合约信息（浏览、调用、部署、查询）和其他相关信息而设计的Web应用。</li>
</ul>
<ul>
<li><p>Blockchain-explorer<br>是为了便于Hyperledger应用浏览/查询区块信息、交易相关信息、网络信息（名称、状态，关联节点）、智能合约信息（浏览、调用、部署、查询）和其他相关信息而设计的Web应用。</p>
</li>
<li><p>Cello<br>是一个用于部署区块链服务BSAS（Blockchain-as-a-Service）的工具，它可以帮助用户降低创建、管理和删除区块信息的复杂度。Cello的意义在于，它让区块链的定制化成为了可能，也就是说Cello可以在多种环境下：裸机、虚拟机和其他容器之上，提供有自治的多租户服务。</p>
</li>
<li><p>Iroha<br>Hyperledger Iroha 项目由Makoto Takemiya (Soramitsu), Toshiya Cho (Hitachi), Takahiro Inaba (NTT Data), and Mark Smargon (Colu)几个人提出。目前正处于孵化阶段。Iroha项目的目的在于将分布式账本技术便捷的应用于现有的基础项目上。</p>
</li>
<li><p>Sawtooth Lake<br>Sawtooth Lake是Intel主导的区块链应用组件，目的在于实现区块链技术的多用途和可扩展性。从物联网到金融，人们已经尝试将分布式账本技术应用在多个领域。Sawtooth Lake架构将兼顾各类不同的需求。Sawtooth Lake 支持有许可和无需许可的不是方式，并引入了新的共识算法：Proof of Elapsed Time (PoET)。PoET可以减少肌群达到共识所消耗的资源。交易逻辑的管理由Transaction Families负责，从共识管理层剥离。这样将大大减少交易逻辑的约束。</p>
</li>
</ul>
<h3 id="交易流程"><a href="#交易流程" class="headerlink" title="交易流程"></a>交易流程</h3><p>交易从发起到最终完成共识一共需要4个步骤</p>
<p><img src="http://wx1.sinaimg.cn/mw690/0065glrAgy1ffn8l0r86rj30wu0h5q3o.jpg" alt="Alt text"></p>
<h3 id="交易流程-1"><a href="#交易流程-1" class="headerlink" title="交易流程"></a>交易流程</h3><p>交易从发起到最终完成共识一共需要4个步骤</p>
<ol>
<li><p>Client想发起一个交易，它首先要把交易的相关信息（propose message）发给它所选择的Endorser节点。这里解释一点，Endorser的选择是有一定范围的，并不是在所有的Endorser里面随意选择，是由交易所属的Chaincode和该Chaincode所定义的Endorsement Policy共同决定的。</p>
</li>
<li><p>Endorser节点收到上述信息后，首先用Client的公钥验证它的签名，然后开始进行模拟交易（不会写到账本里）并核实相关信息（这里省略了一些信息的介绍，太过技术性就略过了），然后根据Endorsement Policy选择是否为该交易背书（Transaction Endorsed），然后把结果发回给提交的Client。</p>
</li>
<li><p>提交交易的Client收集各个Endorser返回的信息，如果得到了“足够”的背书信息后，就说明这个交易通过了Endorsement阶段。其中足够的数量是多少，依然取决于Endorsement Policy是如何规定的；相反如果Client没有收集到足够的信息的话，这个交易会被废止掉，Client可以选择重新发起交易。<br>而那些通过了Endorsement阶段的交易，就会进入到共识阶段。</p>
</li>
<li><p>共识阶段虽然有不同的算法，不过目的都是把有效的交易加入新生成的区块，并通知所有的节点，使他们的账本保持一致性。共识机制要达成的从根本上讲就是一种保证所有节点都认可的一致性状态时序，Fabric v1.0对所有交易消息进行排序并全序广播相关节点。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>blockchain</tag>
        <tag>区块链</tag>
      </tags>
  </entry>
  <entry>
    <title>区块链的那些事，你知道和不知道的都在这里！</title>
    <url>/%E7%AC%94%E8%AE%B0/blockchain-post-collection-20170318.html</url>
    <content><![CDATA[<blockquote>
<p>摘要： 区块链（Blockchain）是比特币的一个重要概念，本质上是一个去中心化的数据库，同时作为比特币的底层技术。本文将前一段时间整理的区块链技术文章做成了集合，以供大家学习。</p>
</blockquote>
<p>今年以来“区块链”的概念可以说是异常火爆，好像互联网金融峰会上没人谈一谈区块链技术就out了，BAT以及各大银行还有什么金融机构都在开始自己的区块链研究工作，就连IBM最近也成立了自己的区块链研究实验室，但其实区块链到底是什么？大家或许并不清楚，停留在雾里看花的状态。前一段时间为大家整理一个区块链学习系列文章，在这里为大家提供一个文章集合，大家就和我一起走进区块链吧，揭开区块链的神秘面纱吧！</p>
<a id="more"></a>

<h3 id="【区块链之菜鸟入门】系列文章"><a href="#【区块链之菜鸟入门】系列文章" class="headerlink" title="【区块链之菜鸟入门】系列文章"></a>【区块链之菜鸟入门】系列文章</h3><ol>
<li><a href="https://yq.aliyun.com/articles/60131?spm=5176.100239.blogcont65264.8.5xJtxt">亲，你淘的区块链到了！</a></li>
<li><a href="https://yq.aliyun.com/articles/60132?spm=5176.100239.blogcont65264.9.5xJtxt">区块链发展史：从拜占庭将军问题到智慧契约</a></li>
<li><a href="https://yq.aliyun.com/articles/60134?spm=5176.100239.blogcont65264.10.5xJtxt">来来来，这篇科普告诉你“区块链”到底是个啥？</a></li>
<li><a href="https://yq.aliyun.com/articles/60141?spm=5176.100239.blogcont65264.11.5xJtxt">区块链——颠覆式创新技术 </a></li>
</ol>
<h3 id="【区块链之技术进阶】系列文章"><a href="#【区块链之技术进阶】系列文章" class="headerlink" title="【区块链之技术进阶】系列文章"></a>【区块链之技术进阶】系列文章</h3><ol>
<li><a href="https://yq.aliyun.com/articles/60201?spm=5176.100239.blogcont65264.13.5xJtxt">区块链：通往互联网第二纪元的革命</a></li>
<li><a href="https://yq.aliyun.com/articles/60207?spm=5176.100239.blogcont65264.14.5xJtxt">金融的未来，区块链将用于何方？</a></li>
<li><a href="https://yq.aliyun.com/articles/60218?spm=5176.100239.blogcont65264.15.5xJtxt">让这篇技术贴告诉你区块链是怎么运行的</a></li>
<li><a href="https://yq.aliyun.com/articles/60232?spm=5176.100239.blogcont65264.16.5xJtxt">扒一扒某乎上面对于区块链的理解（一）</a></li>
<li><a href="https://yq.aliyun.com/articles/60258?spm=5176.100239.blogcont65264.17.5xJtxt">扒一扒某乎上面对于区块链的理解（二）</a></li>
<li><a href="https://yq.aliyun.com/articles/60399?spm=5176.100239.blogcont65264.18.5xJtxt">从技术现实理解区块链：基于SQL模型创建BQL</a></li>
<li><a href="https://yq.aliyun.com/articles/60400?spm=5176.100239.blogcont65264.19.5xJtxt">掰一掰区块链共识机制与分布式一致性算法</a></li>
<li><a href="https://yq.aliyun.com/articles/60401?spm=5176.100239.blogcont65264.20.5xJtxt">Attention please！区块链技术的风险！ </a></li>
</ol>
<h3 id="【区块链之技术实战】系列文章"><a href="#【区块链之技术实战】系列文章" class="headerlink" title="【区块链之技术实战】系列文章"></a>【区块链之技术实战】系列文章</h3><ol>
<li><a href="https://yq.aliyun.com/articles/60425?spm=5176.100239.blogcont65264.22.5xJtxt">群雄激辩区块链</a></li>
<li><a href="https://yq.aliyun.com/articles/60428?spm=5176.100239.blogcont65264.23.5xJtxt">颠覆银行基础架构的区块链</a></li>
<li><a href="https://yq.aliyun.com/articles/60435?spm=5176.100239.blogcont65264.24.5xJtxt">在金融领域，区块链该咋用呢？</a></li>
<li><a href="https://yq.aliyun.com/articles/60443?spm=5176.100239.blogcont65264.25.5xJtxt">区块链开源项目合集：Hello，BlockChain！</a></li>
<li><a href="https://yq.aliyun.com/articles/60513?spm=5176.100239.blogcont65264.26.5xJtxt">有了区块链做公益，再也不用担心我的捐款啦 </a></li>
</ol>
<h3 id="【区块链与未来】系列文章"><a href="#【区块链与未来】系列文章" class="headerlink" title="【区块链与未来】系列文章"></a>【区块链与未来】系列文章</h3><ol>
<li><a href="https://yq.aliyun.com/articles/60541?spm=5176.100239.blogcont65264.27.5xJtxt">区块链只与互联网+金融有关？让法律人和你聊聊 </a></li>
<li><a href="https://yq.aliyun.com/articles/60545?spm=5176.100239.blogcont65264.28.5xJtxt">“区块链+”火花四溅的未来 </a></li>
<li><a href="https://yq.aliyun.com/articles/60550?spm=5176.100239.blogcont65264.29.5xJtxt">“公共记账簿”？哼，区块链远比你想象的强大的多</a></li>
<li><a href="https://yq.aliyun.com/articles/60564?spm=5176.100239.blogcont65264.30.5xJtxt">区块链技术将重塑我们的世界</a></li>
</ol>
<h3 id="其他区块链好文"><a href="#其他区块链好文" class="headerlink" title="其他区块链好文"></a>其他区块链好文</h3><ol>
<li><a href="https://yq.aliyun.com/articles/63033?spm=5176.100239.blogcont65264.31.5xJtxt">【中生代】区块链技术分享</a></li>
<li><a href="https://yq.aliyun.com/articles/60170?spm=5176.100239.blogcont65264.32.5xJtxt">蚂蚁金服首席架构师：区块链技术如何促进数字普惠金融 </a></li>
<li><a href="https://yq.aliyun.com/articles/63075?spm=5176.100239.blogcont65264.33.5xJtxt">区块链——2016最耀眼的新兴技术之一 </a></li>
<li><a href="https://yq.aliyun.com/articles/61796?spm=5176.100239.blogcont65264.34.5xJtxt">【云栖大会】阿里云邮箱发布首个基于区块链的邮箱存证产品 </a></li>
<li><a href="https://yq.aliyun.com/articles/63065?spm=5176.100239.blogcont65264.35.5xJtxt">法链背后的秘密 </a></li>
<li><a href="https://yq.aliyun.com/articles/61673?spm=5176.100239.blogcont65264.36.5xJtxt">【云栖大会】详解区块链电子存证 </a></li>
<li><a href="https://yq.aliyun.com/articles/64651?spm=5176.100239.blogcont65264.37.5xJtxt">分布式账本 </a></li>
<li><a href="https://yq.aliyun.com/articles/64651?spm=5176.100239.blogcont65264.38.5xJtxt">从理想到现实， 你不知道的区块链 </a></li>
</ol>
<p><a href="https://yq.aliyun.com/articles/65264?spm=5176.8091938.0.0.KUZxTb">https://yq.aliyun.com/articles/65264?spm=5176.8091938.0.0.KUZxTb</a></p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>blockchain</tag>
        <tag>区块链</tag>
      </tags>
  </entry>
  <entry>
    <title>Cadvisor源码分析入门篇（一）</title>
    <url>/cadvisor/cadvisor-source-code1-20160927.html</url>
    <content><![CDATA[<p>这几篇文章主要是以cadvisor为例，对类似的资源搜集的agent的实现机理进行一个学习，采用的cadvisor版本是v0.20.0。主要是希望能通过分析cadvisor，对这一类agent所搜集的数据以及搜集方法，都有一个比较深入的理解。希望在梳理完成之后，对一些看似比较浅显的问题，比如cadvisor到底搜集了哪些数据，怎么搜集的，能有很好的回答，在文章整理方面，应该尽量通过 graph driving 的方式来呈现。</p>
<a id="more"></a>

<ol>
<li>主要是梳理下代码的各个模块以及其相关的功能，后面的几篇是对每个模块的较细致分析。</li>
<li>主要是对存储模块进行分析。</li>
<li>主要是对manager模块，也是最核心的模块进行分析。</li>
<li>主要是从user interface的角度进行分析，也就是api的角度，看cadvisor到底对外向用户暴露了哪些功能，也就是从功能的角度上分析，具体都包含了哪些指标等等。</li>
<li>其他方面的整理和收获，比如退出机制，event机制，还有整体上的体会，以及cadvisor在k8s中的使用，如何与heapster结合，等等，从中得到的一些所谓的insights。</li>
</ol>
<h3 id="主要模块及流程"><a href="#主要模块及流程" class="headerlink" title="主要模块及流程"></a>主要模块及流程</h3><p><img src="http://7xn7vm.com1.z0.glb.clouddn.com/architect.001.jpeg" alt="Alt text" title="Cadvisor source code 1"></p>
<p>这个结构图其实也是main函数的主要执行流程。</p>
<p>首先是根据传入的storage参数生成inMemoryCache的实例（这一部分在part2中具体介绍），其中还包含了backendStorage实例，这个backendStorage实例主要是决定除了内存之外，数据会被存放在哪个后端中，实质上是一个storageDriver接口类型，在storage的package中，对于storageDriver接口做了不同的具体实现，memoryStorage实例的初始化的相关操作放在main package的另外一个文件：storagedriver.go中。</p>
<p>之后生成realSysFs结构的实例，其中涉及到的相关函数，是对系统的filesystem所进行的一些操作，realSysFs结构中实际上没有具体的字段，主要是对一系列的方法进行了封装，有点类似于一个工具类，就是通过传入不同的系统文件之后，再从中提取出来不同文件系统的信息。</p>
<p>之后，通过前面生成的memoryStorage以及sysfs实例，创建一个manager实例，这实际上通过一个接口来返回，manager接口中定义了许多用于获取容器和machine信息的函数，生成manager实例的时候，还需要传递两个额外的参数，分别是maxHousekeepingInterval(time.Durattion)以及allowDynamicHousekeeping(bool)分别表示信息存在内存的时间以及是否允许动态配置housekeeping的时间，也就是下一次开始搜集容器信息的时间，默认值分别为60s以及true。可以粗略浏览下manager结构的字段以及相关功能：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> manager <span class="keyword">struct</span> &#123;</span><br><span class="line">    <span class="comment">//当前受到监控的容器存在一个map中 containerData结构中包括了对容器的各种具体操作方式和相关信息</span></span><br><span class="line">  containers               <span class="keyword">map</span>[namespacedContainerName]*containerData</span><br><span class="line">  <span class="comment">//对map中数据存取时采用的Lock</span></span><br><span class="line">  containersLock           sync.RWMutex</span><br><span class="line">  <span class="comment">//缓存在内存中的数据 主要是容器的相关信息</span></span><br><span class="line">  memoryCache              *memory.InMemoryCache</span><br><span class="line">  <span class="comment">//host上的实际文件系统的相关信息</span></span><br><span class="line">  fsInfo                   fs.FsInfo</span><br><span class="line">  <span class="comment">//machine的相关信息 cpu memory network system信息等等</span></span><br><span class="line">  machineInfo              info.MachineInfo</span><br><span class="line">  <span class="comment">// 用于存放退出信号的channel manager关闭的时候会给其中的channel发送退出信号</span></span><br><span class="line">  quitChannels             []<span class="keyword">chan</span> error</span><br><span class="line">  <span class="comment">//cadvisor本身所运行的那个容器(如果cadvisor运行在容器中)</span></span><br><span class="line">  cadvisorContainer        <span class="keyword">string</span></span><br><span class="line">  <span class="comment">// 是否在hostnamespace中？</span></span><br><span class="line">  inHostNamespace          <span class="keyword">bool</span></span><br><span class="line">  <span class="comment">// dockerid的正则表达式匹配</span></span><br><span class="line">  dockerContainersRegexp   *regexp.Regexp</span><br><span class="line">  <span class="comment">// 用于获取cpu信息</span></span><br><span class="line">  loadReader               cpuload.CpuLoadReader</span><br><span class="line">  <span class="comment">// 对event相关操作进行的封装</span></span><br><span class="line">  eventHandler             events.EventManager</span><br><span class="line">  <span class="comment">//manager的启动时间</span></span><br><span class="line">  startupTime              time.Time</span><br><span class="line">  <span class="comment">//在内存中保留数据的时间 也就是下次开始搜集容器相关信息并且更新内存信息的时间</span></span><br><span class="line">  maxHousekeepingInterval  time.Duration</span><br><span class="line">   <span class="comment">//是否允许动态设置dynamic housekeeping time</span></span><br><span class="line">  allowDynamicHousekeeping <span class="keyword">bool</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>由于还要把服务暴露给外部，所以还要提供一个server的功能来注册api，api可以看成是从另一个维度对程序进行分析，也就是从功能的维度。比起kube-apiserver，真是要简单多了，具体使用上也添加了证书的方式，把上面生成的containerManager注册进去，具体实现在cadvisor/http/handler.go中，可以看到目前已经实现了version1 0,1 1,1 2,1 3,2 0几种，以2 0为例，具体的路由类别主要是以下三种：</p>
<ul>
<li>一种是通过自带默认界面简单看一下机器上的容器信息，就是/containers/路由，这个目前支持的api版本比较低。</li>
<li>另一种是/api/路由，具体在/cadvisor/api/handler.go中实现，这一部分路由已经设置的比较友好，会提示出当期支持的子路由都有哪些。可以看到在2.0版本中，支持的查询信息已经相当丰富。</li>
<li>另外一个不错的功能就是支持通过页面的方式使用golang的pprof工具，在使用了profiling=true的参数之后，可以通过“net/http/pprof”package来获取应用层面的信息，可以为应用性能调优提供帮助。</li>
</ul>
<p>之后就是启动manager，运行其Start方法，开始搜集信息，存储信息的循环操作，这之后还为containerManager注册了singlehandler，如果收到了系统发来的kill信号，程序就会捕获到，就直接执行manager的stop函数，manager停止工作。</p>
<p>可以看到，代码的意图在这里表现的很明确，就是生成后端，生成manager，注册api，启动server。还有其他的一些套路化的操作，比如在main函数开始的时候设置MaxProcs,设置runtime.GOMAXPROCS为当前cpu的个数，使得并发性能较高。</p>
<p>后面几篇对每一个部分进行一些相对深入的分析。</p>
]]></content>
      <categories>
        <category>cadvisor</category>
      </categories>
      <tags>
        <tag>cadvisor</tag>
        <tag>golang</tag>
        <tag>docker</tag>
        <tag>监控</tag>
      </tags>
  </entry>
  <entry>
    <title>Cadvisor源码分析存储篇（二）</title>
    <url>/cadvisor/cadvisor-source-code2-20160927.html</url>
    <content><![CDATA[<p>storage模块从逻辑上讲相对比较基本，但同时又是很重要的一块，因为上层搜集到的数据，如果想要分析，首先需要存储起来，而存储的操作都要通过这一层来实现进一步的处理。</p>
<a id="more"></a>

<h3 id="Storage-Component分析"><a href="#Storage-Component分析" class="headerlink" title="Storage Component分析"></a>Storage Component分析</h3><p>storage部分主要有两个功能</p>
<ul>
<li>把从宿主机上搜集出来的数据存储在内存中，每隔一段时间，还需要把内存中的数据更新一次。</li>
<li>把数据推送到 storage backend中，就像前面分析的那样，比如把数据发送到elastic search或者influxdb的backend中。</li>
</ul>
<p>先大致分析下涉及到的package： ./cache ./storage ./info 几个package。</p>
<h4 id="info"><a href="#info" class="headerlink" title="info"></a>info</h4><p>./info 中的内容比较直接，是各种metrics的实际struct构成，大致看下其中的文件，可以了解到cadvisor从 machine 与 container 两个角度对资源进行描述，目前使用的资源描述结构都是v1版本，这里仅仅是说明一下，用到的时候再针对性地具体查看。</p>
<h4 id="storage"><a href="#storage" class="headerlink" title="storage"></a>storage</h4><p>./storage package通过提供storagedriver接口（定义在storage.go中）对外暴露服务，其中的几个函数定义的比较直接：AddStats 将信息添加到对应的后端中；Close 停止存储后端的操作，不同后端的具体实现方式可能有区别；New 生成对应的StorageDriver，具体不同的实现分别在./storage下的几个不同的文件夹中，目前有bigquery,elasticsearch,indluxdb,redis几种backend实现。还可以直接将结果输出到标准输出（默认输出）或者将结果发送个某个daemon（通过host:port生成net.Conn之后把数据写进去），具体使用的时候，可以对应着某一个实现进行进一步分析。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> StorageDriver <span class="keyword">interface</span> &#123;</span><br><span class="line">	AddStats(ref info.ContainerReference, stats *info.ContainerStats) error</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Close will clear the state of the storage driver. The elements</span></span><br><span class="line">	<span class="comment">// stored in the underlying storage may or may not be deleted depending</span></span><br><span class="line">	<span class="comment">// on the implementation of the storage driver.</span></span><br><span class="line">	Close() error</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>storage部分的启动参数被放在common_flags.go文件中，可以具体查看，每一部分的backend的相关参启动参数被放在每一部分具体实现的package中，相关参数比较多也比较零碎，可以在有需要的时候针对性地查看。</p>
<h4 id="cache"><a href="#cache" class="headerlink" title="cache"></a>cache</h4><p>这部分做了许多重要操作，最上层是cache接口：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Cache <span class="keyword">interface</span> &#123;</span><br><span class="line">	<span class="comment">// Add a ContainerStats for the specified container.</span></span><br><span class="line">	AddStats(ref info.ContainerReference, stats *info.ContainerStats) error</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Remove all cached information for the specified container.</span></span><br><span class="line">	RemoveContainer(containerName <span class="keyword">string</span>) error</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Read most recent stats. numStats indicates max number of stats</span></span><br><span class="line">	<span class="comment">// returned. The returned stats must be consecutive observed stats. If</span></span><br><span class="line">	<span class="comment">// numStats &lt; 0, then return all stats stored in the storage. The</span></span><br><span class="line">	<span class="comment">// returned stats should be sorted in time increasing order, i.e. Most</span></span><br><span class="line">	<span class="comment">// recent stats should be the last.</span></span><br><span class="line">	RecentStats(containerName <span class="keyword">string</span>, numStats <span class="keyword">int</span>) ([]*info.ContainerStats, error)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Close will clear the state of the storage driver. The elements</span></span><br><span class="line">	<span class="comment">// stored in the underlying storage may or may not be deleted depending</span></span><br><span class="line">	<span class="comment">// on the implementation of the storage driver.</span></span><br><span class="line">	Close() error</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>有必要大致浏览下containerstats即cadvisor搜集回来的到底是容器的哪些信息，具体每个指标的含义这里不作为重点介绍：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> ContainerStats <span class="keyword">struct</span> &#123;</span><br><span class="line">	<span class="comment">// The time of this stat point.</span></span><br><span class="line">	Timestamp time.Time    <span class="string">`json:&quot;timestamp&quot;`</span></span><br><span class="line">	Cpu       CpuStats     <span class="string">`json:&quot;cpu,omitempty&quot;`</span></span><br><span class="line">	DiskIo    DiskIoStats  <span class="string">`json:&quot;diskio,omitempty&quot;`</span></span><br><span class="line">	Memory    MemoryStats  <span class="string">`json:&quot;memory,omitempty&quot;`</span></span><br><span class="line">	Network   NetworkStats <span class="string">`json:&quot;network,omitempty&quot;`</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// Filesystem statistics</span></span><br><span class="line">	Filesystem []FsStats <span class="string">`json:&quot;filesystem,omitempty&quot;`</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// Task load stats</span></span><br><span class="line">	TaskStats LoadStats <span class="string">`json:&quot;task_stats,omitempty&quot;`</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//Custom metrics from all collectors</span></span><br><span class="line">	CustomMetrics <span class="keyword">map</span>[<span class="keyword">string</span>][]MetricVal <span class="string">`json:&quot;custom_metrics,omitempty&quot;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>再看下AddStats中的第一个参数，containerReference的信息，相当于是一个容器的元信息，在map中扮演一个index的角色，通过这个信息来定位容器：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> ContainerReference <span class="keyword">struct</span> &#123;</span><br><span class="line">	<span class="comment">// The container id</span></span><br><span class="line">	Id <span class="keyword">string</span> <span class="string">`json:&quot;id,omitempty&quot;`</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// The absolute name of the container. This is unique on the machine.</span></span><br><span class="line">	Name <span class="keyword">string</span> <span class="string">`json:&quot;name&quot;`</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// Other names by which the container is known within a certain namespace.</span></span><br><span class="line">	<span class="comment">// This is unique within that namespace.</span></span><br><span class="line">	Aliases []<span class="keyword">string</span> <span class="string">`json:&quot;aliases,omitempty&quot;`</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// Namespace under which the aliases of a container are unique.</span></span><br><span class="line">	<span class="comment">// An example of a namespace is &quot;docker&quot; for Docker containers.</span></span><br><span class="line">	Namespace <span class="keyword">string</span> <span class="string">`json:&quot;namespace,omitempty&quot;`</span></span><br><span class="line"></span><br><span class="line">	Labels <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span> <span class="string">`json:&quot;labels,omitempty&quot;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过以上的分析，其实cache这块的结构比比较清晰了，输入是什么，输出是什么，具体进行了哪些操作。下面是这部分的结构图：</p>
<p><img src="http://7xn7vm.com1.z0.glb.clouddn.com/Backendgraph.001.jpeg" alt="Alt text" title="Cadvisor source code 2"></p>
<h4 id="inMemoryCache对cache-interface的具体实现"><a href="#inMemoryCache对cache-interface的具体实现" class="headerlink" title="inMemoryCache对cache interface的具体实现"></a>inMemoryCache对cache interface的具体实现</h4><p>在memory.go文件中，有两个struct即<code>inMemoryCache</code>以及<code>containerCache</code>其中。</p>
<p>inMemoryCache是上面所介绍的Cache接口的一个具体实现，其中包含了一个<code>containerCacheMap map[string]*containerCache</code>字段，可以看到，这个map的value值是文件中定义的另一个结构<code>containerCache</code>。这个结构用于执行具体的存储操作，同时也是内存中存放数据的最根本的地方（实质上是一个interface{}组成的slice，具体在utils中实现即utils.TimedStore），就是上图中的<code>recentStats *utils.TimedStore</code>字段。</p>
<p><code>inMemoryCache</code>中还有一个字段是<code>backend storage.StorageDriver</code>这个是存储后端的实际内容，表示要将什么样的数据放到存储后端，比如influxdb，就像前面所介绍的那样。</p>
<p>下面看下inMemoryCache所实现的AddStats操作，逻辑比较简单:</p>
<ul>
<li>新生成一个containerCache 用于将stats数据存放在内存中，每个containerCache还包含一个有效期，后面会用到这个有效期。根据传进来的ref参数找到容器的名字，在containerCacheMap中进行检索</li>
<li>若不存在，则生成新的containercache对象</li>
<li>执行backend的AddStats操作，将stats数据推送到后端数据库</li>
<li>执行containercache的AddStats操作，将stats数据存储在本地内存中</li>
</ul>
<p>在代码实现上，检索containercache是否存在并生成新对象的操作是用goroutine并行处理的。</p>
<p>再进一步，看下containerCache的AddStats操作：</p>
<ul>
<li>首先考虑当前元素加入进来是否超过了buffer限制的最大长度（生成buffer的时候里面带一个maxitem的字段，默认的是-1即没有限制）若是添加了限制，就会循环使用内存资源，这样会覆盖掉旧的数据，占用的空间会减少。</li>
<li>append操作，把新得到的数据放在slice后面。</li>
<li>对slice进行排序，排序的规则是按时间先后排序，最近发生的会放在最前面。</li>
<li>进行截取操作，更新slice去掉过期数据。</li>
</ul>
<p>这里细说下更新过期数据的操作，比如当前时间是t，数据过期时间是d，由于slice中存储的是这个容器在某个时间序列上的数据，在这个序列中，如果数据存入的时间是在t-d之前，那么这些数据都属于过期数据。首先通过sort.Search操作找到临界点之后的第一个index,之后进行截取操作self.buffer = self.buffer[index:]这一部分代码相对灵活一些，但是也不难理解。</p>
<p>在看下inMemoryCache的其他操作：</p>
<p>RecentStats主要是返回在某段时间之内，某个容器的stats信息，主要实现思路就是根据起止时间确定sclice中的startindex以及endindex之后将数据返回。</p>
<p>Removecontainer主要是从containerCacheMap中移除存储某个容器的slice。</p>
<p>Close操作会将containerCacheMap中的内容清空，即清空了当前存储在内存中的数据。</p>
<h4 id="contanerData字段"><a href="#contanerData字段" class="headerlink" title="contanerData字段"></a>contanerData字段</h4><p>查看源码，可以看到manager中有一个containers的字段containers: make(map[namespacedContainerName]*containerData)，这是一个map，其中的value值为指向containerData的指针。</p>
<p>根据map的定义也可以看出来，这个结构的主要功能是提供对container的实际操作，也就是被cadvisor识别过来的container都需要在这里注册一下，当然其中还包含相关的handler等等，注意每个containerData中都持有一个对manager的InMemoryCache的指针，这个InMemoryCache实际上是被所有的containerData实例共享的。具体对于InMemoryCache中内容的实际操作也是通过一个个的containerData实例进行的。</p>
<p>containers这个字段的key值也是namespacedContainerName，其value值是*containerData，这个结构的实际作用是对容器进行实际的处理和信息搜集、存储等操作，可以看到其中包含的各种handler，功能上来讲，应该是属于manager的范围，由于这个结构实际上也比较重要，这里就是提一下，具体的相关细节在manager相关的部分进行介绍。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>根据前面的架构图可以看到这一部分各个组件的具体关系，在part1中也提到，在生成containerManager的时候要把inMemoryCache对象传入进去，之后存储manager就会通过inMemoryCache来对存储相关的操作进行进一步的控制。</p>
]]></content>
      <categories>
        <category>cadvisor</category>
      </categories>
      <tags>
        <tag>cadvisor</tag>
        <tag>golang</tag>
        <tag>docker</tag>
        <tag>监控</tag>
      </tags>
  </entry>
  <entry>
    <title>Cadvisor源码分析API篇（四）</title>
    <url>/cadvisor/cadvisor-source-code4-20160927.html</url>
    <content><![CDATA[<p>这一部分主要是从API的角度进行分析，cadvisor提供的API是怎样暴露的，怎样注册上来的，以及具体功能是怎样的，由于内容比较琐碎，也是一点一点逐步再完善。</p>
<a id="more"></a>

<h3 id="具体API分析"><a href="#具体API分析" class="headerlink" title="具体API分析"></a>具体API分析</h3><p>现在从另外一个维度进行分析，看cadvisor究竟提供了哪些服务出来。 具体api的实现在./cadvisor/api文件中，可以看到目前有newversion1_1 1_2 1_3 2_0几种版本，我们以2_0版本分析。</p>
<p>从start函数中的<code>cadvisorhttp.RegisterHandlers</code>执行具体注册的功能，可以看到除了注册普通的api，还注册了用于性能调优的一些api。这里注册api也没有使用什么特别的框架，直接使用golang自带的serverMux的相关操作，比较容易理解，不再赘述。</p>
<p>这里基本上把所有的request的情况写在了一个函数里，显的比较low，比起kube-apiserver来说，注册api这部分的复杂程度上，简直是差了好几个档次，别的不知道，就扩展性来说，显然不太行，不过考虑cadvisor也都仅仅是需要处理一些get请求，估计不会用到太复杂的api的参数，这样也算是满足需求，不需要杀鸡用牛刀了。</p>
<p>在handleRequest函数中，对传来的request做了第一层处理，即截取出用户输入的api版本，并且交给对应的APIVersion的HandleRequest函数来处理，还要注意，这里每次都要把manager传进去，因为实际的取信息的操作都是通过manager来进行的。</p>
<p>我们这里直接以2.0版本的api为例，分析下对外都暴露出了哪些信息，这些信息是怎样获取到的：</p>
<p>v2.0版本有对应的option通过URL的query传递过来：</p>
<ul>
<li>IdType string 指定通过哪种方式识别容器名称，可以是name dockerid 或者 dockeralias</li>
<li>Count int指定返回的stats的数目</li>
<li>Recursive bool 是否递归地返回childrencontainer的信息</li>
</ul>
<p>下面分析下几种不同的requestType:</p>
<p><strong>/api/v2.0/stats</strong></p>
<p>具体的每个容器的特别详细的信息可以通过这个API得到。</p>
<p>containerStats的信息比较丰富，包含每个子系统中的具体的信息。ContainerInfo中包含ContainerSpec以及ContainerStats数组，每隔一段时间就会记录一次ContainerStat信息。通过cout的参数控制，可以输出最新的几条containerstats信息。</p>
<p>通过管理篇的分析，可以知道，在createContainer的最后一步，是通过houskeeping的操作不断地updateStats然后存到memoryCache中，这里关键是看下updateStates的时候各部分信息是如何获取到的。</p>
<p>这部分的信息比较复杂，应该是容器主要搜集的信息来源，可以通过下面的图大致看一下具体那部分信息在程序中是怎么得到的。关于每一部分的具体含义来源，以及搜集时候的具体实现可以参考<a href="">这一篇</a></p>
<p><img src="http://7xn7vm.com1.z0.glb.clouddn.com/metrics.001.jpeg" alt="Alt text" title="Cadvisor source code 1"></p>
<p><strong>/api/v2.0/version</strong></p>
<p>注意下使用golang自带的system package进行系统调用的方式（之前每次都是自己写一个命令之后去system.run），注意一些获取信息的技巧，可以避免很多繁琐的操作。虽然这一步内部manager得到的信息比较多，但是实际返回回来的之后cadvisor的version信息</p>
<table>
<thead>
<tr>
<th align="center">指标</th>
<th align="center">来源</th>
</tr>
</thead>
<tbody><tr>
<td align="center">主机的os版本信息</td>
<td align="center">uname系统调用</td>
</tr>
<tr>
<td align="center">容器所运行的os版本</td>
<td align="center">/etc/os-release 文件中 读取PRETTY_NAME</td>
</tr>
<tr>
<td align="center">dockerdeamon的版本信息</td>
<td align="center">dockerdaemon get version</td>
</tr>
<tr>
<td align="center">cadvisor本身的版本信息</td>
<td align="center">gobuild的时候从ldflags参数传入</td>
</tr>
</tbody></table>
<p><strong>/api/v2.0/attributes</strong></p>
<table>
<thead>
<tr>
<th align="center">指标</th>
<th align="center">来源</th>
</tr>
</thead>
<tbody><tr>
<td align="center">machine info</td>
<td align="center">manager中的machine info结构体 主要是/proc/文件系统</td>
</tr>
<tr>
<td align="center">version info</td>
<td align="center">/api/v2.0/version中所提到的操作</td>
</tr>
</tbody></table>
<p>具体实例是在new manager的时候生成的</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">type</span> MachineInfo struct &#123;</span><br><span class="line">	// The number of cores <span class="keyword">in</span> this machine.</span><br><span class="line">	NumCores int `json:<span class="string">&quot;num_cores&quot;</span>`</span><br><span class="line"></span><br><span class="line">	// Maximum clock speed <span class="keyword">for</span> the cores, <span class="keyword">in</span> KHz.</span><br><span class="line">	CpuFrequency uint64 `json:<span class="string">&quot;cpu_frequency_khz&quot;</span>`</span><br><span class="line"></span><br><span class="line">	// The amount of memory (<span class="keyword">in</span> bytes) <span class="keyword">in</span> this machine</span><br><span class="line">	MemoryCapacity uint64 `json:<span class="string">&quot;memory_capacity&quot;</span>`</span><br><span class="line"></span><br><span class="line">	// The machine id</span><br><span class="line">	MachineID string `json:<span class="string">&quot;machine_id&quot;</span>`</span><br><span class="line"></span><br><span class="line">	// The system uuid</span><br><span class="line">	SystemUUID string `json:<span class="string">&quot;system_uuid&quot;</span>`</span><br><span class="line"></span><br><span class="line">	// The boot id</span><br><span class="line">	BootID string `json:<span class="string">&quot;boot_id&quot;</span>`</span><br><span class="line"></span><br><span class="line">	// Filesystems on this machine.</span><br><span class="line">	Filesystems []FsInfo `json:<span class="string">&quot;filesystems&quot;</span>`</span><br><span class="line"></span><br><span class="line">	// Disk map</span><br><span class="line">	DiskMap map[string]DiskInfo `json:<span class="string">&quot;disk_map&quot;</span>`</span><br><span class="line"></span><br><span class="line">	// Network devices</span><br><span class="line">	NetworkDevices []NetInfo `json:<span class="string">&quot;network_devices&quot;</span>`</span><br><span class="line"></span><br><span class="line">	// Machine Topology</span><br><span class="line">	// Describes cpu/memory layout and hierarchy.</span><br><span class="line">	Topology []Node `json:<span class="string">&quot;topology&quot;</span>`</span><br><span class="line"></span><br><span class="line">	// Cloud provider the machine belongs to.</span><br><span class="line">	CloudProvider CloudProvider `json:<span class="string">&quot;cloud_provider&quot;</span>`</span><br><span class="line"></span><br><span class="line">	// Type of cloud instance (e.g. GCE standard) the machine is.</span><br><span class="line">	InstanceType InstanceType `json:<span class="string">&quot;instance_type&quot;</span>`</span><br><span class="line"></span><br><span class="line">	// ID of cloud instance (e.g. instance-1) given to it by the cloud provider.</span><br><span class="line">	InstanceID InstanceID `json:<span class="string">&quot;instance_id&quot;</span>`</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>/api/v2.0/machine</strong></p>
<p>这些信息包含在attribute中，直接返回machineinfo。</p>
<p><strong>/api/v2.0/ps</strong></p>
<p>这个会返回所有cgroup中的容器的信息，这个容器作为一个进程会显示出哪些信息，后面可以添加容器id信息，显示对应容器的ps信息(从manager存储的map中取出对应的containerData之后从中再进行筛选)： 比如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl 127.0.0.1:8080/api/v2.0/ps/docker/4f61cb209b685085d5b575173bfa7a5bca822233ae47131ed43033e41fe6505d |python -m json.tool[</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;cgroup_path&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;cmd&quot;</span>: <span class="string">&quot;sh&quot;</span>,</span><br><span class="line">    <span class="string">&quot;parent_pid&quot;</span>: 13823,</span><br><span class="line">    <span class="string">&quot;percent_cpu&quot;</span>: 0,</span><br><span class="line">    <span class="string">&quot;percent_mem&quot;</span>: 0,</span><br><span class="line">    <span class="string">&quot;pid&quot;</span>: 18957,</span><br><span class="line">    <span class="string">&quot;rss&quot;</span>: 671744,</span><br><span class="line">    <span class="string">&quot;running_time&quot;</span>: <span class="string">&quot;00:00:00&quot;</span>,</span><br><span class="line">    <span class="string">&quot;start_time&quot;</span>: <span class="string">&quot;20:18&quot;</span>,</span><br><span class="line">    <span class="string">&quot;status&quot;</span>: <span class="string">&quot;Ss+&quot;</span>,</span><br><span class="line">    <span class="string">&quot;user&quot;</span>: <span class="string">&quot;root&quot;</span>,</span><br><span class="line">    <span class="string">&quot;virtual_size&quot;</span>: 4546560    </span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure>
<p><strong>/api/v2.0/spec/</strong></p>
<p>返回对应的ContainerSpec,比如,这个显示的是容器的spec的信息，显然比起machine的信息要少了好多，就相当于是一个统计清单，看哪些指标包含，哪些指标不包含，比较宏观的一个统计结果：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl 127.0.0.1:8080/api/v2.0/spec/docker/4f61cb209b685085d5b575173bfa7a5bca822233ae47131ed43033e41fe6505d |python -m json.tool&#123;</span><br><span class="line">    <span class="string">&quot;/docker/4f61cb209b685085d5b575173bfa7a5bca822233ae47131ed43033e41fe6505d&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;aliases&quot;</span>:[<span class="string">&quot;serene_panini&quot;</span>,<span class="string">&quot;4f61cb209b685085d5b575173bfa7a5bca822233ae47131ed43033e41fe6505d&quot;</span>],</span><br><span class="line">        <span class="string">&quot;cpu&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;limit&quot;</span>: 1024,</span><br><span class="line">            <span class="string">&quot;mask&quot;</span>: <span class="string">&quot;0-1&quot;</span>,</span><br><span class="line">            <span class="string">&quot;max_limit&quot;</span>: 0</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;creation_time&quot;</span>: <span class="string">&quot;2016-01-24T12:18:20.067581725Z&quot;</span>,</span><br><span class="line">        <span class="string">&quot;has_cpu&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&quot;has_custom_metrics&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;has_diskio&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&quot;has_filesystem&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&quot;has_memory&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&quot;has_network&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&quot;image&quot;</span>: <span class="string">&quot;ubuntu:14.04&quot;</span>,</span><br><span class="line">        <span class="string">&quot;memory&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;limit&quot;</span>: 18446744073709551615,</span><br><span class="line">            <span class="string">&quot;swap_limit&quot;</span>: 18446744073709551615</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;namespace&quot;</span>: <span class="string">&quot;docker&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>/api/v2.0/storage</strong></p>
<p>主要是文件系统的信息，比如下面结果</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl 127.0.0.1:8080/api/v2.0/storage/ |python -m json.tool</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;available&quot;</span>: 321901092864,</span><br><span class="line">        <span class="string">&quot;capacity&quot;</span>: 483753484288,</span><br><span class="line">        <span class="string">&quot;device&quot;</span>: <span class="string">&quot;/dev/disk/by-uuid/ab42c0eb-a891-4261-90cf-557f75f61f15&quot;</span>,</span><br><span class="line">        <span class="string">&quot;labels&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;root&quot;</span>,</span><br><span class="line">            <span class="string">&quot;docker-images&quot;</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&quot;mountpoint&quot;</span>: <span class="string">&quot;/&quot;</span>,</span><br><span class="line">        <span class="string">&quot;usage&quot;</span>: 137255526400</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p><strong>/api/v2.0/summary</strong></p>
<p>通过containerData中的summaryreader来获取某个cgroups下面容器的某段时间的摘要信息。目前主要追踪的是cpu以及memory的信息。在statsSummary结构中有具体计算每个属性的方式，包括小时的平均信息，分钟的平均信息，等等。</p>
<p><strong>/api/v2.0/appmetrics</strong></p>
<p>可以自定义metrics信息。</p>
<h3 id="从对外暴露的api的角度进行分析"><a href="#从对外暴露的api的角度进行分析" class="headerlink" title="从对外暴露的api的角度进行分析"></a>从对外暴露的api的角度进行分析</h3><p>info结构得到的信息</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;BridgeNfIp6tables&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;BridgeNfIptables&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;Containers&quot;</span>: <span class="number">36</span>,</span><br><span class="line">    <span class="string">&quot;CpuCfsPeriod&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;CpuCfsQuota&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;Debug&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="string">&quot;DockerRootDir&quot;</span>: <span class="string">&quot;/var/lib/docker&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Driver&quot;</span>: <span class="string">&quot;aufs&quot;</span>,</span><br><span class="line">    <span class="string">&quot;DriverStatus&quot;</span>: [</span><br><span class="line">        [</span><br><span class="line">            <span class="string">&quot;Root Dir&quot;</span>,</span><br><span class="line">            <span class="string">&quot;/var/lib/docker/aufs&quot;</span></span><br><span class="line">        ],</span><br><span class="line">        [</span><br><span class="line">            <span class="string">&quot;Backing Filesystem&quot;</span>,</span><br><span class="line">            <span class="string">&quot;extfs&quot;</span></span><br><span class="line">        ],</span><br><span class="line">        [</span><br><span class="line">            <span class="string">&quot;Dirs&quot;</span>,</span><br><span class="line">            <span class="string">&quot;244&quot;</span></span><br><span class="line">        ],</span><br><span class="line">        [</span><br><span class="line">            <span class="string">&quot;Dirperm1 Supported&quot;</span>,</span><br><span class="line">            <span class="string">&quot;false&quot;</span></span><br><span class="line">        ]</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&quot;ExecutionDriver&quot;</span>: <span class="string">&quot;native-0.2&quot;</span>,</span><br><span class="line">    <span class="string">&quot;ExperimentalBuild&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="string">&quot;HttpProxy&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;HttpsProxy&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;ID&quot;</span>: <span class="string">&quot;ZL2B:AQMX:2S7E:H3PG:V7P6:ITIE:AFEO:P6OL:HPAJ:QFCW:PR6D:PCPG&quot;</span>,</span><br><span class="line">    <span class="string">&quot;IPv4Forwarding&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;Images&quot;</span>: <span class="number">172</span>,</span><br><span class="line">    <span class="string">&quot;IndexServerAddress&quot;</span>: <span class="string">&quot;https://index.docker.io/v1/&quot;</span>,</span><br><span class="line">    <span class="string">&quot;InitPath&quot;</span>: <span class="string">&quot;/usr/lib/docker/dockerinit&quot;</span>,</span><br><span class="line">    <span class="string">&quot;InitSha1&quot;</span>: <span class="string">&quot;1f4a3c648015cae3b3d76c5ba2980d8c1f88f388&quot;</span>,</span><br><span class="line">    <span class="string">&quot;KernelVersion&quot;</span>: <span class="string">&quot;3.13.0-24-generic&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Labels&quot;</span>: null,</span><br><span class="line">    <span class="string">&quot;LoggingDriver&quot;</span>: <span class="string">&quot;json-file&quot;</span>,</span><br><span class="line">    <span class="string">&quot;MemTotal&quot;</span>: <span class="number">8373075968</span>,</span><br><span class="line">    <span class="string">&quot;MemoryLimit&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;NCPU&quot;</span>: <span class="number">4</span>,</span><br><span class="line">    <span class="string">&quot;NEventsListener&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">&quot;NFd&quot;</span>: <span class="number">90</span>,</span><br><span class="line">    <span class="string">&quot;NGoroutines&quot;</span>: <span class="number">157</span>,</span><br><span class="line">    <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;ubuntu&quot;</span>,</span><br><span class="line">    <span class="string">&quot;NoProxy&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;OomKillDisable&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;OperatingSystem&quot;</span>: <span class="string">&quot;Ubuntu 14.04 LTS&quot;</span>,</span><br><span class="line">    <span class="string">&quot;RegistryConfig&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;IndexConfigs&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;docker.io&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;Mirrors&quot;</span>: null,</span><br><span class="line">                <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;docker.io&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Official&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="string">&quot;Secure&quot;</span>: <span class="literal">true</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;k8stestreg:5000&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;Mirrors&quot;</span>: [],</span><br><span class="line">                <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;k8stestreg:5000&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Official&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="string">&quot;Secure&quot;</span>: <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;InsecureRegistryCIDRs&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;127.0.0.0/8&quot;</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&quot;Mirrors&quot;</span>: null</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;SwapLimit&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="string">&quot;SystemTime&quot;</span>: <span class="string">&quot;2015-11-24T20:02:48.562597431+08:00&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>cadvisor</category>
      </categories>
      <tags>
        <tag>cadvisor</tag>
        <tag>golang</tag>
        <tag>docker</tag>
        <tag>监控</tag>
      </tags>
  </entry>
  <entry>
    <title>Cadvisor源码分析总结篇（五）</title>
    <url>/cadvisor/cadvisor-source-code5-20160927.html</url>
    <content><![CDATA[<p>这一部分主要是对与cadvisor项目一些实现的整理和体会，逐步完善中。</p>
<a id="more"></a>

<h3 id="关于Watch部分"><a href="#关于Watch部分" class="headerlink" title="关于Watch部分"></a>关于Watch部分</h3><p>这一部分有一点技巧性，还是回到start函数上，主要是用来watch新启动的容器。</p>
<p>首先是检验root container是否存在，就是Name为“/”的容器。 生成eventchannel，channel中传递数据的类型是<code>container.SubcontainerEvent</code>类型。 执行root container的WatchSubcontainers方法，把之前生成的eventchannel传入。 之后使用for+select操作，一直进行如下循环：如果eventchannel传来的是event实例，则进行进一步判断，若event的原因是add，则自动执行createContainer的操作，若是delete，则执行destroyContainer的操作。如果传递进来的是quit信号，执行StopWatchingSubcontainers的操作。</p>
<p>大致流程还是比较清晰的，再看下具体watchsubcontainer的实现，所有类似watch的核心思想都是：只要有变化，就收到相关的通知。</p>
<p>首先要补充下inotify的相关内容：inotify是内核提供的用于文件系统监控的一套机制，具体网上的参考资料也比较多，这里只要熟悉在golang中对其的封装即可。<a href="https://godoc.org/golang.org/x/exp/inotify">这里</a>的例子也比较通俗易懂。主要是注意一下各种event的类型。</p>
<p>由于root容器使用的是rawcontainerhandler的实现，可以看下watchfornewcontainer函数中这一步的实现：<code>err := root.handler.WatchSubcontainers(eventsChannel)</code>其中包含了对于传入进来的eventchannel的处理，之后后面就是通过判断eventchannel的返回值来决定继续添加或者删除容器。</p>
<p>在rawcontainerHandler对于WatchSubcontainers的实现中，先是把所有的cgroup path放在watch实例的监控范围内（相当于所有cgroups的层级结构都受到了watch的监控 当然其中也有一些同步的操作 从watch的列表中添加已有的path删除已经过期的path）之后就是for+select的形式，收到watcher.event，watcher.error以及stopWatcher不同信号时候的处理。</p>
<p>收到watcher.event之后，主要的操作是把watcher传递过来的event转化成container.SubcontainerEvent，因为通过watcher直接传递过来的原生event的信息还是很多的，具体的Type类型也有多种，实际并用不了这么多，只需要SubcontainerAdd 以及 SubcontainerDelete两种类型即可，之后进行转化并且执行一些watch的更新操作，最后把新生成的SubcontainerEvent对象赋值给之前的那个eventChannel。</p>
<p>再回到start函数的地方，可以看到，最后会新启动一个goroutine，来运行manager的<code>globalHousekeeping</code>设置定时器，每次隔interval的时间就detectSubcontainers，或者接受到quit信号退出。</p>
<p>在Start操作的时候，最后两步生成了两个quitechannel它们用于实现退出的操作。</p>
]]></content>
      <categories>
        <category>cadvisor</category>
      </categories>
      <tags>
        <tag>cadvisor</tag>
        <tag>golang</tag>
        <tag>docker</tag>
        <tag>监控</tag>
      </tags>
  </entry>
  <entry>
    <title>NoSQL数据库Cassandra数据模型</title>
    <url>/nosql/cassandra-data-model-20171205.html</url>
    <content><![CDATA[<p>使用NoSQL存储数据和关系型数据库不一样，关系型数据库是行进行组织数据的。取而代之，应该把它想象成事一个有序的map结构。考虑它是一个map中嵌入另一个map：外部map的key为row key，内部map的key为column key，两个map的key都是有序的。</p>
<ul>
<li>区分频次大的查询和频次小的查询，有些查询可能只被查询几千次，其它可能被查询数十亿次；</li>
<li>还要考虑哪些查询对数据延迟是敏感的。确保你的模型优先满足查询频次大的查询和重要查询。</li>
<li>反范式化来提升查询性能</li>
</ul>
<a id="more"></a>
<h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><p>是关于电子商务系统的一个功能，一个user可以喜欢多个item，同时一个item可以被多个user所喜爱，在关系型数据库中这个关系是通过many-to-many实现的。</p>
<p><code>用户表</code></p>
<table>
<thead>
<tr>
<th align="center">UserID</th>
<th align="center">Name</th>
<th align="center">Email</th>
</tr>
</thead>
<tbody><tr>
<td align="center">u1</td>
<td align="center">jerrylou</td>
<td align="center"><a href="mailto:&#x6a;&#x65;&#114;&#x72;&#121;&#x6c;&#x6f;&#117;&#x40;&#x67;&#x6d;&#97;&#x69;&#x6c;&#46;&#99;&#x6f;&#109;">&#x6a;&#x65;&#114;&#x72;&#121;&#x6c;&#x6f;&#117;&#x40;&#x67;&#x6d;&#97;&#x69;&#x6c;&#46;&#99;&#x6f;&#109;</a></td>
</tr>
<tr>
<td align="center">u2</td>
<td align="center">gunsluo</td>
<td align="center"><a href="mailto:&#103;&#x75;&#110;&#115;&#108;&#x75;&#111;&#64;&#103;&#109;&#x61;&#x69;&#108;&#x2e;&#99;&#111;&#109;">&#103;&#x75;&#110;&#115;&#108;&#x75;&#111;&#64;&#103;&#109;&#x61;&#x69;&#108;&#x2e;&#99;&#111;&#109;</a></td>
</tr>
</tbody></table>
<p><code>Item表</code></p>
<table>
<thead>
<tr>
<th align="center">ItemID</th>
<th align="center">Title</th>
<th align="center">Desc</th>
</tr>
</thead>
<tbody><tr>
<td align="center">i1</td>
<td align="center">mac pro</td>
<td align="center">mac book</td>
</tr>
<tr>
<td align="center">i2</td>
<td align="center">ipad</td>
<td align="center">mac tablet</td>
</tr>
</tbody></table>
<p><code>关系表</code></p>
<table>
<thead>
<tr>
<th align="center">ID</th>
<th align="center">UserID</th>
<th align="center">ItemID</th>
<th align="center">Timestamp</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">u1</td>
<td align="center">i1</td>
<td align="center">1512099720</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">u1</td>
<td align="center">i2</td>
<td align="center">1512109720</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">u2</td>
<td align="center">i1</td>
<td align="center">1512119720</td>
</tr>
</tbody></table>
<p>关联表查询</p>
<ul>
<li>通过user id获取user</li>
<li>通过item id获取item</li>
<li>获取指定user喜欢的所有item</li>
<li>查看指定item被那些user所喜爱</li>
</ul>
<p><strong>按照关系数据库模型设计数据模型</strong></p>
<p><code>用户表</code></p>
<table><tr><th style="text-align:center;" rowspan="2">Row Key(UserID)</th><td style="text-align:center;" colspan="2">Column Family</td> </tr><tr><th style="text-align:center;">Name</th> <th style="text-align:center;">Email</th></tr><tr><td style="text-align:center;">u1</td> <td style="text-align:center;">jerrylou</td> <td style="text-align:center;">jerrylou@gmail.com</td> </tr><tr><td style="text-align:center;">u2</td> <td style="text-align:center;">gunsluo</td> <td style="text-align:center;">gunsluo@gmail.com</td> </tr></table>

<p><code>Item表</code></p>
<table>     <tr>         <th style="text-align:center;" rowspan="2">Row Key(ItemID)</th>          <td style="text-align:center;" colspan="2">Column Family</td>     </tr>     <tr>         <th style="text-align:center;">Title</th>          <th style="text-align:center;">Desc</th>     </tr>     <tr>         <td style="text-align:center;">i1</td>          <td style="text-align:center;">mac pro</td>          <td style="text-align:center;">mac book</td>      </tr>     <tr>         <td style="text-align:center;">i2</td>          <td style="text-align:center;">ipad</td>          <td style="text-align:center;">mac tablet</td>      </tr> </table>

<p><code>关系表</code></p>
<table>     <tr>         <th style="text-align:center;" rowspan="2">Row Key(ID)</th>          <td style="text-align:center;" colspan="3">Column Family</td>     </tr>     <tr>         <th style="text-align:center;">UserID</th>          <th style="text-align:center;">ItemID</th>          <th style="text-align:center;">Timestamp</th>     </tr>     <tr>         <td style="text-align:center;">1</td>          <td style="text-align:center;">u1</td>          <td style="text-align:center;">i1</td>          <td style="text-align:center;">1512099720</td>      </tr>     <tr>         <td style="text-align:center;">2</td>          <td style="text-align:center;">u1</td>          <td style="text-align:center;">i2</td>          <td style="text-align:center;">1512109720</td>      </tr>     <tr>         <td style="text-align:center;">3</td>          <td style="text-align:center;">u2</td>          <td style="text-align:center;">i1</td>          <td style="text-align:center;">1512119720</td>      </tr> </table> 

<p>这个模型支持通过user id查询user和通过item id查询item。但无法简单查询某个user喜爱的所有item或者某个item被那些user所喜爱。</p>
<p><strong>范式化实体，并将它们反范式化到自定义索引</strong><br>无法查询的原因是按关系表的进行设计。实体用户表和Item表设计同上。关系表修改为：</p>
<p><code>User_By_Item表（CF）</code></p>
<table>     <tr>         <th style="text-align:center;" rowspan="2">Row Key(ItemID)</th>          <td style="text-align:center;" colspan="2">Column Family</td>     </tr>     <tr>         <th style="text-align:center;">u1</th>          <th style="text-align:center;">u2</th>     </tr>     <tr>         <td style="text-align:center;">i1</td>          <td style="text-align:center;">jerrylou</td>          <td style="text-align:center;">gunsluo</td>      </tr>     <tr>         <td style="text-align:center;">i2</td>          <td style="text-align:center;">jerrylou</td>          <td style="text-align:center;"></td>      </tr> </table> 

<p><code>Item_By_User表（CF）</code></p>
<table>     <tr>         <th style="text-align:center;" rowspan="2">Row Key(UserID)</th>          <td style="text-align:center;" colspan="2">Column Family</td>     </tr>     <tr>         <th style="text-align:center;">i1</th>          <th style="text-align:center;">i2</th>     </tr>     <tr>         <td style="text-align:center;">u1</td>          <td style="text-align:center;">mac pro</td>          <td style="text-align:center;">ipad</td>      </tr>     <tr>         <td style="text-align:center;">u2</td>          <td style="text-align:center;">mac pro</td>          <td style="text-align:center;"></td>      </tr> </table> 

<ul>
<li>通过所给item id，获取具体item信息（title, desc等等），并一同查询喜欢这个item的user name(反范式)</li>
<li>通过所给的user id，获取具体user信息，并一同查询user喜欢的所有item titile(反范式)</li>
</ul>
<p><strong>使用composite column</strong><br>之前忽略了timestamp，使用timestamp和userid【或ItemID】合并为一个composite column key，这样就可以按时间进行排序了。</p>
<p><code>User_By_Item表（CF）</code></p>
<table>     <tr>         <th style="text-align:center;" rowspan="2">Row Key(ItemID)</th>          <td style="text-align:center;" colspan="3">Column Family</td>     </tr>     <tr>         <th style="text-align:center;">1512099720|u1</th>          <th style="text-align:center;">1512109720|u1</th>          <th style="text-align:center;">1512119720|u2</th>     </tr>     <tr>         <td style="text-align:center;">i1</td>          <td style="text-align:center;">jerrylou</td>          <td style="text-align:center;"></td>          <td style="text-align:center;">gunsluo</td>      </tr>     <tr>         <td style="text-align:center;">i2</td>          <td style="text-align:center;"></td>          <td style="text-align:center;">gunsluo</td>          <td style="text-align:center;"></td>      </tr> </table>

<p><code>Item_By_User表（CF）</code></p>
<table>     <tr>         <th style="text-align:center;" rowspan="2">Row Key(UserID)</th>          <td style="text-align:center;" colspan="3">Column Family</td>     </tr>     <tr>         <th style="text-align:center;">1512099720|i1</th>          <th style="text-align:center;">1512109720|i2</th>          <th style="text-align:center;">1512119720|i1</th>     </tr>     <tr>         <td style="text-align:center;">u1</td>          <td style="text-align:center;">mac pro</td>          <td style="text-align:center;">ipad</td>          <td style="text-align:center;"></td>      </tr>     <tr>         <td style="text-align:center;">u2</td>          <td style="text-align:center;"></td>          <td style="text-align:center;"></td>          <td style="text-align:center;">mac pro</td>      </tr> </table>

<p>按照具体的查询需求设计数据模型。</p>
]]></content>
      <categories>
        <category>nosql</category>
      </categories>
      <tags>
        <tag>cassandra</tag>
        <tag>data model</tag>
        <tag>nosql</tag>
      </tags>
  </entry>
  <entry>
    <title>Cassandra数据库Golang Driver</title>
    <url>/nosql/cassandra-golang-driver-20171219.html</url>
    <content><![CDATA[<p>搭建cassandra集群后，项目使用Golang语言对cassandra进行操作。需要Golang Driver，有<a href="https://github.com/gocql/gocql">gocql</a>，gocql只提供了curd的操作方法，但不支持创建、删除keyspace。查询后有两种方法可以实现：</p>
<ul>
<li>gocql + gocqltable，纯Golang实现，gocql持续更新中。</li>
<li><a href="https://github.com/mstump/golang-driver">golang-driver</a>，需要<a href="https://github.com/datastax/cpp-driver">C/C++ driver</a>支持。</li>
</ul>
<p>考虑后使用第一方法</p>
<a id="more"></a>

<p>下载代码包</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">go</span> get -u github.com/gocql/gocql</span><br><span class="line"><span class="keyword">go</span> get -u github.com/kristoiv/gocqltable</span><br></pre></td></tr></table></figure>

<p>代码示例</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;log&quot;</span></span><br><span class="line">	<span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="string">&quot;github.com/gocql/gocql&quot;</span></span><br><span class="line">	<span class="string">&quot;github.com/kristoiv/gocqltable&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Generic initialization of gocql</span></span><br><span class="line">	c := gocql.NewCluster(<span class="string">&quot;10.112.68.186&quot;</span>, <span class="string">&quot;10.112.68.192&quot;</span>)</span><br><span class="line">	s, err := c.CreateSession()</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Fatalln(<span class="string">&quot;Unable to open up a session with the Cassandra database (err=&quot;</span> + err.Error() + <span class="string">&quot;)&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Tell gocqltable to use this session object as the default for new objects</span></span><br><span class="line">	gocqltable.SetDefaultSession(s)</span><br><span class="line">	fmt.Println(<span class="string">&quot;Gocql session setup complete&quot;</span>)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Now we&#x27;re ready to create our first keyspace. We start by getting a keyspace object</span></span><br><span class="line">	keyspace := gocqltable.NewKeyspace(<span class="string">&quot;gocqltable_test&quot;</span>)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Now lets create that in the database using the simple strategy and durable writes (true)</span></span><br><span class="line">	err = keyspace.Create(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;</span><br><span class="line">		<span class="string">&quot;class&quot;</span>:              <span class="string">&quot;SimpleStrategy&quot;</span>,</span><br><span class="line">		<span class="string">&quot;replication_factor&quot;</span>: <span class="number">1</span>,</span><br><span class="line">	&#125;, <span class="literal">true</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123; <span class="comment">// If something went wrong we print the error and quit.</span></span><br><span class="line">		log.Fatalln(err)</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(<span class="string">&quot;Keyspace created&quot;</span>)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Now that we have a very own keyspace to play with, lets create our first table.</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// First we need a Row-object to base the table on. It will later be passed to the table wrapper</span></span><br><span class="line">	<span class="comment">// to be used for returning row-objects as the answer to fetch requests.</span></span><br><span class="line">	<span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">		Email    <span class="keyword">string</span> <span class="comment">// Our primary key</span></span><br><span class="line">		Password <span class="keyword">string</span></span><br><span class="line">		Active   <span class="keyword">bool</span></span><br><span class="line">		Created  time.Time</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Let&#x27;s define and instantiate a table object for our user table</span></span><br><span class="line">	userTable := <span class="keyword">struct</span> &#123;</span><br><span class="line">		gocqltable.Table</span><br><span class="line">	&#125;&#123;</span><br><span class="line">		keyspace.NewTable(</span><br><span class="line">			<span class="string">&quot;users&quot;</span>,           <span class="comment">// The table name</span></span><br><span class="line">			[]<span class="keyword">string</span>&#123;<span class="string">&quot;email&quot;</span>&#125;, <span class="comment">// Row keys</span></span><br><span class="line">			<span class="literal">nil</span>,               <span class="comment">// Range keys</span></span><br><span class="line">			User&#123;&#125;,            <span class="comment">// We pass an instance of the user struct that will be used as a type template during fetches.</span></span><br><span class="line">		),</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Lets create this table in our cassandra database</span></span><br><span class="line">	err = userTable.Create()</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Fatalln(err)</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(<span class="string">&quot;&quot;</span>)</span><br><span class="line">	fmt.Println(<span class="string">&quot;Table created: users&quot;</span>)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Now that we have a keyspace with a table in it: lets make a few rows! Notice that this is the base example, it uses CQL (not ORM)</span></span><br><span class="line">	<span class="comment">// for database interactions such as INSERT/SELECT/UPDATE/DELETE.</span></span><br><span class="line">	err = userTable.Query(<span class="string">&quot;INSERT INTO gocqltable_test.users (email, password, active, created) VALUES (?, ?, ?, ?)&quot;</span>, <span class="string">&quot;1@example.com&quot;</span>, <span class="string">&quot;123456&quot;</span>, <span class="literal">true</span>, time.Now().UTC()).Exec()</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Fatalln(err)</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(<span class="string">&quot;User inserted: 1@example.com&quot;</span>)</span><br><span class="line"></span><br><span class="line">	err = userTable.Query(<span class="string">&quot;INSERT INTO gocqltable_test.users (email, password, active, created) VALUES (?, ?, ?, ?)&quot;</span>, <span class="string">&quot;2@example.com&quot;</span>, <span class="string">&quot;123456&quot;</span>, <span class="literal">true</span>, time.Now().UTC()).Exec()</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Fatalln(err)</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(<span class="string">&quot;User inserted: 2@example.com&quot;</span>)</span><br><span class="line"></span><br><span class="line">	err = userTable.Query(<span class="string">&quot;INSERT INTO gocqltable_test.users (email, password, active, created) VALUES (?, ?, ?, ?)&quot;</span>, <span class="string">&quot;3@example.com&quot;</span>, <span class="string">&quot;123456&quot;</span>, <span class="literal">true</span>, time.Now().UTC()).Exec()</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Fatalln(err)</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(<span class="string">&quot;User inserted: 3@example.com&quot;</span>)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// With our database filled up with users, lets query it and print out the results.</span></span><br><span class="line">	iter := userTable.Query(<span class="string">&quot;SELECT * FROM gocqltable_test.users&quot;</span>).Fetch()</span><br><span class="line">	fmt.Println(<span class="string">&quot;&quot;</span>)</span><br><span class="line">	fmt.Println(<span class="string">&quot;Fetched all from users:&quot;</span>)</span><br><span class="line">	<span class="keyword">for</span> row := <span class="keyword">range</span> iter.Range() &#123;</span><br><span class="line">		user := row.(*User)        <span class="comment">// Our row variable is a pointer to &quot;interface&#123;&#125;&quot;, and here we type assert it to a pointer to &quot;User&quot;</span></span><br><span class="line">		fmt.Println(<span class="string">&quot;User:&quot;</span>, user) <span class="comment">// Let&#x27;s just print that</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> err := iter.Close(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Fatalln(err)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// You can also fetch a single row, obviously</span></span><br><span class="line">	row, err := userTable.Query(<span class="string">`SELECT * FROM gocqltable_test.users WHERE email = ? LIMIT 1`</span>, <span class="string">&quot;2@example.com&quot;</span>).FetchRow()</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Fatalln(err)</span><br><span class="line">	&#125;</span><br><span class="line">	user := row.(*User)</span><br><span class="line">	fmt.Println(<span class="string">&quot;&quot;</span>)</span><br><span class="line">	fmt.Println(<span class="string">&quot;Fetched single row by email: &quot;</span>, user)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Lets clean up after ourselves by dropping the keyspace.</span></span><br><span class="line">	keyspace.Drop()</span><br><span class="line">	fmt.Println(<span class="string">&quot;&quot;</span>)</span><br><span class="line">	fmt.Println(<span class="string">&quot;Keyspace dropped&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>nosql</category>
      </categories>
      <tags>
        <tag>golang</tag>
        <tag>cassandra</tag>
        <tag>nosql</tag>
        <tag>driver</tag>
      </tags>
  </entry>
  <entry>
    <title>NoSQL数据库Cassandra集群部署</title>
    <url>/nosql/cassandra-install-20171204.html</url>
    <content><![CDATA[<p>在Linux系统部署NoSQL数据库Cassandra集群。</p>
<a id="more"></a>

<h3 id="系统环境"><a href="#系统环境" class="headerlink" title="系统环境"></a>系统环境</h3><ul>
<li>OS ：CentOS Linux release 7.3.1611 (Core)</li>
<li>CPU：Intel(R) Xeon(R) CPU E5-2650 v4 @ 2.20GHz 8核</li>
<li>内存：16G</li>
<li>JDK:  1.8u151</li>
<li>Python: 2.7.5</li>
<li>Cassandra: 3.11.1</li>
</ul>
<table>
<thead>
<tr>
<th align="center">服务器</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">10.112.68.186</td>
<td align="center">节点1</td>
</tr>
<tr>
<td align="center">10.112.68.191</td>
<td align="center">节点2</td>
</tr>
<tr>
<td align="center">10.112.68.192</td>
<td align="center">节点3</td>
</tr>
</tbody></table>
<h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><h4 id="JDK安装"><a href="#JDK安装" class="headerlink" title="JDK安装"></a>JDK安装</h4><p>下载地址: <a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html">http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html</a></p>
<p>解压放到/usr/java/jdk1.8.0_151/目录</p>
<h4 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">groupadd cassandra</span><br><span class="line">useradd -g cassandra cassandra</span><br><span class="line">passwd cassandra</span><br></pre></td></tr></table></figure>
<p>切换用户<code>su cassandra</code>，配置环境变量<code>vim ~/.bashrc</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">JAVA_HOME=/usr/java/jdk1.8.0_151/</span><br><span class="line">JRE_HOME=/usr/java/jdk1.8.0_151/jre</span><br><span class="line">PATH=.:<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$JRE_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line">CLASSPATH=.:<span class="variable">$CLASSPATH</span>:<span class="variable">$JAVA_HOME</span>/lib/dt.jar:<span class="variable">$JAVA_HOME</span>/lib/tools.jar:<span class="variable">$JRE_HOME</span>/lib</span><br><span class="line"><span class="built_in">export</span> JAVA_HOME JRE_HOME PATH CLASSPATH</span><br><span class="line"></span><br><span class="line">CASSANDRA_HOME=<span class="variable">$HOME</span>/apache-cassandra-3.11.1</span><br><span class="line"><span class="built_in">export</span> CASSANDRA_HOME</span><br></pre></td></tr></table></figure>
<h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">wget http://mirrors.shuosc.org/apache/cassandra/3.11.1/apache-cassandra-3.11.1-bin.tar.gz</span><br><span class="line">tar -xvf apache-cassandra-3.11.1-bin.tar.gz</span><br><span class="line"><span class="built_in">cd</span> apache-cassandra-3.11.1</span><br></pre></td></tr></table></figure>
<h4 id="配置vim-conf-cassandra-yaml"><a href="#配置vim-conf-cassandra-yaml" class="headerlink" title="配置vim conf/cassandra.yaml"></a>配置<code>vim conf/cassandra.yaml</code></h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cluster_name: <span class="string">&#x27;JCPT Test Cluster&#x27;</span></span><br><span class="line">- seeds: <span class="string">&quot;10.112.68.186,10.112.68.192&quot;</span></span><br><span class="line">listen_address: 10.112.68.186</span><br><span class="line">rpc_address: 10.112.68.186</span><br></pre></td></tr></table></figure>
<p>不同节点listen_address、rpc_address不同，cluster_name和seeds是相同的。</p>
<ul>
<li>JVM配置: conf/cassandra-env.sh（JVM_OPTS）</li>
<li>日志配置：conf/logback.xml</li>
</ul>
<p>建立数据和日志的存储目录（生产环境数据和日志放在不同分期）</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mkdir data</span><br><span class="line">mkdir data/data</span><br><span class="line">mkdir data/commitlog</span><br><span class="line">mkdir data/saved_caches</span><br><span class="line">mkdir data/hints</span><br><span class="line">mkdir logs</span><br></pre></td></tr></table></figure>
<h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">./bin/cassandra -f (前端启动)</span><br><span class="line">./bin/cassandra </span><br></pre></td></tr></table></figure>
<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">bin/cqlsh</span><br><span class="line">SELECT cluster_name, listen_address FROM system.local;</span><br></pre></td></tr></table></figure>
<p>参考：<a href="http://cassandra.apache.org/doc/latest/configuration/cassandra_config_file.html">http://cassandra.apache.org/doc/latest/configuration/cassandra_config_file.html</a></p>
]]></content>
      <categories>
        <category>nosql</category>
      </categories>
      <tags>
        <tag>cassandra</tag>
        <tag>nosql</tag>
        <tag>install</tag>
      </tags>
  </entry>
  <entry>
    <title>NoSQL数据库Cassandra监控</title>
    <url>/nosql/cassandra-monitor-20171206.html</url>
    <content><![CDATA[<p>使用packetbeat、elasticsearch、logstash、kibana为cassandra搭建监控系统。</p>
<a id="more"></a>
<h3 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h3><figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line">groupadd <span class="keyword">add</span> <span class="built_in">es</span></span><br><span class="line">useradd -g <span class="built_in">es</span> <span class="built_in">es</span></span><br><span class="line">passwd <span class="built_in">es</span></span><br></pre></td></tr></table></figure>
<h3 id="ES安装"><a href="#ES安装" class="headerlink" title="ES安装"></a>ES安装</h3><p>下载</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-6.0.0.zip</span><br><span class="line">unzip elasticsearch-6.0.0.zip</span><br><span class="line">./bin/elasticsearch-plugin install x-pack</span><br></pre></td></tr></table></figure>
<p>修改配置<code>vim config/elasticsearch.yml</code>(未使用集群)</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">network.host: 0.0.0.0</span><br></pre></td></tr></table></figure>
<p>设置内置用户密码(需要启动)</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">bin/x-pack/setup-passwords interactive</span><br><span class="line">elastic：elastic</span><br><span class="line">kibana：kibana</span><br><span class="line">logstash_system：logstash_system</span><br></pre></td></tr></table></figure>
<p>生成随机密码，建议生产环境使用</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">bin/x-pack/setup-passwords auto</span><br></pre></td></tr></table></figure>
<p>启动：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">./bin/elasticsearch -d</span><br></pre></td></tr></table></figure>
<p>验证<br>浏览器中<a href="http://10.112.68.192:9200/%EF%BC%8C%E8%BE%93%E5%85%A5%E7%94%A8%E6%88%B7%E5%90%8D%E5%AF%86%E7%A0%81(elastic%EF%BC%9Aelastic)%E7%99%BB%E5%BD%95%EF%BC%8C%E6%A3%80%E6%9F%A5es%E5%AE%89%E8%A3%85%E6%98%AF%E5%90%A6%E6%88%90%E5%8A%9F%E3%80%82">http://10.112.68.192:9200/，输入用户名密码(elastic：elastic)登录，检查es安装是否成功。</a></p>
<h3 id="kibana安装"><a href="#kibana安装" class="headerlink" title="kibana安装"></a>kibana安装</h3><p>下载</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">wget https://artifacts.elastic.co/downloads/kibana/kibana-6.0.0-linux-x86_64.tar.gz</span><br><span class="line">tar zxvf kibana-6.0.0-linux-x86_64.tar.gz</span><br><span class="line">bin/kibana-plugin install x-pack</span><br></pre></td></tr></table></figure>
<p>配置<code>vim config/kibana.yml</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">server.port: 5601</span><br><span class="line">server.host: <span class="string">&quot;10.112.68.192&quot;</span></span><br><span class="line">server.name: <span class="string">&quot;es-kibana&quot;</span></span><br><span class="line">elasticsearch.url: <span class="string">&quot;http://localhost:9200&quot;</span></span><br><span class="line">ibana.index: <span class="string">&quot;.kibana&quot;</span></span><br><span class="line">elasticsearch.username: <span class="string">&quot;elastic&quot;</span></span><br><span class="line">elasticsearch.password: <span class="string">&quot;elastic&quot;</span></span><br></pre></td></tr></table></figure>
<p>启动</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">nohup ./bin/kibana &amp;</span><br></pre></td></tr></table></figure>
<p>浏览器中输入<a href="http://10.112.68.192:5601/">http://10.112.68.192:5601/</a> 输入用户名密码登录(kibana：kibana，kibana权限不够请使用elastic用户设置)，检查kibana安装是否成功。</p>
<h3 id="Packetbeat安装"><a href="#Packetbeat安装" class="headerlink" title="Packetbeat安装"></a>Packetbeat安装</h3><p>Packetbeat 是 Elastic 开源的网络流量实时监控工具，目前支持了一些流行的应用软件，如MongoDB、Redis、MySQL、Cassandra等。</p>
<p>下载</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">wget https://artifacts.elastic.co/downloads/beats/packetbeat/packetbeat-6.0.0-linux-x86_64.tar.gz</span><br><span class="line">sudo yum install libpcap</span><br></pre></td></tr></table></figure>
<p>配置<code>vim packetbeat.yml</code>(其他数据收集关掉，只开启cassandra)</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">packetbeat.interfaces.device: any</span><br><span class="line">- <span class="built_in">type</span>: cassandra</span><br><span class="line">  ports: [9042]</span><br><span class="line">setup.dashboards.enabled: <span class="literal">true</span></span><br><span class="line">setup.kibana:</span><br><span class="line">  host: <span class="string">&quot;10.112.68.192:5601&quot;</span></span><br><span class="line">  username: <span class="string">&quot;kibana&quot;</span></span><br><span class="line">  password: <span class="string">&quot;kibana&quot;</span></span><br><span class="line">output.elasticsearch:</span><br><span class="line">  <span class="comment"># Array of hosts to connect to.</span></span><br><span class="line">  hosts: [<span class="string">&quot;10.112.68.192:9200&quot;</span>]</span><br><span class="line">  username: <span class="string">&quot;elastic&quot;</span></span><br><span class="line">  password: <span class="string">&quot;elastic&quot;</span></span><br></pre></td></tr></table></figure>
<p>启动</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">nohup sudo ./packetbeat -e -v &amp;</span><br></pre></td></tr></table></figure>
<h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>编写JAVA测试代码：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">package com.demo.simple;</span><br><span class="line"></span><br><span class="line">import com.datastax.driver.core.Cluster;</span><br><span class="line">import com.datastax.driver.core.ResultSet;</span><br><span class="line">import com.datastax.driver.core.Row;</span><br><span class="line">import com.datastax.driver.core.Session;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Created by luoji on 04/12/2017.</span><br><span class="line"> */</span><br><span class="line">public class CreateAndPopulateKeyspace &#123;</span><br><span class="line"></span><br><span class="line">    static String[] CONTACT_POINTS = &#123;<span class="string">&quot;10.112.68.186&quot;</span>,<span class="string">&quot;10.112.68.192&quot;</span>&#125;;</span><br><span class="line">    static int PORT = 9042;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">        CreateAndPopulateKeyspace client = new CreateAndPopulateKeyspace();</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line"></span><br><span class="line">            client.connect(CONTACT_POINTS, PORT);</span><br><span class="line">            client.createSchema();</span><br><span class="line">            client.loadData();</span><br><span class="line">            client.querySchema();</span><br><span class="line"></span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            client.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private Cluster cluster;</span><br><span class="line"></span><br><span class="line">    private Session session;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Initiates a connection to the cluster</span><br><span class="line">     * specified by the given contact point.</span><br><span class="line">     *</span><br><span class="line">     * @param contactPoints the contact points to use.</span><br><span class="line">     * @param port          the port to use.</span><br><span class="line">     */</span><br><span class="line">    public void connect(String[] contactPoints, int port) &#123;</span><br><span class="line"></span><br><span class="line">        cluster = Cluster.builder()</span><br><span class="line">                .addContactPoints(contactPoints).withPort(port)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        System.out.printf(<span class="string">&quot;Connected to cluster: %s%n&quot;</span>, cluster.getMetadata().getClusterName());</span><br><span class="line"></span><br><span class="line">        session = cluster.connect();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Creates the schema (keyspace) and tables</span><br><span class="line">     * <span class="keyword">for</span> this example.</span><br><span class="line">     */</span><br><span class="line">    public void <span class="function"><span class="title">createSchema</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">        session.execute(<span class="string">&quot;CREATE KEYSPACE IF NOT EXISTS simplex WITH replication &quot;</span> +</span><br><span class="line">                <span class="string">&quot;= &#123;&#x27;class&#x27;:&#x27;SimpleStrategy&#x27;, &#x27;replication_factor&#x27;:1&#125;;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        session.execute(</span><br><span class="line">                <span class="string">&quot;CREATE TABLE IF NOT EXISTS simplex.songs (&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;id uuid PRIMARY KEY,&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;title text,&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;album text,&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;artist text,&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;tags set&lt;text&gt;,&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;data blob&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;);&quot;</span>);</span><br><span class="line"></span><br><span class="line">        session.execute(</span><br><span class="line">                <span class="string">&quot;CREATE TABLE IF NOT EXISTS simplex.playlists (&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;id uuid,&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;title text,&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;album text, &quot;</span> +</span><br><span class="line">                        <span class="string">&quot;artist text,&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;song_id uuid,&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;PRIMARY KEY (id, title, album, artist)&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;);&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Inserts data into the tables.</span><br><span class="line">     */</span><br><span class="line">    public void <span class="function"><span class="title">loadData</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">        session.execute(</span><br><span class="line">                <span class="string">&quot;INSERT INTO simplex.songs (id, title, album, artist, tags) &quot;</span> +</span><br><span class="line">                        <span class="string">&quot;VALUES (&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;756716f7-2e54-4715-9f00-91dcbea6cf50,&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;&#x27;La Petite Tonkinoise&#x27;,&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;&#x27;Bye Bye Blackbird&#x27;,&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;&#x27;Joséphine Baker&#x27;,&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;&#123;&#x27;jazz&#x27;, &#x27;2013&#x27;&#125;)&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        session.execute(</span><br><span class="line">                <span class="string">&quot;INSERT INTO simplex.playlists (id, song_id, title, album, artist) &quot;</span> +</span><br><span class="line">                        <span class="string">&quot;VALUES (&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;2cc9ccb7-6221-4ccb-8387-f22b6a1b354d,&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;756716f7-2e54-4715-9f00-91dcbea6cf50,&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;&#x27;La Petite Tonkinoise&#x27;,&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;&#x27;Bye Bye Blackbird&#x27;,&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;&#x27;Joséphine Baker&#x27;&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;);&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Queries and displays data.</span><br><span class="line">     */</span><br><span class="line">    public void <span class="function"><span class="title">querySchema</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">        ResultSet results = session.execute(</span><br><span class="line">                <span class="string">&quot;SELECT * FROM simplex.playlists &quot;</span> +</span><br><span class="line">                        <span class="string">&quot;WHERE id = 2cc9ccb7-6221-4ccb-8387-f22b6a1b354d;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.printf(<span class="string">&quot;%-30s\t%-20s\t%-20s%n&quot;</span>, <span class="string">&quot;title&quot;</span>, <span class="string">&quot;album&quot;</span>, <span class="string">&quot;artist&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;-------------------------------+-----------------------+--------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Row row : results) &#123;</span><br><span class="line"></span><br><span class="line">            System.out.printf(<span class="string">&quot;%-30s\t%-20s\t%-20s%n&quot;</span>,</span><br><span class="line">                    row.getString(<span class="string">&quot;title&quot;</span>),</span><br><span class="line">                    row.getString(<span class="string">&quot;album&quot;</span>),</span><br><span class="line">                    row.getString(<span class="string">&quot;artist&quot;</span>));</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Closes the session and the cluster.</span><br><span class="line">     */</span><br><span class="line">    public void <span class="function"><span class="title">close</span></span>() &#123;</span><br><span class="line">        <span class="keyword">if</span> (session == null) &#123;</span><br><span class="line">            <span class="built_in">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        session.close();</span><br><span class="line">        cluster.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>浏览器中查看，可以看到刚才对cassandra所做的操作。<br><img src="https://static.oschina.net/uploads/space/2017/1207/184517_Gygb_3724856.png" alt="Alt text" title="kibana"></p>
]]></content>
      <categories>
        <category>nosql</category>
      </categories>
      <tags>
        <tag>监控</tag>
        <tag>cassandra</tag>
        <tag>nosql</tag>
        <tag>monitor</tag>
      </tags>
  </entry>
  <entry>
    <title>NoSQL数据库Cassandra监控MX4J</title>
    <url>/nosql/cassandra-mx4j-20171213.html</url>
    <content><![CDATA[<p>cassandra监控有许多方案，DataStax的Opscenter是比较耗的监控解决方案。可惜Opscenter6.0版本后已经不在支持开源cassandra版本。Opscenter5.x版本支持到cassandra2.1。最好可以使用cassandra自身支持的MX4J进行监控。</p>
<a id="more"></a>
<h3 id="下载MX4J"><a href="#下载MX4J" class="headerlink" title="下载MX4J"></a>下载MX4J</h3><p>下载页面：<a href="http://mx4j.sourceforge.net/">http://mx4j.sourceforge.net/</a></p>
<p>解压后将mx4j-tools.jar拷贝到cassandra的安装目录的lib文件夹下</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">unzip</span> mx<span class="number">4</span>j-<span class="number">3</span>.<span class="number">0</span>.<span class="number">2</span>.zip</span><br><span class="line"><span class="attribute">cp</span> mx<span class="number">4</span>j-<span class="number">3</span>.<span class="number">0</span>.<span class="number">2</span>/lib/mx<span class="number">4</span>j-tools.jar apache-cassandra-<span class="number">3</span>.<span class="number">11</span>.<span class="number">1</span>/lib/</span><br></pre></td></tr></table></figure>
<h3 id="配置mx4j"><a href="#配置mx4j" class="headerlink" title="配置mx4j"></a>配置mx4j</h3><p>编辑<code>vim conf/cassandra-env.sh</code>，去除以下注释的配置项</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">MX4J_ADDRESS=<span class="string">&quot;-Dmx4jaddress=10.112.68.186&quot;</span></span><br><span class="line">MX4J_PORT=<span class="string">&quot;-Dmx4jport=8081&quot;</span></span><br></pre></td></tr></table></figure>
<p>然后重启cassandra</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">./bin/cassandra</span><br></pre></td></tr></table></figure>
<h3 id="登录mx4j"><a href="#登录mx4j" class="headerlink" title="登录mx4j"></a>登录mx4j</h3><p>浏览器中输入：<a href="http://10.112.68.186:8081/">http://10.112.68.186:8081</a></p>
]]></content>
      <categories>
        <category>nosql</category>
      </categories>
      <tags>
        <tag>监控</tag>
        <tag>cassandra</tag>
        <tag>nosql</tag>
        <tag>monitor</tag>
      </tags>
  </entry>
  <entry>
    <title>NoSQL数据库Cassandra运维工具nodetool连接远程节点</title>
    <url>/nosql/cassandra-nodetool-20171214.html</url>
    <content><![CDATA[<p>cassandra集群安装成功后使用nodetool命令连接本机节点正常，连接其他节点报错：<code>connectexception &#39;connection refused (connection refused)&#39;</code>，查看nodetool连接的<code>7199</code>端口，监听<code>0.0.0.0</code>。<br>那为什么会连接不上呢？原因在于：cassandra启动是有两种模式，local和remote模式。可以在<code>conf/cassandra-env.sh</code>中查看和修改。</p>
<a id="more"></a>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>cassandra默认使用local模式，配置如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;x<span class="variable">$LOCAL_JMX</span>&quot;</span> = <span class="string">&quot;x&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    LOCAL_JMX=yes</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Specifies the default port over which Cassandra will be available for</span></span><br><span class="line"><span class="comment"># JMX connections.</span></span><br><span class="line"><span class="comment"># For security reasons, you should not expose this port to the internet.  Firewall it if needed.</span></span><br><span class="line">JMX_PORT=<span class="string">&quot;7199&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$LOCAL_JMX</span>&quot;</span> = <span class="string">&quot;yes&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">  JVM_OPTS=<span class="string">&quot;<span class="variable">$JVM_OPTS</span> -Dcassandra.jmx.local.port=<span class="variable">$JMX_PORT</span>&quot;</span></span><br><span class="line">  JVM_OPTS=<span class="string">&quot;<span class="variable">$JVM_OPTS</span> -Dcom.sun.management.jmxremote.authenticate=false&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  JVM_OPTS=<span class="string">&quot;<span class="variable">$JVM_OPTS</span> -Dcassandra.jmx.remote.port=<span class="variable">$JMX_PORT</span>&quot;</span></span><br><span class="line">  <span class="comment"># if ssl is enabled the same port cannot be used for both jmx and rmi so either</span></span><br><span class="line">  <span class="comment"># pick another value for this property or comment out to use a random port (though see CASSANDRA-7087 for origins)</span></span><br><span class="line">  JVM_OPTS=<span class="string">&quot;<span class="variable">$JVM_OPTS</span> -Dcom.sun.management.jmxremote.rmi.port=<span class="variable">$JMX_PORT</span>&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># turn on JMX authentication. See below for further options</span></span><br><span class="line">  JVM_OPTS=<span class="string">&quot;<span class="variable">$JVM_OPTS</span> -Dcom.sun.management.jmxremote.authenticate=true&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># jmx ssl options</span></span><br><span class="line">  <span class="comment">#JVM_OPTS=&quot;$JVM_OPTS -Dcom.sun.management.jmxremote.ssl=true&quot;</span></span><br><span class="line">  <span class="comment">#JVM_OPTS=&quot;$JVM_OPTS -Dcom.sun.management.jmxremote.ssl.need.client.auth=true&quot;</span></span><br><span class="line">  <span class="comment">#JVM_OPTS=&quot;$JVM_OPTS -Dcom.sun.management.jmxremote.ssl.enabled.protocols=&lt;enabled-protocols&gt;&quot;</span></span><br><span class="line">  <span class="comment">#JVM_OPTS=&quot;$JVM_OPTS -Dcom.sun.management.jmxremote.ssl.enabled.cipher.suites=&lt;enabled-cipher-suites&gt;&quot;</span></span><br><span class="line">  <span class="comment">#JVM_OPTS=&quot;$JVM_OPTS -Djavax.net.ssl.keyStore=/path/to/keystore&quot;</span></span><br><span class="line">  <span class="comment">#JVM_OPTS=&quot;$JVM_OPTS -Djavax.net.ssl.keyStorePassword=&lt;keystore-password&gt;&quot;</span></span><br><span class="line">  <span class="comment">#JVM_OPTS=&quot;$JVM_OPTS -Djavax.net.ssl.trustStore=/path/to/truststore&quot;</span></span><br><span class="line">  <span class="comment">#JVM_OPTS=&quot;$JVM_OPTS -Djavax.net.ssl.trustStorePassword=&lt;truststore-password&gt;&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>
<p>如果想使用remote模式，添加<code>LOCAL_JMX=false</code>和修改<code>-Dcom.sun.management.jmxremote.authenticate=false</code>，当然你可以开启加密方式。配置如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">LOCAL_JMX=<span class="literal">false</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;x<span class="variable">$LOCAL_JMX</span>&quot;</span> = <span class="string">&quot;x&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    LOCAL_JMX=yes</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Specifies the default port over which Cassandra will be available for</span></span><br><span class="line"><span class="comment"># JMX connections.</span></span><br><span class="line"><span class="comment"># For security reasons, you should not expose this port to the internet.  Firewall it if needed.</span></span><br><span class="line">JMX_PORT=<span class="string">&quot;7199&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$LOCAL_JMX</span>&quot;</span> = <span class="string">&quot;yes&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">  JVM_OPTS=<span class="string">&quot;<span class="variable">$JVM_OPTS</span> -Dcassandra.jmx.local.port=<span class="variable">$JMX_PORT</span>&quot;</span></span><br><span class="line">  JVM_OPTS=<span class="string">&quot;<span class="variable">$JVM_OPTS</span> -Dcom.sun.management.jmxremote.authenticate=false&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  JVM_OPTS=<span class="string">&quot;<span class="variable">$JVM_OPTS</span> -Dcassandra.jmx.remote.port=<span class="variable">$JMX_PORT</span>&quot;</span></span><br><span class="line">  <span class="comment"># if ssl is enabled the same port cannot be used for both jmx and rmi so either</span></span><br><span class="line">  <span class="comment"># pick another value for this property or comment out to use a random port (though see CASSANDRA-7087 for origins)</span></span><br><span class="line">  JVM_OPTS=<span class="string">&quot;<span class="variable">$JVM_OPTS</span> -Dcom.sun.management.jmxremote.rmi.port=<span class="variable">$JMX_PORT</span>&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># turn on JMX authentication. See below for further options</span></span><br><span class="line">  JVM_OPTS=<span class="string">&quot;<span class="variable">$JVM_OPTS</span> -Dcom.sun.management.jmxremote.authenticate=false&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># jmx ssl options</span></span><br><span class="line">  <span class="comment">#JVM_OPTS=&quot;$JVM_OPTS -Dcom.sun.management.jmxremote.ssl=true&quot;</span></span><br><span class="line">  <span class="comment">#JVM_OPTS=&quot;$JVM_OPTS -Dcom.sun.management.jmxremote.ssl.need.client.auth=true&quot;</span></span><br><span class="line">  <span class="comment">#JVM_OPTS=&quot;$JVM_OPTS -Dcom.sun.management.jmxremote.ssl.enabled.protocols=&lt;enabled-protocols&gt;&quot;</span></span><br><span class="line">  <span class="comment">#JVM_OPTS=&quot;$JVM_OPTS -Dcom.sun.management.jmxremote.ssl.enabled.cipher.suites=&lt;enabled-cipher-suites&gt;&quot;</span></span><br><span class="line">  <span class="comment">#JVM_OPTS=&quot;$JVM_OPTS -Djavax.net.ssl.keyStore=/path/to/keystore&quot;</span></span><br><span class="line">  <span class="comment">#JVM_OPTS=&quot;$JVM_OPTS -Djavax.net.ssl.keyStorePassword=&lt;keystore-password&gt;&quot;</span></span><br><span class="line">  <span class="comment">#JVM_OPTS=&quot;$JVM_OPTS -Djavax.net.ssl.trustStore=/path/to/truststore&quot;</span></span><br><span class="line">  <span class="comment">#JVM_OPTS=&quot;$JVM_OPTS -Djavax.net.ssl.trustStorePassword=&lt;truststore-password&gt;&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>
<p>修改配置后，重启节点。一切ok</p>
]]></content>
      <categories>
        <category>nosql</category>
      </categories>
      <tags>
        <tag>cassandra</tag>
        <tag>nosql</tag>
        <tag>nodetool</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos7搭建shadowsocksrrs privoxy, 支持Chacha20加密</title>
    <url>/%E7%AC%94%E8%AE%B0/centos-shadowsocksrrs-privoxy-20170821.html</url>
    <content><![CDATA[<p>shadowsocksrrs和shadowsocks-libev是shadowsocks之后的两分支。window和mac os系统上使用shadowsocks-libev的图形客户端进行翻墙，它安装和配置简单，这里就不在介绍。本文主要对linux服务器如何翻墙进行介绍，下面以Centos7为例。</p>
<a id="more"></a>

<h3 id="安装shadowsocksrrs"><a href="#安装shadowsocksrrs" class="headerlink" title="安装shadowsocksrrs"></a>安装shadowsocksrrs</h3><p>Pip 是 Python 的包管理工具，这里我们用 pip 安装 shadowsocks。</p>
<p>使用 <code>yum install -y pip</code> 安装，官方一个最小化的 CentOS，没有这个包，可以手动安装。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl <span class="string">&quot;https://bootstrap.pypa.io/get-pip.py&quot;</span> -o <span class="string">&quot;get-pip.py&quot;</span></span><br><span class="line">python get-pip.py</span><br></pre></td></tr></table></figure>
<p>安装客户端</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install --upgrade pip</span><br><span class="line">pip install shadowsocks</span><br></pre></td></tr></table></figure>
<p>配置客户端</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir -p /etc/shadowsocks</span><br><span class="line">vim config.json</span><br></pre></td></tr></table></figure>
<p>配置如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;server&quot;</span>:<span class="string">&quot;server_ip&quot;</span>,</span><br><span class="line">    <span class="string">&quot;server_port&quot;</span>:4004,</span><br><span class="line">    <span class="string">&quot;local_port&quot;</span>:8016,</span><br><span class="line">    <span class="string">&quot;password&quot;</span>:<span class="string">&quot;password&quot;</span>,</span><br><span class="line">    <span class="string">&quot;timeout&quot;</span>:600,</span><br><span class="line">    <span class="string">&quot;method&quot;</span>:<span class="string">&quot;aes-256-cfb&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>启动客户端</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sslocal -c /etc/shadowsocks/config.json</span><br></pre></td></tr></table></figure>
<p>使用systmed</p>
<p>新建文件<code>/etc/systemd/system/ssclient.service</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/systemd/system/ssclient.service</span><br></pre></td></tr></table></figure>
<p>文件中内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Shadowsocks Client</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">TimeoutStartSec=0</span><br><span class="line">ExecStart=/usr/bin/sslocal -c /etc/shadowsocks/config.json</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>
<p>启动客户端</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl start ssclient</span><br></pre></td></tr></table></figure>
<p>客户端状态</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl status ssclient</span><br></pre></td></tr></table></figure>
<p>开启启动客户端</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> ssclient</span><br></pre></td></tr></table></figure>
<p>好了，shadowsocksrrs客户端安装完成，由于pip安装的客户端不支持chacha20等加密方式，要支持这些加密方式，需要下载源码。</p>
<h3 id="支持chacha20加密方式"><a href="#支持chacha20加密方式" class="headerlink" title="支持chacha20加密方式"></a>支持chacha20加密方式</h3><p>安装libsodium</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://download.libsodium.org/libsodium/releases/LATEST.tar.gz</span><br><span class="line">tar zxvf LATEST.tar.gz</span><br><span class="line"><span class="built_in">cd</span> libsodium-1.0.13</span><br><span class="line">./configure</span><br><span class="line">make -j8 &amp;&amp; make install</span><br><span class="line"><span class="built_in">echo</span> /usr/<span class="built_in">local</span>/lib &gt; /etc/ld.so.conf.d/usr_local_lib.conf</span><br><span class="line">ldconfig</span><br></pre></td></tr></table></figure>
<p>下载源码<br>由于shadowsocksrrs作者别请去喝茶，代码已经删除。自己备份了一份。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/gunsluo/shadowsocksrrs.git</span><br><span class="line"><span class="built_in">cd</span> shadowsocksrrs/shadowsocks/</span><br></pre></td></tr></table></figure>
<p>可以看到目录下有local.py文件，它就是客户端入口函数文件。</p>
<p>修改配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/shadowsocks/config.json</span><br></pre></td></tr></table></figure>
<p>配置如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;dns_ipv6&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="string">&quot;server&quot;</span>: <span class="string">&quot;server_ip&quot;</span>,</span><br><span class="line">    <span class="string">&quot;server_port&quot;</span>: 6003,</span><br><span class="line">    <span class="string">&quot;local_address&quot;</span>: <span class="string">&quot;127.0.0.1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;local_port&quot;</span>: 8086,</span><br><span class="line">    <span class="string">&quot;password&quot;</span>: <span class="string">&quot;password&quot;</span>,</span><br><span class="line">    <span class="string">&quot;timeout&quot;</span>: 600,</span><br><span class="line">    <span class="string">&quot;method&quot;</span>: <span class="string">&quot;chacha20&quot;</span>,</span><br><span class="line">    <span class="string">&quot;protocol&quot;</span>: <span class="string">&quot;auth_aes128_md5&quot;</span>,</span><br><span class="line">    <span class="string">&quot;obfs&quot;</span>: <span class="string">&quot;tls1.2_ticket_auth&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>客户端加密配置必须和服务器端相同，根据自己的需求做响应修改。</p>
<p>启动客户端</p>
<p>在下载的源码目录下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python ./local.py -c /etc/shadowsocks/config.json</span><br></pre></td></tr></table></figure>
<p>编写启动脚步<code>ssclient</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">/root/shadowsocksrrs/shadowsocks/local.py -c /etc/shadowsocks/japan.json -d <span class="variable">$1</span></span><br></pre></td></tr></table></figure>
<p>mv ssclient /usr/bin/</p>
<p>启动客户端</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssclient start</span><br></pre></td></tr></table></figure>
<h3 id="测试安装shadowsocksrrs"><a href="#测试安装shadowsocksrrs" class="headerlink" title="测试安装shadowsocksrrs"></a>测试安装shadowsocksrrs</h3><p>测试命令：<code>curl --socks5 127.0.0.1:8086 http://httpbin.org/ip</code> 返回vpn服务器ip，说明安装成功。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;origin&quot;</span>: <span class="string">&quot;x.x.x.x&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="安装privoxy"><a href="#安装privoxy" class="headerlink" title="安装privoxy"></a>安装privoxy</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install privoxy</span><br></pre></td></tr></table></figure>
<p>编辑 <code>vim /etc/privoxy/config</code>，确保下面两项。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">listen-address  127.0.0.1:8016</span><br><span class="line">forward-socks5t   /               127.0.0.1:8086 .</span><br></pre></td></tr></table></figure>
<p>启动privoxy</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/sbin/privoxy --user privoxy /etc/privoxy/config</span><br></pre></td></tr></table></figure>
<h3 id="配置终端使用代理的命令"><a href="#配置终端使用代理的命令" class="headerlink" title="配置终端使用代理的命令"></a>配置终端使用代理的命令</h3><p>在<code>~/.zshrc</code> 或者<code>~/.bashrc</code>中加入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">setproxy</span></span>() &#123;</span><br><span class="line">    <span class="built_in">export</span> &#123;http,https,ftp&#125;_proxy=<span class="string">&quot;http://127.0.0.1:8016&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">unsetproxy</span></span>() &#123;</span><br><span class="line">    <span class="built_in">unset</span> &#123;http,https,ftp&#125;_proxy</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>重新登录终端，setproxy开始代理，unsetproxy关闭代理。</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>区块链</tag>
        <tag>shadowsocksrrs</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos7 Min系统 网络设备名问题</title>
    <url>/linux/centos7-min-net-problem-20150429.html</url>
    <content><![CDATA[<p>下载安装min Centos7到virtual box, 启动linux后网络命令是不可用。需要系统启动选项加载网络参数。其次ifconfig常见命令也无法找到，需要手动安装net-tools。</p>
<a id="more"></a>

<h3 id="加载网络"><a href="#加载网络" class="headerlink" title="加载网络"></a>加载网络</h3><ol>
<li><p>修改grub启动参数<br><code>vim /etc/sysconfig/grub</code> 添加net.ifnames=0 biosdevname=0, 效果如下</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">GRUB_TIMEOUT=5</span><br><span class="line">GRUB_DISTRIBUTOR=<span class="string">&quot;<span class="subst">$(sed &#x27;s, release .*$,,g&#x27; /etc/system-release)</span>&quot;</span></span><br><span class="line">GRUB_DEFAULT=saved</span><br><span class="line">GRUB_DISABLE_SUBMENU=<span class="literal">true</span></span><br><span class="line">GRUB_TERMINAL_OUTPUT=<span class="string">&quot;console&quot;</span></span><br><span class="line">GRUB_CMDLINE_LINUX=<span class="string">&quot;crashkernel=auto rd.lvm.lv=centos/root rd.lvm.lv=centos/swap rhgb quiet net.ifnames=0 biosdevname=0&quot;</span></span><br><span class="line">GRUB_DISABLE_RECOVERY=<span class="string">&quot;true&quot;</span></span><br></pre></td></tr></table></figure></li>
<li><p>加载 <code>grub2-mkconfig -o /boot/grub2/grub.cfg</code></p>
</li>
</ol>
<h3 id="修改网卡名"><a href="#修改网卡名" class="headerlink" title="修改网卡名"></a>修改网卡名</h3><p>如:网卡名en03修改成eth0</p>
<ol>
<li><p>修改网络文件名<br><code>mv /etc/sysconfig/network-scripts/ifcfg-en03 /etc/sysconfig/network-scripts/ifcfg-eth0</code></p>
</li>
<li><p>修改网络设备名<br><code>vim /etc/sysconfig/network-scripts/ifcfg-eth0</code></p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">name=en03修改为name=eth0</span><br></pre></td></tr></table></figure>
<h3 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h3></li>
</ol>
<p><code>systemctl reboot now</code></p>
<h3 id="换源"><a href="#换源" class="headerlink" title="换源"></a>换源</h3><p>使用国内aliyun源，加快下载速度。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup</span><br><span class="line">curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class="line">yum makecache</span><br></pre></td></tr></table></figure>
<h3 id="安装网络工具"><a href="#安装网络工具" class="headerlink" title="安装网络工具"></a>安装网络工具</h3><p><code>yum install net-tools</code></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>centos7</tag>
        <tag>linux</tag>
        <tag>虚拟机</tag>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu16 tls安装自己的Bit下载工具Deluge</title>
    <url>/%E7%AC%94%E8%AE%B0/deluge-install-ubuntu-20170218.html</url>
    <content><![CDATA[<p>常用的bit下载软件：uTorrent(Windows用户推荐)、 Azureus、 BitTornado、 KTorrent、 RTorrent、 Transmission、 Deluge。捣鼓了下载机，安装了系统ubuntu16 tls，现在就选择deluge作为bit下载软件。这里记录下安装流程：</p>
<a id="more"></a>

<h3 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h3><h4 id="deluge客户端安装"><a href="#deluge客户端安装" class="headerlink" title="deluge客户端安装"></a>deluge客户端安装</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo add-apt-repository ppa:deluge-team/ppa</span><br><span class="line"></span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install deluge</span><br></pre></td></tr></table></figure>
<p>安装完成可以在Unity Dash或者application menu中找到Deluge BitTorrent Client。</p>
<h4 id="deluge客户端安装-1"><a href="#deluge客户端安装-1" class="headerlink" title="deluge客户端安装"></a>deluge客户端安装</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo add-apt-repository ppa:deluge-team/ppa</span><br><span class="line"></span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install deluge</span><br></pre></td></tr></table></figure>
<p><img src="http://wx4.sinaimg.cn/mw690/0065glrAgy1fcq36sr0zzj30qd0h0400.jpg" alt="Alt text"></p>
<h4 id="deluge-web安装"><a href="#deluge-web安装" class="headerlink" title="deluge web安装"></a>deluge web安装</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo add-apt-repository ppa:deluge-team/ppa</span><br><span class="line"></span><br><span class="line">sudo apt-get update</span><br><span class="line"></span><br><span class="line">sudo apt-get install deluge-webui deluged</span><br></pre></td></tr></table></figure>
<h4 id="添加deluge运行用户"><a href="#添加deluge运行用户" class="headerlink" title="添加deluge运行用户"></a>添加deluge运行用户</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo adduser --system --gecos <span class="string">&quot;Deluge Service&quot;</span> --disabled-password --group --home /home/deluge deluge</span><br></pre></td></tr></table></figure>
<p><code>--disabled-password</code> 禁止deluge用户登录。</p>
<p>添加用户到deluge用户组</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo gpasswd -a your-user-name deluge</span><br></pre></td></tr></table></figure>
<p><img src="http://wx2.sinaimg.cn/mw690/0065glrAgy1fcq36tbrkyj30ho03lwf1.jpg" alt="Alt text"></p>
<h4 id="配置deluge客户端"><a href="#配置deluge客户端" class="headerlink" title="配置deluge客户端"></a>配置deluge客户端</h4><p>配置<code>sudo vim /etc/systemd/system/deluged.service</code>，拷贝下面内容到文件中：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Deluge Bittorrent Client Daemon</span><br><span class="line">After=network-online.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">User=deluge</span><br><span class="line">Group=deluge</span><br><span class="line">UMask=007</span><br><span class="line"></span><br><span class="line">ExecStart=/usr/bin/deluged -d</span><br><span class="line"></span><br><span class="line">Restart=on-failure</span><br><span class="line"></span><br><span class="line"><span class="comment"># Configures the time to wait before service is stopped forcefully.</span></span><br><span class="line">TimeoutStopSec=300</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>
<p>deluge启动命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl start deluged</span><br><span class="line"></span><br><span class="line">systemctl <span class="built_in">enable</span> deluged</span><br><span class="line"></span><br><span class="line">systemctl status deluged</span><br></pre></td></tr></table></figure>
<h4 id="配置deluge-web"><a href="#配置deluge-web" class="headerlink" title="配置deluge web"></a>配置deluge web</h4><p>配置<code>sudo vim /etc/systemd/system/deluged-web.service</code>，拷贝下面内容到文件中：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Deluge Bittorrent Client Web Interface</span><br><span class="line">After=network-online.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line"></span><br><span class="line">User=deluge</span><br><span class="line">Group=deluge</span><br><span class="line">UMask=027</span><br><span class="line"></span><br><span class="line">ExecStart=/usr/bin/deluge-web</span><br><span class="line"></span><br><span class="line">Restart=on-failure</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>
<p>deluge web启动命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl start deluge-web</span><br><span class="line"></span><br><span class="line">systemctl <span class="built_in">enable</span> deluge-web</span><br><span class="line"></span><br><span class="line">systemctl status deluge-web</span><br></pre></td></tr></table></figure>
<h4 id="浏览器登录"><a href="#浏览器登录" class="headerlink" title="浏览器登录"></a>浏览器登录</h4><p>浏览器中输入：<code>your-server-ip:8112</code></p>
<p>监听127.0.0.1:58846连接Deluge daemon<br><img src="http://wx2.sinaimg.cn/mw690/0065glrAgy1fcq36tqgwqj30dm09twej.jpg" alt="Alt text"></p>
<p>修改密码<br><img src="http://wx1.sinaimg.cn/mw690/0065glrAgy1fcq36u3iirj30dk0dzt9z.jpg" alt="Alt text"></p>
<p>下载界面<br><img src="http://wx4.sinaimg.cn/mw690/0065glrAgy1fcq36ujg5wj30qm0gpaap.jpg" alt="Alt text"></p>
<p>Ok，现在可以使用deluge下载上传文件了。午后随笔记录</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>deluge</tag>
        <tag>torrent</tag>
        <tag>bit</tag>
        <tag>下载工具</tag>
      </tags>
  </entry>
  <entry>
    <title>基于Gitlab Jenkins Docker集群 微服务搭建自动化部署平台</title>
    <url>/docker/deploy-auto-platform-20161109.html</url>
    <content><![CDATA[<p>随着公司应用系统的不断增多，原有手工部署流程越来越不满足上线的需求。为了各个系统能快速迭代与测试，减少上线流程时间和人为出错，迫切需要一套自动化部署系统。</p>
<a id="more"></a>

<h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><ul>
<li>快速迭代，方便的功能更新</li>
<li>代码版本管理，方便的管理、审核</li>
<li>快速打包部署与测试，自动化测试</li>
<li>应用集群管理</li>
<li>快速部署线上环境，快速发布、回滚、重启、停止。</li>
</ul>
<p>为了达到目标提出下面概念</p>
<ul>
<li>微服务 - micro service </li>
<li>代码仓库 - gitlab</li>
<li>持续集成部署工具 - jenkins / circleci / ThoughtWorks  Go</li>
<li>虚拟化技术 - docker集群 (swarm/kubernetes)</li>
</ul>
<h3 id="微服务"><a href="#微服务" class="headerlink" title="微服务"></a>微服务</h3><p>一个简单的应用会随着时间推移逐渐变大。在每次的sprint中，开发团队都会面对新“故事”，然后开发许多新代码。我很确信这个代码正是很多开发者经过多年努力开发出来的一个怪物。单体式应用也会降低开发速度。应用越大，启动时间会越长。单体式应用在不同模块发生资源冲突时，扩展将会非常困难。试想下其中一个功能出错导致服务cash，整个应用都无法使用。micro service 就是解决这样的问题。微服务根据业务适当的拆分。微服务具有更敏捷的迭代，更快速方便的上线。</p>
<ul>
<li>服务之间的是完全解耦的。</li>
<li>服务通讯是重点，制定统一标准。</li>
<li>分布式事务</li>
<li>版本控制</li>
<li>动态扩容</li>
</ul>
<h4 id="代理微服务设计模式"><a href="#代理微服务设计模式" class="headerlink" title="代理微服务设计模式"></a>代理微服务设计模式</h4><p><img src="http://ww3.sinaimg.cn/mw690/0065glrAgw1f9lyi1cn81j30sg0elq5z.jpg" alt="Alt text" title="micro porxy service"></p>
<h4 id="异步消息传递微服务设计模式"><a href="#异步消息传递微服务设计模式" class="headerlink" title="异步消息传递微服务设计模式"></a>异步消息传递微服务设计模式</h4><p><img src="http://ww1.sinaimg.cn/mw690/0065glrAgw1f9lyi22shhj30sg0hsq69.jpg" alt="Alt text" title="micro service"></p>
<h3 id="代码仓库"><a href="#代码仓库" class="headerlink" title="代码仓库"></a>代码仓库</h3><p>Gitlab是一个用Ruby on Rails开发的开源项目管理程序，Git Flow管理开发流程实现代码提交和审核。<br>流程如下：</p>
<p><img src="http://ww4.sinaimg.cn/mw690/0065glrAgw1f9lyhzlkq1j30i10cl3zj.jpg" alt="Alt text" title="git flow"></p>
<h3 id="持续集成部署工具"><a href="#持续集成部署工具" class="headerlink" title="持续集成部署工具"></a>持续集成部署工具</h3><p>持续集成的目的，就是让产品可以快速迭代，同时还能保持高质量。持续交付（Continuous delivery）指的是，频繁地将软件的新版本，交付给质量团队或者用户，以供评审。持续部署（continuous deployment）是持续交付的下一步，指的是代码通过评审以后，自动部署到生产环境。</p>
<p>持续集成它的好处主要有两个：</p>
<ol>
<li>快速发现错误。每完成一点更新，就集成到主干，可以快速发现错误，定位错误也比较容易。</li>
<li>防止分支大幅偏离主干。如果不是经常集成，主干又在不断更新，会导致以后集成的难度变大，甚至难以集成。</li>
</ol>
<p><img src="http://ww4.sinaimg.cn/mw690/0065glrAgw1f9lyi06wrfj30m5098t9z.jpg" alt="Alt text" title="deploy"></p>
<h4 id="Jenkins"><a href="#Jenkins" class="headerlink" title="Jenkins"></a>Jenkins</h4><p>是开源的持续集成工具。自动化的build、打包、构建、测试。可定制的众多插件实现持续部署。</p>
<h4 id="Circleci"><a href="#Circleci" class="headerlink" title="Circleci"></a>Circleci</h4><p>是一个强大的持续集成与部署服务, 支持多种语言。配置简单，需要付费。</p>
<h4 id="ThoughtWorks-Go"><a href="#ThoughtWorks-Go" class="headerlink" title="ThoughtWorks Go"></a>ThoughtWorks Go</h4><p>GO是一款开源的持续集成和发布的系统，旨在使软件开发企业和团队在构建-测试-发布软件产品的流程自动化，并且能持续地发布软件产品。技术支持，需要付费。</p>
<h3 id="虚拟化技术docker-集群"><a href="#虚拟化技术docker-集群" class="headerlink" title="虚拟化技术docker 集群"></a>虚拟化技术docker 集群</h3><p>Docker 项目的目标是实现轻量级的操作系统虚拟化解决方案。 Docker 的基础是 Linux 容器（LXC）等技术。 基于docker的集群工具有swarm(官方)和kubernetes(google)。</p>
<ol>
<li>文件系统隔离：每个进程容器运行在完全独立的根文件系统里。</li>
<li>资源隔离：可以使用cgroup为每个进程容器分配不同的系统资源，例如CPU和内存。</li>
<li>网络隔离：每个进程容器运行在自己的网络命名空间里，拥有自己的虚拟接口和IP地址。</li>
<li>写时复制：采用写时复制方式创建根文件系统，这让部署变得极其快捷，并且节省内存和硬盘空间。</li>
<li>日志记录：Docker将会收集和记录每个进程容器的标准流（stdout/stderr/stdin），用于实时检索或批量检索。</li>
<li>变更管理：容器文件系统的变更可以提交到新的映像中，并可重复使用以创建更多的容器。无需使用模板或手动配置。</li>
<li>交互式Shell</li>
</ol>
<h4 id="Swarm架构"><a href="#Swarm架构" class="headerlink" title="Swarm架构"></a>Swarm架构</h4><p><img src="http://ww4.sinaimg.cn/mw690/0065glrAgw1f9lyi2sx34j30ex0d9abw.jpg" alt="Alt text" title="deploy"></p>
<h4 id="kubernetes架构"><a href="#kubernetes架构" class="headerlink" title="kubernetes架构"></a>kubernetes架构</h4><p><img src="http://ww4.sinaimg.cn/mw690/0065glrAgw1f9lyi0nhpwj31kw1au46t.jpg" alt="Alt text" title="deploy"></p>
<h3 id="自动化部署-gitlab"><a href="#自动化部署-gitlab" class="headerlink" title="自动化部署 - gitlab"></a>自动化部署 - gitlab</h3><p><img src="http://ww3.sinaimg.cn/mw690/0065glrAgw1f9lyz59iybj30go0cgab8.jpg" alt="Alt text" title="deploy"></p>
<ol>
<li>开发者fork正式repo代码</li>
<li>开发者克隆代码到本地，git branch特性分支开始开发</li>
<li>开发完成开发者创建pull request 将代码提交正式repo dev分支</li>
<li>合并请求触发gitlab webhook或者 jenkins 定时拉取代码后。jenkins开始 编译、打包、单元测试。jenkins插件完成持续部署到测试环境并进行自动化测试。</li>
<li>测试完成开发者创建pull request 将代码提交正式repo master分支</li>
<li>合并请求触发gitlab webhook或者 jenkins 定时拉取代码后。通过发布系统将应用部署到生产环境</li>
</ol>
<h3 id="自动化部署-jenkins"><a href="#自动化部署-jenkins" class="headerlink" title="自动化部署 - jenkins"></a>自动化部署 - jenkins</h3><p><img src="http://ww1.sinaimg.cn/mw690/0065glrAgw1f9lyz5xghdj30jj0i2mzp.jpg" alt="Alt text" title="deploy"></p>
<ol>
<li>合并请求触发gitlab webhook或者 jenkins 定时拉取代码</li>
<li>jenkins 编译。</li>
<li>jenkins 单元测试。</li>
<li>jenkins 打包、构建</li>
<li>jenkins 插件 docker镜像并上传</li>
<li>jenkins 部署脚本（基于doker swarm/kubernetes）</li>
<li>部署成功，自动化测试或通知测试人员测试</li>
<li>测试通过</li>
</ol>
<h4 id="jenkins-插件"><a href="#jenkins-插件" class="headerlink" title="jenkins 插件"></a>jenkins 插件</h4><ul>
<li>Publish Over SSH Plugin/SSH Agent Plugin</li>
<li>Docker Plugin</li>
</ul>
<h3 id="自动化部署-部署流程"><a href="#自动化部署-部署流程" class="headerlink" title="自动化部署 - 部署流程"></a>自动化部署 - 部署流程</h3><h4 id="jenkins部署应用"><a href="#jenkins部署应用" class="headerlink" title="jenkins部署应用"></a>jenkins部署应用</h4><p><img src="http://ww2.sinaimg.cn/mw690/0065glrAgw1f9lyz6d3edj30iq0c1myn.jpg" alt="Alt text" title="deploy"></p>
<ol>
<li>合并请求触发gitlab webhook或者 jenkins 定时拉取代码</li>
<li>编译代码二次验证</li>
<li> jenkins 部署脚本</li>
<li>生产环境更新应用</li>
</ol>
<ul>
<li>docker pull image</li>
<li> docker run</li>
</ul>
<ol start="5">
<li>重启应用</li>
</ol>
<h4 id="存在的问题"><a href="#存在的问题" class="headerlink" title="存在的问题"></a>存在的问题</h4><ol>
<li>不支持热部署</li>
<li>不支持回滚、重启、停止</li>
<li>不支持统一管理</li>
</ol>
<h3 id="发布系统"><a href="#发布系统" class="headerlink" title="发布系统"></a>发布系统</h3><p>为了解决发布流程中的问题，需要管理应用的发布系统。发布系统要做到热部署，动态扩容发布，定位应用状态，友好用户界面和接口，统一的配置中心。</p>
<p>正确的发布应用的流程如下：</p>
<ol>
<li>检查应用</li>
<li>禁止业务流量</li>
<li>停止应用</li>
<li>更新应用</li>
<li>启动应用</li>
<li>开启业务流量</li>
</ol>
<p><img src="http://ww2.sinaimg.cn/mw690/0065glrAgw1f9lyz6qlvyj30ki0gvwhp.jpg" alt="Alt text" title="deploy"></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>自动化部署是从提交代码后，实现代码自动编译、打包、测试到线上部署的整套流程，能解决人工部署带来的无法快速上线、应用版本众多无法管理的问题。自动化部署平台不仅是部署应用，它还涉及到开发流程管理、代码托放管理、持续集成、持续部署、版本管理以及系统架构。自动化部署平台具有快速迭代，快速的代码管理、审核，快速的打包部署和测试，快速的发布、回滚、重启、停止应用的特点，同时还支持自由控制的弹性策略。</p>
<h4 id="自动化部署平台场景"><a href="#自动化部署平台场景" class="headerlink" title="自动化部署平台场景"></a>自动化部署平台场景</h4><ul>
<li>标准的敏捷开发流程</li>
<li>完善的自动化测试</li>
<li>统一安装、配置应用</li>
<li>应用定期检测是否运行</li>
<li>支持自由控制的弹性策略</li>
<li>应用部署的安全管理</li>
</ul>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>自动化部署</tag>
        <tag>微服务</tag>
        <tag>集群</tag>
        <tag>gitlab</tag>
        <tag>jenkins</tag>
        <tag>ci</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Dnsmasq在Mac上搭建私有网络开发环境</title>
    <url>/%E5%B7%A5%E5%85%B7/dnsmasq-install-for-mac-20180605.html</url>
    <content><![CDATA[<p>对于经常移动办公的童鞋，网络环境也随之改变，开发过程中部署的本地环境也需要重新配置IP地址等，或者虚拟机（使用桥接方式，桥接好处在于局域网内其它电脑方便访问，虚拟机系统访问外网不需要额外配置）时系统IP改变。我在这样的环境下痛苦针扎了一段时间，决定在本机组建一个私有网络不随连接Internet网络的改变而变动。</p>
<blockquote>
<p>先说说我的想法：在电脑上模拟新的一张网卡，用此网卡组建一个网络，此网卡IP使用静态配置。如果想在同一局域网中共享该私有网络要使用dnsmasq，只是本机使用可以不使用dnsmasq。我使用的Mac电脑，由于mac不支持创建虚拟网卡，我只能使用虚拟IP来实现。</p>
</blockquote>
<a id="more"></a>

<h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><p>Mac: 宿主机 (通常使用wifi的网卡)<br>CentOS7 1: 虚拟机(VMware Fusion) (双网卡 桥接模式)<br>CentOS7 2: 虚拟机(VMware Fusion) (双网卡 桥接模式)<br>CentOS7 3: 虚拟机(VMware Fusion) (双网卡 桥接模式)</p>
<h3 id="配置宿主机网络"><a href="#配置宿主机网络" class="headerlink" title="配置宿主机网络"></a>配置宿主机网络</h3><p>由于Mac不支持创建虚拟网卡，使用虚拟IP。给en0网卡添加虚拟IP</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">sudo</span> ifconfig en<span class="number">0</span> alias <span class="number">10.0.100.1</span></span><br><span class="line"><span class="attribute">sudo</span> ifconfig en<span class="number">0</span> -alias <span class="number">10.0.100.1</span></span><br></pre></td></tr></table></figure>
<p>linux系统命令：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">ifconfig</span> eth<span class="number">0</span>:<span class="number">1</span> <span class="number">10.0.100.2</span> netmask <span class="number">255.255.255.0</span></span><br><span class="line"><span class="attribute">ip</span> addr del <span class="number">10.0.100.2</span>/<span class="number">24</span> dev eth<span class="number">0</span></span><br></pre></td></tr></table></figure>
<h3 id="配置虚拟机网络"><a href="#配置虚拟机网络" class="headerlink" title="配置虚拟机网络"></a>配置虚拟机网络</h3><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">cp <span class="regexp">/etc/</span>sysconfig<span class="regexp">/network-scripts/i</span>fcfg-eth0 <span class="regexp">/etc/</span>sysconfig<span class="regexp">/network-scripts/i</span>fcfg-eth1</span><br><span class="line">uuidgen eth1</span><br></pre></td></tr></table></figure>
<p>配置eth1网卡 <code>vi /etc/sysconfig/network-scripts/ifcfg-eth1</code> (uuid使用uuidgen命令生成)</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">TYPE</span>=Ethernet</span><br><span class="line"><span class="attr">PROXY_METHOD</span>=none</span><br><span class="line"><span class="attr">BROWSER_ONLY</span>=<span class="literal">no</span></span><br><span class="line"><span class="attr">BOOTPROTO</span>=static</span><br><span class="line"><span class="attr">DEFROUTE</span>=<span class="literal">yes</span></span><br><span class="line"><span class="attr">IPV4_FAILURE_FATAL</span>=<span class="literal">no</span></span><br><span class="line"><span class="attr">IPV6INIT</span>=<span class="literal">yes</span></span><br><span class="line"><span class="attr">IPV6_AUTOCONF</span>=<span class="literal">yes</span></span><br><span class="line"><span class="attr">IPV6_DEFROUTE</span>=<span class="literal">yes</span></span><br><span class="line"><span class="attr">IPV6_FAILURE_FATAL</span>=<span class="literal">no</span></span><br><span class="line"><span class="attr">IPV6_ADDR_GEN_MODE</span>=stable-privacy</span><br><span class="line"><span class="attr">NAME</span>=eth1</span><br><span class="line"><span class="attr">UUID</span>=<span class="number">123</span>a9032-c938-<span class="number">4404</span>-bc95-<span class="number">7103</span>accbdcc3</span><br><span class="line"><span class="attr">DEVICE</span>=eth1</span><br><span class="line"><span class="attr">IPADDR</span>=<span class="number">10.0</span>.<span class="number">100.2</span></span><br><span class="line"><span class="attr">NETMASK</span>=<span class="number">255.255</span>.<span class="number">255.0</span></span><br><span class="line"><span class="attr">GATEWAY</span>=<span class="number">10.0</span>.<span class="number">100.1</span></span><br><span class="line"><span class="attr">ONBOOT</span>=<span class="literal">yes</span></span><br></pre></td></tr></table></figure>
<p>其他虚拟机的IP<code>10.0.100.3</code> <code>10.0.100.4</code></p>
<h3 id="测试网络"><a href="#测试网络" class="headerlink" title="测试网络"></a>测试网络</h3><p>宿主机: <code>ping 10.0.100.2</code><br>虚拟机: <code>ping 10.0.100.1</code></p>
<h3 id="安装dnsmasq"><a href="#安装dnsmasq" class="headerlink" title="安装dnsmasq"></a>安装dnsmasq</h3><figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">brew </span><span class="keyword">install </span>dnsmasq</span><br></pre></td></tr></table></figure>
<p>配置 <code>vim /usr/local/etc/dnsmasq.conf</code></p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">strict-<span class="keyword">order</span></span><br><span class="line">listen-address=10.0.100.1,127.0.0.1</span><br><span class="line"><span class="keyword">conf</span>-<span class="keyword">dir</span>=/usr/<span class="keyword">local</span>/etc/dnsmasq.<span class="keyword">d</span>/,*.<span class="keyword">conf</span></span><br></pre></td></tr></table></figure>
<p>添加<code>/usr/local/etc/dnsmasq.d/k8s.conf</code></p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">address</span>=/k<span class="number">8</span>s-master.lan/<span class="number">10.0.100.2</span></span><br><span class="line"><span class="attribute">address</span>=/k<span class="number">8</span>s-node<span class="number">1</span>.lan/<span class="number">10.0.100.3</span></span><br><span class="line"><span class="attribute">address</span>=/k<span class="number">8</span>s-node<span class="number">2</span>.lan/<span class="number">10.0.100.4</span></span><br></pre></td></tr></table></figure>
<p>启动: </p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">sudo brew services <span class="literal">start</span> dnsmasq</span><br></pre></td></tr></table></figure>
<p>开机启动</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">sudo</span> <span class="selector-tag">launchctl</span> <span class="selector-tag">start</span> <span class="selector-tag">homebrew</span><span class="selector-class">.mxcl</span><span class="selector-class">.dnsmasq</span></span><br></pre></td></tr></table></figure>
<p>清除DNS缓存</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">sudo killall -HUP mDNSResponder</span></span><br></pre></td></tr></table></figure>
<p>如果使用该dns服务，修改dns<br>vi /etc/rsyslog.conf</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">nameserver</span> <span class="number">10.0.100.1</span></span><br></pre></td></tr></table></figure>
<p>测试<br>宿主机中修改/etc/rsyslog.conf<br><code>ping k8s-master.lan</code></p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>mac</tag>
        <tag>dns</tag>
        <tag>dnsmasq</tag>
      </tags>
  </entry>
  <entry>
    <title>Dokcer buildx编译多环境镜像</title>
    <url>/docker/docker-desktop-buildx-20191004.html</url>
    <content><![CDATA[<p>新发布的Docker Desktop Community提供了实验性功能buildx. buildx使用 BuildKit 构建多种系统架构的Docker镜像。</p>
<blockquote>
<p>Docker Desktop Community 2.1.0.0 contains the following experimental features.<br>Docker Buildx: Docker Buildx is a CLI plugin for extended build capabilities with BuildKit. For more information, see Working with Docker Buildx.</p>
</blockquote>
<a id="more"></a>

<p>可以使用 $ docker buildx build 命令使用 BuildKit 构建镜像。该命令支持 –platform 参数可以同时构建支持多种系统架构的 Docker 镜像，大大简化了构建步骤。</p>
<h3 id="Buildx-builder"><a href="#Buildx-builder" class="headerlink" title="Buildx builder"></a>Buildx builder</h3><p>docker build 命令只能构建一个架构的镜像，又例如Docker for Linux 不支持构建 arm 架构镜像。由于 Docker 默认的 builder 实例不支持同时指定多个镜像，我们必须首先创建一个新的 builder 实例。</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">$ docker buildx create <span class="params">--use</span> <span class="params">--name</span> mybuilder <span class="params">--driver</span> docker-container <span class="params">--driver-opt</span> image=dockerpracticesig/buildkit<span class="function">:master</span></span><br><span class="line"></span><br><span class="line">$ docker buildx inspect mybuilder <span class="params">--bootstrap</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$ docker buildx <span class="keyword">ls</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h3><p>Dockerfile 文件</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> --platform=$TARGETPLATFORM alpine</span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> uname -a &gt; /os.txt</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> cat /os.txt</span></span><br></pre></td></tr></table></figure>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">$ docker buildx build --platform linux<span class="regexp">/arm,linux/</span>arm64,linux<span class="regexp">/amd64 -t myusername/</span>hello . --<span class="keyword">push</span></span><br><span class="line"></span><br><span class="line"># 查看镜像信息</span><br><span class="line">$ docker buildx imagetools <span class="keyword">inspect</span> myusername/hello</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>buildx</tag>
        <tag>multi-arch</tag>
      </tags>
  </entry>
  <entry>
    <title>Dokcer Desktop发布</title>
    <url>/docker/docker-desktop-20190810.html</url>
    <content><![CDATA[<p>Docker是Docker.Inc公司开源的一个基于轻量级虚拟化技术的容器引擎项目,整个项目基于Go语言开发，并遵从Apache 2.0协议。之前使用Docker Community Edition时，需要单独安装virtualbox，Docker Toolbox等，非常繁琐。并且不好监控Docker的运行状态。Docker Desktop发布后，问题迎刃而解。</p>
<a id="more"></a>

<p>为了Docker Desktop特意写篇博客记录下。</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>首先是要到 Docker 官网上下载 Docker Desktop 稳定版的就好，能用比较重要。<a href="https://www.docker.com/products/docker-desktop%E3%80%82%E9%9D%9E%E5%B8%B8%E7%AE%80%E5%8D%95%EF%BC%8C%E9%9D%9E%E5%B8%B8%E5%82%BB%E7%93%9C%E3%80%82%E9%80%89%E6%8B%A9%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE%E7%9A%84%E5%AE%89%E8%A3%85%E5%8C%85%E4%B8%8B%E8%BD%BD%E3%80%81%E5%8F%8C%E5%87%BB%E3%80%81%E5%AE%89%E8%A3%85%E3%80%82">https://www.docker.com/products/docker-desktop。非常简单，非常傻瓜。选择操作系统配置的安装包下载、双击、安装。</a></p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>Docker Desktop后，就macos而言，系统上部有小鲸鱼图标。当然我们也可以到 Docker Desktop 查看 Docker 容器的运行状况。</p>
<ul>
<li>Docker Desktop 无法访问 LocalHost？<br>其实安装后只要执行 docker run 就能运行 Docker 容器，其实这只是因为端口的问题，我们需要将容器中的端口映射到本机端口上。</li>
</ul>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>在Preferences中可配置docker image下载代理，使用的CPU和内容等。</p>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>mac</tag>
      </tags>
  </entry>
  <entry>
    <title>为下载docker镜像加速，配置国内Registry Mirror</title>
    <url>/docker/docker-mirror-20170410.html</url>
    <content><![CDATA[<p>Docker是Docker.Inc公司开源的一个基于轻量级虚拟化技术的容器引擎项目,整个项目基于Go语言开发，并遵从Apache 2.0协议。通过分层镜像标准化和内核虚拟化技术，Docker使得应用开发者和运维工程师可以以统一的方式跨平台发布应用，并且以几乎没有额外开销的情 况下提供资源隔离的应用运行环境。由于众多新颖的特性以及项目本身的开放性，Docker在不到两年的时间里迅速获得诸多IT厂商的参与，其中更是包括 Google、Microsoft、VMware等业界行业领导者。同时，Docker在开发者社区也是一石激起千层浪，许多如我之码农纷纷开始关注、学 习和使用Docker，许多企业，尤其是互联网企业，也在不断加大对Docker的投入，大有掀起一场容器革命之势。</p>
<a id="more"></a>

<h3 id="Docker镜像命名解析"><a href="#Docker镜像命名解析" class="headerlink" title="Docker镜像命名解析"></a>Docker镜像命名解析</h3><p>镜像是Docker最核心的技术之一，也是应用发布的标准格式。这也是Docker里面比较容易令人混淆的一块概念：Registry，Repository, Tag and Image。Registry存储镜像数据，并且提供拉取和上传镜像的功能。Registry中镜像是通过Repository来组织的，而每个Repository又包含了若干个Image。</p>
<ul>
<li>Registry包含一个或多个Repository</li>
<li>Repository包含一个或多个Image</li>
<li>Image用GUID表示，有一个或多个Tag与之关联</li>
</ul>
<p><code>docker pull</code>在哪里指定Registry呢？假如本地搭建了<code>localhost:5000</code>的私有Registry。拉取镜像的完整命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull localhost:5000/ubuntu:latest</span><br></pre></td></tr></table></figure>
<h3 id="加速方案"><a href="#加速方案" class="headerlink" title="加速方案"></a>加速方案</h3><p><strong>方案一</strong><br>就是搭建或者使用现有的私有Registry，通过定期和Docker Hub同步热门的镜像，私有Registry上保存了一些镜像的副本，然后大家可以通过<code>docker pull private-registry.com/user-name/ubuntu:latest</code>， 从这个私有Registry上拉取镜像。因为这个方案需要定期同步Docker Hub镜像，因此它比较适合于使用的镜像相对稳定，或者都是私有镜像的场景。而且用户需要显式的映射官方镜像名称到私有镜像名称，私有Registry更多被大家应用在企业内部场景。私有Registry部署也很方便，可以直接在Docker Hub上下载Registry镜像。</p>
<p><strong>方案二</strong><br>是使用Registry Mirror，它的原理类似于缓存，如果镜像在Mirror中命中则直接返回给客户端，否则从存放镜像的Registry上拉取并自动缓存在Mirror 中。最酷的是，是否使用Mirror对Docker使用者来讲是透明的，也就是说在配置Mirror以后，大家可以仍然输入docker pull ubuntu来拉取Docker Hub镜像，除了速度变快了，和以前没有任何区别。</p>
<h3 id="配置Registry-Mirror"><a href="#配置Registry-Mirror" class="headerlink" title="配置Registry Mirror"></a>配置Registry Mirror</h3><p>使用DaoCloud国内加速器下载，配置：</p>
<p>Linux<br>该脚本可以将 –registry-mirror 加入到你的 Docker 配置文件 <code>/etc/default/docker</code> 中。适用于 Ubuntu14.04、Debian、CentOS6 、CentOS7、Fedora、Arch Linux、openSUSE Leap 42.1，其他版本可能有细微不同。有些是修改/etc/docker/daemon.json</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -sSL https://get.daocloud.io/daotools/set_mirror.sh | sh -s http://c1a47088.m.daocloud.io</span><br></pre></td></tr></table></figure>
<p>MacOS<br>右键点击桌面顶栏的 docker 图标，选择 Preferences ，在 Daemon 标签（Docker 17.03 之前版本为 Advanced 标签）下的 Registry mirrors 列表中加入下面的镜像地址:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http://c1a47088.m.daocloud.io</span><br></pre></td></tr></table></figure>
<p>Window<br>在桌面右下角状态栏中右键 docker 图标，修改在 Docker Daemon 标签页中的 json ，把下面的地址:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http://c1a47088.m.daocloud.io</span><br></pre></td></tr></table></figure>
<p>现在可以愉快的下载镜像了。</p>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>mirror</tag>
      </tags>
  </entry>
  <entry>
    <title>非root用户不使用sudo执行docker命令</title>
    <url>/docker/docker-non-root-20170412.html</url>
    <content><![CDATA[<p>docker daemon须运行在root用户下，非root用户要使用sudo，原因在官方文档写到：</p>
<blockquote>
<p>The docker daemon binds to a Unix socket instead of a TCP port. By default that Unix socket is owned by the user root and other users can only access it using sudo. The docker daemon always runs as the root user.</p>
</blockquote>
<blockquote>
<p>If you don’t want to use sudo when you use the docker command, create a Unix group called docker and add users to it. When the docker daemon starts, it makes the ownership of the Unix socket read/writable by the docker group.</p>
</blockquote>
<a id="more"></a>

<p><strong>非root用户不使用sudo执行docker命令</strong></p>
<ol>
<li><p>$ sudo groupadd docker<br>创建docker用户组。</p>
</li>
<li><p>$ sudo usermod -aG docker $USER<br>添加用户到docker用户组。</p>
</li>
<li><p>$ sudo systemctl restart docker.service<br>重启docker daemon并重新登录</p>
</li>
<li><p>$ docker run hello-world<br>测试下吧。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>non-root</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker初体验 应用容器引擎</title>
    <url>/docker/docker-practice-20150429.html</url>
    <content><![CDATA[<p>Docker 是一个开源的应用容器引擎，基于 Go 语言 并遵从Apache2.0协议开源。</p>
<p>Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口（类似 iPhone 的 app）,更重要的是容器性能开销极低。<br>本篇文章是实践中使用docker，遇到到的问题并记录下。</p>
<a id="more"></a>

<h3 id="首先推荐docker的学习资料"><a href="#首先推荐docker的学习资料" class="headerlink" title="首先推荐docker的学习资料"></a>首先推荐docker的学习资料</h3><ol>
<li><a href="https://www.gitbook.com/book/yeasy/docker_practice/details">Docker —— 从入门到实践</a></li>
</ol>
<h3 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h3><p>系统Ubuntu 14.04 内核3.13.0-65-generic<br>不多说直接给出安装命令，如果想源码编译的请上官网下载编译。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get update</span><br><span class="line"></span><br><span class="line">wget -qO- https://get.docker.com/ | sh</span><br></pre></td></tr></table></figure>
<p>Ok, 安装完成。就是这么简单。检测安装的docker版本。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker --version</span><br></pre></td></tr></table></figure>

<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><p>docker安装成功，了解下常用命令。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#启动服务</span></span><br><span class="line">/bin/systemctl restart  docker.service</span><br><span class="line"><span class="comment">#登录</span></span><br><span class="line">docker login registry.rd.fyec.cn</span><br><span class="line"><span class="comment">#创建</span></span><br><span class="line">docker build -t registry.rd.fyec.cn/redis-server .</span><br><span class="line"><span class="comment">#运行</span></span><br><span class="line">docker run -t -i registry.rd.fyec.cn/centos:centos7 /bin/bash</span><br><span class="line"><span class="comment">#提交</span></span><br><span class="line">docker push registry.rd.fyec.cn/virtual_ccb_server</span><br><span class="line"><span class="comment">#SSH</span></span><br><span class="line">docker <span class="built_in">exec</span> -i -t 8ec02d6b7234  bash</span><br></pre></td></tr></table></figure>
<h3 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h3><p>如何创建自己的docker镜像，当然是写dockerfile了。现在就来写个简单的dockerfile吧。<br>service是一个linux系统下的可运行文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#基础镜像库</span></span><br><span class="line">from registry.rd.fyec.cn/base:latest</span><br><span class="line"></span><br><span class="line"><span class="comment">#将service文件添加到docker镜像的/opt目录</span></span><br><span class="line">ADD service /opt/service</span><br><span class="line"></span><br><span class="line"><span class="comment">#运行时暴露80端口</span></span><br><span class="line">EXPOSE 80</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动后运行/opt/service</span></span><br><span class="line">CMD /opt/service</span><br></pre></td></tr></table></figure>
<p>简单的Dockerfile写好了，当然是创建docker image了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker build -t &lt;docker image name&gt; &lt;dockerfile path&gt;</span><br></pre></td></tr></table></figure>
<p>最后，当然是吧docker镜像启动起来</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#启动并bash</span></span><br><span class="line">docker run -t -i &lt;docker image name&gt; /bin/bash</span><br></pre></td></tr></table></figure>
<h3 id="Docker-Swarm"><a href="#Docker-Swarm" class="headerlink" title="Docker Swarm"></a>Docker Swarm</h3><p>Swarm是Docker公司在2014年12月初发布的一套较为简单的工具，用来管理Docker集群，它将一群Docker宿主机变成一个单一的，虚拟的主机。Swarm使用标准的Docker API接口作为其前端访问入口，换言之，各种形式的Docker Client(docker client in go, docker_py, docker等)均可以直接与Swarm通信。Swarm几乎全部用Go语言来完成开发，上周五，4月17号，Swarm0.2发布，相比0.1版本，0.2版本增加了一个新的策略来调度集群中的容器，使得在可用的节点上传播它们，以及支持更多的Docker命令以及集群驱动。</p>
<p>Swarm deamon只是一个调度器（Scheduler）加路由器(router)，Swarm自己不运行容器，它只是接受docker客户端发送过来的请求，调度适合的节点来运行容器，这意味着，即使Swarm由于某些原因挂掉了，集群中的节点也会照常运行，当Swarm重新恢复运行之后，它会收集重建集群信息。</p>
<h3 id="安装Docker-swarm"><a href="#安装Docker-swarm" class="headerlink" title="安装Docker-swarm"></a>安装Docker-swarm</h3><p>有三台服务器, 这三台机器创建一个Docker集群 其中 i-238242qix (10.253.101.25) 同时充当swarm manager管理集群</p>
<table>
<thead>
<tr>
<th>机器名</th>
<th>Ip</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>i-238242qix</td>
<td>10.253.101.25</td>
<td>swarm manager</td>
</tr>
<tr>
<td>i-239z31k69</td>
<td>10.253.100.20</td>
<td>&nbsp;</td>
</tr>
<tr>
<td>i-238etvs5t</td>
<td>10.253.100.229</td>
<td>&nbsp;</td>
</tr>
</tbody></table>
<p>Docker deamon 的监听端口 <code>vim /etc/default/docker</code> 在文件后面添加</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">DOCKER_OPTS=<span class="string">&quot;-H 0.0.0.0:2375 -H unix:///var/run/docker.sock --graph /mnt/datadisk/docker --storage-driver btrfs&quot;</span></span><br></pre></td></tr></table></figure>
<p><code>--graph</code>指定docker使用磁盘 <code>--storage-driver</code>指定文件系统</p>
<p>如果是使用consul配置Docker</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">DOCKER_OPTS=<span class="string">&quot;-H 0.0.0.0:2375 -H unix:///var/run/docker.sock -D --cluster-advertise 10.139.52.27:2375 --cluster-store consul://10.139.52.27:8500/swarm --graph /mnt/data/docker --storage-driver btrfs&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="Docker命令"><a href="#Docker命令" class="headerlink" title="Docker命令"></a>Docker命令</h3><p>重启 Docker deamon</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">service docker restart</span><br></pre></td></tr></table></figure>
<p>安装Docker官方提供的Swarm镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull swarm</span><br></pre></td></tr></table></figure>

<p>运行swarm manager</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d -p 2376:2376 swarm manage -H :2376 --replication --advertise 10.168.10.198:2376 consul://10.168.10.198:8500/swarm</span><br></pre></td></tr></table></figure>
<p>加入 swarm</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d swarm join --advertise=10.168.10.198:2375 consul://10.168.10.198:8500/swarm</span><br></pre></td></tr></table></figure>
<p>查看集群信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker -H 0.0.0.0:2376 info</span><br></pre></td></tr></table></figure>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>共享主机目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d -v ~/nginxlogs:/var/<span class="built_in">log</span>/nginx -p 5000:80 -i nginx</span><br></pre></td></tr></table></figure>
<p>持久化</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker create -v /tmp –name cmbdbf dev/file_agent </span><br><span class="line">docker run -t -i –volumes-from cmbdbf dev/file_agent /bin/bash </span><br><span class="line"><span class="built_in">echo</span> “I’m not going anywhere” &gt; /tmp/hi</span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure>
<p>删除noneimage</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker rmi $(docker images | grep <span class="string">&quot;^&lt;none&gt;&quot;</span> | awk <span class="string">&quot;&#123;print <span class="variable">$3</span>&#125;&quot;</span>)</span><br></pre></td></tr></table></figure>
<p><code>这里只是列出常用命令，之后会将docker网络问题与docker-compose管理以例子列出</code></p>
<p><a href="https://www.evernote.com/shard/s646/sh/b37d2247-f265-4ade-85b0-2c02ffbd67d7/07e9e0b60b3c7c501137fe0ea3a6360a">文章来源</a></p>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>linux</tag>
        <tag>容器</tag>
        <tag>分布式</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建以太坊开发环境</title>
    <url>/blockchain/ethereum-dev-env-20170505.html</url>
    <content><![CDATA[<p>以太坊（Ethereum）目标是打造成一个运行智能合约的去中心化平台（Platform for Smart Contract），平台上的应用按程序设定运行，不存在停机、审查、欺诈、第三方人为干预的可能。以太坊平台由 Golang、C++、Python 等多种编程语言实现。<br>当然，为了打造这个平台，以太坊提供了一条公开的区块链，并制定了面向智能合约的一套编程语言。智能合约开发者可以在其上使用官方提供的工具来开发支持以太坊区块链协议的应用（即所谓的 DAPP）。</p>
<a id="more"></a>

<h3 id="源码编译"><a href="#源码编译" class="headerlink" title="源码编译"></a>源码编译</h3><p>当前<a href="https://github.com/ethereum/go-ethereum">以太坊</a>版本是1.6x，下载源码开始搭建环境吧。 </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/ethereum/go-ethereum.git</span><br><span class="line">make geth</span><br></pre></td></tr></table></figure>
<p>编译geth在./build/bin目录下</p>
<p>solc编译器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/ethereum/solidity.git</span><br><span class="line">git submodule update --init --recursive</span><br><span class="line"></span><br><span class="line">./scripts/install_deps.sh</span><br><span class="line"></span><br><span class="line">mkdir build</span><br><span class="line"><span class="built_in">cd</span> build</span><br><span class="line">cmake .. &amp;&amp; make</span><br></pre></td></tr></table></figure>
<p>编译solc在./build/solc目录下</p>
<h3 id="启动以太坊"><a href="#启动以太坊" class="headerlink" title="启动以太坊"></a>启动以太坊</h3><p>创建查看用户</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">geth --datadir data account new</span><br><span class="line">geth --datadir data account list</span><br></pre></td></tr></table></figure>
<p>更新解锁用户</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">geth --datadir data account update</span><br></pre></td></tr></table></figure>
<p>启动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">geth --datadir data console</span><br></pre></td></tr></table></figure>
<h3 id="自能合约"><a href="#自能合约" class="headerlink" title="自能合约"></a>自能合约</h3><p>编写hello world示例</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">contract mortal &#123;</span><br><span class="line">    /* Define variable owner of the <span class="built_in">type</span> address*/</span><br><span class="line">    address owner;</span><br><span class="line"></span><br><span class="line">    /* this <span class="keyword">function</span> is executed at initialization and sets the owner of the contract */</span><br><span class="line">    <span class="keyword">function</span> <span class="function"><span class="title">mortal</span></span>() &#123; owner = msg.sender; &#125;</span><br><span class="line"></span><br><span class="line">    /* Function to recover the funds on the contract */</span><br><span class="line">    <span class="keyword">function</span> <span class="function"><span class="title">kill</span></span>() &#123; <span class="keyword">if</span> (msg.sender == owner) suicide(owner); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract greeter is mortal &#123;</span><br><span class="line">    /* define variable greeting of the <span class="built_in">type</span> string */</span><br><span class="line">    string greeting;</span><br><span class="line">    </span><br><span class="line">    /* this runs when the contract is executed */</span><br><span class="line">    <span class="keyword">function</span> greeter(string _greeting) public &#123;</span><br><span class="line">        greeting = _greeting;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /* main <span class="keyword">function</span> */</span><br><span class="line">    <span class="keyword">function</span> greet() constant returns (string) &#123;</span><br><span class="line">        <span class="built_in">return</span> greeting;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>编译</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">solc --optimize --combined-json abi,bin,interface helloworld.sol</span><br><span class="line"></span><br><span class="line">or </span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;var testOutput=`solc --optimize --combined-json abi,bin,interface helloworld.sol`&quot;</span> &gt; test.js</span><br></pre></td></tr></table></figure>
<p>登录console，解锁用户。使用之前创建用户的密码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">personal.unlockAccount(address, <span class="string">&quot;password&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>未完待续…</p>
]]></content>
      <categories>
        <category>blockchain</category>
      </categories>
      <tags>
        <tag>blockchain</tag>
        <tag>区块链</tag>
        <tag>以太坊</tag>
      </tags>
  </entry>
  <entry>
    <title>Git原理介绍，优雅的使用Git</title>
    <url>/%E5%B7%A5%E5%85%B7/git-principle-20140829.html</url>
    <content><![CDATA[<p>git是软件开发版本控制系统，类似linux文件系统的实现(当然比linux文件系统简单)。</p>
<a id="more"></a>

<h3 id="Git对象"><a href="#Git对象" class="headerlink" title="Git对象"></a>Git对象</h3><p>Git是如何将文件进行存储？如何将相同文件不同提交进行分割?都依赖与Git对象</p>
<ul>
<li>repository(Tree)</li>
<li>Tree对象(多commit)</li>
<li>Commit对象(Blob)</li>
<li>Blob对象(存储)</li>
</ul>
<h3 id="举例说明"><a href="#举例说明" class="headerlink" title="举例说明"></a>举例说明</h3><p><strong>初始化Git</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir gittest</span><br><span class="line"><span class="built_in">cd</span> gittest</span><br><span class="line">git init</span><br></pre></td></tr></table></figure>
<p>查看目录结构<code>tree .git</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">.git</span><br><span class="line">├── branches</span><br><span class="line">├── config</span><br><span class="line">├── description</span><br><span class="line">├── HEAD</span><br><span class="line">├── hooks</span><br><span class="line">│   ├── applypatch-msg.sample</span><br><span class="line">│   ├── commit-msg.sample</span><br><span class="line">│   ├── post-update.sample</span><br><span class="line">│   ├── pre-applypatch.sample</span><br><span class="line">│   ├── pre-commit.sample</span><br><span class="line">│   ├── prepare-commit-msg.sample</span><br><span class="line">│   ├── pre-push.sample</span><br><span class="line">│   ├── pre-rebase.sample</span><br><span class="line">│   └── update.sample</span><br><span class="line">├── info</span><br><span class="line">│   └── exclude</span><br><span class="line">├── objects</span><br><span class="line">│   ├── info</span><br><span class="line">│   └── pack</span><br><span class="line">└── refs</span><br><span class="line">    ├── heads</span><br><span class="line">    └── tags</span><br></pre></td></tr></table></figure>
<ul>
<li>branches - 新版本不在使用</li>
<li>config - Git项目特有的配置</li>
<li>description - GitWeb 程序使用</li>
<li>HEAD - 文件指向当前分支</li>
<li>hooks - 客户端或服务端钩子脚本</li>
<li>info - .gitignore 文件中管理的忽略模式 (ignored patterns) 的全局可执行文件</li>
<li>objects - Git对象存储目录</li>
<li>refs - 目录存储指向数据 (分支) 的提交对象的指针</li>
</ul>
<p><strong>添加文件到Git</strong></p>
<p>添加： <code>echo &#39;version 1&#39; &gt; test.txt</code> <code>git add test.txt</code></p>
<p>查看： <code>find .git/objects -type f</code> 结果如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">.git/objects/83/baae61804e65cc73a7201a7252750c76066a30</span><br></pre></td></tr></table></figure>
<p>查看对象类型： <code>git cat-file -t 83baae61804e65cc73a7201a7252750c76066a30</code> 结果如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">blob</span><br></pre></td></tr></table></figure>
<p>查看对象内容： <code>git cat-file -p 83baae61804e65cc73a7201a7252750c76066a30</code> 结果如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">version 1</span><br></pre></td></tr></table></figure>
<p><strong>提交文件到Git</strong></p>
<p>提交： <code>git commit -a -m &quot;firt commit&quot;</code></p>
<p>查看： <code>find .git/objects -type f</code> 结果如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">.git/objects/83/baae61804e65cc73a7201a7252750c76066a30</span><br><span class="line">.git/objects/d8/329fc1cc938780ffdd9f94e0d364e0ea74f579</span><br><span class="line">.git/objects/6d/c9727a5974bb610f81c22914081d7e6373ae77</span><br></pre></td></tr></table></figure>
<p>objects目录新生成了两个对象，这两个对象类型内容是什么呢？我们来看下</p>
<p>查看类型：<code>git cat-file -t d8329fc1cc938780ffdd9f94e0d364e0ea74f579</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tree</span><br></pre></td></tr></table></figure>
<p>查看内容：<code>git cat-file -p d8329fc1cc938780ffdd9f94e0d364e0ea74f579</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">100644 blob 83baae61804e65cc73a7201a7252750c76066a30	test.txt</span><br></pre></td></tr></table></figure>
<p>查看类型：<code>git cat-file -t 6dc9727a5974bb610f81c22914081d7e6373ae77</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">commit</span><br></pre></td></tr></table></figure>
<p>查看内容：<code>git cat-file -p 6dc9727a5974bb610f81c22914081d7e6373ae77</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tree d8329fc1cc938780ffdd9f94e0d364e0ea74f579</span><br><span class="line">author jerrylou &lt;gunsluo@gmail.com&gt; 1473652081 +0800</span><br><span class="line">committer jerrylou &lt;gunsluo@gmail.com&gt; 1473652081 +0800</span><br><span class="line"></span><br><span class="line">firt commit</span><br></pre></td></tr></table></figure>
<p>综上git存储都是通过blob，commit，tree对象。blob存储文件提交内容，commit存储操作提交信息，tree存储指向blob的指针。</p>
<h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><p>Git repository是很多不同commit的集合，是有向无环图。如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">A---B---C---D---E---F--- master</span><br><span class="line">    \       /   \</span><br><span class="line">    G------H    I---J--- feature</span><br></pre></td></tr></table></figure>
<h3 id="merge和rebase"><a href="#merge和rebase" class="headerlink" title="merge和rebase"></a>merge和rebase</h3><p>新的特性分支feature上有F,G两个commit。我们项将feature上的改动同步到master，可以feature分支merge到master。将得到如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">A---B---C---D--- master</span><br><span class="line">    \       /</span><br><span class="line">    F------G----- feature</span><br></pre></td></tr></table></figure>
<p>我们会发现D节点有两个父节点C和G，经常做merge操作会导致无法得到正确的修改历史。</p>
<p>使用rebase，得到如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">A---B---C---D------ master</span><br><span class="line">            \</span><br><span class="line">            F---G---feature</span><br></pre></td></tr></table></figure>
<p>不用担心修改历史</p>
<h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><p><img src="http://ww4.sinaimg.cn/mw690/0065glrAgw1f7qrk2hl4wj30nt0gugrq.jpg" alt="Alt text" title="git command"></p>
<ul>
<li>git clone - 下载git源码</li>
<li>git pull –rebase origin master - 同步远程master分支到本地</li>
<li>git push origin master - 提交当前分支到远程master分支</li>
<li>git stash [pop] - 换成修改commit</li>
<li>git reset –hard {commit} - 恢复到commit提交点</li>
<li>git reflog - 查看修改log,可用于恢复数据</li>
<li>git commit –amend - 撤销最后一次提交</li>
<li>git checkout {文件名} - 撤销对文件的修改</li>
</ul>
<h3 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h3><p>当做了新的功能准备提交代码时，第一件事同步要合入分支代码(如dev)</p>
<ol>
<li>git pull –rebase origin dev</li>
<li>提示冲突先修改冲突文件保证代码正确</li>
<li>git add 冲突文件</li>
<li>git rebase –contunie</li>
<li>如还有冲突，跳到第二步，直到无冲突</li>
</ol>
<p>长时间不rebase主分支容易发生冲突。</p>
<h3 id="我的-gitconfig配置"><a href="#我的-gitconfig配置" class="headerlink" title="我的.gitconfig配置"></a>我的.gitconfig配置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[<span class="built_in">alias</span>]</span><br><span class="line">	st = status -sb</span><br><span class="line">	br = branch -vv</span><br><span class="line">    ds = diff --staged</span><br><span class="line">    standup = <span class="built_in">log</span> --since <span class="string">&#x27;1 day ago&#x27;</span> --oneline --author sebastian@kusnier.net</span><br><span class="line">    lastweek = <span class="built_in">log</span> --since <span class="string">&#x27;1 week ago&#x27;</span> --oneline</span><br><span class="line">    ci = commit</span><br><span class="line">    amend = commit --amend -C HEAD</span><br><span class="line">    undo = reset --soft HEAD^</span><br><span class="line">    co = checkout</span><br><span class="line">    df = diff</span><br><span class="line">    dc = diff --cached</span><br><span class="line">    lg = <span class="built_in">log</span> -p</span><br><span class="line">    lol = <span class="built_in">log</span> --graph --decorate --pretty=oneline --abbrev-commit</span><br><span class="line">    lola = <span class="built_in">log</span> --graph --decorate --pretty=oneline --abbrev-commit --all</span><br><span class="line">    l = <span class="built_in">log</span> --pretty=oneline -n 20 --graph</span><br><span class="line">    graph = <span class="built_in">log</span> --graph --pretty=format<span class="string">&#x27;:%C(yellow)%h%Cblue%d%Creset %s %C(white) %an, %ar%Creset&#x27;</span></span><br><span class="line">    ls = ls-files</span><br><span class="line">    g  = grep -I</span><br><span class="line">    vd = difftool -y -t gvimdiff</span><br><span class="line">    p = !<span class="string">&quot;git pull; git submodule foreach git pull origin master&quot;</span></span><br><span class="line">    undopush = push -f origin HEAD^:master</span><br><span class="line">    <span class="comment"># Credit an author on the latest commit</span></span><br><span class="line">    credit = <span class="string">&quot;!f() &#123; git commit --amend --author \&quot;<span class="variable">$1</span> &lt;<span class="variable">$2</span>&gt;\&quot; -C HEAD; &#125;; f&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Show files ignored by git:</span></span><br><span class="line">    ign = ls-files -o -i --exclude-standard</span><br><span class="line">[user]</span><br><span class="line">	name = jerrylou</span><br><span class="line">	email = gunsluo@gmail.com</span><br><span class="line">[core]</span><br><span class="line">	editor = /usr/<span class="built_in">local</span>/bin/vim</span><br><span class="line">	excludesfile = /Users/jerrylou/.gitignore_global</span><br><span class="line">    pager = cat</span><br><span class="line">    autocrlf = input</span><br><span class="line">[difftool <span class="string">&quot;Kaleidoscope&quot;</span>]</span><br><span class="line">    cmd = ksdiff --partial-changeset --relative-path \&quot;<span class="variable">$MERGED</span>\&quot; -- \&quot;<span class="variable">$LOCAL</span>\&quot; \&quot;<span class="variable">$REMOTE</span>\&quot;</span><br><span class="line">[diff]</span><br><span class="line">    tool = Kaleidoscope</span><br><span class="line">[difftool]</span><br><span class="line">    prompt = <span class="literal">false</span></span><br><span class="line">[mergetool <span class="string">&quot;Kaleidoscope&quot;</span>]</span><br><span class="line">    cmd = ksdiff --merge --output \&quot;<span class="variable">$MERGED</span>\&quot; --base \&quot;<span class="variable">$BASE</span>\&quot; -- \&quot;<span class="variable">$LOCAL</span>\&quot; --snapshot \&quot;<span class="variable">$REMOTE</span>\&quot; --snapshot</span><br><span class="line">    trustExitCode = <span class="literal">true</span></span><br><span class="line">[mergetool]</span><br><span class="line">    prompt = <span class="literal">false</span></span><br><span class="line">    keepBackup = <span class="literal">true</span></span><br><span class="line">[merge]</span><br><span class="line">    tool = Kaleidoscope</span><br><span class="line">    <span class="built_in">log</span> = <span class="literal">true</span></span><br><span class="line">    summary = <span class="literal">true</span></span><br><span class="line">[difftool <span class="string">&quot;sourcetree&quot;</span>]</span><br><span class="line">	cmd = opendiff \&quot;<span class="variable">$LOCAL</span>\&quot; \&quot;<span class="variable">$REMOTE</span>\&quot;</span><br><span class="line">	path = </span><br><span class="line">[mergetool <span class="string">&quot;sourcetree&quot;</span>]</span><br><span class="line">	cmd = /Applications/SourceTree.app/Contents/Resources/opendiff-w.sh \&quot;<span class="variable">$LOCAL</span>\&quot; \&quot;<span class="variable">$REMOTE</span>\&quot; -ancestor \&quot;<span class="variable">$BASE</span>\&quot; -merge \&quot;<span class="variable">$MERGED</span>\&quot;</span><br><span class="line">	trustExitCode = <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="http://iissnan.com/progit/html/zh/ch9_1.html">Git内部原理</a></li>
</ul>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos7 安装Gitlab CE</title>
    <url>/%E5%B7%A5%E5%85%B7/gitlab-ce-install-20140629.html</url>
    <content><![CDATA[<p>买了阿里云服务器一段时间了，一直想装自己的代码服务器。事先了解gitlab，它类似类似github。官网上查看了安装流程，决定动手搭建自己的代码服务器。</p>
<a id="more"></a>

<h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo yum install curl policycoreutils openssh-server openssh-clients</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> sshd</span><br><span class="line">sudo systemctl start sshd</span><br><span class="line">sudo yum install postfix</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> postfix</span><br><span class="line">sudo systemctl start postfix</span><br><span class="line">sudo firewall-cmd --permanent --add-service=http</span><br><span class="line">sudo systemctl reload firewalld</span><br></pre></td></tr></table></figure>
<h3 id="测试发送邮件"><a href="#测试发送邮件" class="headerlink" title="测试发送邮件"></a>测试发送邮件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Test mail from postfix&quot;</span> | mail -s <span class="string">&quot;Test Postfix&quot;</span> xxx@xxx.com</span><br></pre></td></tr></table></figure>
<h3 id="添加安装源"><a href="#添加安装源" class="headerlink" title="添加安装源"></a>添加安装源</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -sS https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.rpm.sh | sudo bash</span><br></pre></td></tr></table></figure>
<h3 id="更新为国内源"><a href="#更新为国内源" class="headerlink" title="更新为国内源"></a>更新为国内源</h3><p>新建 /etc/yum.repos.d/gitlab-ce.repo，内容为</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[gitlab-ce]</span><br><span class="line">name=gitlab-ce</span><br><span class="line">baseurl=http://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el7</span><br><span class="line">repo_gpgcheck=0</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br><span class="line">gpgkey=https://packages.gitlab.com/gpg.key</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo yum makecache</span><br></pre></td></tr></table></figure>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo yum install gitlab-ce</span><br></pre></td></tr></table></figure>
<h3 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h3><p><code>vim /etc/gitlab/gitlab.rb</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gitlab_rails[<span class="string">&#x27;gitlab_email_from&#x27;</span>] = <span class="string">&#x27;gitlab@example.com&#x27;</span></span><br><span class="line"></span><br><span class="line">external_url <span class="string">&#x27;http://10.128.31.109&#x27;</span></span><br></pre></td></tr></table></figure>
<h3 id="编译启动"><a href="#编译启动" class="headerlink" title="编译启动"></a>编译启动</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo gitlab-ctl reconfigure</span><br></pre></td></tr></table></figure>
<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><ol>
<li><p>在浏览器中访问GitLab出现502错误。<br>原因：内存不足。<br>解决办法：检查系统的虚拟内存是否随机启动了，如果系统无虚拟内存，则增加虚拟内存，再重新启动系统。</p>
</li>
<li><p>8080端口冲突。<br>原因：由于unicorn默认使用的是8080端口。<br>解决办法：打开/etc/gitlab/gitlab.rb,打开# unicorn[‘port’] = 8080 的注释，将8080修改为9090，保存后运行sudo gitlab-ctl reconfigure即可。</p>
</li>
<li><p>GitLab头像无法正常显示<br>原因：gravatar被墙<br>解决办法：编辑 <code>/etc/gitlab/gitlab.rb</code>，将</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#gitlab_rails[&#x27;gravatar_plain_url&#x27;] = &#x27;http://gravatar.duoshuo.com/avatar/%&#123;hash&#125;?s=%&#123;size&#125;&amp;d=identicon&#x27;</span></span><br></pre></td></tr></table></figure>
<p>修改为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gitlab_rails[<span class="string">&#x27;gravatar_plain_url&#x27;</span>] = <span class="string">&#x27;http://gravatar.duoshuo.com/avatar/%&#123;hash&#125;?s=%&#123;size&#125;&amp;d=identicon&#x27;</span></span><br></pre></td></tr></table></figure>
<p>然后在命令行执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo gitlab-ctl reconfigure </span><br><span class="line">sudo gitlab-rake cache:clear RAILS_ENV=production</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>gitlab</tag>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>为自己安装轻量级git代码管理仓库Gogs</title>
    <url>/%E5%B7%A5%E5%85%B7/gogs-install-20170428.html</url>
    <content><![CDATA[<p>Gogs 的目标是打造一个最简单、最快速和最轻松的方式搭建自助 Git 服务。使用 Go 语言开发使得 Gogs 能够通过独立的二进制分发，并且支持 Go 语言支持的 所有平台，包括 Linux、Mac OS X、Windows 以及 ARM 平台。</p>
<a id="more"></a>

<h3 id="环境要求"><a href="#环境要求" class="headerlink" title="环境要求"></a>环境要求</h3><ul>
<li><p>操作系统：<br>ubuntu 16.04 LTS (Xenial Xerus)</p>
</li>
<li><p>数据库：<br>MySQL：版本 &gt;= 5.5.3</p>
</li>
<li><p>git（bash）：<br>服务端和客户端均需版本 &gt;= 1.7.1</p>
</li>
</ul>
<h3 id="源码安装"><a href="#源码安装" class="headerlink" title="源码安装"></a>源码安装</h3><ul>
<li><p>基本依赖<br>Go 语言：版本 &gt;= 1.5(我使用go1.8.1，Go环境设置不再赘述)</p>
</li>
<li><p>下载并编译</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载并安装依赖</span></span><br><span class="line">$ go get -u github.com/gogits/gogs</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建主程序</span></span><br><span class="line">$ <span class="built_in">cd</span> <span class="variable">$GOPATH</span>/src/github.com/gogits/gogs</span><br><span class="line">$ go build</span><br></pre></td></tr></table></figure>
<h3 id="初始化数据库"><a href="#初始化数据库" class="headerlink" title="初始化数据库"></a>初始化数据库</h3></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">DROP DATABASE IF EXISTS gogs;</span><br><span class="line">CREATE DATABASE IF NOT EXISTS gogs CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci;</span><br></pre></td></tr></table></figure>
<h3 id="配置Gogs"><a href="#配置Gogs" class="headerlink" title="配置Gogs"></a>配置Gogs</h3><p>创建目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir -p custom/conf</span><br><span class="line">cp conf/app.ini custom/conf</span><br></pre></td></tr></table></figure>
<p>修改配置 <code>vim custom/conf/app.ini</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[server]</span><br><span class="line">PROTOCOL               = http</span><br><span class="line">DOMAIN                 = yourdomain </span><br><span class="line">ROOT_URL               = http://git.yourdomain/</span><br><span class="line">HTTP_ADDR              = 0.0.0.0</span><br><span class="line">HTTP_PORT              = 3000</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[database]</span><br><span class="line">PASSWD = root</span><br></pre></td></tr></table></figure>
<p><strong>参考</strong><a href="https://gogs.io/docs/advanced/configuration_cheat_sheet">Gogs配置</a></p>
<h3 id="开机启动"><a href="#开机启动" class="headerlink" title="开机启动"></a>开机启动</h3><p>修改 <code>vim scripts/systemd/gogs.service</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Gogs</span><br><span class="line">After=syslog.target</span><br><span class="line">After=network.target</span><br><span class="line">After=mariadb.service mysqld.service postgresql.service memcached.service redis.service</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line"><span class="comment"># Modify these two values and uncomment them if you have</span></span><br><span class="line"><span class="comment"># repos with lots of files and get an HTTP error 500 because</span></span><br><span class="line"><span class="comment"># of that</span></span><br><span class="line"><span class="comment">###</span></span><br><span class="line"><span class="comment">#LimitMEMLOCK=infinity</span></span><br><span class="line"><span class="comment">#LimitNOFILE=65535</span></span><br><span class="line">Type=simple</span><br><span class="line">User=git</span><br><span class="line">Group=git</span><br><span class="line">WorkingDirectory=/home/git/gogs</span><br><span class="line">ExecStart=/home/git/gogs/gogs web</span><br><span class="line">Restart=always</span><br><span class="line">Environment=USER=git HOME=/home/git</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>
<p>根据情况修改运行用户和gogs的下载（启动目录）。</p>
<p>启动Gogs</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> gogs.service</span><br><span class="line"></span><br><span class="line">systemctl start gogs.service</span><br></pre></td></tr></table></figure>
<h3 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h3><p>登录<code>http://git.yourdomain/</code>，现在可以使用自己的git服务了。</p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>gogs</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang代码调试器delve，必先利其器</title>
    <url>/Golang/golang-debugger-delve-20170302.html</url>
    <content><![CDATA[<p>上篇文章使用gdb作为调试器，本文介绍使用delve代码调试器，记录学习笔记。</p>
<a id="more"></a>

<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>要求go1.5及以上版本</p>
<h4 id="brew安装"><a href="#brew安装" class="headerlink" title="brew安装"></a>brew安装</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install go-delve/delve/delve</span><br></pre></td></tr></table></figure>
<h4 id="源码编译"><a href="#源码编译" class="headerlink" title="源码编译"></a>源码编译</h4><p>创建证书步骤参看<a href="https://www.jerrylou.me/Golang/golang-debugger-gdb-20170302.html">《用Golang代码调试器gdb, 了解interface的存储结构》</a>，这里不再赘述。</p>
<p>下载源码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/derekparker/delve.git &amp;&amp; <span class="built_in">cd</span> delve</span><br></pre></td></tr></table></figure>
<p>编译安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">CERT=dlv-cert make install</span><br></pre></td></tr></table></figure>
<p>dlv-cert是创建的证书名</p>
<h3 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h3><p>delve命令和gdb比较类似，先看下delve的命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dlv -h</span><br></pre></td></tr></table></figure>
<p><img src="http://wx3.sinaimg.cn/mw690/0065glrAgy1fd8nkiqqhqj30ql0hjzn4.jpg" alt="Alt text"></p>
<p>以相同的代码作为示例</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Ner <span class="keyword">interface</span> &#123;</span><br><span class="line">	a()</span><br><span class="line">	b(<span class="keyword">int</span>)</span><br><span class="line">	c(<span class="keyword">string</span>) <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> N <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(N)</span> <span class="title">a</span><span class="params">()</span></span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(*N)</span> <span class="title">b</span><span class="params">(<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(*N)</span> <span class="title">c</span><span class="params">(<span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> n N</span><br><span class="line">	<span class="keyword">var</span> ner Ner = &amp;n</span><br><span class="line"></span><br><span class="line">	ner.a()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>编译Go程序的时候无需注意以下两点</p>
<ol>
<li>传递参数-ldflags “-s”，忽略debug的打印信息</li>
<li>传递-gcflags “-N -l” 参数，这样可以忽略Go内部做的一些优化，聚合变量和函数等优化，这样对于GDB调试来说非常困难，所以在编译的时候加入这两个参数避免这些优化。</li>
</ol>
<p>编译示例代码<code>go build main.go</code>，目录下生成main可执行文件</p>
<p><code>dlv exec ./main</code>调试代码或者<code>dlv debug main.go</code>(debug会自己完成编译)<br><img src="http://wx4.sinaimg.cn/mw690/0065glrAgy1fd8nkjgpa8j30i70kx41x.jpg" alt="Alt text"></p>
<p>调试代码<br><img src="http://wx3.sinaimg.cn/mw690/0065glrAgy1fd8nkjz625j30mt0nmjsy.jpg" alt="Alt text"></p>
<h3 id="高级用法"><a href="#高级用法" class="headerlink" title="高级用法"></a>高级用法</h3><p>delve支持调试已经运行的golang程序。</p>
<p>示例代码如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;sync&quot;</span></span><br><span class="line">	<span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func dostuff(wg *sync.WaitGroup, i int) &#123;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;goroutine id %d\n&quot;</span>, i)</span><br><span class="line">	time.Sleep(20 * time.Second)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;goroutine id %d\n&quot;</span>, i)</span><br><span class="line">	wg.Done()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func <span class="function"><span class="title">main</span></span>() &#123;</span><br><span class="line">	var wg sync.WaitGroup</span><br><span class="line">	workers := 10</span><br><span class="line"></span><br><span class="line">	wg.Add(workers)</span><br><span class="line">	<span class="keyword">for</span> i := 0; i &lt; workers; i++ &#123;</span><br><span class="line">		go dostuff(&amp;wg, i)</span><br><span class="line">	&#125;</span><br><span class="line">	wg.Wait()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>代码创建了10个gorouting，main等待所有gorouting执行完成后退出。</p>
<p>先编译示例代码<code>go build main.go</code></p>
<p>启动<code>./main</code>进程，查看进程pid<br><img src="http://wx1.sinaimg.cn/mw690/0065glrAgy1fd8nqdcfoaj30oq02o74h.jpg" alt="Alt text"></p>
<p>delve attach <pid> 调试进程，设置断点<br><img src="http://wx1.sinaimg.cn/mw690/0065glrAgy1fd8nkl0uupj30ij0jyacm.jpg" alt="Alt text"></p>
<p>delve还支持远程调试哦，使用<code>dlv connect ip:port</code>。好了，今天就写到这里了。</p>
<p>总体来说delve比gdb更适合于调试golang。</p>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>golang</tag>
        <tag>debugger</tag>
        <tag>delve</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Golang代码调试器gdb, 了解interface的存储结构</title>
    <url>/Golang/golang-debugger-gdb-20170302.html</url>
    <content><![CDATA[<p>Golang语言的接口实现是隐式声明，目标类只要实现接口定义的所有方法，就被视为实现了接口。接口使用了一个名为itab的结构存储运行期所需的相关类型信息。现在利用gdb调试器来查看结构存储的具体内容。</p>
<a id="more"></a>

<h3 id="调试器gdb"><a href="#调试器gdb" class="headerlink" title="调试器gdb"></a>调试器gdb</h3><p>gdb7.x版本支持golang语言，首先下载gdb并安装就可以进行调试。下面介绍下mac下如何安装gdb并授权。</p>
<h4 id="安装gdb"><a href="#安装gdb" class="headerlink" title="安装gdb"></a>安装gdb</h4><p><code>brew install gdb</code><br><img src="http://wx2.sinaimg.cn/mw690/0065glrAgy1fd8j3gak0mj30ir0eptb0.jpg" alt="Alt text"></p>
<p>mac上安装完成dgb后，dgb默认是没有读取其它进程的权限，需要安装授权证书赋予权限。</p>
<p>打开Keychain Access，创建新证书。没有截取图片的按默认选择下一步。<br><img src="http://wx3.sinaimg.cn/mw690/0065glrAgy1fd8j3gobcqj30h40c4dgq.jpg" alt="Alt text"></p>
<p><img src="http://wx3.sinaimg.cn/mw690/0065glrAgy1fd8j3h25wnj30h40c4q3o.jpg" alt="Alt text"></p>
<p><img src="http://wx4.sinaimg.cn/mw690/0065glrAgy1fd8j3hnj8cj30h40c43ze.jpg" alt="Alt text"></p>
<p>创建证书后，Get info中修改授权<br><img src="http://wx2.sinaimg.cn/mw690/0065glrAgy1fd8j3i7weqj30e90c0q46.jpg" alt="Alt text"></p>
<p>授权gdb，好了现在可以使用gdb调试我们的golang代码了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo killall taskgated</span><br><span class="line">codesign -fs gdb-cert /usr/<span class="built_in">local</span>/bin/gdb</span><br><span class="line">launchctl load /System/Library/LaunchDaemons/com.apple.taskgated.plist</span><br></pre></td></tr></table></figure>
<h3 id="Golang接口的存储结构"><a href="#Golang接口的存储结构" class="headerlink" title="Golang接口的存储结构"></a>Golang接口的存储结构</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> iface <span class="keyword">struct</span> &#123;</span><br><span class="line">    tab *itab               <span class="comment">//类型信息</span></span><br><span class="line">    data unsafe.Pointer     <span class="comment">//实际对象指针</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> itab <span class="keyword">struct</span> &#123;</span><br><span class="line">    inter *interfacetype    <span class="comment">//接口类型</span></span><br><span class="line">    _type *_type            <span class="comment">//实际对象类型</span></span><br><span class="line">    fun   [<span class="number">1</span>]<span class="keyword">uintptr</span>        <span class="comment">//实际对象方法地址</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="接口示例"><a href="#接口示例" class="headerlink" title="接口示例"></a>接口示例</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Ner <span class="keyword">interface</span> &#123;</span><br><span class="line">	a()</span><br><span class="line">	b(<span class="keyword">int</span>)</span><br><span class="line">	c(<span class="keyword">string</span>) <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> N <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(N)</span> <span class="title">a</span><span class="params">()</span></span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(*N)</span> <span class="title">b</span><span class="params">(<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(*N)</span> <span class="title">c</span><span class="params">(<span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> n N</span><br><span class="line">	<span class="keyword">var</span> ner Ner = &amp;n</span><br><span class="line"></span><br><span class="line">	ner.a()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h4><p>编译Go程序的时候需要注意以下几点</p>
<ol>
<li>传递参数-ldflags “-s”，忽略debug的打印信息</li>
<li>传递-gcflags “-N -l” 参数，这样可以忽略Go内部做的一些优化，聚合变量和函数等优化，这样对于GDB调试来说非常困难，所以在编译的时候加入这两个参数避免这些优化。</li>
</ol>
<p>编译示例代码<code>go build -gcflags &quot;-N -l&quot; -ldflags &quot;-s&quot; main.go</code>，目录下生成main可执行文件</p>
<h4 id="gdb调试"><a href="#gdb调试" class="headerlink" title="gdb调试"></a>gdb调试</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gdb main</span><br></pre></td></tr></table></figure>
<p><img src="http://wx2.sinaimg.cn/mw690/0065glrAgy1fd8kfcycw5j30k40h8acg.jpg" alt="Alt text"></p>
<p><img src="http://wx2.sinaimg.cn/mw690/0065glrAgy1fd8kfdhgywj313x0c6n1v.jpg" alt="Alt text"></p>
<p>如图，gdb打印出了接口的结构。你也去试试吧。</p>
<h3 id="关于gdb"><a href="#关于gdb" class="headerlink" title="关于gdb"></a>关于gdb</h3><p>引入官方<a href="https://golang.org/doc/gdb">gdb说明</a></p>
<blockquote>
<p>GDB does not understand Go programs well. The stack management, threading, and runtime contain aspects that differ enough from the execution model GDB expects that they can confuse the debugger, even when the program is compiled with gccgo. As a consequence, although GDB can be useful in some situations, it is not a reliable debugger for Go programs, particularly heavily concurrent ones. Moreover, it is not a priority for the Go project to address these issues, which are difficult. In short, the instructions below should be taken only as a guide to how to use GDB when it works, not as a guarantee of success.<br>In time, a more Go-centric debugging architecture may be required.</p>
</blockquote>
<p>golang官网说gdb能解决大部情况的调试，在对大并发的情况有可能达不到期望。下一篇文章将介绍<a href="https://github.com/derekparker/delve">delve</a>调试器</p>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>golang</tag>
        <tag>mac</tag>
        <tag>debugger</tag>
        <tag>gdb</tag>
      </tags>
  </entry>
  <entry>
    <title>详解Golang中defer, 注意使用时的坑</title>
    <url>/Golang/golang-defer-explain-20170324.html</url>
    <content><![CDATA[<p>defer和go一样都是Go语言提供的关键字。defer用于资源的释放，会在函数返回之前进行调用。一般采用如下模式：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">f,err := os.Open(filename)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> f.Close()</span><br></pre></td></tr></table></figure>
<p>如果有多个defer表达式，调用顺序类似于栈，越后面的defer表达式越先被调用。<br>不过如果对defer的了解不够深入，使用起来可能会踩到一些坑，尤其是跟带命名的返回参数一起使用时。在讲解defer的实现之前先看一看使用defer容易遇到的问题。</p>
<a id="more"></a>

<p>先来看看几个例子。例1：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">()</span> <span class="params">(result <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        result++</span><br><span class="line">    &#125;()</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>例2：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">()</span> <span class="params">(r <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    t := <span class="number">5</span></span><br><span class="line">    <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        t = t + <span class="number">5</span></span><br><span class="line">    &#125;()</span><br><span class="line">    <span class="keyword">return</span> t</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>例3：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">()</span> <span class="params">(r <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">(r <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">        r = r + <span class="number">5</span></span><br><span class="line">    &#125;(r)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>请读者先不要运行代码，在心里跑一遍结果，然后去验证。<br>例1的正确答案不是0，例2的正确答案不是10，如果例3的正确答案不是6……</p>
<p>defer是在return之前执行的。这个在 官方文档中是明确说明了的。要使用defer时不踩坑，最重要的一点就是要明白，return xxx这一条语句并不是一条原子指令!</p>
<p>函数返回的过程是这样的：先给返回值赋值，然后调用defer表达式，最后才是返回到调用函数中。<br>defer表达式可能会在设置函数返回值之后，在返回到调用函数之前，修改返回值，使最终的函数返回值与你想象的不一致。其实使用defer时，用一个简单的转换规则改写一下，就不会迷糊了。改写规则是将return语句拆成两句写，return xxx会被改写成:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">返回值 = xxx</span><br><span class="line">调用<span class="keyword">defer</span>函数</span><br><span class="line">空的<span class="keyword">return</span></span><br></pre></td></tr></table></figure>
<p>先看例1，它可以改写成这样：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">()</span> <span class="params">(result <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    result = <span class="number">0</span>  <span class="comment">//return语句不是一条原子调用，return xxx其实是赋值＋ret指令</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;    <span class="comment">//defer被插入到return之前执行，也就是赋返回值和ret指令之间</span></span><br><span class="line">        result++</span><br><span class="line">    &#125;()</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>所以这个返回值是1。</p>
<p>再看例2，它可以改写成这样：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">()</span> <span class="params">(r <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    t := <span class="number">5</span></span><br><span class="line">    r = t       <span class="comment">//赋值指令</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;    <span class="comment">//defer被插入到赋值与返回之间执行，这个例子中返回值r没被修改过</span></span><br><span class="line">        t = t + <span class="number">5</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>      <span class="comment">//空的return指令</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>所以这个的结果是5。<br>最后看例3，它改写后变成：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">()</span> <span class="params">(r <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    r = <span class="number">1</span> <span class="comment">//给返回值赋值</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span><span class="params">(r <span class="keyword">int</span>)</span></span> &#123; <span class="comment">//这里改的r是传值传进去的r，不会改变要返回的那个r值</span></span><br><span class="line">        r = r + <span class="number">5</span></span><br><span class="line">    &#125;(r)</span><br><span class="line">    <span class="keyword">return</span>      <span class="comment">//空的return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>所以这个例子的结果是1。<br>defer确实是在return之前调用的。但表现形式上却可能不像。本质原因是return xxx语句并不是一条原子指令，defer被插入到了赋值 与 ret之间，因此可能有机会改变最终的返回值。</p>
<p>defer关键字的实现跟go关键字很类似,不同的是它调用的是runtime.deferproc而不是runtime.newproc。 在defer出现的地方,插入了指令call runtime.deferproc,然后在函数返回之前的地方,插入指令call runtime.deferreturn。 </p>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>golang</tag>
        <tag>linux</tag>
        <tag>defer</tag>
      </tags>
  </entry>
  <entry>
    <title>适配java fastjson包解析Map的Key类型int的json串</title>
    <url>/Golang/golang-ffjson-for-int-key-20170309.html</url>
    <content><![CDATA[<p>首先说明json是不支持<code>&#123;&quot;Bar&quot;:&quot;test&quot;,&quot;M&quot;:&#123;1:&quot;a&quot;,2:&quot;b&quot;&#125;&#125;</code>key是int的json字符串，官方<code>encoding/json</code>包也不解析这类json串。为什么还要解析这样的josn串呢。java的fastjson对Map&lt;Int, String&gt;解析生产<code>1:&quot;a&quot;,2:&quot;b&quot;</code>的非标准json串。接下来就来实现解析这类非标准的json串吧。</p>
<a id="more"></a>

<h3 id="json接口"><a href="#json接口" class="headerlink" title="json接口"></a>json接口</h3><p><code>encoding/json</code>包中定义了<code>json.Unmarshaler</code>与<code>json.Marshaler</code>接口来解析json。对结构体实现这两个接口，一切都搞定了。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Unmarshaler <span class="keyword">interface</span> &#123;</span><br><span class="line">	UnmarshalJSON([]<span class="keyword">byte</span>) error</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Marshaler <span class="keyword">interface</span> &#123;</span><br><span class="line">	MarshalJSON() ([]<span class="keyword">byte</span>, error)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="接口实现"><a href="#接口实现" class="headerlink" title="接口实现"></a>接口实现</h3><p>我使用Golang ffjson第三方包，自己没有去实现此功能。这里说下思路，UnmarshalJSON接口实现中step解析key没有<code>&quot;</code>判断是否map[int]string类型，否则返回错误。</p>
<h3 id="使用ffjosn"><a href="#使用ffjosn" class="headerlink" title="使用ffjosn"></a>使用ffjosn</h3><p>先给出示例代码</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> m</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Foo <span class="keyword">struct</span> &#123;</span><br><span class="line">	Bar <span class="keyword">string</span></span><br><span class="line">	M   <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;encoding/json&quot;</span></span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="string">&quot;github.com/gunsluo/go-example/ffjson/m&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	buf := []<span class="keyword">byte</span>(<span class="string">`&#123;&quot;Bar&quot;:&quot;test&quot;,&quot;M&quot;:&#123;1:&quot;a&quot;,2:&quot;b&quot;&#125;&#125;`</span>)</span><br><span class="line">	nf := <span class="built_in">new</span>(m.Foo)</span><br><span class="line">	err := json.Unmarshal(buf, nf)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(err)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	fmt.Println(<span class="string">&quot;--&gt;&quot;</span>, nf)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用json包，报错<code>panic: invalid character &#39;1&#39; looking for beginning of object key string</code></p>
<p>将json换成ffjson</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="string">&quot;github.com/gunsluo/go-example/ffjson/m&quot;</span></span><br><span class="line">	<span class="string">&quot;github.com/pquerna/ffjson/ffjson&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	buf := []<span class="keyword">byte</span>(<span class="string">`&#123;&quot;Bar&quot;:&quot;test&quot;,&quot;M&quot;:&#123;1:&quot;a&quot;,2:&quot;b&quot;&#125;&#125;`</span>)</span><br><span class="line">	nf := <span class="built_in">new</span>(m.Foo)</span><br><span class="line">	err := ffjson.Unmarshal(buf, nf)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(err)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	fmt.Println(<span class="string">&quot;--&gt;&quot;</span>, nf)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>直接执行代码会报相同的错误，ffjson检查到Foo没有实现<code>ffjson.unmarshalFaster</code>或重写<code>json.Unmarshaler</code>会使用json来代替解析。</p>
<p>需要执行命令(<code>go get -u github.com/pquerna/ffjson</code> ffjson后会安装到GOPATH/bin目录下)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ffjson foo.go</span><br></pre></td></tr></table></figure>
<p>生成foo_ffjson.go文件，接着查看下该文件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">func (mj *Foo) MarshalJSON() ([]byte, error) &#123;</span><br><span class="line">	var buf fflib.Buffer</span><br><span class="line">	<span class="keyword">if</span> mj == nil &#123;</span><br><span class="line">		buf.WriteString(<span class="string">&quot;null&quot;</span>)</span><br><span class="line">		<span class="built_in">return</span> buf.Bytes(), nil</span><br><span class="line">	&#125;</span><br><span class="line">	err := mj.MarshalJSONBuf(&amp;buf)</span><br><span class="line">	<span class="keyword">if</span> err != nil &#123;</span><br><span class="line">		<span class="built_in">return</span> nil, err</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">return</span> buf.Bytes(), nil</span><br><span class="line">&#125;</span><br><span class="line">func (mj *Foo) MarshalJSONBuf(buf fflib.EncodingBuffer) error &#123;</span><br><span class="line">	<span class="keyword">if</span> mj == nil &#123;</span><br><span class="line">		buf.WriteString(<span class="string">&quot;null&quot;</span>)</span><br><span class="line">		<span class="built_in">return</span> nil</span><br><span class="line">	&#125;</span><br><span class="line">	var err error</span><br><span class="line">	var obj []byte</span><br><span class="line">	_ = obj</span><br><span class="line">	_ = err</span><br><span class="line">	buf.WriteString(`&#123;<span class="string">&quot;Bar&quot;</span>:`)</span><br><span class="line">	fflib.WriteJsonString(buf, string(mj.Bar))</span><br><span class="line">	/* Falling back. <span class="built_in">type</span>=map[int]string kind=map */</span><br><span class="line">	buf.WriteString(`,<span class="string">&quot;M&quot;</span>:`)</span><br><span class="line">	err = buf.Encode(mj.M)</span><br><span class="line">	<span class="keyword">if</span> err != nil &#123;</span><br><span class="line">		<span class="built_in">return</span> err</span><br><span class="line">	&#125;</span><br><span class="line">	buf.WriteByte(<span class="string">&#x27;&#125;&#x27;</span>)</span><br><span class="line">	<span class="built_in">return</span> nil</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面截取了foo_ffjson.go的部分内容，它重写了MarshalJSON和MarshalJSONBuf方法。</p>
<p>最后执行代码，解析成功。</p>
<p>说明：非标准的json串是不提倡的，这里给出了其它系统或语言出现这种情况的处理方法。</p>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>golang</tag>
        <tag>json</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang学习笔记, 基础语法篇</title>
    <url>/Golang/golang-learning-note-20141210.html</url>
    <content><![CDATA[<p>Go 是一个开源的编程语言，它能让构造简单、可靠且高效的软件变得容易。</p>
<p>Go是从2007年末由Robert Griesemer, Rob Pike, Ken Thompson主持开发，后来还加入了Ian Lance Taylor, Russ Cox等人，并最终于2009年11月开源，在2012年早些时候发布了Go 1稳定版本。现在Go的开发已经是完全开放的，并且拥有一个活跃的社区。</p>
<a id="more"></a>

<h3 id="源码笔记"><a href="#源码笔记" class="headerlink" title="源码笔记"></a>源码笔记</h3><p>源码<a href="https://github.com/gunsluo/learning-note-go">github-Jerrylou</a></p>
<h3 id="推荐书籍"><a href="#推荐书籍" class="headerlink" title="推荐书籍"></a>推荐书籍</h3><ul>
<li><a href="https://github.com/gunsluo/Learning-Go-zh-cn">https://github.com/gunsluo/Learning-Go-zh-cn</a></li>
<li><a href="https://www.gitbook.com/book/bingohuang/effective-go-zh-en/details">https://www.gitbook.com/book/bingohuang/effective-go-zh-en/details</a></li>
</ul>
<h3 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h3><ol>
<li><p>并行<br>Go 让函数很容易成为非常轻量的线程。这些线程在Go 中被叫做goroutines；</p>
</li>
<li><p>Channel<br>这些goroutines 之间的通讯由channel完成；</p>
</li>
<li><p>低依赖<br>可直接编译成机器码，不依赖其他库，glibc的版本有一定要求，部署就是扔一个文件上去就完成</p>
</li>
<li><p>安全<br>当转换一个类型到另一个类型的时候需要显式的转换并遵循严格的规则。Go 有<br>垃圾收集，在Go 中无须free()，语言会处理这一切；</p>
</li>
<li><p>标准格式化<br>Go 程序可以被格式化为程序员希望的（几乎）任何形式，但是官方格式是存在<br>的。标准也非常简单：gofmt 的输出就是官方认可的格式；</p>
</li>
<li><p>编码统一<br>任何地方都是UTF-8 的，包括字符串以及程序代码。</p>
</li>
<li><p>开源<br>Go 的许可证是完全开源的，参阅Go 发布的源码中的LICENSE 文件；</p>
</li>
<li><p>静态语言<br>编译很快，执行也很快。编译时间用秒计算；动态语言，缺少编译过程，低级错误频出;<br>高效率（相对于其它静态语言C/C++的问题）</p>
</li>
</ol>
<ul>
<li>开发效率低，对开发者要求高</li>
<li>libc只向后兼容，运维难度偏大</li>
</ul>
<ol start="9">
<li><p>跨平台<br>windows linux osx</p>
</li>
<li><p>语法简单</p>
</li>
</ol>
<h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul>
<li>Go的import包不支持版本，有时候升级容易导致项目不可运行，所以需要自己控制相应的版本信息</li>
<li>Go的goroutine一旦启动之后，不同的goroutine之间切换不是受程序控制，runtime调度的时候，需要严谨的逻辑，不然goroutine休眠</li>
<li>无异常处理机制</li>
</ul>
<h3 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h3><ul>
<li><a href="https://benchmarksgame.alioth.debian.org/u64q/go.html">https://benchmarksgame.alioth.debian.org/u64q/go.html</a></li>
<li><a href="http://mrcook.uk/golang-vs-java-performance">http://mrcook.uk/golang-vs-java-performance</a></li>
</ul>
<h3 id="规范"><a href="#规范" class="headerlink" title="规范"></a>规范</h3><ol>
<li><p>gofmt<br>大部分的格式问题可以通过gofmt解决，gofmt自动格式化代码，保证所有的go代码一致的格式。正常情况下，采用Sublime编写go代码时，插件GoSublilme已经调用gofmt对代码实现了格式化。<br>命名应该采用有意义的字符，尽量做到见名识意。</p>
</li>
<li><p>包名<br>包名统一采用小写单词，不得使用下划线或者混合大小写。</p>
</li>
<li><p>接口名<br>接口名统一以大写字母 “I” 开头，后续采用驼峰结构。<br>官方 - 单个函数的接口名以”er”作为后缀，如Reader,Writer<br>接口的实现则去掉“er”</p>
</li>
<li><p>结构体名<br>结构体名统一采用驼峰命名结构，不得出现下划线，结合是否可导出确定首字母大小写。</p>
</li>
<li><p>常量<br>常量统一采用大写字母，单词之间使用下划线进行分隔。如果是包可见的常量，可在其名字前加上 “k_” 作为前缀。可导出常量与不可导出常量应该分开声明，不得出现在同一常量声明块内。</p>
</li>
<li><p>变量 全局变量<br>采用驼峰结构命名，结合是否可导出确定首字母大小写，不得出现下划线。可导出变量与不可导出变量应该分开声明，不得出现在同一变量声明块内。</p>
</li>
<li><p>形参<br>采用驼峰结构命名，首字母必须小写，不得出现下划线。</p>
</li>
<li><p>局部变量<br>采用驼峰结构命名，首字母必须小写，不得出现下线线。</p>
</li>
<li><p>函数（方法 ）<br>采用驼峰结构命名，结合是否可导出确定首字母大小写，不得出现下划线；<br>返回值必须命名，采用驼峰结构命名，首字母必须小写，不得出现下划线；<br>方法的接收者统一命名 this，接收者类型统一采用指针，特殊情况除外；<br>如果接收者是 map, slice 或者 chan，则不要用指针传递；</p>
</li>
</ol>
<h3 id="Goroutine"><a href="#Goroutine" class="headerlink" title="Goroutine"></a>Goroutine</h3><p>golang容许你创建成千上万的goroutine，和原生系统级线程不同，goroutine的调度并不是由系统内核来完成，而是golang自己的sched调度系统来完成。golang的sched调度系统采用比较著名的work-steel算法，大家都知道该算法里最核心的一个数据结构就是一个任务队列，如何保证高并发下该队列的正确性是该算法的重点，比较熟悉java的同学应该知道，大师doug lea威廉叔叔的fork-join并发框架采用一个64位 volatile long字段来保证队列的高并发不加锁的实现</p>
<ul>
<li><a href="http://morsmachine.dk/go-scheduler">http://morsmachine.dk/go-scheduler</a></li>
</ul>
<h3 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h3><ul>
<li>beego</li>
<li>gin</li>
<li>echo</li>
<li>martini</li>
<li>revel</li>
</ul>
<h3 id="Ide"><a href="#Ide" class="headerlink" title="Ide"></a>Ide</h3><ul>
<li>sublime text 3</li>
<li>Visual Studio Code</li>
<li>idea</li>
<li>vim</li>
</ul>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>golang</tag>
        <tag>linux</tag>
        <tag>goroutine</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang中类型变量在内存中的布局</title>
    <url>/Golang/golang-types-in-memroy-20170314.html</url>
    <content><![CDATA[<p>了解Golang中的各种类型变量在内存中的布局，有利于帮助我们加深理解。另一种更直接的方式是阅读源码，之后阅读<code>rumtime</code>包深入去了解Golang的运行机制。</p>
<a id="more"></a>

<h3 id="基础类型"><a href="#基础类型" class="headerlink" title="基础类型"></a>基础类型</h3><p><img src="http://wx2.sinaimg.cn/mw690/0065glrAgy1fegtvddk8hj30ge08mweu.jpg" alt="Alt text"></p>
<p>变量i类型int，在内存中是一个32位字长。</p>
<p>变量j类型int32，做了精确的转换。i和j相同内存布局，但类型不同。</p>
<p>变量f类型float，使用32位浮点型值表示。与int32的内部实现不同。</p>
<p>变量bytes类型[5]byte，一个由5个字节组成数组。内存表示是连起来的5个字节。<br>primes是4个int的数组。</p>
<h3 id="结构体与指针"><a href="#结构体与指针" class="headerlink" title="结构体与指针"></a>结构体与指针</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Point <span class="keyword">struct</span> &#123; X, Y <span class="keyword">int</span> &#125;</span><br></pre></td></tr></table></figure>
<p><img src="http://wx2.sinaimg.cn/mw690/0065glrAgy1fegtvhqrrdj30eg04agln.jpg" alt="Alt text"><br>Point{10,20} 表示一个已初始化的Point类型。对它进行取地址表示一个指向刚刚分配和初始化的Point类型的指针。前者在内存中是两个值，而后者是一个指向两个值的指针。结构体的域在内存中是紧挨着排列的。</p>
<h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p><img src="http://wx4.sinaimg.cn/mw690/0065glrAgy1fegtvkyg1wj30cg04mgln.jpg" alt="Alt text"></p>
<p>字符串在Go语言内存模型中用一个2字长的数据结构表示。它包含一个指向字符串存储数据的指针和一个长度数据。因为string类型是不可变的，对于多字符串共享同一个存储数据是安全的。切分操作 str[i:j] 会得到一个新的2字长结构，一个可能不同的但仍指向同一个字节序列(即上文说的存储数据)的指针和长度数据。这意味着字符串切分可以在不涉及内存分配或复制操作。这使得字符串切分的效率等同于传递下标。（说句题外话，在Java和其他语言里有一个有名的“疑难杂症”：在你分割字符串并保存时，对于源字符串的引用在内存中仍然保存着完整的原始字符串–即使只有一小部分仍被需要，Go也有这个“毛病”。另一方面，我们努力但又失败了的是，让字符串分割操作变得昂贵–包含一次分配和一次复制。在大多数程序中都避免了这么做。）</p>
<h3 id="切片Slice"><a href="#切片Slice" class="headerlink" title="切片Slice"></a>切片Slice</h3><p>一个slice是一个数组某个部分的引用。在内存中，它是一个包含3个域的结构体：指向slice中第一个元素的指针，slice的长度，以及slice的容量。长度是下标操作的上界，如x[i]中i必须小于长度。容量是分割操作的上界，如x[i:j]中j不能大于容量。</p>
<p><img src="http://wx4.sinaimg.cn/mw690/0065glrAgy1fegtvkyg1wj30cg04mgln.jpg" alt="Alt text"><br>数组的slice并不会实际复制一份数据，它只是创建一个新的数据结构，包含了另外的一个指针，一个长度和一个容量数据。如同分割一个字符串，分割数组也不涉及复制操作：它只是新建了一个结构来放置一个不同的指针，长度和容量。在例子中，对 []int{2,3,5,7,11} 求值操作会创建一个包含五个值的数组，并设置x的属性来描述这个数组。分割表达式 x[1:3] 并不分配更多的数据：它只是写了一个新的slice结构的属性来引用相同的存储数据。在例子中，长度为2–只有y[0]和y[1]是有效的索引，但是容量为4–y[0:4]是一个有效的分割表达式。<br>由于slice是不同于指针的多字长结构，分割操作并不需要分配内存，甚至没有通常被保存在堆中的slice头部。这种表示方法使slice操作和在C中传递指针、长度对一样廉价。Go语言最初使用一个指向以上结构的指针来表示slice，但是这样做意味着每个slice操作都会分配一块新的内存对象。即使使用了快速的分配器，还是给垃圾收集器制造了很多没有必要的工作。移除间接引用及分配操作可以让slice足够廉价，以避免传递显式索引。</p>
<h3 id="make和new"><a href="#make和new" class="headerlink" title="make和new"></a>make和new</h3><p>Go有两个数据结构创建函数：new和make。两者的区别在学习Go语言的初期是一个常见的混淆点。基本的区别是 new(T) 返回一个 *T ，返回的这个指针可以被隐式地消除引用（图中的黑色箭头）。而 make(T, args) 返回一个普通的T。通常情况下，T内部有一些隐式的指针（图中的灰色箭头）。一句话，new返回一个指向已清零内存的指针，而make返回一个复杂的结构。</p>
<p><img src="http://wx3.sinaimg.cn/mw690/0065glrAgy1fegtvr8zzgj30j20higme.jpg" alt="Alt text"></p>
<h3 id="零值与nil的语义"><a href="#零值与nil的语义" class="headerlink" title="零值与nil的语义"></a>零值与nil的语义</h3><p>按照Go语言规范，任何类型在未初始化时都对应一个零值：布尔类型是false，整型是0，字符串是””，而指针，函数，interface，slice，channel和map的零值都是nil。</p>
<p>string的空值是””，它是不能跟nil比较的。即使是空的string，它的大小也是两个机器字长的。slice也类似，它的空值并不是一个空指针，而是结构体中的指针域为空，空的slice的大小也是三个机器字长的。</p>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>golang</tag>
        <tag>type</tag>
        <tag>内存模型</tag>
      </tags>
  </entry>
  <entry>
    <title>开启GPG对提交Commit签名</title>
    <url>/%E5%B7%A5%E5%85%B7/gpg-for-git-20200720.html</url>
    <content><![CDATA[<p>GPG全名GnuPG，是一个加密软件，用于加密、签名通信内容及管理非对称密码学的密钥。它有很多用途，今天要说的是使用GPG为git提交进行签名，防止他人冒名提交。</p>
<a id="more"></a>

<p>目前Github和Gitlab都支持GPG，下面是我Github添加的签名。让我们开始操练起来吧！<br><img src="/images/material/gpg1.jpg"></p>
<h3 id="安装GPG"><a href="#安装GPG" class="headerlink" title="安装GPG"></a>安装GPG</h3><p><a href="https://www.gnupg.org/download/">官网</a>下载安装比较繁琐，建议使用brew进行安装（MacOS系统）。 </p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">$ brew install gpg</span><br><span class="line"></span><br><span class="line">$ gpg --version</span><br><span class="line">gpg (GnuPG) <span class="number">2.2</span><span class="number">.21</span></span><br><span class="line">libgcrypt <span class="number">1.8</span><span class="number">.6</span></span><br><span class="line">Copyright (C) <span class="number">2020</span> Free Software Foundation, Inc.</span><br><span class="line">License GPLv3+: GNU GPL version <span class="number">3</span> or later &lt;<span class="attr">https:</span><span class="comment">//gnu.org/licenses/gpl.html&gt;</span></span><br><span class="line">This is free <span class="attr">software:</span> you are free to change and redistribute it.</span><br><span class="line">There is NO WARRANTY, to the extent permitted by law.</span><br><span class="line"></span><br><span class="line"><span class="attr">Home:</span> <span class="regexp">/Users/</span>luoji/.gnupg</span><br><span class="line">Supported <span class="attr">algorithms:</span></span><br><span class="line"><span class="attr">Pubkey:</span> RSA, ELG, DSA, ECDH, ECDSA, EDDSA</span><br><span class="line"><span class="attr">Cipher:</span> IDEA, <span class="number">3</span>DES, CAST5, BLOWFISH, AES, AES192, AES256, TWOFISH,</span><br><span class="line">        CAMELLIA128, CAMELLIA192, CAMELLIA256</span><br><span class="line"><span class="attr">Hash:</span> SHA1, RIPEMD160, SHA256, SHA384, SHA512, SHA224</span><br><span class="line"><span class="attr">Compression:</span> Uncompressed, ZIP, ZLIB, BZIP2</span><br></pre></td></tr></table></figure>
<h3 id="生成密钥"><a href="#生成密钥" class="headerlink" title="生成密钥"></a>生成密钥</h3><ol>
<li>生成GPG密钥对</li>
</ol>
<p>选择RSA 输入Enter，下一步输入密钥长度，这里只是4096。接着选择密钥过期时间，最后输入你的电子邮件。</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line">$ gpg --full-generate-key</span><br><span class="line">gpg (GnuPG) 2.2.21; Copyright (C) 2020 Free Software Foundation, Inc.</span><br><span class="line">This is free software: you are free to change and redistribute it.</span><br><span class="line">There is NO WARRANTY, to the extent permitted by law.</span><br><span class="line"></span><br><span class="line">Please <span class="keyword">select</span> what kind of <span class="keyword">key</span> you want:</span><br><span class="line">   (<span class="number">1</span>) RSA <span class="keyword">and</span> RSA (default)</span><br><span class="line">   (<span class="number">2</span>) DSA <span class="keyword">and</span> Elgamal</span><br><span class="line">   (<span class="number">3</span>) DSA (<span class="built_in">sign</span> only)</span><br><span class="line">   (<span class="number">4</span>) RSA (<span class="built_in">sign</span> only)</span><br><span class="line">  (<span class="number">14</span>) Existing <span class="keyword">key</span> <span class="keyword">from</span> card</span><br><span class="line">Your selection?</span><br><span class="line">RSA <span class="keyword">keys</span> may be <span class="keyword">between</span> <span class="number">1024</span> <span class="keyword">and</span> <span class="number">4096</span> bits long.</span><br><span class="line">What keysize <span class="keyword">do</span> you want? (<span class="number">2048</span>) <span class="number">4096</span></span><br><span class="line">Requested keysize <span class="keyword">is</span> <span class="number">4096</span> bits</span><br><span class="line">Please specify how long the <span class="keyword">key</span> should be valid.</span><br><span class="line">         <span class="number">0</span> = <span class="keyword">key</span> does <span class="keyword">not</span> expire</span><br><span class="line">      &lt;n&gt;  = <span class="keyword">key</span> expires <span class="keyword">in</span> n days</span><br><span class="line">      &lt;n&gt;w = <span class="keyword">key</span> expires <span class="keyword">in</span> n weeks</span><br><span class="line">      &lt;n&gt;m = <span class="keyword">key</span> expires <span class="keyword">in</span> n months</span><br><span class="line">      &lt;n&gt;y = <span class="keyword">key</span> expires <span class="keyword">in</span> n years</span><br><span class="line"><span class="keyword">Key</span> <span class="keyword">is</span> valid <span class="keyword">for</span>? (<span class="number">0</span>) <span class="number">0</span></span><br><span class="line"><span class="keyword">Key</span> does <span class="keyword">not</span> expire at <span class="keyword">all</span></span><br><span class="line"><span class="keyword">Is</span> this correct? (y/N) y</span><br><span class="line"></span><br><span class="line">GnuPG needs <span class="keyword">to</span> construct a <span class="keyword">user</span> ID <span class="keyword">to</span> identify your <span class="keyword">key</span>.</span><br><span class="line"></span><br><span class="line">Real name: luoji</span><br><span class="line">Email address: luoji@example.com</span><br><span class="line">Comment:</span><br><span class="line">You selected this <span class="keyword">USER</span>-ID:</span><br><span class="line">    <span class="string">&quot;luoji &lt;luoji@example.com&gt;&quot;</span></span><br><span class="line"></span><br><span class="line">Change (N)ame, (C)omment, (<span class="built_in">E</span>)mail <span class="keyword">or</span> (O)kay/(Q)uit?</span><br></pre></td></tr></table></figure>
<p>输入密码后，最终一个关于<a href="mailto:&#108;&#117;&#x6f;&#106;&#105;&#x40;&#x65;&#x78;&#97;&#109;&#x70;&#x6c;&#101;&#x2e;&#x63;&#111;&#109;">&#108;&#117;&#x6f;&#106;&#105;&#x40;&#x65;&#x78;&#97;&#109;&#x70;&#x6c;&#101;&#x2e;&#x63;&#111;&#109;</a>的密钥对</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">We need <span class="keyword">to</span> generate a lot <span class="keyword">of</span> random bytes. It <span class="keyword">is</span> a good idea <span class="keyword">to</span> <span class="keyword">perform</span></span><br><span class="line"><span class="keyword">some</span> other action (<span class="keyword">type</span> <span class="keyword">on</span> the keyboard, <span class="keyword">move</span> the mouse, utilize the</span><br><span class="line">disks) during the prime generation; this gives the random number</span><br><span class="line">generator a better chance <span class="keyword">to</span> gain enough entropy.</span><br><span class="line">We need <span class="keyword">to</span> generate a lot <span class="keyword">of</span> random bytes. It <span class="keyword">is</span> a good idea <span class="keyword">to</span> <span class="keyword">perform</span></span><br><span class="line"><span class="keyword">some</span> other action (<span class="keyword">type</span> <span class="keyword">on</span> the keyboard, <span class="keyword">move</span> the mouse, utilize the</span><br><span class="line">disks) during the prime generation; this gives the random number</span><br><span class="line">generator a better chance <span class="keyword">to</span> gain enough entropy.</span><br><span class="line">gpg: key A1A16F22BC02D78C marked <span class="keyword">as</span> ultimately <span class="keyword">trusted</span></span><br><span class="line">gpg: revocation certificate stored <span class="keyword">as</span> <span class="string">&#x27;/Users/luoji/.gnupg/openpgp-revocs.d/BCC2217487CD7D65C124967BA1A16F22BC02D78C.rev&#x27;</span></span><br><span class="line"><span class="built_in">public</span> <span class="keyword">and</span> secret key created <span class="keyword">and</span> signed.</span><br><span class="line"></span><br><span class="line">pub   rsa4096 <span class="number">2021</span><span class="number">-01</span><span class="number">-06</span> [SC]</span><br><span class="line">      BCC2217487CD7D65C124967BA1A16F22BC02D78C</span><br><span class="line">uid                      luoji &lt;luoji@example.com&gt;</span><br><span class="line">sub   rsa4096 <span class="number">2021</span><span class="number">-01</span><span class="number">-06</span> [E]</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>查看所有密钥对, GPG密钥ID是：<code>A1A16F22BC02D78C</code><figure class="highlight subunit"><table><tr><td class="code"><pre><span class="line">$ gpg --list-secret-keys --keyid-format LONG</span><br><span class="line">sec   rsa4096/A1A16F22BC02D78C 2021<span class="string">-01</span><span class="string">-06</span> [SC]</span><br><span class="line">      BCC2217487CD7D65C124967BA1A16F22BC02D78C</span><br><span class="line">uid                 [ultimate] luoji &lt;luoji@example.com&gt;</span><br><span class="line">ssb   rsa4096/D5473502EE9CEE25 2021<span class="string">-01</span><span class="string">-06</span> [E]</span><br></pre></td></tr></table></figure></li>
<li>使用GPG密钥ID是<code>A1A16F22BC02D78C</code> 导出密钥<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">$ gpg --armor --export A1A16F22BC02D78C</span><br><span class="line">-----BEGIN PGP PUBLIC KEY BLOCK-----</span><br><span class="line"></span><br><span class="line">mQINBF<span class="regexp">/11pABEAClSHDndvl8yUVzhVDigc1lgyeiW2N4ayqM/</span>/QayC+a6V2dAHJN</span><br><span class="line">u+HOsxzc<span class="regexp">/LyczWRTFe5ovGGNiDZ4/</span>zClZj1YqRGfZb9HSswmAuOTL/<span class="number">6</span>tkgfyuuP+</span><br><span class="line">ICn9LNuSUK3ZxaEEPfh8hIcqfh3ffBy2nA5kC<span class="regexp">/Xj/</span><span class="number">70</span>OS2GeHIJv6xprfAuo+EPd</span><br><span class="line">dLxD84OYh1Vc9mIO2cSnsnHk/JndZD5EEdJ8FYSShJ3DndAb1W76cHAlIDkrmGPn</span><br><span class="line">/qLVBnkq7HvHnxfl2EoQOycCqMnFWyEK+tS7Z5RxxOs1wfDQTyxd1UcqOTRwdNfC</span><br><span class="line">RvUwBcRNZxRXPKyLLNbYv+<span class="number">03</span>Qn11FFbRELPqDdES20meDOLd7PSRKgJeKgsXw1A+</span><br><span class="line">w4aqkCGKNfWYrNYk0b93TAw6HFqWXOUcAF8<span class="regexp">/vW+ktlS8QyPpJFYliKEjBAV7/</span>y0S</span><br><span class="line">I+WBHbzxswMnCeqqA<span class="regexp">/sy2SL8feO2C3/</span>I7nIjreLbawX8EP5WUuFQX6A+<span class="number">14</span>mU/B5P</span><br><span class="line">UlqUSmMB815HKb6r2yNOhdbSjdgnlcRFqPfNS5jahhloZkrChdXSEdDNVtKkxwpo</span><br><span class="line">v<span class="regexp">/VQDF/</span>kOsEuVv92d59vwL96z9mM0W0Tzj3Hyldm69mAKJp2F6cZuu3a1+qSvk9D</span><br><span class="line">k+N1phd6v0Q0mEvEj7yf7BtOE4XRpwlKGlEujMvlcxq+Reet0Ks4/tbxfwARAQAB</span><br><span class="line">tBlsdW9qaSA8bHVvamlAZXhhbXBsZS5jb20+iQJOBBMBCAA4FiEEvMIhdIfNfWXB</span><br><span class="line">JJZ7oaFvIrwC14wFAl/<span class="number">11</span>pACGwMFCwkIBwIGFQoJCAsCBBYCAwECHgECF4AACgkQ</span><br><span class="line">oaFvIrwC14ybuhAAipXJv/QDPzz626oIGvVLDvOi8IgPKx7EofFFNLmm1BiOEjKR</span><br><span class="line">eK<span class="regexp">/KCz0tv6eRyOFcq7PuX/</span>uDdSN9YXkZm5nRQO<span class="regexp">/s0vw7J/</span>s+lMYJJbI/Fe5e5MQe</span><br><span class="line">Ps0pAB85tQqAigFiwwmtHBN/OHeqU8pog4vKOC1d0EMH7lKUETf6nGDMRP5nqYSc</span><br><span class="line"><span class="number">9</span>FbGIcAzs4LWOvyi2+KgVSdzrS3r6TqZBmDrj4i0699/sN0VaLfXHC8jw3I9Y1RK</span><br><span class="line">hlKcxGtIhH33ZgwDBrNEjT26GyePbMzf1TaxJsu4Ym30CpvfdDt1NDfqJ7PKTaT/</span><br><span class="line">W08M0uGkcbvEexLhOkwNmGkA0Mzkwr6dKToGqZaD1BAlRw8VMJGR4O2ifMcCjpst</span><br><span class="line">o+<span class="number">4</span>Nm8sOMhrbIkIYRKfjfkyUq/k9Bo0KdRBIBa7RFfJxn8lSCvebdwbE4qD+iFHB</span><br><span class="line">wUpaOrrwQqL7Yst7yQrAIxXSsWEBoxz6+u6YmKvH596MA+pdQTVM6vhj+oBu9q9v</span><br><span class="line">IObjW7WWks<span class="regexp">/9qEdw4Xtq9kMTEhA79GGJC13ctW2rMs/</span><span class="number">9</span>Gu0M59emyo7GrszJScSR</span><br><span class="line">KHVHvKLbG04VA1xAv5RrklFWJOHRr7HtESBoULRcTJIe5JC7xsqVW0TJUNsb/hJO</span><br><span class="line">AQapUyesebKhCI2jv7WmRcSCTCocqcF+jT6ty2jtMILT0nKWmRAtn7MK4si5Ag0E</span><br><span class="line">X/XWkAEQAL0FWdODT7e9d0shMKrnYm+GLhds8JjjeMtIBwKuTT7GSBPkgtzme5Jc</span><br><span class="line">a<span class="regexp">/pQoGE+LOi1/</span>QgA3gVYBJqbFRhQhCZyE3DeWDDncIkjXO7JNPrM2f6TUGMM8KVZ</span><br><span class="line">CUk33bqShjvFPiCCTtMDaQqQ2xkluRA39fq65KgQyZ5kV2X9UZLuUSUa9DQIJedf</span><br><span class="line"><span class="number">6</span>g+<span class="number">3</span>S0hzSY9lNtmDNHT1vvhpv8f836KJtWu14DUxxW2BH/tkiHFNtIGFKMwJmvfJ</span><br><span class="line">vM7HYosXa+DR1hYxoSxLBt8eq5Ha8C5EjmGwliQRYA7VH+sy2V6935CnBY199B6g</span><br><span class="line"><span class="number">9</span>jNevDI0U6h9O7aQd/<span class="number">6</span>AH8YhEMlcci2R7WZs9TJ69Zv+ce8nf5igrbJ7tyFZgppz</span><br><span class="line">NpMfE12vcl7lv1yXFG8qYD9bUfUR/z1barA24aWT9DseL0+<span class="number">93</span>I7J03D9zakh6vOT</span><br><span class="line">OpDjF772M0nwmvsWEyuOi46bv+A/<span class="number">7</span>lhDo00SFwtl4aOiPECTX5CZQrv6YpmQK8IQ</span><br><span class="line">OrflC2RwQlFCbFzKixQOf3qinjs2AiGj0oFS<span class="regexp">/9g5mWgfEXQMEt/</span>zAXf+MpzxWjE4</span><br><span class="line">PkCwM+WbbUBCwSjNPhAiRPIwQUJuu6avTO3oJyhZTqz5zDyl+ufZzXr9MEauU1xJ</span><br><span class="line">CwshTqepmHQjVQ1Nj1dCnA+kA<span class="regexp">/M77erqHqAsR+2Zdh4To8a/</span>fmTlABEBAAGJAjYE</span><br><span class="line">GAEIACAWIQS8wiF0h819ZcEklnuhoW8ivALXjAUCX/XWkAIbDAAKCRChoW8ivALX</span><br><span class="line">jJJzD/<span class="number">9</span>TpurUiain8DKR9uTyiCCIdrs32nq70cQapN4Nl6dSxCFDf4GgL5y6JDOL</span><br><span class="line">Hc717BnZnSO1Fx69yG9iAasxTzoSNTY6DYhwJ56bmVj6bshewy0GEupb0pvInbNM</span><br><span class="line"><span class="number">0</span>iJRX+wJJF8bppWAAAuxvzWZSAPX+<span class="number">5</span>c/<span class="number">68</span>WMMYUsGVWniSxyaYQjAKdEnlkE3U5k</span><br><span class="line">tbGDfFxtmOv0OLdSvEj2NDUI8VNO5CT00c0ZhsSuhMUmacxpieg6TknT5IWkR9f7</span><br><span class="line">vO+<span class="number">0</span>+BmZ<span class="regexp">/rqMqJpeIoxuc2jaHDAtSLBUL+jHYNbnye7W3dTpp8TVOuv504mBcm1/</span></span><br><span class="line">N90px6aKr2lzm1iPVa+IrvutKMFgku19hh45492+zF8EEzfIaNU99AYDkd9okVdQ</span><br><span class="line">ud+<span class="number">5</span>R2xu28BL8XjCItYVqrIb3maC<span class="regexp">/r2VBmAyFuSwjifoU34/</span>hzQI+<span class="number">3</span>tt808gh526</span><br><span class="line">oiR9P5BtA+<span class="number">9</span>ELQYUPQsHA/Vuet9CYCb6zPMGsdNTJZeyB4YISMmK8+gzOn72uqlH</span><br><span class="line"><span class="number">0</span>d9zMZwbrNEaxG6jqsxrYFILLM+zWQJsRiBgPvI0+l38D+ZtFQ8s1Fqj4rtcWVBw</span><br><span class="line">z3xercisx8hDDK0W7yDWGAVn0uNHGHarwvGXRDyeorRTEgcUu+W0BqDmJpYI/bdx</span><br><span class="line">jzaR61fn9g5aZGVUs2HfQPOi84J42ShfwLB4ia7yaK2MF4DqEQ==</span><br><span class="line">=JYRy</span><br><span class="line">-----END PGP PUBLIC KEY BLOCK-----</span><br></pre></td></tr></table></figure>
<h3 id="添加GPG到Github"><a href="#添加GPG到Github" class="headerlink" title="添加GPG到Github"></a>添加GPG到Github</h3>复制上面的密钥，包括<code>-----BEGIN PGP PUBLIC KEY BLOCK-----</code>和<code>-----END PGP PUBLIC KEY BLOCK-----</code></li>
</ol>
<p><img src="/images/material/gpg2.jpg"><br><img src="/images/material/gpg3.jpg"></p>
<h3 id="配置密钥到Git"><a href="#配置密钥到Git" class="headerlink" title="配置密钥到Git"></a>配置密钥到Git</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git config --global user.signingkey A1A16F22BC02D78C</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="string">&#x27;export GPG_TTY=$(tty)&#x27;</span> &gt;&gt; ~/.profile</span></span><br></pre></td></tr></table></figure>
<p>我使用的zsh，命令为<code>echo &#39;export GPG_TTY=$(tty)&#39; &gt;&gt; ~/.zshrc</code></p>
<h3 id="签名提交"><a href="#签名提交" class="headerlink" title="签名提交"></a>签名提交</h3><figure class="highlight smalltalk"><table><tr><td class="code"><pre><span class="line"><span class="string">$ </span>git commit -<span class="type">S</span> -m <span class="comment">&quot;your commit message&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="删除GPG"><a href="#删除GPG" class="headerlink" title="删除GPG"></a>删除GPG</h3><p>最后删除用于测试的GPG </p>
<figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line">$ gpg --<span class="keyword">delete</span>-secret-keys A1A16F22BC02D78C</span><br><span class="line">gpg (GnuPG) <span class="number">2.2</span>.<span class="number">21</span>; Copyright (C) <span class="number">2020</span> Free Software Foundation, Inc.</span><br><span class="line">This <span class="keyword">is</span> free software: you are free <span class="keyword">to</span> change <span class="keyword">and</span> redistribute <span class="literal">it</span>.</span><br><span class="line">There <span class="keyword">is</span> NO WARRANTY, <span class="keyword">to</span> the extent permitted <span class="keyword">by</span> law.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sec  rsa4096/A1A16F22BC02D78C <span class="number">2021</span>-<span class="number">01</span>-<span class="number">06</span> luoji &lt;luoji@example.com&gt;</span><br><span class="line"></span><br><span class="line">Delete <span class="built_in">this</span> key <span class="keyword">from</span> the keyring? (y/N) y</span><br><span class="line">This <span class="keyword">is</span> a secret key! - really <span class="keyword">delete</span>? (y/N) y</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>工具</tag>
        <tag>gpg</tag>
        <tag>encrypt</tag>
      </tags>
  </entry>
  <entry>
    <title>GraphQL查询语言实践-实现BoltMQ的Console</title>
    <url>/graphql/graphql-golang-fulfill-20180206.html</url>
    <content><![CDATA[<p>上篇文章<a href="graphql/graphql-golang-20180123.html">《GraphQL查询语言学习笔记》</a>学习了GraphQL的语法和介绍Golang的库。最近再使用Golang编写一款分布式消息队列<a href="https://github.com/boltmq/boltmq">BoltMQ</a>，我将GraphQL用到BoltMQ的web管理UI上，这样更进一步了解GraphQL。</p>
<a id="more"></a>

<h3 id="GraphQL-设计篇"><a href="#GraphQL-设计篇" class="headerlink" title="GraphQL 设计篇"></a>GraphQL 设计篇</h3><p>有了将GraphQL应用到BoltMQ的web UI上的需求，那如何来做呢。我总结了下：</p>
<ol>
<li>业务梳理</li>
<li>GraphQL API设计</li>
<li>GraphQL Schema设计</li>
<li>GraphQL 第三方库的选择</li>
<li>GraphQL 客户端与服务端的实现</li>
</ol>
<h3 id="GraphQL-API设计"><a href="#GraphQL-API设计" class="headerlink" title="GraphQL API设计"></a>GraphQL API设计</h3><p>API的设计比较重要，需要开发人员充分理解业务，在业务的基础抽象有查询Graph。例如<a href="git@github.com:boltmq/console.git">console</a>是BolotMQ的集群管理UI。需求：</p>
<ul>
<li>管理多个BoltMQ集群</li>
<li>查询集群的节点信息</li>
<li>查询集群的统计信息</li>
<li>查询集群的topic信息</li>
<li>查询集群的消息信息</li>
<li>查询集群的订阅组信息</li>
<li>查询集群的消费进度</li>
<li>查询集群的在线消费进程<br>意思列举了几个功能点，首先将集群这个概念抽象出来，用户在选定集群的情况下才会做下面的查询操作，所有集群就可以作为第一层，然后再往下梳理。graphql就是将业务抽象成图（树）的形式的。</li>
</ul>
<p>以下是对console的查询操作的API设计，当然你需要理解BoltMQ的一些知识。你可查看<a href="https://github.com/boltmq/boltmq">BoltMQ</a>了解。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">query clusters(<span class="variable">$name</span>: String, <span class="variable">$like</span>: String, <span class="variable">$group</span>: String, <span class="variable">$msgId</span>: String!) &#123;</span><br><span class="line">  clusters(name: <span class="variable">$name</span>) &#123;</span><br><span class="line">    name</span><br><span class="line">    stats &#123;</span><br><span class="line">      producerNums</span><br><span class="line">      consumerNums</span><br><span class="line">      brokerNums</span><br><span class="line">      namesrvNums</span><br><span class="line">      topicNums</span><br><span class="line">      outTotalTodayNums</span><br><span class="line">      outTotalYestNums</span><br><span class="line">      inTotalTodayNums</span><br><span class="line">      inTotalYestNums</span><br><span class="line">    &#125;</span><br><span class="line">    nodes &#123;</span><br><span class="line">      namesrvAddrs</span><br><span class="line">      brokerNodes &#123;</span><br><span class="line">        role</span><br><span class="line">        addr</span><br><span class="line">        version</span><br><span class="line">        desc</span><br><span class="line">        outTps</span><br><span class="line">        inTps</span><br><span class="line">        outTotalTodayNums</span><br><span class="line">        outTotalYestNums</span><br><span class="line">        inTotalTodayNums</span><br><span class="line">        inTotalYestNums</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    topics(like: <span class="variable">$like</span>) &#123;</span><br><span class="line">      topic</span><br><span class="line">      <span class="built_in">type</span></span><br><span class="line">      isSystem</span><br><span class="line">      store &#123;</span><br><span class="line">        brokerName</span><br><span class="line">        queueId</span><br><span class="line">        maxOffset</span><br><span class="line">        minOffset</span><br><span class="line">        lastUpdateTime</span><br><span class="line">      &#125;</span><br><span class="line">      route &#123;</span><br><span class="line">        queues &#123;</span><br><span class="line">          brokerName</span><br><span class="line">          writeQueueNums</span><br><span class="line">          readQueueNums</span><br><span class="line">          perm</span><br><span class="line">          sysFlag</span><br><span class="line">        &#125;</span><br><span class="line">        brokers &#123;</span><br><span class="line">          brokerName</span><br><span class="line">          brokerAddrs &#123;</span><br><span class="line">            brokerId</span><br><span class="line">            addr</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      groups</span><br><span class="line">      consumeConn &#123;</span><br><span class="line">        describe</span><br><span class="line">        conns &#123;</span><br><span class="line">          consumeGroup</span><br><span class="line">          clientId</span><br><span class="line">          clientAddr</span><br><span class="line">          language</span><br><span class="line">          version</span><br><span class="line">          consumeTps</span><br><span class="line">          consumeFromWhere</span><br><span class="line">          consumeType</span><br><span class="line">          diff</span><br><span class="line">          messageModel</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      consumeProgress(group: <span class="variable">$group</span>) &#123;</span><br><span class="line">        consumeGroup</span><br><span class="line">        tps</span><br><span class="line">        diff</span><br><span class="line">        total</span><br><span class="line">        progress &#123;</span><br><span class="line">          brokerOffset</span><br><span class="line">          consumeOffset</span><br><span class="line">          diff</span><br><span class="line">          brokerName</span><br><span class="line">          queueId</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  msg(msgId: <span class="variable">$msgId</span>) &#123;</span><br><span class="line">    info &#123;</span><br><span class="line">      msgId</span><br><span class="line">      topic</span><br><span class="line">      flag</span><br><span class="line">      body</span><br><span class="line">      queueId</span><br><span class="line">      storeSize</span><br><span class="line">      queueOffset</span><br><span class="line">      sysFlag</span><br><span class="line">      bornTimestamp</span><br><span class="line">      bornHost</span><br><span class="line">      storeTimestamp</span><br><span class="line">      storeHost</span><br><span class="line">      commitLogOffset</span><br><span class="line">      bodyCRC</span><br><span class="line">      reconsumeTimes</span><br><span class="line">      preparedTransactionOffset</span><br><span class="line">      properties &#123;</span><br><span class="line">        key</span><br><span class="line">        val</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    tracks &#123;</span><br><span class="line">      code</span><br><span class="line">      <span class="built_in">type</span></span><br><span class="line">      consumeGroup</span><br><span class="line">      desc</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="GraphQL-Schema-设计"><a href="#GraphQL-Schema-设计" class="headerlink" title="GraphQL Schema 设计"></a>GraphQL Schema 设计</h3><p>结合GraphQL API设计类型系统Schema，这里的设计偏后端一些，和API是相辅相成的。在API基础上再次确定返回值的类型以及结构的优化。当然API和Schema的设计可以同时做，也可以分开进行。</p>
<p>console的类型系统</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># boltmq contole graphql schema</span></span><br><span class="line">schema &#123;</span><br><span class="line">    query: Query</span><br><span class="line">    mutation: Mutation</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># The query type, represents all of the entry points into our object graph</span></span><br><span class="line"><span class="built_in">type</span> Query &#123;</span><br><span class="line">    clusters(name: String): [Cluster]!</span><br><span class="line">    msg(name: String, msgId: String!): Message</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># A Cluster from the boltmq server</span></span><br><span class="line"><span class="built_in">type</span> Cluster &#123;</span><br><span class="line">    <span class="comment"># The name of cluster</span></span><br><span class="line">    name: String!</span><br><span class="line">    <span class="comment"># The stats info of cluster</span></span><br><span class="line">    stats: ClusterStats!</span><br><span class="line">    <span class="comment"># The node info of cluster</span></span><br><span class="line">    nodes: ClusterNode!</span><br><span class="line">    <span class="comment"># The topics of cluster</span></span><br><span class="line">    topics(like: String): [Topic]!</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># A ClusterStats info of boltmq cluster</span></span><br><span class="line"><span class="built_in">type</span> ClusterStats &#123;</span><br><span class="line">    <span class="comment"># The producer nums of cluster</span></span><br><span class="line">    producerNums: Int!</span><br><span class="line">    <span class="comment"># The consumer nums of cluster</span></span><br><span class="line">    consumerNums: Int!</span><br><span class="line">    <span class="comment"># The broker nums of cluster</span></span><br><span class="line">    brokerNums: Int!</span><br><span class="line">    <span class="comment"># The name server nums of cluster</span></span><br><span class="line">    namesrvNums: Int!</span><br><span class="line">    <span class="comment"># The topic nums of cluster</span></span><br><span class="line">    topicNums: Int!</span><br><span class="line">    <span class="comment"># The cluster consumer msg total number today</span></span><br><span class="line">    outTotalTodayNums: Int!</span><br><span class="line">    <span class="comment"># The cluster consumer msg total number yest</span></span><br><span class="line">    outTotalYestNums: Int!</span><br><span class="line">    <span class="comment"># The cluster producer msg total number yest</span></span><br><span class="line">    inTotalTodayNums: Int!</span><br><span class="line">    <span class="comment"># The cluster producer msg total number today</span></span><br><span class="line">    inTotalYestNums: Int!</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># A Cluster node info of boltmq cluster</span></span><br><span class="line"><span class="built_in">type</span> ClusterNode &#123;</span><br><span class="line">    <span class="comment"># The namesrv addr list fo cluster</span></span><br><span class="line">    namesrvAddrs: [String!]!</span><br><span class="line">    <span class="comment"># The broker node list fo cluster</span></span><br><span class="line">    brokerNodes: [BrokerNode]!</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># A Boker node info of boltmq cluster</span></span><br><span class="line"><span class="built_in">type</span> BrokerNode &#123;</span><br><span class="line">    <span class="comment"># The borker role</span></span><br><span class="line">    role: Int!</span><br><span class="line">    <span class="comment"># The borker addr</span></span><br><span class="line">    addr: String!</span><br><span class="line">    <span class="comment"># The borker server version</span></span><br><span class="line">    version: String!</span><br><span class="line">    <span class="comment"># The borker server describe</span></span><br><span class="line">    desc: String!</span><br><span class="line">    <span class="comment"># The borker server current out tps</span></span><br><span class="line">    outTps: Float!</span><br><span class="line">    <span class="comment"># The borker server current in tps</span></span><br><span class="line">    inTps: Float!</span><br><span class="line">    <span class="comment"># The cluster consumer msg total number today</span></span><br><span class="line">    outTotalTodayNums: Int!</span><br><span class="line">    <span class="comment"># The cluster consumer msg total number yest</span></span><br><span class="line">    outTotalYestNums: Int!</span><br><span class="line">    <span class="comment"># The cluster producer msg total number yest</span></span><br><span class="line">    inTotalTodayNums: Int!</span><br><span class="line">    <span class="comment"># The cluster producer msg total number today</span></span><br><span class="line">    inTotalYestNums: Int!</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># A topic info of boltmq cluster</span></span><br><span class="line"><span class="built_in">type</span> Topic &#123;</span><br><span class="line">    <span class="comment"># The topic name</span></span><br><span class="line">    topic: String!</span><br><span class="line">    <span class="comment"># The topic type</span></span><br><span class="line">    <span class="built_in">type</span>: Int!</span><br><span class="line">    <span class="comment"># The topic type</span></span><br><span class="line">    isSystem: Boolean!</span><br><span class="line">    <span class="comment"># The topic store</span></span><br><span class="line">    store: TopicStore!</span><br><span class="line">    <span class="comment"># The topic route</span></span><br><span class="line">    route: TopicRoute!</span><br><span class="line">    <span class="comment"># The consume group</span></span><br><span class="line">    groups: [String!]!</span><br><span class="line">    <span class="comment"># The consume connection</span></span><br><span class="line">    consumeConn: ConsumeConn!</span><br><span class="line">    consumeProgress(group: String): [ConsumeProgress]!</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># topic type</span></span><br><span class="line">enum TopicType &#123;</span><br><span class="line">    <span class="comment"># normal topic</span></span><br><span class="line">    NORMAL_TOPIC</span><br><span class="line">    <span class="comment"># retry topic</span></span><br><span class="line">    RETRY_TOPIC</span><br><span class="line">    <span class="comment"># deadline queue topic</span></span><br><span class="line">    DLQ_TOPIC</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># A topic stroe info of boltmq cluster</span></span><br><span class="line"><span class="built_in">type</span> TopicStore &#123;</span><br><span class="line">    <span class="comment"># The broker name</span></span><br><span class="line">    brokerName: String!</span><br><span class="line">    <span class="comment"># The queue id</span></span><br><span class="line">    queueId: Int!</span><br><span class="line">    <span class="comment"># The max offset</span></span><br><span class="line">    maxOffset: Int!</span><br><span class="line">    <span class="comment"># The min offset</span></span><br><span class="line">    minOffset: Int!</span><br><span class="line">    <span class="comment"># The last update time</span></span><br><span class="line">    lastUpdateTime: String!</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># A topic route info of boltmq cluster</span></span><br><span class="line"><span class="built_in">type</span> TopicRoute &#123;</span><br><span class="line">    <span class="comment"># The route data of queue</span></span><br><span class="line">    queues: [QueueData]!</span><br><span class="line">    <span class="comment"># The route data of broker</span></span><br><span class="line">    brokers: [BrokerData]!</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># A queue route data of topic</span></span><br><span class="line"><span class="built_in">type</span> QueueData &#123;</span><br><span class="line">    <span class="comment"># The broker name</span></span><br><span class="line">    brokerName: String!</span><br><span class="line">    <span class="comment"># The write queue nums</span></span><br><span class="line">    writeQueueNums: Int!</span><br><span class="line">    <span class="comment"># The read queue nums</span></span><br><span class="line">    readQueueNums: Int!</span><br><span class="line">    <span class="comment"># The permissions of topic on broker</span></span><br><span class="line">    perm: Int!</span><br><span class="line">    <span class="comment"># The permissions of topic on broker</span></span><br><span class="line">    sysFlag: Int!</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># A broker route data of topic</span></span><br><span class="line"><span class="built_in">type</span> BrokerData &#123;</span><br><span class="line">    <span class="comment"># The broker name</span></span><br><span class="line">    brokerName: String!</span><br><span class="line">    <span class="comment"># The broker addrs</span></span><br><span class="line">    brokerAddrs: [BrokerAddr]!</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># A broker addr of topic route</span></span><br><span class="line"><span class="built_in">type</span> BrokerAddr &#123;</span><br><span class="line">    <span class="comment"># The broker id</span></span><br><span class="line">    brokerId: Int!</span><br><span class="line">    <span class="comment"># The broker addr</span></span><br><span class="line">    addr: String!</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># consume connection</span></span><br><span class="line"><span class="built_in">type</span> ConsumeConn &#123;</span><br><span class="line">    <span class="comment"># The describe</span></span><br><span class="line">    describe: String!</span><br><span class="line">    <span class="comment"># The connection</span></span><br><span class="line">    conns: [Connection]!</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># connection info</span></span><br><span class="line"><span class="built_in">type</span> Connection &#123;</span><br><span class="line">    <span class="comment"># The consume group name</span></span><br><span class="line">    consumeGroup: String!</span><br><span class="line">    <span class="comment"># The client id</span></span><br><span class="line">    clientId: String!</span><br><span class="line">    <span class="comment"># The client addr</span></span><br><span class="line">    clientAddr: String!</span><br><span class="line">    <span class="comment"># The language</span></span><br><span class="line">    language: String!</span><br><span class="line">    <span class="comment"># The version</span></span><br><span class="line">    version: String!</span><br><span class="line">    <span class="comment"># The consume tps</span></span><br><span class="line">    consumeTps: Float!</span><br><span class="line">    <span class="comment"># The consume from where</span></span><br><span class="line">    consumeFromWhere: String!</span><br><span class="line">    <span class="comment"># The consume type</span></span><br><span class="line">    consumeType: Int!</span><br><span class="line">    <span class="comment"># The message diff total</span></span><br><span class="line">    diff: Int!</span><br><span class="line">    <span class="comment"># The message model</span></span><br><span class="line">    messageModel: Int!</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># consume type</span></span><br><span class="line">enum ConsumeType &#123;</span><br><span class="line">    <span class="comment"># actively consume</span></span><br><span class="line">    CONSUME_ACTIVELY</span><br><span class="line">    <span class="comment"># passively consume</span></span><br><span class="line">    CONSUME_PASSIVELY</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># message model</span></span><br><span class="line">enum MessageModel &#123;</span><br><span class="line">    <span class="comment"># broadcasting</span></span><br><span class="line">    BROADCASTING </span><br><span class="line">    <span class="comment"># clustering</span></span><br><span class="line">    CLUSTERING</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># consume progress</span></span><br><span class="line"><span class="built_in">type</span> ConsumeProgress &#123;</span><br><span class="line">    <span class="comment"># The consume group name</span></span><br><span class="line">    consumeGroup: String!</span><br><span class="line">    <span class="comment"># The consume tps</span></span><br><span class="line">    tps: Float!</span><br><span class="line">    <span class="comment"># The consume diff</span></span><br><span class="line">    diff: Int!</span><br><span class="line">    <span class="comment"># The total</span></span><br><span class="line">    total: Int!</span><br><span class="line">    <span class="comment"># The progress data list</span></span><br><span class="line">    progress: [ConsumeProgressData]!</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># consume progress data</span></span><br><span class="line"><span class="built_in">type</span> ConsumeProgressData &#123;</span><br><span class="line">    <span class="comment"># The broker offset</span></span><br><span class="line">    brokerOffset: Int!</span><br><span class="line">    <span class="comment"># The broker offset</span></span><br><span class="line">    consumeOffset: Int!</span><br><span class="line">    <span class="comment"># The consume diff</span></span><br><span class="line">    diff: Int!</span><br><span class="line">    <span class="comment"># The broker name</span></span><br><span class="line">    brokerName: String!</span><br><span class="line">    <span class="comment"># The queue id</span></span><br><span class="line">    queueId: Int!</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># message</span></span><br><span class="line"><span class="built_in">type</span> Message &#123;</span><br><span class="line">    <span class="comment"># The message base info</span></span><br><span class="line">    info: MessageInfo!</span><br><span class="line">    <span class="comment"># The message track list</span></span><br><span class="line">    tracks: [MessageTrack]!</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># message info</span></span><br><span class="line"><span class="built_in">type</span> MessageInfo &#123;</span><br><span class="line">    <span class="comment"># The message id</span></span><br><span class="line">    msgId: String!</span><br><span class="line">    <span class="comment"># The topic name</span></span><br><span class="line">    topic: String!</span><br><span class="line">    <span class="comment"># The message flag</span></span><br><span class="line">    flag: Int!</span><br><span class="line">    <span class="comment"># The message body</span></span><br><span class="line">    body: String!</span><br><span class="line">    <span class="comment"># The queue id</span></span><br><span class="line">    queueId: Int!</span><br><span class="line">    <span class="comment"># The store size</span></span><br><span class="line">    storeSize: Int!</span><br><span class="line">    <span class="comment"># The queue offset</span></span><br><span class="line">    queueOffset: Int!</span><br><span class="line">    <span class="comment"># The message sys flag</span></span><br><span class="line">    sysFlag: Int!</span><br><span class="line">    <span class="comment"># The born timestamp</span></span><br><span class="line">    bornTimestamp: String!</span><br><span class="line">    <span class="comment"># The born host </span></span><br><span class="line">    bornHost: String!</span><br><span class="line">    <span class="comment"># The store timestamp</span></span><br><span class="line">    storeTimestamp: String!</span><br><span class="line">    <span class="comment"># The store host </span></span><br><span class="line">    storeHost: String!</span><br><span class="line">    <span class="comment"># The commitlog offset</span></span><br><span class="line">    commitLogOffset: Int!</span><br><span class="line">    <span class="comment"># The message body crc</span></span><br><span class="line">    bodyCRC: Int!</span><br><span class="line">    <span class="comment"># The reconsume times</span></span><br><span class="line">    reconsumeTimes: Int!</span><br><span class="line">    <span class="comment"># The reconsume times</span></span><br><span class="line">    preparedTransactionOffset: Int!</span><br><span class="line">    <span class="comment"># The properties</span></span><br><span class="line">    properties: [Property!]!</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># property, replace map</span></span><br><span class="line"><span class="built_in">type</span> Property &#123;</span><br><span class="line">    key: String!</span><br><span class="line">    val: String!</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># message track</span></span><br><span class="line"><span class="built_in">type</span> MessageTrack &#123;</span><br><span class="line">    <span class="comment"># The track code, 0: success, non-0: failed</span></span><br><span class="line">    code: Int!</span><br><span class="line">    <span class="comment"># track type</span></span><br><span class="line">    <span class="built_in">type</span>: Int!</span><br><span class="line">    <span class="comment"># consume group name</span></span><br><span class="line">    consumeGroup: String!</span><br><span class="line">    <span class="comment"># error describe</span></span><br><span class="line">    desc: String!</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># track type</span></span><br><span class="line">enum TrackType &#123;</span><br><span class="line">    <span class="comment"># subscribed and consumed</span></span><br><span class="line">    SUBSCRIBEDANDCONSUMED</span><br><span class="line">    <span class="comment"># subscribed but filterd</span></span><br><span class="line">    SUBSCRIBEDBUTFILTERD</span><br><span class="line">    <span class="comment"># subscribed but pull</span></span><br><span class="line">    SUBSCRIBEDBUTPULL</span><br><span class="line">    <span class="comment"># subscribed and not consume yet</span></span><br><span class="line">    SUBSCRIBEDBUTNOTCONSUMEYET</span><br><span class="line">    <span class="comment"># unknow exeption</span></span><br><span class="line">    UNKNOWEXEPTION</span><br><span class="line">    <span class="comment"># not subscribed and not consumed</span></span><br><span class="line">    NOTSUBSCRIBEDANDNOTCONSUMED</span><br><span class="line">    <span class="comment"># consume groupId not online</span></span><br><span class="line">    CONSUMEGROUPIDNOTONLINE</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># The mutation type, represents all updates we can make to our data</span></span><br><span class="line"><span class="built_in">type</span> Mutation &#123;</span><br><span class="line">    create2UpdateTopic(name: String!, topic: TopicInput!): TopicResponse</span><br><span class="line">    deleteTopic(name: String!, topic: String!): TopicResponse</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># The input object sent when cluster is creating a new topic</span></span><br><span class="line">input TopicInput &#123;</span><br><span class="line">    <span class="comment"># topic</span></span><br><span class="line">    topic: String!</span><br><span class="line">    <span class="comment"># The read queue nums, optional</span></span><br><span class="line">    readQueueNums: Int!</span><br><span class="line">    <span class="comment"># The write queue nums, optional</span></span><br><span class="line">    writeQueueNums: Int!</span><br><span class="line">    <span class="comment"># The order topic, optional</span></span><br><span class="line">    order: Boolean! </span><br><span class="line">    <span class="comment"># The unit topic, optional</span></span><br><span class="line">    unit: Boolean!</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Represents a topic for a cluster</span></span><br><span class="line">interface Response &#123;</span><br><span class="line">    code: Int!</span><br><span class="line">    desc: String!</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">type</span> TopicResponse implements Response &#123;</span><br><span class="line">    code: Int!</span><br><span class="line">    desc: String!</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="GraphQL-代码实现"><a href="#GraphQL-代码实现" class="headerlink" title="GraphQL 代码实现"></a>GraphQL 代码实现</h3><p>console使用的<code>neelance/graphql-go</code>库，<a href="https://github.com/boltmq/console/tree/master/admin">代码查看</a>。使用的缺点和注意事项：</p>
<ul>
<li>neelance使用反射实现</li>
<li>graphql类型匹配严格，并缺少对于的int,int64等基础类型。</li>
<li>接口的实现不优雅，我提了<a href="https://github.com/neelance/graphql-go/issues/159">issue</a>，等待改进。</li>
<li>context无法向下传递</li>
</ul>
<p><strong>封装统一认证</strong></p>
<p>请求header中取得jwtToken进行验证。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> userClaims <span class="keyword">struct</span> &#123;</span><br><span class="line">    user</span><br><span class="line">    jwt.StandardClaims</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> authenticator <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(auth *authenticator)</span> <span class="title">Chain</span><span class="params">(w http.ResponseWriter, r *http.Request, ctx *Context)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    <span class="comment">// extract jwt</span></span><br><span class="line">    jwtToken := r.Header.Get(<span class="string">&quot;Authorization&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// parse tokentoken</span></span><br><span class="line">    token, err := jwt.ParseWithClaims(jwtToken, &amp;userClaims&#123;&#125;, <span class="function"><span class="keyword">func</span><span class="params">(token *jwt.Token)</span> <span class="params">(<span class="keyword">interface</span>&#123;&#125;, error)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> _, ok := token.Method.(*jwt.SigningMethodHMAC); !ok &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">&quot;Unexpected signing method&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> jwtSecret, <span class="literal">nil</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        http.Error(w, <span class="string">&quot;not authorized&quot;</span>, http.StatusUnauthorized)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    claims, ok := token.Claims.(*userClaims)</span><br><span class="line">    <span class="keyword">if</span> !ok || !token.Valid &#123;</span><br><span class="line">        http.Error(w, <span class="string">&quot;not authorized&quot;</span>, http.StatusUnauthorized)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ctx.ctx = context.WithValue(r.Context(), userAuthKey, claims.user)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>登录后生成token并返回。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> loginHandler <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h *loginHandler)</span> <span class="title">ServeHTTP</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">    decoder := json.NewDecoder(r.Body)</span><br><span class="line">    userParam := <span class="keyword">struct</span> &#123;</span><br><span class="line">        Username <span class="keyword">string</span> <span class="string">`json:&quot;username&quot;`</span></span><br><span class="line">        Password <span class="keyword">string</span> <span class="string">`json:&quot;password&quot;`</span></span><br><span class="line">    &#125;&#123;&#125;</span><br><span class="line"></span><br><span class="line">    err := decoder.Decode(&amp;userParam)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        http.Error(w, err.Error(), http.StatusInternalServerError)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">defer</span> r.Body.Close()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> userParam.Username != <span class="string">&quot;admin&quot;</span> || userParam.Password != <span class="string">&quot;admin&quot;</span> &#123;</span><br><span class="line">        http.Error(w, <span class="string">&quot;invalid login&quot;</span>, http.StatusUnauthorized)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//generate token</span></span><br><span class="line">    expire := time.Now().Add(time.Hour * <span class="number">1</span>).Unix()</span><br><span class="line">    <span class="comment">// Create the Claims</span></span><br><span class="line">    claims := userClaims&#123;</span><br><span class="line">        user: user&#123;</span><br><span class="line">            UserID:   <span class="number">1</span>,</span><br><span class="line">            UserName: userParam.Username,</span><br><span class="line">            IsAdmin:  <span class="literal">true</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        StandardClaims: jwt.StandardClaims&#123;</span><br><span class="line">            ExpiresAt: expire,</span><br><span class="line">            Issuer:    <span class="string">&quot;login&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    token := jwt.NewWithClaims(jwt.SigningMethodHS256, claims)</span><br><span class="line">    signedToken, _ := token.SignedString(jwtSecret)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//output token</span></span><br><span class="line">    tokenResponse := <span class="keyword">struct</span> &#123;</span><br><span class="line">        Token <span class="keyword">string</span> <span class="string">`json:&quot;token&quot;`</span></span><br><span class="line">    &#125;&#123;signedToken&#125;</span><br><span class="line">    json.NewEncoder(w).Encode(tokenResponse)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>GraphQL接口接入认证</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">srv.mux.Handle(pattern, join(&amp;relay.Handler&#123;Schema: schema&#125;, &amp;authenticator&#123;&#125;))</span><br></pre></td></tr></table></figure>
<p>登录接入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">srv.mux.Handle(pattern, &amp;loginHandler&#123;&#125;)</span><br></pre></td></tr></table></figure>
<p>以上4点就完成认证功能，详细代码查看<a href="https://github.com/boltmq/console/tree/master/admin/server">console-server</a></p>
<p>还需功能</p>
<ul>
<li>dataloader</li>
</ul>
<p>对比<a href="https://github.com/graphql-go/graphql">graphql-go</a>库，graphql-go更佳灵活，当抽象程度差一些。根据自己情况自行选择。</p>
]]></content>
      <categories>
        <category>graphql</category>
      </categories>
      <tags>
        <tag>golang</tag>
        <tag>graphql</tag>
        <tag>graphiql</tag>
      </tags>
  </entry>
  <entry>
    <title>GraphQL查询语言学习笔记</title>
    <url>/graphql/graphql-golang-20180123.html</url>
    <content><![CDATA[<p>RSETful API接口想必大家都比较熟悉，GraphQL设计用于替代RESTful API接口，但目前不是所有情况都使用替代，他们各有优势。<br>GraphQL 是一个用于 API 的查询语言，是一个使用基于类型系统来执行查询的服务端运行时（类型系统由你的数据定义）。GraphQL 并没有和任何特定数据库或者存储引擎绑定，而是依靠你现有的代码和数据支撑。</p>
<blockquote>
<p>在 2015 React 欧洲大会上，Lee Byron 介绍了 Facebook 的 GraphQL ，包含 GraphQL 背后的故事，查询语句的示例，还有核心的概念。GraphQL 非常易懂，直接看查询语句就能知道查询出来的数据是什么样的。你可以把 GraphQL 的查询语句想成是没有值，只有属性的对象，返回的结果就是对应的属性还有对应值的对象。</p>
</blockquote>
<a id="more"></a>

<h3 id="GraphQL-基础篇"><a href="#GraphQL-基础篇" class="headerlink" title="GraphQL 基础篇"></a>GraphQL 基础篇</h3><p>GraphQL特性是用户可以自定义查询对象字段，使用图（树）的形式表示业务对象，从而定义查询示例。Facebook定义GraphQL规范，GraphQL语法方面的知识可以参考:</p>
<p>英文</p>
<ul>
<li><a href="http://facebook.github.io/graphql/October2016/">http://facebook.github.io/graphql/October2016/</a></li>
<li><a href="https://github.com/facebook/graphql">https://github.com/facebook/graphql</a></li>
</ul>
<p>中文</p>
<ul>
<li><a href="http://spec.graphql.cn//#sec-Overview-">http://spec.graphql.cn//#sec-Overview-</a></li>
</ul>
<p>官方提供了新手课程:</p>
<p>英文</p>
<ul>
<li><strong><a href="http://graphql.org/learn">http://graphql.org/learn</a></strong></li>
<li><a href="https://www.howtographql.com/">https://www.howtographql.com/</a></li>
</ul>
<p>中文</p>
<ul>
<li><strong><a href="http://graphql.cn/learn/">http://graphql.cn/learn/</a></strong></li>
</ul>
<p>GraphQL包括: <strong>类型系统（Type System）</strong> <strong>类型语言（Type Language）</strong> <strong>对象类型和字段（Object Types and Fields）</strong>等查询语言的定义和专用名词。如果你还是新手，请认真阅读<a href="http://spec.graphql.cn//#sec-Overview-">GraphQL规范</a>和<a href="**http://graphql.cn/learn/**">新手课程</a>。你已经理解了GraphQL是什么，那么可以接下来就是如何使用Golang编写GraphQL Server，如何编写schema，如何运行以及调试。</p>
<h3 id="GraphQL-Server"><a href="#GraphQL-Server" class="headerlink" title="GraphQL Server"></a>GraphQL Server</h3><p>首先使用golang语言实现官方示例，以了解GraphQL Server如何编写。当然GraphQL中有客户端和服务端。</p>
<p>客户端库：</p>
<ul>
<li><a href="https://facebook.github.io/relay/">Relay</a> (<a href="https://github.com/facebook/relay">github</a>)：Facebook 的框架，用于构建与 GraphQL 后端交流的 React 应用。</li>
<li><a href="http://apollographql.com/client/">Apollo Client</a> (<a href="https://github.com/apollographql/apollo-client">github</a>)：一个强大的 JavaScript GraphQL 客户端，设计用于与 React、React Native、Angular 2 或者原生 JavaScript 一同工作。</li>
<li><a href="https://github.com/shurcooL/graphql#readme">graphql</a>: 一个使用 Go 编写的 GraphQL 客户端实现。</li>
</ul>
<p>服务端库：</p>
<ul>
<li><a href="https://github.com/graphql-go/graphql">graphql-go</a>： 支持查询解析器，但不支持GraphQL SDL解析。</li>
<li><a href="https://github.com/graphql-go/relay">graphql-relay-go</a>： 支持react-relay，一般配合graphql-go使用。</li>
<li><a href="https://github.com/neelance/graphql-go">neelance/graphql-go</a>： 支持查询解析器和GraphQL SDL解析。(缺少自动生成定义SDL代码工具)</li>
</ul>
<p>接下来分别使用<a href="https://github.com/graphql-go/graphql">graphql-go</a>和<a href="https://github.com/neelance/graphql-go">neelance/graphql-go</a>来实现一些简单示例。</p>
<h4 id="graphql-go库实现"><a href="#graphql-go库实现" class="headerlink" title="graphql-go库实现"></a>graphql-go库实现</h4><p>graphql-go支持查询解析器，不支持GraphQL SDL解析。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;encoding/json&quot;</span></span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="string">&quot;github.com/graphql-go/graphql&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> user <span class="keyword">struct</span> &#123;</span><br><span class="line">	ID   <span class="keyword">string</span> <span class="string">`json:&quot;id&quot;`</span></span><br><span class="line">	Name <span class="keyword">string</span> <span class="string">`json:&quot;name&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> data <span class="keyword">map</span>[<span class="keyword">string</span>]user = <span class="keyword">map</span>[<span class="keyword">string</span>]user&#123;</span><br><span class="line">	<span class="string">&quot;1&quot;</span>: user&#123;</span><br><span class="line">		ID:   <span class="string">&quot;1&quot;</span>,</span><br><span class="line">		Name: <span class="string">&quot;Dan&quot;</span>,</span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="string">&quot;2&quot;</span>: user&#123;</span><br><span class="line">		ID:   <span class="string">&quot;2&quot;</span>,</span><br><span class="line">		Name: <span class="string">&quot;Lee&quot;</span>,</span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="string">&quot;3&quot;</span>: user&#123;</span><br><span class="line">		ID:   <span class="string">&quot;3&quot;</span>,</span><br><span class="line">		Name: <span class="string">&quot;Nick&quot;</span>,</span><br><span class="line">	&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//   Create User object type with fields &quot;id&quot; and &quot;name&quot; by using GraphQLObjectTypeConfig:</span></span><br><span class="line"><span class="comment">//       - Name: name of object type</span></span><br><span class="line"><span class="comment">//       - Fields: a map of fields by using GraphQLFields</span></span><br><span class="line"><span class="comment">//   Setup type of field use GraphQLFieldConfig</span></span><br><span class="line"><span class="keyword">var</span> userType = graphql.NewObject(</span><br><span class="line">	graphql.ObjectConfig&#123;</span><br><span class="line">		Name: <span class="string">&quot;User&quot;</span>,</span><br><span class="line">		Fields: graphql.Fields&#123;</span><br><span class="line">			<span class="string">&quot;id&quot;</span>: &amp;graphql.Field&#123;</span><br><span class="line">				Type: graphql.String,</span><br><span class="line">			&#125;,</span><br><span class="line">			<span class="string">&quot;name&quot;</span>: &amp;graphql.Field&#123;</span><br><span class="line">				Type: graphql.String,</span><br><span class="line">			&#125;,</span><br><span class="line">		&#125;,</span><br><span class="line">	&#125;,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//   Create Query object type with fields &quot;user&quot; has type [userType] by using GraphQLObjectTypeConfig:</span></span><br><span class="line"><span class="comment">//       - Name: name of object type</span></span><br><span class="line"><span class="comment">//       - Fields: a map of fields by using GraphQLFields</span></span><br><span class="line"><span class="comment">//   Setup type of field use GraphQLFieldConfig to define:</span></span><br><span class="line"><span class="comment">//       - Type: type of field</span></span><br><span class="line"><span class="comment">//       - Args: arguments to query with current field</span></span><br><span class="line"><span class="comment">//       - Resolve: function to query data using params from [Args] and return value with current type</span></span><br><span class="line"><span class="keyword">var</span> queryType = graphql.NewObject(</span><br><span class="line">	graphql.ObjectConfig&#123;</span><br><span class="line">		Name: <span class="string">&quot;Query&quot;</span>,</span><br><span class="line">		Fields: graphql.Fields&#123;</span><br><span class="line">			<span class="string">&quot;user&quot;</span>: &amp;graphql.Field&#123;</span><br><span class="line">				Type: userType,</span><br><span class="line">				Args: graphql.FieldConfigArgument&#123;</span><br><span class="line">					<span class="string">&quot;id&quot;</span>: &amp;graphql.ArgumentConfig&#123;</span><br><span class="line">						Type: graphql.String,</span><br><span class="line">					&#125;,</span><br><span class="line">				&#125;,</span><br><span class="line">				Resolve: <span class="function"><span class="keyword">func</span><span class="params">(p graphql.ResolveParams)</span> <span class="params">(<span class="keyword">interface</span>&#123;&#125;, error)</span></span> &#123;</span><br><span class="line">					idQuery, isOK := p.Args[<span class="string">&quot;id&quot;</span>].(<span class="keyword">string</span>)</span><br><span class="line">					<span class="keyword">if</span> isOK &#123;</span><br><span class="line">						<span class="keyword">if</span> v, exist := data[idQuery]; exist &#123;</span><br><span class="line">							<span class="keyword">return</span> v, <span class="literal">nil</span></span><br><span class="line">						&#125;</span><br><span class="line"></span><br><span class="line">						<span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">nil</span></span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">nil</span></span><br><span class="line">				&#125;,</span><br><span class="line">			&#125;,</span><br><span class="line">		&#125;,</span><br><span class="line">	&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> schema, _ = graphql.NewSchema(</span><br><span class="line">	graphql.SchemaConfig&#123;</span><br><span class="line">		Query: queryType,</span><br><span class="line">	&#125;,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">executeQuery</span><span class="params">(query <span class="keyword">string</span>, schema graphql.Schema, vars <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;)</span> \*<span class="title">graphql</span>.<span class="title">Result</span></span> &#123;</span><br><span class="line">	result := graphql.Do(graphql.Params&#123;</span><br><span class="line">		Schema:         schema,</span><br><span class="line">		RequestString:  query,</span><br><span class="line">		VariableValues: vars,</span><br><span class="line">	&#125;)</span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">len</span>(result.Errors) &gt; <span class="number">0</span> &#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;wrong result, unexpected errors: %v&quot;</span>, result.Errors)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	query := <span class="string">`query userinfo($uid: String = &quot;1&quot;) &#123;</span></span><br><span class="line"><span class="string">				user(id: $uid)&#123;</span></span><br><span class="line"><span class="string">					id</span></span><br><span class="line"><span class="string">					name</span></span><br><span class="line"><span class="string">				&#125;</span></span><br><span class="line"><span class="string">			&#125;</span></span><br><span class="line"><span class="string">		`</span></span><br><span class="line">	vars := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;<span class="string">&quot;uid&quot;</span>: <span class="string">&quot;3&quot;</span>&#125;</span><br><span class="line">	r := executeQuery(query, schema, vars)</span><br><span class="line">	rJSON, _ := json.Marshal(r)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%s \n&quot;</span>, rJSON)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面示例是查询用户信息，作为第一个示例比较适合。示例中代码<strong>schema, _ = graphql.NewSchema</strong>定义了查询schema, 使用<strong>executeQuery</strong>查询结果并打印。schema中定义了查询入口<strong>Query: queryType</strong>，queryType中的Resolve处理请求。</p>
<p>点击<a href="https://github.com/gunsluo/go-example/blob/master/graphql/graphql-go/main.go">源码</a>，运行<code>go run main.go</code>查看结果。</p>
<p><strong>提供GraphQL Server http服务</strong></p>
<p>构建http服务只需简单几行代码(<a href="https://github.com/gunsluo/go-example/blob/master/graphql/graphql-go/http.go">源码</a>)： </p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	http.HandleFunc(<span class="string">&quot;/graphql&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">		result := executeQuery(r.URL.Query().Get(<span class="string">&quot;query&quot;</span>), schema, <span class="literal">nil</span>)</span><br><span class="line">		json.NewEncoder(w).Encode(result)</span><br><span class="line">	&#125;)</span><br><span class="line"></span><br><span class="line">	fmt.Println(<span class="string">&quot;Now server is running on port 8080&quot;</span>)</span><br><span class="line">	fmt.Println(<span class="string">&quot;Test with Get      : curl -g &#x27;http://localhost:8080/graphql?query=&#123;user(id:\&quot;1\&quot;)&#123;name&#125;&#125;&#x27;&quot;</span>)</span><br><span class="line">	http.ListenAndServe(<span class="string">&quot;:8080&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>终端输入<code>curl -g &#39;http://localhost:8080/graphql?query=&#123;user(id:\&quot;1\&quot;)&#123;name&#125;&#125;&#39;</code>查看结果吧。</p>
<p><strong>使用graphql-go/handler包提供http服务</strong></p>
<p>使用graphql-go/handler包(<a href="https://github.com/gunsluo/go-example/blob/master/graphql/graphql-go/handle.go">源码</a>)： </p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	h := handler.New(&amp;handler.Config&#123;</span><br><span class="line">		Schema:   &amp;schema,</span><br><span class="line">		Pretty:   <span class="literal">true</span>,</span><br><span class="line">		GraphiQL: <span class="literal">true</span>,</span><br><span class="line">	&#125;)</span><br><span class="line">	http.Handle(<span class="string">&quot;/graphql&quot;</span>, h)</span><br><span class="line"></span><br><span class="line">	fmt.Println(<span class="string">&quot;Now server is running on port 8080&quot;</span>)</span><br><span class="line">	fmt.Println(<span class="string">&quot;Test with Get      : curl -g &#x27;http://localhost:8080/graphql?query=&#123;user(id:\&quot;1\&quot;)&#123;name&#125;&#125;&#x27;&quot;</span>)</span><br><span class="line">	http.ListenAndServe(<span class="string">&quot;:8080&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用<code>graphql-go/handler</code>包后不需要executeQuery函数，并提供了额外的配置项。</p>
<h4 id="neelance-graphql-go库实现"><a href="#neelance-graphql-go库实现" class="headerlink" title="neelance/graphql-go库实现"></a>neelance/graphql-go库实现</h4><p>neelance/graphql-go支持查询解析器和GraphQL SDL解析。这里使用官方的starwars作为示例,查看<a href="http://graphql.cn/learn/queries/">starwars示例</a></p>
<p>实现服务端按下面步骤实现</p>
<ol>
<li>编写GraphQL SDL <a href="https://github.com/gunsluo/go-example/blob/master/graphql/neelance/starwars/starwars.go">源码</a></li>
<li>编写GraphQL SDL实现 <a href="https://github.com/gunsluo/go-example/blob/master/graphql/neelance/starwars/starwars.go">源码</a></li>
<li>编写GraphQL Server实现 <a href="https://github.com/gunsluo/go-example/blob/master/graphql/neelance/main.go">源码</a></li>
</ol>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> schema *graphql.Schema</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">	schema = graphql.MustParseSchema(starwars.Schema, &amp;starwars.Resolver&#123;&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	http.Handle(<span class="string">&quot;/&quot;</span>, http.HandlerFunc(<span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">		w.Write(page)</span><br><span class="line">	&#125;))</span><br><span class="line"></span><br><span class="line">	http.Handle(<span class="string">&quot;/query&quot;</span>, &amp;relay.Handler&#123;Schema: schema&#125;)</span><br><span class="line"></span><br><span class="line">	fmt.Println(<span class="string">&quot;Now server is running on port 8080.&quot;</span>)</span><br><span class="line">	fmt.Println(<span class="string">&quot;Test with Get      : http://localhost:8080&quot;</span>)</span><br><span class="line">	log.Fatal(http.ListenAndServe(<span class="string">&quot;:8080&quot;</span>, <span class="literal">nil</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>init()**函数中初始化schema，</strong>main()**中监听8080端口出来请求并响应。starwars包下的schema定义和逻辑实现可查看<a href="https://github.com/gunsluo/go-example/blob/master/graphql/neelance/starwars/starwars.go">源码</a>。</p>
<h4 id="graphql-go-tools工具"><a href="#graphql-go-tools工具" class="headerlink" title="graphql-go-tools工具"></a>graphql-go-tools工具</h4><p>neelance的实现需要两部分schema的定义与Reolver的实现。graphql-go-tools包是我自己写的将定义的schema自动生成Reolver代码模板。目前只实现了将graphql文件转换为schema string，后续整理后持续实现。<br>示例代码：<a href="https://github.com/gunsluo/graphql-go-tools/tree/master/example">graphql-go-tools</a></p>
<h4 id="Dataloader缓存"><a href="#Dataloader缓存" class="headerlink" title="Dataloader缓存"></a>Dataloader缓存</h4><p>dataloader是用于缓存数据的包，GraphQL是支持多层嵌套结构的（图关系，树结构），缓存数据可以减少请求次数提高性能。</p>
<ul>
<li><a href="https://github.com/nicksrandall/dataloader">dataloader</a></li>
</ul>
<h3 id="GraphQL工具"><a href="#GraphQL工具" class="headerlink" title="GraphQL工具"></a>GraphQL工具</h3><p>chrome extension</p>
<ul>
<li>GraphQL Network</li>
<li>Apollo Client Developer Tools</li>
<li>ChromeiQL</li>
</ul>
<p>mac tools</p>
<ul>
<li>GraphQL Ide</li>
<li>GraphQL PalyGround</li>
<li>GraphiQL</li>
</ul>
<p>推荐使用GraphQL Ide，它有类似postman的collection功能，方便保存请求接口。也可以在程序debug模式中启用内置GraphiQL。</p>
]]></content>
      <categories>
        <category>graphql</category>
      </categories>
      <tags>
        <tag>golang</tag>
        <tag>graphql</tag>
        <tag>graphiql</tag>
      </tags>
  </entry>
  <entry>
    <title>黑苹果hackintosh 安装macos high sierra系统</title>
    <url>/%E7%94%B5%E8%84%91%E7%A1%AC%E4%BB%B6/hackintosh-to-high-sierra-20180212.html</url>
    <content><![CDATA[<p>macos high sierra更新一段时间了，以前的hackintosh系统已经很久没有更新了，趁过年更新下系统。系统硬件参考：<a href="/%E7%94%B5%E8%84%91%E7%A1%AC%E4%BB%B6/hackintosh-window-install-20130429.html">&lt;&lt;安装Mac Window10 双系统，为发烧而生&gt;&gt;</a></p>
<a id="more"></a>

<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><ul>
<li>mac电脑</li>
<li>下载Install macOS High Sierra</li>
<li>16G U盘</li>
<li>下载uniBeast、MultiBeast、clover configurator软件</li>
<li>下载显卡驱动WebDriver-387.10.10.10.25.156(根据自己的显卡)</li>
</ul>
<p><img src="https://static.oschina.net/uploads/space/2018/0213/122106_defq_3724856.png" alt="Alt text"></p>
<h3 id="启动盘"><a href="#启动盘" class="headerlink" title="启动盘"></a>启动盘</h3><p>格式化U盘<br><img src="https://static.oschina.net/uploads/space/2018/0213/115111_17aS_3724856.png" alt="Alt text" title="format usb"></p>
<p>双击UniBeast并安装<br><img src="https://static.oschina.net/uploads/space/2018/0213/115255_ZexK_3724856.png" alt="Alt text"><br><img src="https://static.oschina.net/uploads/space/2018/0213/115317_EgnB_3724856.png" alt="Alt text"><br><img src="https://static.oschina.net/uploads/space/2018/0213/115334_m6Pu_3724856.png" alt="Alt text"><br><img src="https://static.oschina.net/uploads/space/2018/0213/115431_JH70_3724856.png" alt="Alt text"><br><img src="https://static.oschina.net/uploads/space/2018/0213/115414_p3Dy_3724856.png" alt="Alt text"><br><img src="https://static.oschina.net/uploads/space/2018/0213/115450_kB3n_3724856.png" alt="Alt text"><br><img src="https://static.oschina.net/uploads/space/2018/0213/115505_2OKd_3724856.png" alt="Alt text"><br><img src="https://static.oschina.net/uploads/space/2018/0213/115525_uikz_3724856.png" alt="Alt text"></p>
<p>将下载的软件拷贝到U盘<br><img src="https://static.oschina.net/uploads/space/2018/0213/115537_S3XO_3724856.png" alt="Alt text"><br><img src="https://static.oschina.net/uploads/space/2018/0213/115631_EFbs_3724856.png" alt="Alt text"></p>
<p>将U盘插入你的PC。</p>
<h3 id="Bios设置"><a href="#Bios设置" class="headerlink" title="Bios设置"></a>Bios设置</h3><ul>
<li>cpu支持VT-d，禁用它。</li>
<li>支持CFG-Lock，禁用它。</li>
<li>支持Secure Boot Mode，禁用它。</li>
<li>支持IO Serial Port，禁用它。</li>
<li>Set OS 类型 Other OS</li>
<li>Set XHCI Handoff 选项为Enable。</li>
<li>设置第一启动为U盘 （或者重启按F12选择启动项）</li>
</ul>
<p>保存并退出</p>
<h3 id="安装macOS"><a href="#安装macOS" class="headerlink" title="安装macOS"></a>安装macOS</h3><p>选择Boot OS X Install from Install macOS high Sierra<br><img src="https://static.oschina.net/uploads/space/2018/0213/121635_V7HG_3724856.png" alt="Alt text"><br>进入安装mac 系统，这里就不截图了，安装过程中可能会重启几次。</p>
<h3 id="系统补丁"><a href="#系统补丁" class="headerlink" title="系统补丁"></a>系统补丁</h3><p>使用MultiBeast安装补丁<br><img src="https://static.oschina.net/uploads/space/2018/0213/121655_R931_3724856.png" alt="Alt text"><br><img src="https://static.oschina.net/uploads/space/2018/0213/121711_R8X3_3724856.png" alt="Alt text"><br><img src="https://static.oschina.net/uploads/space/2018/0213/121727_H49N_3724856.png" alt="Alt text"><br><img src="https://static.oschina.net/uploads/space/2018/0213/121742_kjKG_3724856.png" alt="Alt text"><br><img src="https://static.oschina.net/uploads/space/2018/0213/121801_gtoK_3724856.png" alt="Alt text"><br><img src="https://static.oschina.net/uploads/space/2018/0213/121817_wkkb_3724856.png" alt="Alt text"><br><img src="https://static.oschina.net/uploads/space/2018/0213/121831_ghKL_3724856.png" alt="Alt text"></p>
<h3 id="显卡驱动"><a href="#显卡驱动" class="headerlink" title="显卡驱动"></a>显卡驱动</h3><p><img src="https://static.oschina.net/uploads/space/2018/0213/121846_p6JB_3724856.png" alt="Alt text"><br><img src="https://static.oschina.net/uploads/space/2018/0213/121917_AGvM_3724856.png" alt="Alt text"><br><img src="https://static.oschina.net/uploads/space/2018/0213/121932_w8JX_3724856.png" alt="Alt text"></p>
<h3 id="修复声卡"><a href="#修复声卡" class="headerlink" title="修复声卡"></a>修复声卡</h3><p>参看：<a href="https://hackintosher.com/guides/get-hackintosh-audio-working/">https://hackintosher.com/guides/get-hackintosh-audio-working/</a></p>
<p>打开终端: <code>diskutil list</code> <code>diskutil mount /dev/disk0s1</code><br><img src="https://static.oschina.net/uploads/space/2018/0213/121948_lQLH_3724856.png" alt="Alt text"></p>
<p>拷贝kext到EFI-&gt;kexts-&gt;other目录下<br><img src="https://static.oschina.net/uploads/space/2018/0213/122006_IJJ4_3724856.png" alt="Alt text"></p>
<p>使用clover configurator配置<br><img src="https://static.oschina.net/uploads/space/2018/0213/122021_sxke_3724856.png" alt="Alt text"><br><img src="https://static.oschina.net/uploads/space/2018/0213/122038_U79e_3724856.png" alt="Alt text"></p>
<p>关闭clover configurator，保存config.plist. 然后重启电脑。ok，你可以听音乐了。</p>
]]></content>
      <categories>
        <category>电脑硬件</category>
      </categories>
      <tags>
        <tag>mac</tag>
        <tag>high sierra</tag>
        <tag>hackintosh</tag>
        <tag>黑苹果</tag>
        <tag>安装</tag>
        <tag>UEFI</tag>
      </tags>
  </entry>
  <entry>
    <title>安装Mac Window10 双系统，为发烧而生</title>
    <url>/%E7%94%B5%E8%84%91%E7%A1%AC%E4%BB%B6/hackintosh-window-install-20130429.html</url>
    <content><![CDATA[<p>本人使用mac pro 一段时间，深刻感受到mac pro对于开发者是如此的好用 - 爱不释手。同时也体会到pro硬件配置低引起的卡顿（图形渲染、virtual-box多开） 哎！由于经费和个人好奇心，于是…  开始吧</p>
<a id="more"></a>

<h3 id="我的需求"><a href="#我的需求" class="headerlink" title="我的需求"></a>我的需求</h3><ol>
<li>装个hackintosh用于工作</li>
<li>最好再装个window10。看看电影、打打游戏, 想想都嗨的不行。</li>
</ol>
<h3 id="硬件选择"><a href="#硬件选择" class="headerlink" title="硬件选择"></a>硬件选择</h3><p>osx系统对硬件有要求，在选择CPU、主板、显卡是要特别注意。选择一不小心可能会在之后无法安装osx, 也可能无法驱动显卡，还可能出现莫名其妙的问题。选择硬件之前请一定查是否有人成功安装。其他的就不说，直接给出参考网站: <a href="http://www.tonymacx86.com/buyersguide/march/2016">Mac硬件(可能需要翻墙)</a></p>
<h3 id="我的硬件"><a href="#我的硬件" class="headerlink" title="我的硬件"></a>我的硬件</h3><table>
<thead>
<tr>
<th align="center">硬件类型</th>
<th align="left">硬件型号</th>
<th align="center">￥价格</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>CPU</strong></td>
<td align="left">英特尔（Intel）酷睿四核 i5-6500</td>
<td align="center"><code>1480.00</code></td>
</tr>
<tr>
<td align="center"><strong>主板</strong></td>
<td align="left">技嘉（GIGABYTE）Z170-D3H主板</td>
<td align="center"><code>1000.00</code></td>
</tr>
<tr>
<td align="center"><strong>显卡</strong></td>
<td align="left">EVGA GTX950 2G SC ACX2.0 cooler</td>
<td align="center"><code>1100.00</code></td>
</tr>
<tr>
<td align="center"><strong>硬盘</strong></td>
<td align="left">三星(SAMSUNG) 850 EVO 250G SATA3 固态硬盘</td>
<td align="center"><code>580.00</code></td>
</tr>
<tr>
<td align="center"><strong>硬盘</strong></td>
<td align="left">希捷(SEAGATE)1TB 7200转64M SATA3 台式机硬盘</td>
<td align="center"><code>330.00</code></td>
</tr>
<tr>
<td align="center"><strong>内存</strong></td>
<td align="left">英睿达(Crucial)铂胜运动LT系列DDR4 2400 8G台式机内存 * 2</td>
<td align="center"><code>470.00</code></td>
</tr>
<tr>
<td align="center"><strong>机箱</strong></td>
<td align="left">美商海盗船（USCorsair）SPEC-03 黑色红光 中塔机箱</td>
<td align="center"><code>350.00</code></td>
</tr>
<tr>
<td align="center"><strong>水冷</strong></td>
<td align="left">美商海盗船（USCorsair）H55 CPU散热器</td>
<td align="center"><code>500.00</code></td>
</tr>
</tbody></table>
<p><strong>注意：硬件之间要相互支持。我选择的主板不支持蓝牙，也没有买无线网卡，osx的airdrop功能无法使用。你可以选择带蓝牙功能的主板并配上带蓝牙功能的无线网卡（单独蓝牙硬件）</strong></p>
<h3 id="组装主机"><a href="#组装主机" class="headerlink" title="组装主机"></a>组装主机</h3><p>自己看着办，我无能为力。</p>
<h3 id="制作El-Capitan-UEFI-USB安装启动盘"><a href="#制作El-Capitan-UEFI-USB安装启动盘" class="headerlink" title="制作El Capitan UEFI USB安装启动盘"></a>制作El Capitan UEFI USB安装启动盘</h3><ol>
<li><p>准备16G的USB盘和一台osx系统的电脑(如果只有window，请看后面)</p>
</li>
<li><p>通过 “Mac App Store” 更新下载，请进”Mac App Store下载” Install OS X El Capitan<br> <img src="http://ww3.sinaimg.cn/mw690/0065glrAgw1f62y34g8r3j30go0an0up.jpg" alt="Alt text" title="install os x el capitan"></p>
<p> 下载可能有点慢（可能需要翻墙）</p>
</li>
<li><p>通过网盘下载，这里有小编亲手打包的”OS X El Capitan”镜像已上传到百度盘。提供下载</p>
<ul>
<li>文件名：安装 OS X El Capitan 1.7.28 2015-10-01.dmg</li>
<li>百度盘 ：<a href="http://pan.baidu.com/s/1pLIMAD1">http://pan.baidu.com/s/1pLIMAD1</a></li>
<li>提取码：593r</li>
</ul>
</li>
<li><p>格式话U盘，u盘名字为USB<br> <img src="http://ww3.sinaimg.cn/mw690/0065glrAgw1f62y353duxj30no0kwaew.jpg" alt="Alt text" title="format usb"></p>
</li>
<li><p>打开「应用程序」-「实用工具」-「终端」，复制下面的命令，并粘贴到「终端」里，按回车运行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo /Applications/Install\ OS\ X\ El\ Capitan.app/Contents/Resources/createinstallmedia --volume /Volumes/USB --applicationpath /Applications/Install\ OS\ X\ El\ Capitan.app —nointeraction</span><br></pre></td></tr></table></figure></li>
<li><p>下载<a href="http://sourceforge.net/projects/cloverefiboot/">Cloverefiboot</a>, 右键「show package contents 」。找到Clover_v2.3k_r3423-UEFI-UB.pkg，双击安装UEFI启动到U盘。<br> <img src="http://ww3.sinaimg.cn/mw690/0065glrAgw1f62y33z603j30kc0faq5t.jpg" alt="Alt text" title="clover efi boot"></p>
</li>
<li><p>windows系统制作osx启动盘。请参考: <a href="https://www.zhihu.com/question/19812727">教程</a></p>
</li>
</ol>
<h3 id="修改Bios-UEFI方式启动U盘"><a href="#修改Bios-UEFI方式启动U盘" class="headerlink" title="修改Bios,UEFI方式启动U盘"></a>修改Bios,UEFI方式启动U盘</h3><ol>
<li><p>设置Bios 支持UEFI<br> <img src="http://ww1.sinaimg.cn/mw690/0065glrAgw1f6325f8w00j3112112tds.jpg" alt="Alt text" title="bios"></p>
<p> <img src="http://ww1.sinaimg.cn/mw690/0065glrAgw1f6325mko1mj3112112gq5.jpg" alt="Alt text" title="bios"></p>
<p> <img src="http://ww1.sinaimg.cn/mw690/0065glrAgw1f632pgurc6j3112112dlk.jpg" alt="Alt text" title="bios"></p>
</li>
</ol>
<h3 id="安装el-capitan-到固态硬盘"><a href="#安装el-capitan-到固态硬盘" class="headerlink" title="安装el capitan 到固态硬盘"></a>安装el capitan 到固态硬盘</h3><ol>
<li><p>选择install OS X<br> <img src="http://ww2.sinaimg.cn/mw690/0065glrAgw1f62y35qv55j30hs0a03yn.jpg" alt="Alt text" title="mac install"></p>
</li>
<li><p>选择语言<br> <img src="http://ww1.sinaimg.cn/mw690/0065glrAgw1f62y36gi2gj30se0l8dil.jpg" alt="Alt text" title="mac install"></p>
</li>
<li><p>选择你的固体硬盘<br> <img src="http://ww3.sinaimg.cn/mw690/0065glrAgw1f62y379tqzj30sc0letac.jpg" alt="Alt text" title="mac install"></p>
</li>
<li><p>格式化硬盘</p>
<p> <img src="http://ww3.sinaimg.cn/mw690/0065glrAgw1f62y37whnrj30hs0dcmys.jpg" alt="Alt text" title="mac install"></p>
</li>
<li><p>install OS X</p>
<p> <img src="http://ww1.sinaimg.cn/mw690/0065glrAgw1f62y38zx9oj30hs0dejs1.jpg" alt="Alt text" title="mac install"></p>
</li>
<li><p>OS X 安装好了。<br> <img src="http://ww3.sinaimg.cn/mw690/0065glrAgw1f62y39uiedj30hs0ddgpl.jpg" alt="Alt text" title="mac install"></p>
</li>
</ol>
<h3 id="Hackintosh驱动篇"><a href="#Hackintosh驱动篇" class="headerlink" title="Hackintosh驱动篇"></a>Hackintosh驱动篇</h3><p>Hackintosh的驱动是最为麻烦的，显卡使用相对型号的web driver。驱动的详细安装介绍另起文章说明。</p>
<h3 id="安装Window-10前准备"><a href="#安装Window-10前准备" class="headerlink" title="安装Window 10前准备"></a>安装Window 10前准备</h3><ol>
<li>调整安装OSX固态盘大小，腾出硬盘空间安装Window 10<ul>
<li>我的固态硬盘大小250G，170G安装Mac，80G安装Window 10</li>
</ul>
</li>
</ol>
<ul>
<li>打开「应用程序」-「实用工具」-「终端」</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">diskutil list</span><br></pre></td></tr></table></figure>
<ul>
<li>调整硬盘大小</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo diskutil resizeVolume /dev/disk0s2 170GB </span><br></pre></td></tr></table></figure>
<ul>
<li><p>调整后硬盘大小</p>
<p>  <img src="http://ww2.sinaimg.cn/mw690/0065glrAgw1f62z9gmspmj30hk04w0tv.jpg" alt="Alt text" title="win install"></p>
</li>
</ul>
<h3 id="制作Window-10-UEFI-U盘"><a href="#制作Window-10-UEFI-U盘" class="headerlink" title="制作Window 10 UEFI U盘"></a>制作Window 10 UEFI U盘</h3><ol>
<li><p>下载Window 10 iso安装文件，最好选择64bit的安装包。<a href="http://www.itellyou.cn/">下载地址</a></p>
</li>
<li><p>格式化U盘，请务必选择「MS-DOS(FAT)」</p>
</li>
<li><p>在「launchpad」中打开「Boot Camp Assistant」<br> <img src="http://ww3.sinaimg.cn/mw690/0065glrAgw1f6303tw70sj30ov0ic40x.jpg" alt="Alt text" title="win install"></p>
</li>
<li><p>点「continue」继续</p>
</li>
<li><p>选择下载的Window 10.ISO文件，「continue」写入U盘<br> <img src="http://ww2.sinaimg.cn/mw690/0065glrAgw1f6307aur77j30ov0icabm.jpg" alt="Alt text" title="win install"></p>
</li>
</ol>
<h3 id="安装Window10"><a href="#安装Window10" class="headerlink" title="安装Window10"></a>安装Window10</h3><ol>
<li><p>重启系统，U盘启动进入Window安装</p>
</li>
<li><p>选择没有使用的80G作为Window安装盘<br> <img src="http://ww2.sinaimg.cn/mw690/0065glrAgw1f630qfhsd4j31560obwh7.jpg" alt="Alt text" title="win install"></p>
</li>
<li><p>点「install」安装<br> <img src="http://ww2.sinaimg.cn/mw690/0065glrAgw1f6313mpr9yj314t0mrgnp.jpg" alt="Alt text" title="win install"></p>
</li>
<li><p>安装成功<br> <img src="http://ww2.sinaimg.cn/mw690/0065glrAgw1f630qmkiiwj316c0paacx.jpg" alt="Alt text" title="win install"></p>
</li>
</ol>
<h3 id="修改Window10引导启动"><a href="#修改Window10引导启动" class="headerlink" title="修改Window10引导启动"></a>修改Window10引导启动</h3><ol>
<li>重启系统，进入Mac系统</li>
</ol>
<ul>
<li>打开「应用程序」-「实用工具」-「终端」, 挂载EFI启动盘</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">diskutil mount /dev/disk0s1</span><br></pre></td></tr></table></figure>
<ol start="2">
<li><p>将Mac的EFI引导程序拷贝到microsoft<br> <img src="http://ww1.sinaimg.cn/mw690/0065glrAgw1f631iu7n22j30s70ef0us.jpg" alt="Alt text" title="win install"></p>
</li>
<li><p>备份原有bootmgfw.efi 用mac的BOOTX64.efi替换到bootmgfw.efi<br> <img src="http://ww1.sinaimg.cn/mw690/0065glrAgw1f631j2zabfj30s70efdj1.jpg" alt="Alt text" title="win install"></p>
</li>
<li><p>重启系统，选择你想进入的系统吧<br> <img src="http://ww2.sinaimg.cn/mw690/0065glrAgw1f63254x49hj3112112wi4.jpg" alt="Alt text" title="win install"></p>
</li>
</ol>
]]></content>
      <categories>
        <category>电脑硬件</category>
      </categories>
      <tags>
        <tag>mac</tag>
        <tag>hackintosh</tag>
        <tag>黑苹果</tag>
        <tag>安装</tag>
        <tag>UEFI</tag>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title>让你的Github项目持续集成，基于Travis-CI Coveralls</title>
    <url>/%E5%B7%A5%E5%85%B7/howto-github-travisci-coveralls-20170120.html</url>
    <content><![CDATA[<p>Travis-CI是国外新兴的开源持续集成构建项目，支持Github项目，使用了小清新的yml语法，通过yml语法来驱动执行。Github项目的支持非常简单，开通Travis后只需编写.travis.yml就能完成持续集成。</p>
<p>Coveralls是一个自动化测试覆盖率的服务，它能提供代码覆盖率并友好的展现。</p>
<p>让我们现在开始吧！</p>
<a id="more"></a>

<h3 id="持续集成Travis-CI"><a href="#持续集成Travis-CI" class="headerlink" title="持续集成Travis CI"></a>持续集成Travis CI</h3><p>travis对Github的支持非常好，而且是免费使用。当然它也提供私有的专业服务，有点小贵。</p>
<h4 id="开通Travis"><a href="#开通Travis" class="headerlink" title="开通Travis"></a>开通Travis</h4><p>浏览器中输入<a href="https://travis-ci.org/">travis</a>网址<a href="https://travis-ci.org/%E3%80%82">https://travis-ci.org/。</a></p>
<p><img src="http://wx4.sinaimg.cn/mw690/0065glrAgy1fbxguw6unhj316s0pxn0w.jpg" alt="Alt text" title="travis 1"></p>
<p>使用github账号授权登录。添加项目，这里使用我写的Golang示例项目common。</p>
<p><img src="http://wx2.sinaimg.cn/mw690/0065glrAgy1fbxguwo7epj316w0lwwgn.jpg" alt="Alt text" title="travis 2"></p>
<h4 id="编写-travis-yml"><a href="#编写-travis-yml" class="headerlink" title="编写.travis.yml"></a>编写.travis.yml</h4><p>在Github项目根目录下添加.travis.yml</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">language: <span class="keyword">go</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span>:</span><br><span class="line">  - <span class="number">1.7</span>.x</span><br><span class="line">  - master</span><br><span class="line"></span><br><span class="line">notifications:</span><br><span class="line">  email:</span><br><span class="line">    recipients:</span><br><span class="line">      - gunsluo@gmail.com</span><br><span class="line">  on_success: change</span><br><span class="line">  on_failure: always</span><br><span class="line"></span><br><span class="line">install:</span><br><span class="line"></span><br><span class="line">before_install: </span><br><span class="line"></span><br><span class="line">script:</span><br><span class="line">  - <span class="keyword">go</span> build</span><br><span class="line"></span><br><span class="line">before_deploy: </span><br><span class="line"></span><br><span class="line">deploy: </span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>说明</p>
<ol>
<li>language指定开发语言</li>
<li>notifications持续集成后邮件通知设置</li>
<li>install依赖安装</li>
<li>before_install依赖安装前执行</li>
<li>script集成脚本</li>
<li>before_deploy部署脚本前执行</li>
<li>deploy部署脚本</li>
</ol>
<p>其它配置项</p>
<ul>
<li><a href="https://docs.travis-ci.com/">官方参考文档</a></li>
</ul>
<h4 id="提交-travis-yml"><a href="#提交-travis-yml" class="headerlink" title="提交.travis.yml"></a>提交.travis.yml</h4><p>提交.travis.yml到Github，自动触发持续集成，到<a href="https://travis-ci.org/gunsluo/common%E6%9F%A5%E7%9C%8B%E7%BB%93%E6%9E%9C">https://travis-ci.org/gunsluo/common查看结果</a></p>
<p><img src="http://wx3.sinaimg.cn/mw690/0065glrAgy1fbxguxhy4ij316i0gz0ut.jpg" alt="Alt text" title="travis 3"></p>
<p>到这里就用travis完成了持续集成，简单吧。</p>
<h3 id="测试覆盖率Coveralls"><a href="#测试覆盖率Coveralls" class="headerlink" title="测试覆盖率Coveralls"></a>测试覆盖率Coveralls</h3><p>首先编写自己的单元测试代码，我提供的实例项目已经实现。如何编写单元测试不是这里的重点，先忽略过吧。</p>
<h4 id="开通Coveralls"><a href="#开通Coveralls" class="headerlink" title="开通Coveralls"></a>开通Coveralls</h4><p>在<a href="https://coveralls.io/">coveralls</a>官方网站使用github账号登录授权。</p>
<p><img src="http://wx2.sinaimg.cn/mw690/0065glrAgy1fbxguy3s76j316q0m1tbt.jpg" alt="Alt text" title="coveralls 2"></p>
<h4 id="添加项目"><a href="#添加项目" class="headerlink" title="添加项目"></a>添加项目</h4><p><img src="http://wx4.sinaimg.cn/mw690/0065glrAgy1fbxguy6wvnj316r0kraet.jpg" alt="Alt text" title="coveralls 3"></p>
<h4 id="加密repo-token"><a href="#加密repo-token" class="headerlink" title="加密repo_token"></a>加密repo_token</h4><p>查看coveralls的repo_token。<br><img src="http://wx1.sinaimg.cn/mw690/0065glrAgy1fbxgv2on11j30ws0nl44k.jpg" alt="Alt text" title="coveralls 4"></p>
<p>repo_token涉及安全不应该提交到.travis.yml，coveralls提供了非对称加密repo_token的方法。</p>
<p>加密命令travis是用ruby编写的。ruby gem的国外下载源很慢，更改安装源，提高下载速度。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gem sources --add https://gems.ruby-china.org/ --remove https://rubygems.org/</span><br><span class="line">gem sources -l</span><br></pre></td></tr></table></figure>
<p>安装加密命令travis</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gem install travis</span><br></pre></td></tr></table></figure>
<p>加密</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">travis encrypt COVERALLS_TOKEN=your_repo_token</span><br></pre></td></tr></table></figure>
<p><img src="http://wx2.sinaimg.cn/mw690/0065glrAgy1fbxi12nkeoj30so0c740o.jpg" alt="Alt text" title="coveralls 5"></p>
<h4 id="修改-travis-yml"><a href="#修改-travis-yml" class="headerlink" title="修改.travis.yml"></a>修改.travis.yml</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">language: go</span><br><span class="line"></span><br><span class="line">go:</span><br><span class="line">  - master</span><br><span class="line"></span><br><span class="line">notifications:</span><br><span class="line">  email:</span><br><span class="line">    recipients:</span><br><span class="line">      - gunsluo@gmail.com</span><br><span class="line">  on_success: change</span><br><span class="line">  on_failure: always</span><br><span class="line"></span><br><span class="line">install:</span><br><span class="line">  - go get github.com/mattn/goveralls</span><br><span class="line"></span><br><span class="line">before_install: </span><br><span class="line"></span><br><span class="line">script:</span><br><span class="line">  - go <span class="built_in">test</span> -v -covermode=count -coverprofile=coverage.out</span><br><span class="line">  - <span class="variable">$HOME</span>/gopath/bin/goveralls -coverprofile=coverage.out -service=travis-ci -repotoken <span class="variable">$COVERALLS_TOKEN</span></span><br><span class="line"></span><br><span class="line">before_deploy: </span><br><span class="line"></span><br><span class="line">deploy: </span><br><span class="line"></span><br><span class="line">env:</span><br><span class="line">  global:</span><br><span class="line">    secure: <span class="string">&quot;q1OEufKH4mGRxto7qyrBQKmuEXUZl/JKJWEx2zLMNkSVI9xxEvDSFfpiyNlQevq8ZND34xsOH1+jVQMmAttFc5Ry6cDT/Lgb9F6Cc4WSjPVEpW69dYoyGAPvQNPhWQf8M5yYbUfEQqq088TPrvcIqoheZtdjEg4jRGzrOEu2cOubX5xFTBeRowfilzzOsHCfYIofpWFsEug0ffeo5RrgxYxN7w9utpHmIGU0vDaUZ/Ui0P4zxLQ1gG/18GAykj4+QnYVGDip+kOwCa/EevvmS0OZmwIkujgu1Xul3Dm5M9A1LoyCWaa5NKQh8SBqU4XZErhXlTIl5BKnLI6f7sElcFrH0ShFXosbfbgmmpwDB2et5RHYXoFAOE2qsitV3ZD2WvzGOwNtJNxYB//LCroza1JcGZe/PF+5Vkfzb9JwDcxCi2hP6HcA+oCSp3hvLkmQOgbANPa2ALCIi4r+PaGP5LNAfP4Izn9dEqRB/whGja1zYh8xgT+Yoo7useiMlYl0RcajkZ5EDJadR+UzCqqHxoTHiVw0qqO0EmN+N3wKDHYYfMebn9GSpLcWReZJajZxyzQ+6MHVbFrjJqKRgu4T+OePCv57vLp+gYjxDMqVsyIdlRTWzvaGmf+6IHUJMGztEc7QvOUPabNOawSEtquY2s2Q+IWiBrt/KjtofaJOIBA=&quot;</span></span><br></pre></td></tr></table></figure>
<p>说明</p>
<ol>
<li><code>go get github.com/mattn/goveralls</code> goveralls是coveralls对golang的测试覆盖率支持命令</li>
<li><code>go test -v -covermode=count -coverprofile=coverage.out</code> golang生成测试覆盖率文件</li>
<li><code>$HOME/gopath/bin/goveralls -coverprofile=coverage.out -service=travis-ci -repotoken $COVERALLS_TOKEN</code> 将测试覆盖率文件提交给coveralls</li>
<li>env环境变量设置，travis提供的repo_token安全方式之一</li>
</ol>
<h3 id="Github项目添加图标"><a href="#Github项目添加图标" class="headerlink" title="Github项目添加图标"></a>Github项目添加图标</h3><p>travis页面复制图标标签<br><img src="http://wx2.sinaimg.cn/mw690/0065glrAgy1fbxguzdqv4j316f0j0n01.jpg" alt="Alt text" title="coveralls 2"></p>
<p>coveralls页面复制图标标签<br><img src="http://wx3.sinaimg.cn/mw690/0065glrAgy1fbxgv035iyj316r0m37a4.jpg" alt="Alt text" title="coveralls 2"></p>
<p>将标签写入README.md</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[![Build Status](https://travis-ci.org/gunsluo/common.svg?branch=master)](https://travis-ci.org/gunsluo/common) [![Coverage Status](https://coveralls.io/repos/github/gunsluo/common/badge.svg?branch=master)](https://coveralls.io/github/gunsluo/common?branch=master)</span><br></pre></td></tr></table></figure>
<p>提交后检查下效果吧</p>
<p><img src="http://wx4.sinaimg.cn/mw690/0065glrAgy1fbxi97wna5j30ri07rmxg.jpg" alt="Alt text" title="coveralls 2"></p>
<p>ok, 项目可以直观看到编译和覆盖率的情况。</p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>golang</tag>
        <tag>ci</tag>
        <tag>github</tag>
        <tag>travis</tag>
        <tag>coveralls</tag>
        <tag>持续集成</tag>
      </tags>
  </entry>
  <entry>
    <title>IM即时通讯系统架构设计</title>
    <url>/im/im-system-architecture-20170628.html</url>
    <content><![CDATA[<p>即时通信（Instant Messaging，简称IM）是一种通过网络进行实时通信的系统，允许两人或多人使用网络即时的传递文字消息、文件、语音与视频交流。<br>微信、QQ基本占领的IM即时通讯系统的半个江湖，易信、钉钉、飞信、旺旺、咚咚、陌陌也各有市场。查询了相关资料后设计了这篇高并发IM通讯系统，不当之处，请指正。**(最终架构图在<a href="/im/im-system-architecture-20170628.html#%E6%80%BB%E7%BB%93">总结</a>章节)**</p>
<a id="more"></a>

<p>IM不就是聊天工具么? 两个用户（Client），一个Server转发聊天内容就可以完成聊天功能。最早的聊天室就是这样设计开发的。问题在于用户量不断上涨，一台服务器无法应对成千上万的用户请求。如何接入这么多用户，做到高并发？这就是今天要解决的问题，首先应该对系统进行分层，细化功能点确定每层需要完成的功能。<br>IM系统的三层架构(不包括client)：</p>
<ul>
<li>接入层: 用户的连接接入(协议是tcp、udp、http、socketio等，是短链接、长链接。)，接受客户端发送的消息，推送消息到客户端。</li>
<li>逻辑层: 接收接入层接入的消息，对消息进行校验，去重，验证，过滤等业务操作，存储消息内容，本层服务是无状态的，容易扩展。</li>
<li>存储层: 处理逻辑层注册的消息，主要维护消息发送者客户端状态功能，保存发送者接入路由信息（也就是从哪个机器接入，最新的msgid是多少等信息）。本层服务有状态的，设计时应该关注本层的扩展性。</li>
</ul>
<p>我给这三层对应服务的命名：接入层服务叫tranfer（客户端连接管理，接受转发推送消息模块），逻辑层服务叫logic(业务逻辑模块)，存储层服务router（用户在线状态，用户接入路由信息保存等）</p>
<h3 id="消息轮转流程"><a href="#消息轮转流程" class="headerlink" title="消息轮转流程"></a>消息轮转流程</h3><p>我接着了解下IM系统的消息轮转流程。首先客户发送信息流程</p>
<ol>
<li>客户端连接上tranfer，发送消息到tranfer服务，这个消息请求中包括用户UID、消息内容、发送消息时间、发送设备ID等。然后等待ack响应。 </li>
<li>tranfer接收到客户端发送的信息后，将消息转发到logic服务。</li>
<li>logic为消息生成msgid(通常由uid,deviceid,发送时间hash再加上自增id得到，这样msgid就是有序的)，logic通过msgid查询消息是否已经发送进行排重，重复响应tranfer消息重复发送。</li>
<li>logic将消息注册到router，更新发送消息用户的在线状态，保存消息的来源（来自哪个tranfer，相当于路由表），把消息来源存储到cache/db。完成后，router给logic服务ack响应。</li>
<li>logic收到ack后，把ack响应给tranfer服务。</li>
<li>tranfer将此带msgid的响应ack返回给客户端，客户端收到ack，即可确定<strong>消息发送成功</strong>。</li>
</ol>
<p>客户端发送消息成功，接着就是另一边的客户端接收消息，也就是消息投递。这里需要说明的是客户A发送消息到客户B（群B），他们之间就建立了会话，我们叫它sessoin(有些叫channel，room【群】)。</p>
<ol>
<li>logic从router服务获取session上发送到接收者的用户列表。</li>
<li>logic从route服务查找出用户列表中所有在线用户的tranfer地址。</li>
<li>logic将消息发送到对应的tranfer地址。</li>
<li>tranfer收到消息并将其发送到客户端。</li>
<li>最终客户端接收到消息内容。</li>
</ol>
<p>客户端接收消息OK了。但是有个问题，如果用户在线却一直不发送信息，怎么判断他在线呢？所以客户端应该定时发送心跳包给tranfer，以告知transfer客户端的存在，这就是hearbeat。</p>
<ol>
<li>客户端发送hearbeat到tranfer，hearbeat包括用户UID、发送消息时间、发送设备ID外，还用户所在的所有session和在session中的最新msgid。</li>
<li>tranfer转发hearbeat到logic</li>
<li>logic到router更新发送消息用户的在线状态，保存消息的来源（来自哪个tranfer，相当于路由表）。</li>
<li>logic到router查询session的最新msgid，如果上报msgid不等于查询msgid，启动下发消息流程。</li>
<li>logic下发未读消息到客户端。</li>
</ol>
<p>hearbeat心跳时间间隔根据不同的网络环境，心跳发送成功次数，信息发送次数等因素进行动态调整。</p>
<p>了解了IM的消息轮转流程和分层结构，可以给出一个粗略设计图。<br><img src="http://wx4.sinaimg.cn/mw690/0065glrAgy1fh1d8v5sk5j312c0zu0wl.jpg" alt="Alt text"></p>
<p>图中为IM系统进行了分层，每层服务有多点（还没有负载均衡方案，当可以同时提供多点服务），对于数据存储可以使用cache/db两层模式，cache提供读取性能，db用户持久化。在推送下发消息使用消息队列，可以做到解耦、异步、高并发。<br><img src="http://wx1.sinaimg.cn/mw690/0065glrAgy1fh2u0jizcqj31ay0zmdkb.jpg" alt="Alt text"></p>
<h3 id="高可用"><a href="#高可用" class="headerlink" title="高可用"></a>高可用</h3><p>图中三层中的服务节点扩展为多节点，不同的客户端连接不同的节点以达到接入能力的提升。接入能力提升，但每个节点还存在着单点问题。如何解决单点问题，达到高可用?</p>
<p>接入层的tranfer服务是客户端的接入口，使用长链接时，服务要保持链接不中断。tranfer是无状态，但要保持本次连接状态（本次连接断开可以连接其它tranfer）。</p>
<ol>
<li>对于不分区域的接入情况，可以使用负载均衡器将用户请求分配到不同的tranfer上，如果有一台服务宕机，负载均衡器将该节点移除。这样会出现该节点所有连接会断开一次，客户端重连，再由负载均衡器分配到其他节点上。缺点是宕机会加大其他机器的负荷。（负载均衡的软实现有lvs+keepalived，nginx upstream，haproxy + pacemaker，硬负载有f5、array。根据业务情况选择实现)。</li>
<li>对于不分区域的接入情况，对于单点宕机时可不可以不增加其它节点负荷。答案是YES，使用transfer服务主备方案，主transfer服务宕机，备接替工作。由于这里使用tcp长连接，主节点的连接还是会中断一次，还好客户端有重连机制，重连连接会到备节点上。transfer的主备切换如何实现呢？有两种方式，第一种：使用vrrp协议 + 接口监视，第二种：使用下面会将到的monitor监控通知。 主备方案缺点很明显，有一半的备节点处于空闲状态，资源浪费严重，优点是主备方案实施相对其它要简单些。在前期（业务快速增长期）使用，暂时不考虑节约成本问题。</li>
<li>分区域接入场景，对于来自不同地区的用户，地区之间的网络差异明显。对于这样情况，应该按区域部署的transfer服务，不同IDC部署的transfer服务。那问题来了，客户端如何选择接入哪个(几个)transfer呢？通常增加查询transfer地址列表接口，通过客户端ip的到用户区域，返回transfer地址列表，客户端再尝试在地址列表中选择最优地址。</li>
</ol>
<p>通过以上策略就能是接入层transfer高可用，接下来分析逻辑层。接入层、逻辑层、存储层的通讯通常采用RPC。逻辑层logic服务是无状态，每个节点都可以处理来自transfer的消息。</p>
<ol>
<li>最简单的方式就是使用nginx upstream做转发达到负载的功能，logic接收nginx转发消息。需要注意的是nginx本身也需要搭建集群解决单点问题。</li>
<li>增加moniter服务监控transfer、logic、router的健康情况，transfer、logic、router启动会定时向monitor发送心跳hearbeat，当monitor监控到会logic有节点出现故障，则推送新logic地址列表到transfer，transfer更新本地logic地址列表。transfer使用新的logic地址发送消息。这里存在logic宕机，transfer未及时更新logic列表任然将数据发送到故障节点的问题，所以transfer必须有重试机制和重试队列，重试策略与moniter的心跳发送频率有关，具体策略也按实际策略而定。moniter从设计上是无状态，集群的，集群中每个节点都有相同配置。优点从业务角度做负载均衡，可以自定义易扩展，缺点是增加了服务的耦合性。需要强调的无论如何都需要moniter监控服务，通知transfer更新地址列表接口增加了耦合性。</li>
</ol>
<p>剩下存储层高可用问题，router服务是存储用户的在线状态，服务本身就是有状态的。</p>
<ol>
<li>logic通过一致性hash算法将消息散列到不同的router，当有节点故障时，散列该节点的新消息转发到其他节点，当老消息中处理的消息就无法处理。并且节点回复正常是，还需要做数据迁移。（可作为前期版本过度）</li>
<li>基于上面的问题，可以使用router主备策略，logic转发的消息同时发送到主备，当只有主工作，当主宕机后，moniter（或logic）感知到router宕机，提升备为主。同时告警节点故障，恢复节点是，从运行节点中恢复数据。优点是解决了高可用，最大的缺点是一致性hash使扩容需要迁移数据。 </li>
</ol>
<p>修改后的架构图。<br><img src="http://wx1.sinaimg.cn/mw690/0065glrAgy1fh2u1wyf8kj31ca0zs0xe.jpg" alt="Alt text"></p>
<h3 id="服务扩容"><a href="#服务扩容" class="headerlink" title="服务扩容"></a>服务扩容</h3><p>随着用户的增长，现有机器无法承载是就需要进行服务扩容，怎样才能快捷方便的进行服务扩容呢？能否做到auto-scaling？<br>上面讲到接入层上层使用的负载均衡器，当transfer增加节点服务时，启动新节点后，将节点信息配置到负载均衡器并加载。假如负载策略是平均分配，新接入用户就会分配到新的transfer，直到每个节点接入量平衡。当然也可以按其它策略进行分配，例如A机器配置高可以承载更多的接入量，就可以调整分配策略分配更多接入到A。</p>
<p>对于逻辑层而言，增加logic节点，logic注册到monitor，monitor更新本地logic地址列表，通知transfer服务logic地址已改变，最后transfer调整发送策略完成扩展。</p>
<p>存储层服务扩容，比较麻烦，由于之前使用了一致性hash算法，增加删除节点都需要进行数据迁移，扩展能力相对差些。一致性hash算法是根本问题所在，那我们使用逻辑层的monitor + 主备方式可以吗？monitor方式的问题是请求随机发送到router服务上，而不是用户不变时都请求同一服务，这样会大大降低cache的命中率，降低系统性能。<br>从业务场景出发，router是维护用户状态的，用户数量是有限的，是可以提前预告在线和压力的。微信架构中对于相关设计是单点容灾策略，他整个系统又按用户uid范围进行分Set，每个Set都是一个完整的、独立的子系统。分Set设计目的是为了做灾难隔离，一个Set出现故障只会影响该Set内的用户，而不会影响到其它用户。他使用仲裁节点（类似monitor）判断节点是否正常，再配合嵌入式路由表，将宕机节点请求转移到其它节点。嵌入式路由表是核心，这里就不说原理了，它就是通过维护client(我们这里的logic)与查询服务(我们这里的router)的路由信息一致，其实就是通过在每个报文中带上路由信息，在配合仲裁节点可动态修改路由表，以达到节点的增加删除切换。<br><img src="http://wx1.sinaimg.cn/mw690/0065glrAgy1fh2u5dcu45j30y70diaav.jpg" alt="Alt text"></p>
<p>结论：使用一致性hash算法和预估压力就能满足打部分要求，使用这种方案做好节点的数据迁移（其实不用迁移，cache重新命中就可以）。 后期可以考虑嵌入式路由表节约成本和auto-scaling.</p>
<h3 id="统计、监控与配置"><a href="#统计、监控与配置" class="headerlink" title="统计、监控与配置"></a>统计、监控与配置</h3><p>为了时刻知道线上服务的状态，做到提前预警，整个系统还应该有监控。其次，业务数据的统计量也很重要，知道我们下一步该业务中心，以及可能产出的瓶颈。通过这些数据，可能需要去修改服务配置、启动新服务等，配置管理与下发同样重要。</p>
<ol>
<li>监控：agent，监控服务所属服务器的状态（CPU、MEM、IO等），核心进程状态（logic、router等），通常核心进程状态监控不应用到生产环境，开启会影响性能。如有必要才开启</li>
<li>统计：statis，统计点数据上报，业务数据和非业务数据都可以。</li>
<li>配置: etcd，配置下发功能。</li>
</ol>
<h3 id="序列号生成器"><a href="#序列号生成器" class="headerlink" title="序列号生成器"></a>序列号生成器</h3><p>在消息轮转流程中提到msgid的生成，要求是msgid是线性递增的。序列号生成器需要再系统中独立存在运行。IM中通常按用户来自增长的，可以使用redis的inrc来简单实现。</p>
<h3 id="富文本消息"><a href="#富文本消息" class="headerlink" title="富文本消息"></a>富文本消息</h3><p>对于图片、声音、视频的消息，在IM系统中，客户端本地上传富文本到文件服务器，文件服务器返回url，客户端再将url作为普通消息发送（文本类型要标识），接收端收到消息后，再去服务器上下载。 文件服务器可以选择第三方服务，自建建议使用ceph对象存储服务。</p>
<h3 id="网络传输协议"><a href="#网络传输协议" class="headerlink" title="网络传输协议"></a>网络传输协议</h3><p>IM系统传输使用UDP、TCP、基于TCP的http这几种协议中的一种或几种。</p>
<ul>
<li>UDP协议实时性更好，但是如何处理安全可靠的传输并且处理不同客户端之间的消息交互是个难题；</li>
<li>TCP协议安全可靠的，如何保证单机服务器高并发量，如何做到灵活，扩展的架构。<br>业界选择TCP居多，建议选择TCP。</li>
</ul>
<h3 id="数据传输格式"><a href="#数据传输格式" class="headerlink" title="数据传输格式"></a>数据传输格式</h3><p>对传输的数据应该进行压缩，安全性处理。基于这些要求，选择probuffer是再合适不过了(建议)。当然json格式也是可以的选择，json没有压缩报文，但清晰明了。</p>
<h3 id="跨区域网络问题"><a href="#跨区域网络问题" class="headerlink" title="跨区域网络问题"></a>跨区域网络问题</h3><p>目前想到的只能走IDC机房专线。 </p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>下图是对IM系统认知的总结，总体来说我对im系统还不太了解，还需要继续研究学。<br><img src="http://wx3.sinaimg.cn/mw690/0065glrAgy1fh2ulo9hssj316y0xujvw.jpg" alt="Alt text"></p>
<h3 id="参考项目"><a href="#参考项目" class="headerlink" title="参考项目"></a>参考项目</h3><ul>
<li><a href="https://github.com/Terry-Mao/gopush-cluster">gopush-cluster</a></li>
<li><a href="https://github.com/Terry-Mao/goim">goim</a></li>
<li><a href="https://github.com/actorapp/actor-platform">actor.im</a></li>
</ul>
]]></content>
      <categories>
        <category>im</category>
      </categories>
      <tags>
        <tag>im</tag>
        <tag>即时通讯</tag>
      </tags>
  </entry>
  <entry>
    <title>IM即时通讯系统业务流程</title>
    <url>/im/im-system-workflow-20170705.html</url>
    <content><![CDATA[<p>上篇文件讲述了IM系统的整体架构(<a href="/im/im-system-architecture-20170628.html">查看</a>)，对细节的业务流程没有详细的说明。这篇文章主要梳理消息的流转过程，也就是用户A发送消息给客户B，消息是如何到达用户B的。主要流程有消息发送，消息推送，心跳消息</p>
<a id="more"></a>
<p>首先对上文中没提到的概念进行说明：</p>
<ul>
<li>Session 用户在一定时间的有效会话服务。</li>
<li>Room    用户对用户发送的消息(个人消息、群消息、讨论组消息)，其实就是一个发布订阅过程，发布者将消息发送到room，订阅者从room中取走消息，对于这样的上下文叫room，有些IM系统中将个人消息的上下文叫channel，这里我统一叫room，只不过个人消息是一个订阅者的room。</li>
<li>Msg Queue 未读消息队列</li>
<li>hearbeat 心跳服务器，之前包括在了logic中。</li>
<li>caller 消息推送触发者，可能是hearbeat，可能是logic。</li>
<li>sequence 消息序列号生成器</li>
</ul>
<h3 id="消息发送流程"><a href="#消息发送流程" class="headerlink" title="消息发送流程"></a>消息发送流程</h3><p>用户A发送消息hello给用户B为例。</p>
<ol>
<li>用户A使用终端登录客户端，用户A登录需要验证用户身份（用户权限体系，这里不多说）。登录成功服务器会返回用户唯一标识uid给客户端，同时返回用户A的好友列表（用户B当然就在这个列表中了），之后开始发送心跳消息（这个流程下面讲）</li>
<li>用户A使用客户端发送hello消息。客户端组装消息报文msg request，消息体包括：uid、消息内容、发送消息时间、发送设备ID、Room ID等。将msg request发送到transfer接入服务，然后等待ack响应。</li>
<li>tranfer接收到客户端发送的信息后，使用token(uid)去logic中得到连接描述key。</li>
<li>logic服务收到消息会做几件事情，A. 返回token(uid)的key(uid+roomid) B. 通知router更新用户状态(uid)，C. 通知router更新用户接入信息，uid、transferid、更新时间</li>
<li>tranfer接收到logic返回key，以key保存连接，带上transferid将消息分发到logic服务，等待logic服务处理。</li>
<li>logic服务收到消息会做几件事情，D. 排重，根据uid、消息发送时间、设备ID在缓存中查下是否存在。 </li>
<li>logic服务收到消息会做几件事情，E. 生成msgid，以uid + transferid + roomid取个最新的msgid，自增+1或者用snake算法得到自增的msgid。</li>
<li>logic服务收到消息会做几件事情，F. 保存消息 G. 响应ack ack报文: uid、Room ID、msgid。</li>
<li>transfer收到ack后，把ack响应返回给客户端。</li>
<li>客户端收到ack报文，更新本地信箱，信箱中有msgid的消息即为<strong>消息发送成功</strong>。</li>
</ol>
<p><img src="http://wx4.sinaimg.cn/mw690/0065glrAgy1fh9sy3jpibj31hy10cjvj.jpg" alt="Alt text"></p>
<p>到此用户A的消息就发送出去了，这好像个用户B没有上面关系呀，接下来说消息推送流程。<br><strong>注意</strong> 上面流程中没有说明Room ID是如何生成和分配的，通常是按照具体业务场景进行生成和分配，如按用户A的好友列表进行维护。</p>
<h3 id="消息推送流程"><a href="#消息推送流程" class="headerlink" title="消息推送流程"></a>消息推送流程</h3><p>用户B如何收到消息呢，首先用户B已经登录客户端（这里不讨论离线消息）。</p>
<ol>
<li>logic服务获取Room ID下的所有用户。(维护用户A好友列表的服务可以提供)</li>
<li>logic服务去router中用户是否在线，并获取在线用户的transferid。</li>
<li>logic服务更新transferid将消息推送到对应的tranfer。</li>
<li>logic服务将此消息加入到未读消息队列Msg Queue。</li>
<li>tranfer收到消息根据uid找到对应连接将其发送到客户端。</li>
<li>客户端接收到消息，将消息保存到本地信箱，按msgid排序展示给用户B。</li>
</ol>
<p><img src="http://wx3.sinaimg.cn/mw690/0065glrAgy1fh9sxyrm0oj31jg0syjub.jpg" alt="Alt text"></p>
<p>客户B终于收到了消息了，真的一定收到了吗？ transfer推送了消息，没有确认机制保证消息一定到达，这过程可能出现网络问题，也可能客户B异常。所以我们还需要一种机制保证客户的正确的在线状态和消息拉取确认机制。</p>
<h3 id="心跳消息流程"><a href="#心跳消息流程" class="headerlink" title="心跳消息流程"></a>心跳消息流程</h3><p>心跳消息是客户端登录成功后发起的，心跳时长根据不同的网络环境设置不同值。</p>
<ol>
<li>用户A使用客户端发送心跳消息。客户端组装消息报文hearbeat request，消息体包括：uid、网络类型、发送消息时间、发送设备ID、所有Room ID的最后的msgid(确保机制)。将hearbeat request发送到transfer接入服务，然后等待ack响应。</li>
<li>tranfer接收到客户端发送的心跳，带上transferid将消息分发到hearbeat服务，等待hearbeat服务处理。</li>
<li>hearbeat服务收到消息会做几件事情，A. 通知router更新用户状态(uid)，B. 通知router更新用户接入信息，uid、transferid、更新时间</li>
<li>hearbeat服务收到消息会做几件事情，C. Room ID在sequence查询最新的msgid D. 查询的msgid不等于上报的msgid，发送消息通知logic服务启动消息推送流程(uid、Room ID、上报的msgid)</li>
<li>logic服务收到消息，去未读消息队列中取所有大于上报msgid的消息，在到数据存储层取得消息的全部内容，将消息发送到transfer。</li>
<li>tranfer收到消息根据uid找到对应连接将其发送到客户端。</li>
<li>客户端接收到消息，将消息保存到本地信箱，按msgid排序展示给用户B。</li>
<li>hearbeat服务收到消息会做几件事情，E. 响应hearbeat ack，如果需要调整心跳时长，可以将心跳时长加入到ack响应中。</li>
<li>tranfer收到消息根据uid找到对应连接将其发送到客户端。</li>
<li>客户端接收到消息，更新自己的心跳时长。</li>
</ol>
<p>hearbeat心跳时间间隔根据不同的网络环境，心跳发送成功次数，信息发送次数等因素进行动态调整。</p>
<h3 id="长连接维护"><a href="#长连接维护" class="headerlink" title="长连接维护"></a>长连接维护</h3><p>长连接的TCP服务器与客户端通讯: client向server发起连接，server接受client连接，双方建立连接。Client与server完成一次读写之后，它们之间的连接并不会主动关闭，后续的读写操作会继续使用这个连接。<br>下面是用Golang编写的tcp服务端与客户端，客户端每隔一段时间发送消息到服务器，服务器响应回复。代码<code>conn, err = lis.AcceptTCP();</code>中的conn是需要维护的连接，transfer中确保uid与conn的关系，可以使用<code>map[string]*net.TCPConn</code>。</p>
<p>服务端代码</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;bufio&quot;</span></span><br><span class="line">	<span class="string">&quot;log&quot;</span></span><br><span class="line">	<span class="string">&quot;net&quot;</span></span><br><span class="line">	<span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">	Debug  = <span class="literal">true</span></span><br><span class="line">	maxInt = <span class="number">1</span>&lt;&lt;<span class="number">31</span> - <span class="number">1</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	InitTCP([]<span class="keyword">string</span>&#123;<span class="string">&quot;0.0.0.0:9999&quot;</span>&#125;)</span><br><span class="line">	<span class="keyword">select</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">InitTCP</span><span class="params">(addrs []<span class="keyword">string</span>)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> (</span><br><span class="line">		bind     <span class="keyword">string</span></span><br><span class="line">		listener *net.TCPListener</span><br><span class="line">		addr     *net.TCPAddr</span><br><span class="line">	)</span><br><span class="line">	<span class="keyword">for</span> _, bind = <span class="keyword">range</span> addrs &#123;</span><br><span class="line">		<span class="keyword">if</span> addr, err = net.ResolveTCPAddr(<span class="string">&quot;tcp4&quot;</span>, bind); err != <span class="literal">nil</span> &#123;</span><br><span class="line">			log.Printf(<span class="string">&quot;net.ResolveTCPAddr(\&quot;tcp4\&quot;, \&quot;%s\&quot;) error(%v)&quot;</span>, bind, err)</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> listener, err = net.ListenTCP(<span class="string">&quot;tcp4&quot;</span>, addr); err != <span class="literal">nil</span> &#123;</span><br><span class="line">			log.Printf(<span class="string">&quot;net.ListenTCP(\&quot;tcp4\&quot;, \&quot;%s\&quot;) error(%v)&quot;</span>, bind, err)</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> Debug &#123;</span><br><span class="line">			log.Printf(<span class="string">&quot;start tcp listen: \&quot;%s\&quot;&quot;</span>, bind)</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">go</span> acceptTCP(listener)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">acceptTCP</span><span class="params">(lis *net.TCPListener)</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> (</span><br><span class="line">		conn *net.TCPConn</span><br><span class="line">		err  error</span><br><span class="line">		r    <span class="keyword">int</span></span><br><span class="line">	)</span><br><span class="line">	<span class="keyword">for</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> conn, err = lis.AcceptTCP(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">			<span class="comment">// if listener close then return</span></span><br><span class="line">			log.Printf(<span class="string">&quot;listener.Accept(\&quot;%s\&quot;) error(%v)&quot;</span>, lis.Addr().String(), err)</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> err = conn.SetKeepAlive(<span class="literal">false</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line">			log.Printf(<span class="string">&quot;conn.SetKeepAlive() error(%v)&quot;</span>, err)</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> err = conn.SetReadBuffer(<span class="number">256</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line">			log.Printf(<span class="string">&quot;conn.SetReadBuffer() error(%v)&quot;</span>, err)</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> err = conn.SetWriteBuffer(<span class="number">2048</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line">			log.Printf(<span class="string">&quot;conn.SetWriteBuffer() error(%v)&quot;</span>, err)</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">go</span> serveTCP(conn, r)</span><br><span class="line">		<span class="keyword">if</span> r++; r == maxInt &#123;</span><br><span class="line">			r = <span class="number">0</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">serveTCP</span><span class="params">(conn *net.TCPConn, r <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> (</span><br><span class="line">		<span class="comment">// ip addr</span></span><br><span class="line">		lAddr = conn.LocalAddr().String()</span><br><span class="line">		rAddr = conn.RemoteAddr().String()</span><br><span class="line">		rbuf  = <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">1024</span>)</span><br><span class="line">	)</span><br><span class="line">	<span class="keyword">if</span> Debug &#123;</span><br><span class="line">		log.Printf(<span class="string">&quot;start tcp serve \&quot;%s\&quot; with \&quot;%s\&quot;&quot;</span>, lAddr, rAddr)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	reader := bufio.NewReader(conn)</span><br><span class="line">	<span class="keyword">for</span> &#123;</span><br><span class="line">		n, err := reader.Read(rbuf)</span><br><span class="line">		<span class="comment">//message, err := reader.ReadString(&#x27;\n&#x27;)</span></span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line">		message := rbuf[<span class="number">0</span>:n]</span><br><span class="line">		log.Printf(<span class="string">&quot;read message (%s)&quot;</span>, <span class="keyword">string</span>(message))</span><br><span class="line"></span><br><span class="line">		reply := time.Now().String()</span><br><span class="line">		conn.Write([]<span class="keyword">byte</span>(reply))</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>客户端代码</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;bufio&quot;</span></span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;net&quot;</span></span><br><span class="line">	<span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> quitSemaphore <span class="keyword">chan</span> <span class="keyword">bool</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> tcpAddr *net.TCPAddr</span><br><span class="line">	tcpAddr, _ = net.ResolveTCPAddr(<span class="string">&quot;tcp&quot;</span>, <span class="string">&quot;192.168.0.9:9999&quot;</span>)</span><br><span class="line"></span><br><span class="line">	conn, _ := net.DialTCP(<span class="string">&quot;tcp&quot;</span>, <span class="literal">nil</span>, tcpAddr)</span><br><span class="line">	<span class="keyword">defer</span> conn.Close()</span><br><span class="line">	fmt.Println(<span class="string">&quot;connected!&quot;</span>)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">go</span> onMessageRecived(conn)</span><br><span class="line"></span><br><span class="line">	b := []<span class="keyword">byte</span>(<span class="string">&quot;time&quot;</span>)</span><br><span class="line">	conn.Write(b)</span><br><span class="line"></span><br><span class="line">	&lt;-quitSemaphore</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">onMessageRecived</span><span class="params">(conn *net.TCPConn)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">var</span> rbuf = <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">1024</span>)</span><br><span class="line">	reader := bufio.NewReader(conn)</span><br><span class="line">	value := <span class="number">5</span></span><br><span class="line">	incr := <span class="number">10</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> &#123;</span><br><span class="line">		n, err := reader.Read(rbuf)</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			quitSemaphore &lt;- <span class="literal">true</span></span><br><span class="line">			<span class="keyword">break</span></span><br><span class="line">		&#125;</span><br><span class="line">		msg := rbuf[<span class="number">0</span>:n]</span><br><span class="line">		fmt.Println(<span class="keyword">string</span>(msg))</span><br><span class="line"></span><br><span class="line">		time.Sleep(time.Duration(value) * time.Second)</span><br><span class="line">		conn.Write([]<span class="keyword">byte</span>(msg))</span><br><span class="line">		value += incr</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>重新梳理了消息流转流程，基本清楚了消息的轮转，对Room ID的生成和分配还需进行研究。</p>
]]></content>
      <categories>
        <category>im</category>
      </categories>
      <tags>
        <tag>im</tag>
        <tag>即时通讯</tag>
      </tags>
  </entry>
  <entry>
    <title>Jitsi开源Web视频会议-安全认证</title>
    <url>/video/jitsi-auth-20180507.html</url>
    <content><![CDATA[<p><a href="https://www.jerrylou.me/video/jitsi-install-20180426.html">Jitsi安装教程</a>、之前安装Jitsi后所有人都能访问，当实际情况是需要认证后才能访问。通过配置jitsi提供了认证方式。</p>
<a id="more"></a>

<h3 id="Prosody认证配置"><a href="#Prosody认证配置" class="headerlink" title="Prosody认证配置"></a>Prosody认证配置</h3><p>配置<code>/etc/prosody/conf.d/meet.demo.com.cfg.lua</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-- Plugins path gets uncommented during jitsi-meet-tokens package install - that<span class="string">&#x27;s where token plugin is located</span></span><br><span class="line"><span class="string">--plugin_paths = &#123; &quot;/usr/share/jitsi-meet/prosody-plugins/&quot; &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">VirtualHost &quot;meet.demo.com&quot;</span></span><br><span class="line"><span class="string">    authentication = &quot;internal_plain&quot;</span></span><br><span class="line"><span class="string">    ssl = &#123;</span></span><br><span class="line"><span class="string">        key = &quot;/var/lib/prosody/meet.demo.com.key&quot;;</span></span><br><span class="line"><span class="string">        certificate = &quot;/var/lib/prosody/meet.demo.com.crt&quot;;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    modules_enabled = &#123;</span></span><br><span class="line"><span class="string">        &quot;bosh&quot;;</span></span><br><span class="line"><span class="string">        &quot;pubsub&quot;;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">VirtualHost &quot;guest.meet.demo.com&quot;</span></span><br><span class="line"><span class="string">    authentication = &quot;anonymous&quot;</span></span><br><span class="line"><span class="string">    c2s_require_encryption = false</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">admins = &#123; &quot;focus@auth.meet.demo.com&quot; &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Component &quot;conference.meet.demo.com&quot; &quot;muc&quot;</span></span><br><span class="line"><span class="string">Component &quot;jitsi-videobridge.meet.demo.com&quot;</span></span><br><span class="line"><span class="string">    component_secret = &quot;password1&quot;</span></span><br><span class="line"><span class="string">Component &quot;focus.meet.demo.com&quot;</span></span><br><span class="line"><span class="string">    component_secret = &quot;password2&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Component &quot;callcontrol.meet.demo.com&quot;</span></span><br><span class="line"><span class="string">    component_secret = &quot;password4&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="Nginx认证配置"><a href="#Nginx认证配置" class="headerlink" title="Nginx认证配置"></a>Nginx认证配置</h3><p>配置<code>/etc/nginx/sites-enabled/meet.demo.com</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name meet.demo.com;</span><br><span class="line">    <span class="built_in">return</span> 301 https://$host<span class="variable">$request_uri</span>;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    listen 443 ssl;</span><br><span class="line">    server_name meet.demo.com;</span><br><span class="line"></span><br><span class="line">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">    ssl_prefer_server_ciphers on;</span><br><span class="line">    ssl_ciphers <span class="string">&quot;EECDH+ECDSA+AESGCM:EECDH+aRSA+AESGCM:EECDH+ECDSA+SHA256:EECDH+aRSA+SHA256:EECDH+ECDSA+SHA384:EECDH+ECDSA+SHA256:EECDH+aRSA+SHA384:EDH+aRSA+AESGCM:EDH+aRSA+SHA256:EDH+aRSA:EECDH:!aNULL:!eNULL:!MEDIUM:!LOW:!3DES:!MD5:!EXP:!PSK:!SRP:!DSS:!RC4:!SEED&quot;</span>;</span><br><span class="line"></span><br><span class="line">    ssl_certificate /var/lib/prosody/meet.demo.com.crt;</span><br><span class="line">    ssl_certificate_key /var/lib/prosody/meet.demo.com.key;</span><br><span class="line"></span><br><span class="line">    root /var/www/jitsi-meet;</span><br><span class="line">    index index.html index.htm;</span><br><span class="line">    <span class="comment"># error_page 404 /static/404.html;</span></span><br><span class="line"></span><br><span class="line">    location ~ ^/([a-zA-Z0-9=\?]+)$ &#123;</span><br><span class="line">        rewrite ^/(.*)$ / <span class="built_in">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        ssi on;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># BOSH</span></span><br><span class="line">    location /http-bind &#123;</span><br><span class="line">        proxy_pass      http://localhost:5280/http-bind;</span><br><span class="line">        proxy_set_header X-Forwarded-For <span class="variable">$remote_addr</span>;</span><br><span class="line">        proxy_set_header Host <span class="variable">$http_host</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="videobridge认证配置"><a href="#videobridge认证配置" class="headerlink" title="videobridge认证配置"></a>videobridge认证配置</h3><p>参数start.sh </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> JAVA_SYS_PROPS=<span class="string">&quot;-Dnet.java.sip.communicator.SC_HOME_DIR_LOCATION=/etc/jitsi -Dnet.java.sip.communicator.SC_HOME_DIR_NAME=videobridge -Dnet.java.sip.communicator.SC_LOG_DIR_LOCATION=/var/log/jitsi/videobridge -Djava.util.logging.config.file=/etc/jitsi/videobridge/logging.properties -Dlog4j.configurationFile=/etc/jitsi/videobridge/log4j2.xml&quot;</span></span><br><span class="line"></span><br><span class="line">./jvb.sh --host=localhost --domain=meet.demo.com --port=5347 --secret=password1 &amp;</span><br><span class="line"></span><br><span class="line"><span class="built_in">unset</span> JAVA_SYS_PROPS</span><br></pre></td></tr></table></figure>
<h3 id="Jicofo认证配置"><a href="#Jicofo认证配置" class="headerlink" title="Jicofo认证配置"></a>Jicofo认证配置</h3><p>参数start.sh </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># mvn package -DskipTests -Dassembly.skipAssembly=false</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> JAVA_SYS_PROPS=<span class="string">&quot;-Dnet.java.sip.communicator.SC_HOME_DIR_LOCATION=/etc/jitsi -Dnet.java.sip.communicator.SC_HOME_DIR_NAME=jicofo -Dnet.java.sip.communicator.SC_LOG_DIR_LOCATION=/var/log/jitsi/jicofo -Djava.util.logging.config.file=/etc/jitsi/jicofo/logging.properties -Dlog4j.configurationFile=/etc/jitsi/jicofo/log4j2.xml -Dorg.jitsi.jicofo.ALWAYS_TRUST_MODE_ENABLED=true&quot;</span></span><br><span class="line"></span><br><span class="line">./jicofo-linux-x64-1.1-SNAPSHOT/jicofo.sh --host=localhost --domain=meet.demo.com --secret=password2 --user_domain=auth.meet.demo.com --user_name=focus --user_password=password3 &amp;</span><br><span class="line"></span><br><span class="line"><span class="built_in">unset</span> JAVA_SYS_PROPS</span><br></pre></td></tr></table></figure>
<h3 id="Jitsi-meet认证配置"><a href="#Jitsi-meet认证配置" class="headerlink" title="Jitsi-meet认证配置"></a>Jitsi-meet认证配置</h3><p>config.js配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">var config = &#123;</span><br><span class="line">    // Configuration</span><br><span class="line">    //</span><br><span class="line"></span><br><span class="line">    // Alternative location <span class="keyword">for</span> the configuration.</span><br><span class="line">    // configLocation: <span class="string">&#x27;./config.json&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    // Custom <span class="keyword">function</span> <span class="built_in">which</span> given the URL path should <span class="built_in">return</span> a room name.</span><br><span class="line">    // getroomnode: <span class="keyword">function</span> (path) &#123; <span class="built_in">return</span> <span class="string">&#x27;someprefixpossiblybasedonpath&#x27;</span>; &#125;,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    // Connection</span><br><span class="line">    //</span><br><span class="line"></span><br><span class="line">    hosts: &#123;</span><br><span class="line">        // XMPP domain.</span><br><span class="line">        domain: <span class="string">&#x27;meet.demo.com&#x27;</span>,</span><br><span class="line"></span><br><span class="line">        // XMPP MUC domain. FIXME: use XEP-0030 to discover it.</span><br><span class="line">        muc: <span class="string">&#x27;conference.meet.demo.com&#x27;</span>,</span><br><span class="line"></span><br><span class="line">        // When using authentication, domain <span class="keyword">for</span> guest users.</span><br><span class="line">        // anonymousdomain: <span class="string">&#x27;guest.example.com&#x27;</span>,</span><br><span class="line"></span><br><span class="line">        // Domain <span class="keyword">for</span> authenticated users. Defaults to &lt;domain&gt;.</span><br><span class="line">        // authdomain: <span class="string">&#x27;meet.demo.com&#x27;</span>,</span><br><span class="line"></span><br><span class="line">        // Jirecon recording component domain.</span><br><span class="line">        // jirecon: <span class="string">&#x27;jirecon.meet.demo.com&#x27;</span>,</span><br><span class="line"></span><br><span class="line">        // Call control component (Jigasi).</span><br><span class="line">        call_control: <span class="string">&#x27;callcontrol.meet.demo.com&#x27;</span>,</span><br><span class="line"></span><br><span class="line">        // Focus component domain. Defaults to focus.&lt;domain&gt;.</span><br><span class="line">        focus: <span class="string">&#x27;focus.meet.demo.com&#x27;</span>,</span><br><span class="line">        bridge: <span class="string">&#x27;jitsi-videobridge.meet.demo.com&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    // BOSH URL. FIXME: use XEP-0156 to discover it.</span><br><span class="line">    bosh: <span class="string">&#x27;//meet.demo.com/http-bind&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    // The name of client node advertised <span class="keyword">in</span> XEP-0115 <span class="string">&#x27;c&#x27;</span> stanza</span><br><span class="line">    clientNode: <span class="string">&#x27;http://jitsi.org/jitsimeet&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    // The real JID of focus participant - can be overridden here</span><br><span class="line">    // focusUserJid: <span class="string">&#x27;focus@auth.meet.demo.com&#x27;</span>,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    // Testing / experimental features.</span><br><span class="line">    //</span><br><span class="line"></span><br><span class="line">    testing: &#123;</span><br><span class="line">        // Enables experimental simulcast support on Firefox.</span><br><span class="line">        enableFirefoxSimulcast: <span class="literal">false</span>,</span><br><span class="line"></span><br><span class="line">        // P2P <span class="built_in">test</span> mode disables automatic switching to P2P when there are 2</span><br><span class="line">        // participants <span class="keyword">in</span> the conference.</span><br><span class="line">        p2pTestMode: <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">        // Enables the <span class="built_in">test</span> specific features consumed by jitsi-meet-torture</span><br><span class="line">        // testMode: <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    // Disables ICE/UDP by filtering out <span class="built_in">local</span> and remote UDP candidates <span class="keyword">in</span></span><br><span class="line">    // signalling.</span><br><span class="line">    // webrtcIceUdpDisable: <span class="literal">false</span>,</span><br><span class="line"></span><br><span class="line">    // Disables ICE/TCP by filtering out <span class="built_in">local</span> and remote TCP candidates <span class="keyword">in</span></span><br><span class="line">    // signalling.</span><br><span class="line">    // webrtcIceTcpDisable: <span class="literal">false</span>,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    // Media</span><br><span class="line">    //</span><br><span class="line"></span><br><span class="line">    // Audio</span><br><span class="line"></span><br><span class="line">    // Disable measuring of audio levels.</span><br><span class="line">    // disableAudioLevels: <span class="literal">false</span>,</span><br><span class="line"></span><br><span class="line">    // Start the conference <span class="keyword">in</span> audio only mode (no video is being received nor</span><br><span class="line">    // sent).</span><br><span class="line">    // startAudioOnly: <span class="literal">false</span>,</span><br><span class="line"></span><br><span class="line">    // Every participant after the Nth will start audio muted.</span><br><span class="line">    // startAudioMuted: 10,</span><br><span class="line"></span><br><span class="line">    // Start calls with audio muted. Unlike the option above, this one is only</span><br><span class="line">    // applied locally. FIXME: having these 2 options is confusing.</span><br><span class="line">    // startWithAudioMuted: <span class="literal">false</span>,</span><br><span class="line"></span><br><span class="line">    // Video</span><br><span class="line"></span><br><span class="line">    // Sets the preferred resolution (height) <span class="keyword">for</span> <span class="built_in">local</span> video. Defaults to 720.</span><br><span class="line">    // resolution: 720,</span><br><span class="line"></span><br><span class="line">    // w3c spec-compliant video constraints to use <span class="keyword">for</span> video capture. Currently</span><br><span class="line">    // used by browsers that <span class="built_in">return</span> <span class="literal">true</span> from lib-jitsi-meet<span class="string">&#x27;s</span></span><br><span class="line"><span class="string">    // util#browser#usesNewGumFlow. The constraints are independency from</span></span><br><span class="line"><span class="string">    // this config&#x27;</span>s resolution value. Defaults to requesting an ideal aspect</span><br><span class="line">    // ratio of 16:9 with an ideal resolution of 1080p.</span><br><span class="line">    // constraints: &#123;</span><br><span class="line">    //     video: &#123;</span><br><span class="line">    //         aspectRatio: 16 / 9,</span><br><span class="line">    //         height: &#123;</span><br><span class="line">    //             ideal: 1080,</span><br><span class="line">    //             max: 1080,</span><br><span class="line">    //             min: 240</span><br><span class="line">    //         &#125;</span><br><span class="line">    //     &#125;</span><br><span class="line">    // &#125;,</span><br><span class="line"></span><br><span class="line">    // Enable / <span class="built_in">disable</span> simulcast support.</span><br><span class="line">    // disableSimulcast: <span class="literal">false</span>,</span><br><span class="line"></span><br><span class="line">    // Suspend sending video <span class="keyword">if</span> bandwidth estimation is too low. This may cause</span><br><span class="line">    // problems with audio playback. Disabled until these are fixed.</span><br><span class="line">    disableSuspendVideo: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">    // Every participant after the Nth will start video muted.</span><br><span class="line">    // startVideoMuted: 10,</span><br><span class="line"></span><br><span class="line">    // Start calls with video muted. Unlike the option above, this one is only</span><br><span class="line">    // applied locally. FIXME: having these 2 options is confusing.</span><br><span class="line">    // startWithVideoMuted: <span class="literal">false</span>,</span><br><span class="line"></span><br><span class="line">    // If <span class="built_in">set</span> to <span class="literal">true</span>, prefer to use the H.264 video codec (<span class="keyword">if</span> supported).</span><br><span class="line">    // Note that it<span class="string">&#x27;s not recommended to do this because simulcast is not</span></span><br><span class="line"><span class="string">    // supported when  using H.264. For 1-to-1 calls this setting is enabled by</span></span><br><span class="line"><span class="string">    // default and can be toggled in the p2p section.</span></span><br><span class="line"><span class="string">    // preferH264: true,</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    // If set to true, disable H.264 video codec by stripping it out of the</span></span><br><span class="line"><span class="string">    // SDP.</span></span><br><span class="line"><span class="string">    // disableH264: false,</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    // Desktop sharing</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    // Enable / disable desktop sharing</span></span><br><span class="line"><span class="string">    // disableDesktopSharing: false,</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    // The ID of the jidesha extension for Chrome.</span></span><br><span class="line"><span class="string">    desktopSharingChromeExtId: null,</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    // Whether desktop sharing should be disabled on Chrome.</span></span><br><span class="line"><span class="string">    desktopSharingChromeDisabled: true,</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    // The media sources to use when using screen sharing with the Chrome</span></span><br><span class="line"><span class="string">    // extension.</span></span><br><span class="line"><span class="string">    desktopSharingChromeSources: [ &#x27;</span>screen<span class="string">&#x27;, &#x27;</span>window<span class="string">&#x27;, &#x27;</span>tab<span class="string">&#x27; ],</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    // Required version of Chrome extension</span></span><br><span class="line"><span class="string">    desktopSharingChromeMinExtVersion: &#x27;</span>0.1<span class="string">&#x27;,</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    // Whether desktop sharing should be disabled on Firefox.</span></span><br><span class="line"><span class="string">    desktopSharingFirefoxDisabled: false,</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    // Optional desktop sharing frame rate options. Default value: min:5, max:5.</span></span><br><span class="line"><span class="string">    // desktopSharingFrameRate: &#123;</span></span><br><span class="line"><span class="string">    //     min: 5,</span></span><br><span class="line"><span class="string">    //     max: 5</span></span><br><span class="line"><span class="string">    // &#125;,</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    // Try to start calls with screen-sharing instead of camera video.</span></span><br><span class="line"><span class="string">    // startScreenSharing: false,</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    // Recording</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    // Whether to enable recording or not.</span></span><br><span class="line"><span class="string">    // enableRecording: false,</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    // Type for recording: one of jibri or jirecon.</span></span><br><span class="line"><span class="string">    // recordingType: &#x27;</span>jibri<span class="string">&#x27;,</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    // Misc</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    // Default value for the channel &quot;last N&quot; attribute. -1 for unlimited.</span></span><br><span class="line"><span class="string">    channelLastN: -1,</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    // Disables or enables RTX (RFC 4588) (defaults to false).</span></span><br><span class="line"><span class="string">    // disableRtx: false,</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    // Disables or enables TCC (the default is in Jicofo and set to true)</span></span><br><span class="line"><span class="string">    // (draft-holmer-rmcat-transport-wide-cc-extensions-01). This setting</span></span><br><span class="line"><span class="string">    // affects congestion control, it practically enables send-side bandwidth</span></span><br><span class="line"><span class="string">    // estimations.</span></span><br><span class="line"><span class="string">    // enableTcc: true,</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    // Disables or enables REMB (the default is in Jicofo and set to false)</span></span><br><span class="line"><span class="string">    // (draft-alvestrand-rmcat-remb-03). This setting affects congestion</span></span><br><span class="line"><span class="string">    // control, it practically enables recv-side bandwidth estimations. When</span></span><br><span class="line"><span class="string">    // both TCC and REMB are enabled, TCC takes precedence. When both are</span></span><br><span class="line"><span class="string">    // disabled, then bandwidth estimations are disabled.</span></span><br><span class="line"><span class="string">    // enableRemb: false,</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    // Defines the minimum number of participants to start a call (the default</span></span><br><span class="line"><span class="string">    // is set in Jicofo and set to 2).</span></span><br><span class="line"><span class="string">    // minParticipants: 2,</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    // Use XEP-0215 to fetch STUN and TURN servers.</span></span><br><span class="line"><span class="string">    // useStunTurn: true,</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    // Enable IPv6 support.</span></span><br><span class="line"><span class="string">    // useIPv6: true,</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    // Enables / disables a data communication channel with the Videobridge.</span></span><br><span class="line"><span class="string">    // Values can be &#x27;</span>datachannel<span class="string">&#x27;, &#x27;</span>websocket<span class="string">&#x27;, true (treat it as</span></span><br><span class="line"><span class="string">    // &#x27;</span>datachannel<span class="string">&#x27;), undefined (treat it as &#x27;</span>datachannel<span class="string">&#x27;) and false (don&#x27;</span>t</span><br><span class="line">    // open any channel).</span><br><span class="line">    // openBridgeChannel: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    // UI</span><br><span class="line">    //</span><br><span class="line"></span><br><span class="line">    // Use display name as XMPP nickname.</span><br><span class="line">    useNicks: <span class="literal">false</span>,</span><br><span class="line"></span><br><span class="line">    // Require users to always specify a display name.</span><br><span class="line">    // requireDisplayName: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">    // Whether to use a welcome page or not. In <span class="keyword">case</span> it<span class="string">&#x27;s false a random room</span></span><br><span class="line"><span class="string">    // will be joined when no room is specified.</span></span><br><span class="line"><span class="string">    enableWelcomePage: true,</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    // Enabling the close page will ignore the welcome page redirection when</span></span><br><span class="line"><span class="string">    // a call is hangup.</span></span><br><span class="line"><span class="string">    // enableClosePage: false,</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    // Disable hiding of remote thumbnails when in a 1-on-1 conference call.</span></span><br><span class="line"><span class="string">    // disable1On1Mode: false,</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    // The minimum value a video&#x27;</span>s height (or width, whichever is smaller) needs</span><br><span class="line">    // to be <span class="keyword">in</span> order to be considered high-definition.</span><br><span class="line">    minHDHeight: 540,</span><br><span class="line"></span><br><span class="line">    // Default language <span class="keyword">for</span> the user interface.</span><br><span class="line">    // defaultLanguage: <span class="string">&#x27;en&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    // If <span class="literal">true</span> all users without a token will be considered guests and all users</span><br><span class="line">    // with token will be considered non-guests. Only guests will be allowed to</span><br><span class="line">    // edit their profile.</span><br><span class="line">    enableUserRolesBasedOnToken: <span class="literal">false</span>,</span><br><span class="line"></span><br><span class="line">    // Message to show the users. Example: <span class="string">&#x27;The service will be down for</span></span><br><span class="line"><span class="string">    // maintenance at 01:00 AM GMT,</span></span><br><span class="line"><span class="string">    // noticeMessage: &#x27;</span><span class="string">&#x27;,</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    // Stats</span></span><br><span class="line"><span class="string">    //</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    // Whether to enable stats collection or not in the TraceablePeerConnection.</span></span><br><span class="line"><span class="string">    // This can be useful for debugging purposes (post-processing/analysis of</span></span><br><span class="line"><span class="string">    // the webrtc stats) as it is done in the jitsi-meet-torture bandwidth</span></span><br><span class="line"><span class="string">    // estimation tests.</span></span><br><span class="line"><span class="string">    // gatherStats: false,</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    // To enable sending statistics to callstats.io you must provide the</span></span><br><span class="line"><span class="string">    // Application ID and Secret.</span></span><br><span class="line"><span class="string">    // callStatsID: &#x27;</span><span class="string">&#x27;,</span></span><br><span class="line"><span class="string">    // callStatsSecret: &#x27;</span><span class="string">&#x27;,</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    // enables callstatsUsername to be reported as statsId and used</span></span><br><span class="line"><span class="string">    // by callstats as repoted remote id</span></span><br><span class="line"><span class="string">    // enableStatsID: false</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    // enables sending participants display name to callstats</span></span><br><span class="line"><span class="string">    // enableDisplayNameInStats: false</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    // Privacy</span></span><br><span class="line"><span class="string">    //</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    // If third party requests are disabled, no other server will be contacted.</span></span><br><span class="line"><span class="string">    // This means avatars will be locally generated and callstats integration</span></span><br><span class="line"><span class="string">    // will not function.</span></span><br><span class="line"><span class="string">    // disableThirdPartyRequests: false,</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    // Peer-To-Peer mode: used (if enabled) when there are just 2 participants.</span></span><br><span class="line"><span class="string">    //</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    p2p: &#123;</span></span><br><span class="line"><span class="string">        // Enables peer to peer mode. When enabled the system will try to</span></span><br><span class="line"><span class="string">        // establish a direct connection when there are exactly 2 participants</span></span><br><span class="line"><span class="string">        // in the room. If that succeeds the conference will stop sending data</span></span><br><span class="line"><span class="string">        // through the JVB and use the peer to peer connection instead. When a</span></span><br><span class="line"><span class="string">        // 3rd participant joins the conference will be moved back to the JVB</span></span><br><span class="line"><span class="string">        // connection.</span></span><br><span class="line"><span class="string">        enabled: true,</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        // Use XEP-0215 to fetch STUN and TURN servers.</span></span><br><span class="line"><span class="string">        // useStunTurn: true,</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        // The STUN servers that will be used in the peer to peer connections</span></span><br><span class="line"><span class="string">        stunServers: [</span></span><br><span class="line"><span class="string">            &#123; urls: &#x27;</span>stun:stun.l.google.com:19302<span class="string">&#x27; &#125;,</span></span><br><span class="line"><span class="string">            &#123; urls: &#x27;</span>stun:stun1.l.google.com:19302<span class="string">&#x27; &#125;,</span></span><br><span class="line"><span class="string">            &#123; urls: &#x27;</span>stun:stun2.l.google.com:19302<span class="string">&#x27; &#125;</span></span><br><span class="line"><span class="string">        ],</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        // Sets the ICE transport policy for the p2p connection. At the time</span></span><br><span class="line"><span class="string">        // of this writing the list of possible values are &#x27;</span>all<span class="string">&#x27; and &#x27;</span>relay<span class="string">&#x27;,</span></span><br><span class="line"><span class="string">        // but that is subject to change in the future. The enum is defined in</span></span><br><span class="line"><span class="string">        // the WebRTC standard:</span></span><br><span class="line"><span class="string">        // https://www.w3.org/TR/webrtc/#rtcicetransportpolicy-enum.</span></span><br><span class="line"><span class="string">        // If not set, the effective value is &#x27;</span>all<span class="string">&#x27;.</span></span><br><span class="line"><span class="string">        // iceTransportPolicy: &#x27;</span>all<span class="string">&#x27;,</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        // If set to true, it will prefer to use H.264 for P2P calls (if H.264</span></span><br><span class="line"><span class="string">        // is supported).</span></span><br><span class="line"><span class="string">        preferH264: true</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        // If set to true, disable H.264 video codec by stripping it out of the</span></span><br><span class="line"><span class="string">        // SDP.</span></span><br><span class="line"><span class="string">        // disableH264: false,</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        // How long we&#x27;</span>re going to <span class="built_in">wait</span>, before going back to P2P after the 3rd</span><br><span class="line">        // participant has left the conference (to filter out page reload).</span><br><span class="line">        // backToP2PDelay: 5</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    // A list of scripts to load as lib-jitsi-meet <span class="string">&quot;analytics handlers&quot;</span>.</span><br><span class="line">    // analyticsScriptUrls: [</span><br><span class="line">    //      <span class="string">&quot;libs/analytics-ga.js&quot;</span>, // google-analytics</span><br><span class="line">    //      <span class="string">&quot;https://example.com/my-custom-analytics.js&quot;</span></span><br><span class="line">    // ],</span><br><span class="line"></span><br><span class="line">    // The Google Analytics Tracking ID</span><br><span class="line">    // googleAnalyticsTrackingId = <span class="string">&#x27;your-tracking-id-here-UA-123456-1&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    // Information about the jitsi-meet instance we are connecting to, including</span><br><span class="line">    // the user region as seen by the server.</span><br><span class="line">    deploymentInfo: &#123;</span><br><span class="line">        // shard: <span class="string">&quot;shard1&quot;</span>,</span><br><span class="line">        // region: <span class="string">&quot;europe&quot;</span>,</span><br><span class="line">        // userRegion: <span class="string">&quot;asia&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // List of undocumented settings used <span class="keyword">in</span> jitsi-meet</span><br><span class="line">    /**</span><br><span class="line">     alwaysVisibleToolbar</span><br><span class="line">     autoRecord</span><br><span class="line">     autoRecordToken</span><br><span class="line">     debug</span><br><span class="line">     debugAudioLevels</span><br><span class="line">     deploymentInfo</span><br><span class="line">     dialInConfCodeUrl</span><br><span class="line">     dialInNumbersUrl</span><br><span class="line">     dialOutAuthUrl</span><br><span class="line">     dialOutCodesUrl</span><br><span class="line">     disableRemoteControl</span><br><span class="line">     displayJids</span><br><span class="line">     enableLocalVideoFlip</span><br><span class="line">     etherpad_base</span><br><span class="line">     externalConnectUrl</span><br><span class="line">     firefox_fake_device</span><br><span class="line">     googleApiApplicationClientID</span><br><span class="line">     iAmRecorder</span><br><span class="line">     iAmSipGateway</span><br><span class="line">     peopleSearchQueryTypes</span><br><span class="line">     peopleSearchUrl</span><br><span class="line">     requireDisplayName</span><br><span class="line">     tokenAuthUrl</span><br><span class="line">     */</span><br><span class="line"></span><br><span class="line">    // List of undocumented settings used <span class="keyword">in</span> lib-jitsi-meet</span><br><span class="line">    /**</span><br><span class="line">     _peerConnStatusOutOfLastNTimeout</span><br><span class="line">     _peerConnStatusRtcMuteTimeout</span><br><span class="line">     abTesting</span><br><span class="line">     avgRtpStatsN</span><br><span class="line">     callStatsConfIDNamespace</span><br><span class="line">     callStatsCustomScriptUrl</span><br><span class="line">     desktopSharingSources</span><br><span class="line">     disableAEC</span><br><span class="line">     disableAGC</span><br><span class="line">     disableAP</span><br><span class="line">     disableHPF</span><br><span class="line">     disableNS</span><br><span class="line">     enableLipSync</span><br><span class="line">     enableTalkWhileMuted</span><br><span class="line">     forceJVB121Ratio</span><br><span class="line">     hiddenDomain</span><br><span class="line">     ignoreStartMuted</span><br><span class="line">     nick</span><br><span class="line">     startBitrate</span><br><span class="line">     */</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>修改配置后，重启服务。</p>
<p>浏览器中输入：<a href="https://meet.demo.com/">https://meet.demo.com/</a></p>
]]></content>
      <categories>
        <category>video</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>jitsi</tag>
        <tag>meet</tag>
        <tag>video</tag>
        <tag>conferences</tag>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>Jitsi开源Web视频会议-安装篇</title>
    <url>/video/jitsi-install-20180426.html</url>
    <content><![CDATA[<p>Jitsi是安全、简单和可伸缩的视频会议，您可以作为一个独立的应用程序或嵌入到您的web应用程序中。它是基于Prosody之上实现的，按照官方文档安装会出现一些问题，经过一些实验成功安装，并记录下安装步骤。</p>
<a id="more"></a>

<h3 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h3><ul>
<li>Env: ubuntu 18.04</li>
<li>User: root</li>
</ul>
<h3 id="安装Prosody"><a href="#安装Prosody" class="headerlink" title="安装Prosody"></a>安装Prosody</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> deb http://packages.prosody.im/debian $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list</span><br><span class="line">wget https://prosody.im/files/prosody-debian-packages.key -O- | sudo apt-key add -</span><br><span class="line">apt-get update</span><br><span class="line">apt-get install prosody</span><br></pre></td></tr></table></figure>
<p>配置<code>/etc/prosody/conf.d/meet.demo.com.cfg.lua</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-- Plugins path gets uncommented during jitsi-meet-tokens package install - that<span class="string">&#x27;s where token plugin is located</span></span><br><span class="line"><span class="string">--plugin_paths = &#123; &quot;/usr/share/jitsi-meet/prosody-plugins/&quot; &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">VirtualHost &quot;meet.demo.com&quot;</span></span><br><span class="line"><span class="string">    authentication = &quot;anonymous&quot;</span></span><br><span class="line"><span class="string">    ssl = &#123;</span></span><br><span class="line"><span class="string">        key = &quot;/var/lib/prosody/meet.demo.com.key&quot;;</span></span><br><span class="line"><span class="string">        certificate = &quot;/var/lib/prosody/meet.demo.com.crt&quot;;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    modules_enabled = &#123;</span></span><br><span class="line"><span class="string">        &quot;bosh&quot;;</span></span><br><span class="line"><span class="string">        &quot;pubsub&quot;;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    c2s_require_encryption = false</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">VirtualHost &quot;auth.meet.demo.com&quot;</span></span><br><span class="line"><span class="string">    ssl = &#123;</span></span><br><span class="line"><span class="string">        key = &quot;/var/lib/prosody/auth.meet.demo.com.key&quot;;</span></span><br><span class="line"><span class="string">        certificate = &quot;/var/lib/prosody/auth.meet.demo.com.crt&quot;;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    authentication = &quot;internal_plain&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">admins = &#123; &quot;focus@auth.meet.demo.com&quot; &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Component &quot;conference.meet.demo.com&quot; &quot;muc&quot;</span></span><br><span class="line"><span class="string">Component &quot;jitsi-videobridge.meet.demo.com&quot;</span></span><br><span class="line"><span class="string">    component_secret = &quot;password1&quot;</span></span><br><span class="line"><span class="string">Component &quot;focus.meet.demo.com&quot;</span></span><br><span class="line"><span class="string">    component_secret = &quot;password2&quot;</span></span><br></pre></td></tr></table></figure>
<p>证书生成</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">prosodyctl cert generate meet.demo.com</span><br><span class="line">prosodyctl cert generate auth.meet.demo.com</span><br><span class="line">output: /var/lib/prosody/</span><br><span class="line"></span><br><span class="line">ln -sf /var/lib/prosody/auth.meet.demo.com.crt /usr/<span class="built_in">local</span>/share/ca-certificates/auth.meet.demo.com.crt</span><br><span class="line">update-ca-certificates -f</span><br></pre></td></tr></table></figure>
<p>注册用户</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">prosodyctl register focus auth.meet.demo.com password3</span><br></pre></td></tr></table></figure>
<p>重启服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">prosodyctl restart</span><br></pre></td></tr></table></figure>
<h3 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get install nginx</span><br></pre></td></tr></table></figure>
<p>配置<code>/etc/nginx/sites-enabled/meet.demo.com</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name meet.demo.com;</span><br><span class="line">    <span class="built_in">return</span> 301 https://$host<span class="variable">$request_uri</span>;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    listen 443 ssl;</span><br><span class="line">    server_name meet.demo.com;</span><br><span class="line"></span><br><span class="line">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">    ssl_prefer_server_ciphers on;</span><br><span class="line">    ssl_ciphers <span class="string">&quot;EECDH+ECDSA+AESGCM:EECDH+aRSA+AESGCM:EECDH+ECDSA+SHA256:EECDH+aRSA+SHA256:EECDH+ECDSA+SHA384:EECDH+ECDSA+SHA256:EECDH+aRSA+SHA384:EDH+aRSA+AESGCM:EDH+aRSA+SHA256:EDH+aRSA:EECDH:!aNULL:!eNULL:!MEDIUM:!LOW:!3DES:!MD5:!EXP:!PSK:!SRP:!DSS:!RC4:!SEED&quot;</span>;</span><br><span class="line"></span><br><span class="line">    ssl_certificate /var/lib/prosody/meet.demo.com.crt;</span><br><span class="line">    ssl_certificate_key /var/lib/prosody/meet.demo.com.key;</span><br><span class="line"></span><br><span class="line">    root /var/www/jitsi-meet;</span><br><span class="line">    index index.html index.htm;</span><br><span class="line">    <span class="comment"># error_page 404 /static/404.html;</span></span><br><span class="line"></span><br><span class="line">    location ~ ^/([a-zA-Z0-9=\?]+)$ &#123;</span><br><span class="line">        rewrite ^/(.*)$ / <span class="built_in">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        ssi on;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># BOSH</span></span><br><span class="line">    location /http-bind &#123;</span><br><span class="line">        proxy_pass      http://localhost:5280/http-bind;</span><br><span class="line">        proxy_set_header X-Forwarded-For <span class="variable">$remote_addr</span>;</span><br><span class="line">        proxy_set_header Host <span class="variable">$http_host</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>重启服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nginx -t</span><br><span class="line"></span><br><span class="line">systemctl restart nginx</span><br></pre></td></tr></table></figure>
<h3 id="安装Jitsi-Videobridge"><a href="#安装Jitsi-Videobridge" class="headerlink" title="安装Jitsi Videobridge"></a>安装Jitsi Videobridge</h3><p>下载jdk1.8(jdk-8u171-linux-x64.tar.gz)，<strong>不能使用openjdk和default-jre</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir -p /usr/share/jdk</span><br><span class="line"><span class="built_in">cd</span> /usr/share/jdk</span><br><span class="line">tar zxvf jdk-8u171-linux-x64.tar.gz</span><br><span class="line"></span><br><span class="line">vi ~/.bashrc</span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/share/jdk/jdk1.8.0_171</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"></span><br><span class="line">java -version</span><br></pre></td></tr></table></figure>

<p>下载Jitsi Videobridge</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir -p /root/jitsi</span><br><span class="line"><span class="built_in">cd</span> /root/jitsi</span><br><span class="line">wget https://download.jitsi.org/jitsi-videobridge/linux/jitsi-videobridge-linux-x64-1055.zip</span><br><span class="line">unzip jitsi-videobridge-linux-x64-1055.zip</span><br><span class="line">mv jitsi-videobridge-linux-x64-1055 videobridge</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> videobridge</span><br></pre></td></tr></table></figure>
<p>配置Jitsi Videobridge</p>
<p>添加启动脚本<code>start.sh</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> JAVA_SYS_PROPS=<span class="string">&quot;-Dnet.java.sip.communicator.SC_HOME_DIR_LOCATION=/etc/jitsi -Dnet.java.sip.communicator.SC_HOME_DIR_NAME=videobridge -Dnet.java.sip.communicator.SC_LOG_DIR_LOCATION=/var/log/jitsi/videobridge -Djava.util.logging.config.file=/etc/jitsi/videobridge/logging.properties -Dlog4j.configurationFile=/etc/jitsi/videobridge/log4j2.xml&quot;</span></span><br><span class="line"></span><br><span class="line">./jvb.sh --host=localhost --domain=meet.demo.com --port=5347 --secret=password1 &amp;</span><br><span class="line"></span><br><span class="line"><span class="built_in">unset</span> JAVA_SYS_PROPS</span><br><span class="line"></span><br><span class="line">chmod +x start.sh</span><br></pre></td></tr></table></figure>
<p>配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir -p /etc/jitsi/videobridge</span><br><span class="line"><span class="built_in">cd</span> /etc/jitsi/videobridge</span><br></pre></td></tr></table></figure>
<p>添加logging.properties 到 /etc/jitsi/videobridge</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">handlers= java.util.logging.FileHandler</span><br><span class="line"><span class="comment">#handlers= java.util.logging.ConsoleHandler</span></span><br><span class="line"><span class="comment">#handlers= java.util.logging.ConsoleHandler, com.agafua.syslog.SyslogHandler</span></span><br><span class="line"></span><br><span class="line">java.util.logging.ConsoleHandler.level = ALL</span><br><span class="line">java.util.logging.ConsoleHandler.formatter = net.java.sip.communicator.util.ScLogFormatter</span><br><span class="line"></span><br><span class="line">net.java.sip.communicator.util.ScLogFormatter.programname=JVB</span><br><span class="line"></span><br><span class="line">.level=INFO</span><br><span class="line"></span><br><span class="line">org.jitsi.videobridge.xmpp.ComponentImpl.level=FINE</span><br><span class="line"></span><br><span class="line"><span class="comment"># All of the INFO level logs from MediaStreamImpl are unnecessary in the context of jitsi-videobridge.</span></span><br><span class="line">org.jitsi.impl.neomedia.MediaStreamImpl.level=WARNING</span><br><span class="line"></span><br><span class="line"><span class="comment"># Syslog(uncomment handler to use)</span></span><br><span class="line">com.agafua.syslog.SyslogHandler.transport = udp</span><br><span class="line">com.agafua.syslog.SyslogHandler.facility = local0</span><br><span class="line">com.agafua.syslog.SyslogHandler.port = 514</span><br><span class="line">com.agafua.syslog.SyslogHandler.hostname = localhost</span><br><span class="line">com.agafua.syslog.SyslogHandler.formatter = net.java.sip.communicator.util.ScLogFormatter</span><br><span class="line">com.agafua.syslog.SyslogHandler.escapeNewlines = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># to disable double timestamps in syslog uncomment next line</span></span><br><span class="line"><span class="comment">#net.java.sip.communicator.util.ScLogFormatter.disableTimestamp=true</span></span><br><span class="line"></span><br><span class="line">java.util.logging.FileHandler.level = ALL</span><br><span class="line">java.util.logging.FileHandler.formatter = java.util.logging.SimpleFormatter</span><br><span class="line">java.util.logging.FileHandler.limit=1024000</span><br><span class="line">java.util.logging.FileHandler.count=10</span><br><span class="line">java.util.logging.FileHandler.pattern=/var/<span class="built_in">log</span>/jitsi/videobridge/jvb%u.log</span><br><span class="line">java.util.logging.FileHandler.append=<span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>添加 log4j2.xml 到 /etc/jitsi/videobridge</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">&lt;Configuration&gt;</span><br><span class="line">    &lt;Properties&gt;</span><br><span class="line">        &lt;Property name=<span class="string">&quot;log-path&quot;</span>&gt;/var/<span class="built_in">log</span>/jitsi/videobridge&lt;/Property&gt;</span><br><span class="line">	&lt;/Properties&gt;</span><br><span class="line">    &lt;Appenders&gt;</span><br><span class="line">        &lt;RollingFile name=<span class="string">&quot;RollingFile&quot;</span> fileName=<span class="string">&quot;<span class="variable">$&#123;log-path&#125;</span>/cs.log&quot;</span></span><br><span class="line">                 filePattern=<span class="string">&quot;<span class="variable">$&#123;log-path&#125;</span>/$<span class="variable">$&#123;date:yyyy-MM&#125;</span>/cs-%d&#123;MM-dd-yyyy&#125;-%i.log.gz&quot;</span>&gt;</span><br><span class="line">			&lt;PatternLayout pattern=<span class="string">&quot;%d %-5p (%F:%L) - %m%n&quot;</span>/&gt;</span><br><span class="line">      		&lt;Policies&gt;</span><br><span class="line">        		&lt;TimeBasedTriggeringPolicy /&gt;</span><br><span class="line">        		&lt;SizeBasedTriggeringPolicy size=<span class="string">&quot;250 MB&quot;</span>/&gt;</span><br><span class="line">      		&lt;/Policies&gt;</span><br><span class="line">    	&lt;/RollingFile&gt;</span><br><span class="line">    	&lt;!--</span><br><span class="line">    	&lt;Console name=<span class="string">&quot;STDOUT&quot;</span> target=<span class="string">&quot;SYSTEM_OUT&quot;</span>&gt;</span><br><span class="line">      		&lt;PatternLayout pattern=<span class="string">&quot;%d %-5p (%F:%L) - %m%n&quot;</span>/&gt;</span><br><span class="line">    	&lt;/Console&gt;</span><br><span class="line">    	 --&gt;</span><br><span class="line">    &lt;/Appenders&gt;</span><br><span class="line">    &lt;Loggers&gt;</span><br><span class="line">    	&lt;!--&lt;Logger name=<span class="string">&quot;org.apache.log4j.xml&quot;</span> level=<span class="string">&quot;debug&quot;</span>/&gt;--&gt;</span><br><span class="line">    	&lt;Logger name=<span class="string">&quot;org.apache.log4j.xml&quot;</span> level=<span class="string">&quot;info&quot;</span>/&gt;</span><br><span class="line">        &lt;Root level=<span class="string">&quot;info&quot;</span>&gt;</span><br><span class="line">            &lt;AppenderRef ref=<span class="string">&quot;RollingFile&quot;</span>/&gt;</span><br><span class="line">           &lt;!--  &lt;AppenderRef ref=<span class="string">&quot;STDOUT&quot;</span>/&gt;  --&gt;</span><br><span class="line">        &lt;/Root&gt;</span><br><span class="line">    &lt;/Loggers&gt;</span><br><span class="line">&lt;/Configuration&gt;</span><br></pre></td></tr></table></figure>
<p>添加 sip-communicator.properties 到 /etc/jitsi/videobridge</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">org.jitsi.impl.neomedia.transform.srtp.SRTPCryptoContext.checkReplay=<span class="literal">false</span></span><br></pre></td></tr></table></figure>
<p>启动服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir -p /var/<span class="built_in">log</span>/jitsi/videobridge</span><br><span class="line"><span class="built_in">cd</span> /root/jitsi/videobridge</span><br><span class="line">./start.sh</span><br></pre></td></tr></table></figure>
<h3 id="安装Jitsi-Jicofo"><a href="#安装Jitsi-Jicofo" class="headerlink" title="安装Jitsi Jicofo"></a>安装Jitsi Jicofo</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get install  maven</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /root/jitsi</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/jitsi/jicofo.git</span><br><span class="line"><span class="built_in">cd</span> jicofo</span><br><span class="line">mvn package -DskipTests -Dassembly.skipAssembly=<span class="literal">false</span></span><br><span class="line">unzip target/jicofo-linux-x64-1.1-SNAPSHOT.zip</span><br></pre></td></tr></table></figure>
<p>配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir -p /etc/jitsi/jicofo</span><br><span class="line"><span class="built_in">cd</span> /etc/jitsi/jicofo</span><br></pre></td></tr></table></figure>

<p>添加 logging.properties 到 /etc/jitsi/jicofo</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">handlers= java.util.logging.FileHandler</span><br><span class="line"><span class="comment">#handlers= java.util.logging.ConsoleHandler</span></span><br><span class="line"><span class="comment">#handlers= java.util.logging.ConsoleHandler, com.agafua.syslog.SyslogHandler</span></span><br><span class="line"></span><br><span class="line">java.util.logging.ConsoleHandler.level = ALL</span><br><span class="line">java.util.logging.ConsoleHandler.formatter = net.java.sip.communicator.util.ScLogFormatter</span><br><span class="line"></span><br><span class="line">net.java.sip.communicator.util.ScLogFormatter.programname=Jicofo</span><br><span class="line"></span><br><span class="line">.level=INFO</span><br><span class="line">net.sf.level=SEVERE</span><br><span class="line">net.java.sip.communicator.plugin.reconnectplugin.level=FINE</span><br><span class="line">org.ice4j.level=SEVERE</span><br><span class="line">org.jitsi.impl.neomedia.level=SEVERE</span><br><span class="line"></span><br><span class="line"><span class="comment"># Do not worry about missing strings</span></span><br><span class="line">net.java.sip.communicator.service.resources.AbstractResourcesService.level=SEVERE</span><br><span class="line"></span><br><span class="line"><span class="comment">#net.java.sip.communicator.service.protocol.level=ALL</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Enable debug packets logging</span></span><br><span class="line"><span class="comment">#org.jitsi.impl.protocol.xmpp.level=FINE</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Syslog(uncomment handler to use)</span></span><br><span class="line">com.agafua.syslog.SyslogHandler.transport = udp</span><br><span class="line">com.agafua.syslog.SyslogHandler.facility = local0</span><br><span class="line">com.agafua.syslog.SyslogHandler.port = 514</span><br><span class="line">com.agafua.syslog.SyslogHandler.hostname = localhost</span><br><span class="line">com.agafua.syslog.SyslogHandler.formatter = net.java.sip.communicator.util.ScLogFormatter</span><br><span class="line">com.agafua.syslog.SyslogHandler.escapeNewlines = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># to disable double timestamps in syslog uncomment next line</span></span><br><span class="line"><span class="comment">#net.java.sip.communicator.util.ScLogFormatter.disableTimestamp=true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># uncomment to see how Jicofo talks to the JVB</span></span><br><span class="line"><span class="comment">#org.jitsi.impl.protocol.xmpp.colibri.level=ALL</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">java.util.logging.FileHandler.level = ALL</span><br><span class="line">java.util.logging.FileHandler.formatter = java.util.logging.SimpleFormatter</span><br><span class="line">java.util.logging.FileHandler.limit=1024000</span><br><span class="line">java.util.logging.FileHandler.count=10</span><br><span class="line">java.util.logging.FileHandler.pattern=/var/<span class="built_in">log</span>/jitsi/jicofo/jicofo%u.log</span><br><span class="line">java.util.logging.FileHandler.append=<span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>添加 log4j2.xml 到 /etc/jitsi/jicofo</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">&lt;Configuration&gt;</span><br><span class="line">    &lt;Properties&gt;</span><br><span class="line">        &lt;Property name=<span class="string">&quot;log-path&quot;</span>&gt;/var/<span class="built_in">log</span>/jitsi/jicofo&lt;/Property&gt;</span><br><span class="line">	&lt;/Properties&gt;</span><br><span class="line">    &lt;Appenders&gt;</span><br><span class="line">        &lt;RollingFile name=<span class="string">&quot;RollingFile&quot;</span> fileName=<span class="string">&quot;<span class="variable">$&#123;log-path&#125;</span>/cs.log&quot;</span></span><br><span class="line">                 filePattern=<span class="string">&quot;<span class="variable">$&#123;log-path&#125;</span>/$<span class="variable">$&#123;date:yyyy-MM&#125;</span>/cs-%d&#123;MM-dd-yyyy&#125;-%i.log.gz&quot;</span>&gt;</span><br><span class="line">			&lt;PatternLayout pattern=<span class="string">&quot;%d %-5p (%F:%L) - %m%n&quot;</span>/&gt;</span><br><span class="line">      		&lt;Policies&gt;</span><br><span class="line">        		&lt;TimeBasedTriggeringPolicy /&gt;</span><br><span class="line">        		&lt;SizeBasedTriggeringPolicy size=<span class="string">&quot;250 MB&quot;</span>/&gt;</span><br><span class="line">      		&lt;/Policies&gt;</span><br><span class="line">    	&lt;/RollingFile&gt;</span><br><span class="line">    	&lt;!--</span><br><span class="line">    	&lt;Console name=<span class="string">&quot;STDOUT&quot;</span> target=<span class="string">&quot;SYSTEM_OUT&quot;</span>&gt;</span><br><span class="line">      		&lt;PatternLayout pattern=<span class="string">&quot;%d %-5p (%F:%L) - %m%n&quot;</span>/&gt;</span><br><span class="line">    	&lt;/Console&gt;</span><br><span class="line">    	 --&gt;</span><br><span class="line">    &lt;/Appenders&gt;</span><br><span class="line">    &lt;Loggers&gt;</span><br><span class="line">    	&lt;!--&lt;Logger name=<span class="string">&quot;org.apache.log4j.xml&quot;</span> level=<span class="string">&quot;debug&quot;</span>/&gt;--&gt;</span><br><span class="line">    	&lt;Logger name=<span class="string">&quot;org.apache.log4j.xml&quot;</span> level=<span class="string">&quot;info&quot;</span>/&gt;</span><br><span class="line">        &lt;Root level=<span class="string">&quot;info&quot;</span>&gt;</span><br><span class="line">            &lt;AppenderRef ref=<span class="string">&quot;RollingFile&quot;</span>/&gt;</span><br><span class="line">           &lt;!--  &lt;AppenderRef ref=<span class="string">&quot;STDOUT&quot;</span>/&gt;  --&gt;</span><br><span class="line">        &lt;/Root&gt;</span><br><span class="line">    &lt;/Loggers&gt;</span><br><span class="line">&lt;/Configuration&gt;</span><br></pre></td></tr></table></figure>
<p>添加 sip-communicator.properties 到 /etc/jitsi/jicofo (empty file)</p>
<p>启动脚本<br>cd /root/jitsi/jicofo</p>
<p>添加 start.sh 到 /root/jitsi/jicofo</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># mvn package -DskipTests -Dassembly.skipAssembly=false</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> JAVA_SYS_PROPS=<span class="string">&quot;-Dnet.java.sip.communicator.SC_HOME_DIR_LOCATION=/etc/jitsi -Dnet.java.sip.communicator.SC_HOME_DIR_NAME=jicofo -Dnet.java.sip.communicator.SC_LOG_DIR_LOCATION=/var/log/jitsi/jicofo -Djava.util.logging.config.file=/etc/jitsi/jicofo/logging.properties -Dlog4j.configurationFile=/etc/jitsi/jicofo/log4j2.xml&quot;</span></span><br><span class="line"></span><br><span class="line">./jicofo-linux-x64-1.1-SNAPSHOT/jicofo.sh --host=localhost --domain=meet.demo.com --secret=password2 --user_domain=auth.meet.demo.com --user_name=focus --user_password=password3 &amp;</span><br><span class="line"></span><br><span class="line"><span class="built_in">unset</span> JAVA_SYS_PROPS</span><br></pre></td></tr></table></figure>
<p>启动服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chmod +x start.sh</span><br><span class="line"></span><br><span class="line">mkdir -p /var/<span class="built_in">log</span>/jitsi/jicofo/</span><br><span class="line">./start.sh</span><br></pre></td></tr></table></figure>
<h3 id="安装Jitsi-Meet"><a href="#安装Jitsi-Meet" class="headerlink" title="安装Jitsi Meet"></a>安装Jitsi Meet</h3><p>编译</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /root/jitsi</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/jitsi/jitsi-meet.git</span><br><span class="line"></span><br><span class="line">npm install</span><br><span class="line"></span><br><span class="line">make</span><br></pre></td></tr></table></figure>
<p>配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cp -fr jitsi-meet /var/www/</span><br><span class="line"><span class="built_in">cd</span> /var/www/jitsi-meet</span><br></pre></td></tr></table></figure>
<p>修改config.js </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">var config = &#123;</span><br><span class="line">    hosts: &#123;</span><br><span class="line">        domain: <span class="string">&#x27;meet.demo.com&#x27;</span>,</span><br><span class="line">        muc: <span class="string">&#x27;conference.meet.demo.com&#x27;</span>,</span><br><span class="line">        bridge: <span class="string">&#x27;jitsi-videobridge.meet.demo.com&#x27;</span>,</span><br><span class="line">        focus: <span class="string">&#x27;focus.meet.demo.com&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    useNicks: <span class="literal">false</span>,</span><br><span class="line">    bosh: <span class="string">&#x27;//meet.demo.com/http-bind&#x27;</span>, // FIXME: use xep-0156 <span class="keyword">for</span> that</span><br><span class="line">    //chromeExtensionId: <span class="string">&#x27;diibjkoicjeejcmhdnailmkgecihlobk&#x27;</span>, // Id of desktop streamer Chrome extension</span><br><span class="line">    //minChromeExtVersion: <span class="string">&#x27;0.1&#x27;</span> // Required version of Chrome extension</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">check /etc/nginx/sites-enabled/meet.demo.com root</span><br><span class="line">root /var/www/jitsi-meet;</span><br></pre></td></tr></table></figure>
<p>重启服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl restart nginx</span><br></pre></td></tr></table></figure>
<p>浏览器中输入：<a href="https://meet.demo.com/">https://meet.demo.com/</a></p>
]]></content>
      <categories>
        <category>video</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>jitsi</tag>
        <tag>meet</tag>
        <tag>video</tag>
        <tag>conferences</tag>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>Kubernetes Ingress开启HTTPS</title>
    <url>/k8s/k8s-enable-tls-ingress-20180802.html</url>
    <content><![CDATA[<p>为你的Ingress开启HTTPS支持, 使应用更加安全。Ingress支持HTTPS配置比较简单，这里使用私用证书进行配置，浏览器中会提示<code>not secure</code>，需要到服务商买权威的CA证书。</p>
<a id="more"></a>

<h3 id="创建证书"><a href="#创建证书" class="headerlink" title="创建证书"></a>创建证书</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> openssl req <span class="literal">-x509</span> <span class="literal">-nodes</span> <span class="literal">-days</span> <span class="number">365</span> <span class="literal">-newkey</span> rsa:<span class="number">2048</span> <span class="literal">-keyout</span> dex.key <span class="literal">-out</span> dex.crt <span class="literal">-subj</span> <span class="string">&quot;/CN=dex.sso/O=dex.sso&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$</span> <span class="built_in">cat</span> dex.key | base64</span><br><span class="line"><span class="variable">$</span> <span class="built_in">cat</span> dex.crt | base64</span><br></pre></td></tr></table></figure>
<h3 id="配置Secret"><a href="#配置Secret" class="headerlink" title="配置Secret"></a>配置Secret</h3><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">apiVersion</span>: v<span class="number">1</span></span><br><span class="line"><span class="attribute">data</span>:</span><br><span class="line">  <span class="attribute">tls</span>.crt: LS<span class="number">0</span>tLS<span class="number">1</span>CRUdJTiBDRVJUSUZJQ<span class="number">0</span>FURS<span class="number">0</span>tLS<span class="number">0</span>tCk<span class="number">1</span>JSUN<span class="number">4</span>RENDQWF<span class="number">3</span>Q<span class="number">0</span>NRRENzeHpHVTI<span class="number">5</span>UFl<span class="number">6</span>QU<span class="number">5</span>CZ<span class="number">2</span>txaGtpRzl<span class="number">3</span>MEJBUXNGQURBa<span class="number">01</span>SQXdEZ<span class="number">1</span>lEVlFRRERBZGsKWlhndWMzTnZNUkF<span class="number">3</span>RGdZRFZRUUtEQWRrWlhndWMzTnZNQjRYRFRFNE<span class="number">1</span>EZ<span class="number">3</span>dNakEzTkRFek<span class="number">5</span>sb<span class="number">1</span>hEVEU<span class="number">1</span>TURndwpNakEzTkRFek<span class="number">5</span>sb<span class="number">3</span>dKREVRTUE<span class="number">0</span>R<span class="number">0</span>ExVUVBd<span class="number">3</span>dIWkdWNExuTnpiekVRTUE<span class="number">0</span>R<span class="number">0</span>ExVUVDZ<span class="number">3</span>dIWkdWNExuTnpiekNDCkFTSXdEUVlKS<span class="number">29</span>aSWh<span class="number">2</span>Y<span class="number">05</span>BUUVCQlFBRGdnRVBBRENDQVFvQ<span class="number">2</span>dnRUJBTDJIeDBIQytDY<span class="number">3</span>Q<span class="number">4</span>TjhJNDVnRk<span class="number">1</span>yNXYKV<span class="number">1</span>d<span class="number">2</span>SUZIY<span class="number">1</span>hSTDRLeUc<span class="number">5</span>dW<span class="number">91</span>MlRZYVhNNHRSSjU<span class="number">2</span>VGtXSzhLSUFnd<span class="number">1</span>RnUkFSUnJhTjFuMzZuaGFpM<span class="number">0</span>xOYWxRZgpYTWhLMUo<span class="number">5</span>cXI<span class="number">3</span>bklLLzlvYjdYU<span class="number">1</span>UxTzlOR<span class="number">2</span>NSeU<span class="number">1</span>ldkVTcGJ<span class="number">2</span>bmh<span class="number">4</span>dFkzNnVuR<span class="number">3</span>hwT<span class="number">3</span>hidjFsM<span class="number">25</span>Oa<span class="number">1</span>NkRXYyCmN<span class="number">6</span>bGFWd<span class="number">1</span>U<span class="number">1</span>VGwwTlZsTlNkcjZ<span class="number">1</span>YmRYYS<span class="number">85</span>MXhOUnJDZkFwNjcydDMyaVZNMXhyNkNESW<span class="number">9</span>qOHVjL<span class="number">3</span>AxQmpjYkcKTDROckcwNTZBWDRBREVYWGRrMEJISzM<span class="number">4</span>d<span class="number">29</span>yOENpcTFMSUhNVnpwQXJhRW<span class="number">1</span>FRUxSUU<span class="number">9</span>SbU<span class="number">1</span>wY<span class="number">1</span>htRWZiNjUzcQo<span class="number">3</span>RmNPejVpRjVkVVZVVzN<span class="number">3</span>TXJZSjUzUzB<span class="number">6</span>ZjJZc<span class="number">2</span>FlQ<span class="number">01</span>pRzZzMUM<span class="number">5</span>Znl<span class="number">0</span>QnpwNHBzRXQreWpZcEhZUGlBUlVDCkF<span class="number">3</span>RUFBVEFOQmdrcWhraUc<span class="number">5</span>dzBCQVFzRkFBT<span class="number">0</span>NBUUVBbmdSR<span class="number">0</span>JrWjlhRGV<span class="number">5</span>YjJ<span class="number">0</span>YityMjJJK<span class="number">1</span>N<span class="number">0</span>ZlNHMzdEWFoKS<span class="number">3</span>EzSnlyTTdjeUlacGRmRjBKdTlJWHA<span class="number">0</span>Z<span class="number">1</span>IwUFVhQzR<span class="number">1</span>K<span class="number">2</span>V<span class="number">6</span>NG<span class="number">8</span>vc<span class="number">0</span>ZDaGtNcW<span class="number">5</span>QUE<span class="number">93</span>cTJrOTlPRXFSOTVrSgoydllDQ<span class="number">0</span>ZnNVk<span class="number">4</span>VklFTnNwdHpJQlZDdFBjRnlabnNiTENDMUFuRGVvZCt<span class="number">3</span>aUJ<span class="number">3</span>THhLWU<span class="number">1</span>MN<span class="number">0</span>oyeTNXd<span class="number">2</span>RPZFp<span class="number">3</span>ClJiWlBKT<span class="number">1</span>NsL<span class="number">0</span>FCZmdMV<span class="number">2</span>kxMExQWTBUSmdjRXp<span class="number">3</span>QU<span class="number">9</span>VTUh<span class="number">2</span>SnpXUXNzY<span class="number">2</span>pTU<span class="number">0</span>Z<span class="number">4</span>clFHWXcyVDRFN<span class="number">1</span>lvV<span class="number">3</span>puWXEKYy<span class="number">9</span>BTVA<span class="number">1</span>NGhYbkhpWUp<span class="number">6</span>QmZCR<span class="number">0</span>hGMDErVm<span class="number">1</span>KbExRK<span class="number">2</span>VvcDJpSVBqdUc<span class="number">1</span>OGdBdWlXMk<span class="number">5</span>DTGtTdHNSRzREZ<span class="number">0</span>VpdApWRUo<span class="number">0</span>MVZETHp<span class="number">3</span>UkZHbkNIb<span class="number">1</span>FnZWt<span class="number">5</span>YmJVZ<span class="number">0</span>twb<span class="number">1</span>VHMDYwTDBBcnZzZVlWTmFjWk<span class="number">5</span>lNDVRQ<span class="number">0</span>E<span class="number">9</span>PQotLS<span class="number">0</span>tLUVORCBDRVJUSUZJQ<span class="number">0</span>FURS<span class="number">0</span>tLS<span class="number">0</span>tCg==</span><br><span class="line">  <span class="attribute">tls</span>.key: LS<span class="number">0</span>tLS<span class="number">1</span>CRUdJTiBQUklWQVRFIEtFWS<span class="number">0</span>tLS<span class="number">0</span>tCk<span class="number">1</span>JSUV<span class="number">2</span>QUlCQURBTkJna<span class="number">3</span>Foa<span class="number">2</span>lHOXcwQkFRRUZBQVNDQktZd<span class="number">2</span>dnU<span class="number">2</span>lBZ<span class="number">0</span>VBQW<span class="number">9</span>JQkFRQzloOGRCd<span class="number">3</span>ZnbkxmRGYKQ<span class="number">09</span>PWUJUSytiMWxyeUJSM<span class="number">0</span>YwUytDc<span class="number">2</span>h<span class="number">2</span>YnFMdGsyR<span class="number">2</span>x<span class="number">6</span>T<span class="number">0</span>xVU<span class="number">2</span>VlazVGaXZDaUFJTUU<span class="number">0</span>RVFFVWEyamRaOStwNApXb<span class="number">3</span>R<span class="number">5</span>eldwVUgxeklTdFNmYXErNXlDdi<span class="number">9</span>hRysxMGxOVHZUUm<span class="number">5</span>FY<span class="number">2</span>pIcnhFcVc<span class="number">3</span>NTRjYldOK<span class="number">3</span>JweHNhVHNXNzlaCmQ<span class="number">1</span>elpFblJMOW<span class="number">5</span>NNVdsY<span class="number">0</span>ZPVTVkRFZaVFVuYStybTNWMnYvZGNUVWF<span class="number">3</span>bndLZXU<span class="number">5</span>cmQ<span class="number">5</span>b<span class="number">2</span>xUTmNhK<span class="number">2</span>dneUtJL<span class="number">0</span>wKblA<span class="number">2</span>ZFFZM<span class="number">0</span>d<span class="number">4</span>aStEYXh<span class="number">0</span>T<span class="number">2</span>VnRitBQXhGMTNaTkFSeXQvTUtLL<span class="number">0</span>FvcXRTeUJ<span class="number">6</span>RmM<span class="number">2</span>UUsyaEpoQkMwVURrWmpLWApGNWhIMit<span class="number">1</span>ZDZ<span class="number">1</span>eFhEcytZaGVYVkZWRnQ<span class="number">4</span>REsyQ<span class="number">2</span>VkMHRNMzltTEduZ<span class="number">2</span>pJaHVyTlF<span class="number">2</span>WDhyUWM<span class="number">2</span>ZUtiQkxmc<span class="number">28</span>yCktSMkQ<span class="number">0</span>Z<span class="number">0</span>VWQWdNQkFBRUNnZ<span class="number">0</span>VBZWZ<span class="number">1</span>ZG<span class="number">54</span>R<span class="number">2</span>hMWFpBQlF<span class="number">4</span>dmp<span class="number">6</span>UXBTSy<span class="number">9</span>aMmFqWW<span class="number">94</span>MXl<span class="number">2</span>TzJydXl<span class="number">4</span>MTZIcG<span class="number">0</span>KNnBOSG<span class="number">1</span>tSkdtTFh<span class="number">1</span>N<span class="number">2</span>htU<span class="number">0</span>xETUt<span class="number">3</span>Mm<span class="number">1</span>xRUhKS<span class="number">0</span>ZibWVTdi<span class="number">9</span>icUhQVTczZVArOGxOdDV<span class="number">5</span>dXBOL<span class="number">1</span>VrWG<span class="number">5</span>pREIvbQpTWXNJNHgxcklEbm<span class="number">96</span>bDVsNUpjcXhzcU<span class="number">1</span>uUWc<span class="number">4</span>b<span class="number">1</span>hNYllMVy<span class="number">9</span>XV<span class="number">2</span>FyT<span class="number">3</span>dqUGVDWlF<span class="number">3</span>NmZ<span class="number">5</span>YTZsZDJockZHa<span class="number">3</span>VGCldESTM<span class="number">3</span>dGtqdjJJNHJRdW<span class="number">1</span>IZFk<span class="number">0</span>VUoyUzNOL<span class="number">3</span>JlL<span class="number">2</span>NnUkZVVDBhbXpabVN<span class="number">5</span>T<span class="number">0</span>V<span class="number">6</span>WmloMHU<span class="number">5</span>U<span class="number">28</span>xK<span class="number">2</span>w<span class="number">0</span>R<span class="number">0</span>ZtQTgKeGNHTjVCZUIxMzBzdlp<span class="number">3</span>UExRRXJxdXJiTFFwN<span class="number">3</span>Yzd<span class="number">2</span>Fkb<span class="number">2</span>phOGJzVGFHd<span class="number">1</span>hyNFlMWWpXVnhFVWhZcHZXZFhBRwpLK<span class="number">05</span>jNU<span class="number">9</span>xMlFaanRSa<span class="number">29</span>kVEltNXFjQUpSSU<span class="number">5</span>mU<span class="number">1</span>JIYkhQUWdTNHFGQVFLQmdRRHNwM<span class="number">3</span>ZqZWRuOHJDOHI<span class="number">2</span>cWJ<span class="number">2</span>CldiYzlPeDREOVJRVUVvSll<span class="number">4</span>MlpBSFZObEhtdU<span class="number">5</span>YNk<span class="number">9</span>WaG<span class="number">1</span>XaDFibkdDbDN<span class="number">6</span>T<span class="number">2</span>ZJQU<span class="number">11</span>bm<span class="number">1</span>GZ<span class="number">2</span>Uwc<span class="number">24</span>zTVF<span class="number">2</span>aVYKbU<span class="number">5</span>aWEg<span class="number">3</span>YVRpLytyYXNPUVdSajZiSHNDWEEyR<span class="number">0</span>ZCV<span class="number">3</span>A<span class="number">2</span>QlJCbjdRbHdxaGFEblpYYnR<span class="number">6</span>bHZ<span class="number">0</span>aXJqZnJsTUhoTgp<span class="number">2</span>RGtLT<span class="number">3</span>pxcFN<span class="number">1</span>bjdSaTcraWpsZDk<span class="number">4</span>SU<span class="number">1</span>oUUtCZ<span class="number">1</span>FETkJoK<span class="number">0</span>JMaWFWaDl<span class="number">3</span>cTZZc<span class="number">0</span>JNNHMzQ<span class="number">0</span>JyWkd<span class="number">2</span>VHVKdmNPClBBcm<span class="number">1</span>MUVB<span class="number">6</span>K<span class="number">2</span>VaTGNOMDlQNXBCR<span class="number">2</span>t<span class="number">2</span>S<span class="number">1</span>dBQUEyY<span class="number">2</span>FUdDRKUmp<span class="number">3</span>VHpxZjFzOHhwR<span class="number">3</span>FWb<span class="number">1</span>JmRjdlZWxXMzQwb<span class="number">1</span>AKVFdQcVNndHpGSkV<span class="number">4</span>and<span class="number">2</span>cmZ<span class="number">2</span>WXhpWlFlSmY<span class="number">0</span>MVBTNFFMbUJqSWhUYU<span class="number">5</span>JZUdvUTFhc<span class="number">0</span>NCTkdqWDdYeEZkSElOMApxNkFpL<span class="number">05</span>OUFVRS<span class="number">0</span>JnRTRrWDN<span class="number">3</span>VldDMWVqWlRxdm<span class="number">9</span>SNkUwOWNuZVNnb<span class="number">0</span>NpZ<span class="number">2</span>svbk<span class="number">1</span>uYTYrQURON<span class="number">2</span>YvZ<span class="number">0</span>doSFZ<span class="number">6</span>CkUwd<span class="number">0</span>V<span class="number">6</span>bnJlSVhlV<span class="number">3</span>dwbmVOZTJMaUsvWjRELzZQU<span class="number">3</span>JvZEo<span class="number">0</span>QUVzRlZrTzZCS<span class="number">21</span>JWGlXL<span class="number">25</span>NaGJ<span class="number">0</span>WG<span class="number">1</span>uUFovZmEKY<span class="number">2</span>hYWkxocnAwNzBvMlZxMWVLdEVBVGRrZ<span class="number">2</span>x<span class="number">2</span>N<span class="number">1</span>RUNGQwSmZZUnQ<span class="number">1</span>dnBpTWFZWm<span class="number">9</span>hK<span class="number">2</span>laVkVQWWhBb<span class="number">0</span>dBSHVGUQpOM<span class="number">1</span>hMQy<span class="number">9</span>TbG<span class="number">5</span>iVUZZYzN<span class="number">3</span>cHY<span class="number">1</span>S<span class="number">2</span>hPN<span class="number">0</span>JlMmxWQnNqV<span class="number">1</span>gycmlVSW<span class="number">9</span>RUE<span class="number">1</span>hb<span class="number">0</span>hBU<span class="number">0</span>xhRWpjcDRKdnBiRW<span class="number">5</span>ickpTCko<span class="number">1</span>U<span class="number">2</span>lDMDFNUlcrc<span class="number">1</span>FuNVplWTdBLzBOdnk<span class="number">3</span>MnBOdnJTRk<span class="number">1</span>USVNySUxXR<span class="number">3</span>FTUWdzaWE<span class="number">3</span>MnNHSXBpYW<span class="number">9</span>SbmZycHQKZkNEekFSYXVYd<span class="number">0</span>c<span class="number">4</span>OEM<span class="number">3</span>Yy<span class="number">9</span>wLzNCNEIvTGdZUWFxODY<span class="number">5</span>R<span class="number">29</span>lTGJFQ<span class="number">2</span>dZQVB<span class="number">5</span>NU<span class="number">1</span>heXVTRUFEaTdyZHVJcVArZgp<span class="number">4</span>amw<span class="number">5</span>elhwMGpZa<span class="number">2</span>RtOCtmNVhhdGlIaFl<span class="number">6</span>STBzaHdsZHBXcU<span class="number">85</span>R<span class="number">1</span>NoR<span class="number">2</span>VMVi<span class="number">9</span>Md<span class="number">2</span>d<span class="number">1</span>bVFhQlRCa<span class="number">3</span>Bta<span class="number">0</span>JSOFlGCkQzbmhCQ<span class="number">0</span>hjaDVIeEd<span class="number">0</span>UkVzWnlRUjJtNXhhRGhVL<span class="number">2</span>NYc<span class="number">3</span>ZFVjBBcmRUeVl<span class="number">3</span>S<span class="number">0</span>VlTStlSnVXYTl<span class="number">1</span>THdQM<span class="number">2</span>VKeEMKbFFXSXNUbm<span class="number">9</span>EQUpzWUE<span class="number">4</span>NFJST<span class="number">2</span>dMdz<span class="number">09</span>Ci<span class="number">0</span>tLS<span class="number">0</span>tRU<span class="number">5</span>EIFBSSVZBVEUgS<span class="number">0</span>VZLS<span class="number">0</span>tLS<span class="number">0</span>K</span><br><span class="line"><span class="attribute">kind</span>: Secret</span><br><span class="line"><span class="attribute">metadata</span>:</span><br><span class="line">  <span class="attribute">name</span>: sso-secret</span><br><span class="line">  <span class="attribute">namespace</span>: sso</span><br><span class="line"><span class="attribute">type</span>: Opaque</span><br></pre></td></tr></table></figure>
<h3 id="配置Ingress"><a href="#配置Ingress" class="headerlink" title="配置Ingress"></a>配置Ingress</h3><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="attribute">apiVersion</span>: extensions/v1beta1</span><br><span class="line"><span class="attribute">kind</span>: Ingress</span><br><span class="line"><span class="attribute">metadata</span>:</span><br><span class="line">  <span class="attribute">name</span>: dex</span><br><span class="line">  <span class="attribute">namespace</span>: sso</span><br><span class="line"><span class="attribute">spec</span>:</span><br><span class="line">  <span class="attribute">tls</span>:</span><br><span class="line">  - <span class="attribute">secretName</span>: sso-secret</span><br><span class="line">  <span class="attribute">rules</span>:</span><br><span class="line">  - <span class="attribute">host</span>: dex.sso</span><br><span class="line">    <span class="attribute">http</span>:</span><br><span class="line">      <span class="attribute">paths</span>:</span><br><span class="line">      - <span class="attribute">backend</span>:</span><br><span class="line">          <span class="attribute">serviceName</span>: dex</span><br><span class="line">          <span class="attribute">servicePort</span>: <span class="number">80</span></span><br><span class="line">        <span class="attribute">path</span>: /</span><br></pre></td></tr></table></figure>
<p>Okay，配置完成。</p>
]]></content>
      <categories>
        <category>k8s</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
        <tag>k8s</tag>
        <tag>ingress</tag>
        <tag>https</tag>
        <tag>tls</tag>
      </tags>
  </entry>
  <entry>
    <title>在Centos7上安装Kubernetes</title>
    <url>/k8s/k8s-install-on-centos7-20180609.html</url>
    <content><![CDATA[<p>使用KubeAdm官方工具在Centos7上安装kubernetes.</p>
<a id="more"></a>

<h3 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h3><p>OS:          Centos7<br>K8s Version: v1.10.4</p>
<h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><p>更新系统</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>yum update -y </span><br></pre></td></tr></table></figure>
<p>时区</p>
<figure class="highlight dsconfig"><table><tr><td class="code"><pre><span class="line">$ <span class="string">timedatectl</span> <span class="built_in">set-timezone</span> <span class="string">Asia</span>/<span class="string">Shanghai</span></span><br></pre></td></tr></table></figure>
<p>配置Hosts</p>
<figure class="highlight accesslog"><table><tr><td class="code"><pre><span class="line">$ cat /etc/hosts</span><br><span class="line"><span class="number">10.0.100.2</span> k8smaster</span><br><span class="line"><span class="number">10.0.100.3</span> k8snode01</span><br><span class="line"><span class="number">10.0.100.4</span> k8snode02</span><br></pre></td></tr></table></figure>
<p>关闭防火墙</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> systemctl <span class="built_in">disable</span> firewalld</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> systemctl stop firewalld</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> systemctl status firewalld</span></span><br></pre></td></tr></table></figure>
<p>关闭内存交换分区</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> swapoff <span class="literal">-a</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 永久</span></span><br><span class="line"><span class="variable">$</span> <span class="built_in">cat</span> /etc/fstab</span><br><span class="line"><span class="comment">#/dev/mapper/centos-swap swap                    swap    defaults        0 0</span></span><br></pre></td></tr></table></figure>
<p>禁用SELINUX</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> setenforce <span class="number">0</span></span><br><span class="line"><span class="variable">$</span> <span class="built_in">cat</span> /etc/selinux/config</span><br><span class="line">SELINUX=disabled</span><br></pre></td></tr></table></figure>
<p>配置网络</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">$ cat &lt;&lt;EOF &gt;  /etc/sysctl.d/k8s.conf</span><br><span class="line">net<span class="selector-class">.bridge</span><span class="selector-class">.bridge-nf-call-ip6tables</span> = <span class="number">1</span></span><br><span class="line">net<span class="selector-class">.bridge</span><span class="selector-class">.bridge-nf-call-iptables</span> = <span class="number">1</span></span><br><span class="line">net<span class="selector-class">.ipv4</span><span class="selector-class">.ip_forward</span> = <span class="number">1</span></span><br><span class="line">EOF</span><br><span class="line">$ modprobe br_netfilter</span><br><span class="line">$ sysctl --system</span><br></pre></td></tr></table></figure>
<h3 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h3><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">$ yum <span class="keyword">install</span> -y docker</span><br></pre></td></tr></table></figure>
<p>配置cgroupdriver为cgroupfs</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">$ sed -i <span class="string">&quot;s/native.cgroupdriver=systemd/native.cgroupdriver=cgroupfs/g&quot;</span> <span class="regexp">/usr/</span>lib<span class="regexp">/systemd/</span>system/docker.service</span><br><span class="line">$ cat <span class="regexp">/usr/</span>lib<span class="regexp">/systemd/</span>system/docker.service</span><br><span class="line"></span><br><span class="line">$ systemctl enable docker &amp;&amp; systemctl start docker</span><br><span class="line">$ docker info | <span class="keyword">grep</span> Cgroup</span><br></pre></td></tr></table></figure>
<h3 id="安装kubeadm-kubelet-kubectl"><a href="#安装kubeadm-kubelet-kubectl" class="headerlink" title="安装kubeadm kubelet kubectl"></a>安装kubeadm kubelet kubectl</h3><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">$ cat &lt;&lt;EOF &gt; <span class="regexp">/etc/yum</span>.repos.d/kubernetes.repo</span><br><span class="line">[kubernetes]</span><br><span class="line">name=Kubernetes</span><br><span class="line">baseurl=https:<span class="regexp">//</span>packages.cloud.google.com<span class="regexp">/yum/</span>repos/kubernetes-el7-x86_64</span><br><span class="line">enabled=<span class="number">1</span></span><br><span class="line">gpgcheck=<span class="number">1</span></span><br><span class="line">repo_gpgcheck=<span class="number">1</span></span><br><span class="line">gpgkey=https:<span class="regexp">//</span>packages.cloud.google.com<span class="regexp">/yum/</span>doc<span class="regexp">/yum-key.gpg https:/</span><span class="regexp">/packages.cloud.google.com/yum</span><span class="regexp">/doc/</span>rpm-package-key.gpg</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">$ yum install -y kubelet kubeadm kubectl</span><br><span class="line">$ systemctl enable kubelet &amp;&amp; systemctl start kubelet </span><br></pre></td></tr></table></figure>
<p>Note: kubelet在这里启动时不会成功的，它会定时检查重启。后面程序安装后，kubectl会启动成功。</p>
<h3 id="配置kubeadm的cgroup-driver为Cgroupfs"><a href="#配置kubeadm的cgroup-driver为Cgroupfs" class="headerlink" title="配置kubeadm的cgroup driver为Cgroupfs"></a>配置kubeadm的cgroup driver为Cgroupfs</h3><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">$ sed -i <span class="string">&quot;s/cgroup-driver=systemd/cgroup-driver=cgroupfs --runtime-cgroups=\/systemd\/system.slice --kubelet-cgroups=\/systemd\/system.slice/g&quot;</span> <span class="regexp">/etc/</span>systemd<span class="regexp">/system/</span>kubelet.service.d/<span class="number">10</span>-kubeadm.conf</span><br><span class="line">$ cat <span class="regexp">/etc/</span>systemd<span class="regexp">/system/</span>kubelet.service.d/<span class="number">10</span>-kubeadm.conf</span><br><span class="line"></span><br><span class="line">$ systemctl daemon-reload</span><br><span class="line">$ systemctl restart kubelet</span><br></pre></td></tr></table></figure>
<p>查看kubelet日志</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> journalctl <span class="literal">-u</span> kubelet <span class="operator">-f</span></span><br></pre></td></tr></table></figure>

<h3 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h3><p>提前下载Dokcer镜像，如果你机器有科学上网请忽略这一步。我提前将Docker镜像下载到国内私有hub中。下面是下载脚本</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">ARCH</span>=amd64</span><br><span class="line"><span class="attribute">mversion</span>=v1.10.4</span><br><span class="line"><span class="attribute">nversion</span>=1.14.8</span><br><span class="line"><span class="attribute">username</span>=luoji</span><br><span class="line"><span class="attribute">password</span>=password</span><br><span class="line"><span class="attribute">repo</span>=k8s.gcr.io</span><br><span class="line"><span class="attribute">store_repo</span>=r.xiaozhou.net</span><br><span class="line"><span class="attribute">store_repo_path</span>=r.xiaozhou.net/kubernetes</span><br><span class="line"></span><br><span class="line">images=(<span class="variable">$&#123;repo&#125;</span>/kube-apiserver-<span class="variable">$&#123;ARCH&#125;</span>:<span class="variable">$&#123;mversion&#125;</span> \</span><br><span class="line">	<span class="variable">$&#123;repo&#125;</span>/kube-controller-manager-<span class="variable">$&#123;ARCH&#125;</span>:<span class="variable">$&#123;mversion&#125;</span> \</span><br><span class="line">	<span class="variable">$&#123;repo&#125;</span>/kube-scheduler-<span class="variable">$&#123;ARCH&#125;</span>:<span class="variable">$&#123;mversion&#125;</span> \</span><br><span class="line">	<span class="variable">$&#123;repo&#125;</span>/kube-proxy-<span class="variable">$&#123;ARCH&#125;</span>:<span class="variable">$&#123;mversion&#125;</span> \</span><br><span class="line">	<span class="variable">$&#123;repo&#125;</span>/etcd-<span class="variable">$&#123;ARCH&#125;</span>:3.1.12 \</span><br><span class="line">	<span class="variable">$&#123;repo&#125;</span>/pause-<span class="variable">$&#123;ARCH&#125;</span>:3.1 \</span><br><span class="line">	<span class="variable">$&#123;repo&#125;</span>/k8s-dns-sidecar-<span class="variable">$&#123;ARCH&#125;</span>:<span class="variable">$&#123;nversion&#125;</span> \</span><br><span class="line">	<span class="variable">$&#123;repo&#125;</span>/k8s-dns-kube-dns-<span class="variable">$&#123;ARCH&#125;</span>:<span class="variable">$&#123;nversion&#125;</span> \</span><br><span class="line">	<span class="variable">$&#123;repo&#125;</span>/k8s-dns-dnsmasq-nanny-<span class="variable">$&#123;ARCH&#125;</span>:<span class="variable">$&#123;nversion&#125;</span> \</span><br><span class="line">	<span class="variable">$&#123;repo&#125;</span>/kubernetes-dashboard-<span class="variable">$&#123;ARCH&#125;</span>:v1.8.3 \</span><br><span class="line">    quay.io/coreos/flannel:v0.10.0-amd64 \</span><br><span class="line">	)</span><br><span class="line"></span><br><span class="line">docker login -u <span class="variable">$username</span> -p <span class="variable">$password</span> <span class="variable">$store_repo</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> url <span class="keyword">in</span> <span class="variable">$&#123;images[@]&#125;</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="attribute">sub</span>=<span class="variable">$&#123;url%/*&#125;</span></span><br><span class="line">    <span class="attribute">idx</span>=<span class="variable">$&#123;#sub&#125;</span></span><br><span class="line">    <span class="attribute">image</span>=<span class="variable">$&#123;url:$idx+1&#125;</span></span><br><span class="line">    echo -e <span class="string">&quot;download -&gt; <span class="variable">$store_repo_path</span>/<span class="variable">$image</span> -&gt; <span class="variable">$url</span>&quot;</span></span><br><span class="line">	docker pull <span class="variable">$store_repo_path</span>/<span class="variable">$image</span></span><br><span class="line">	docker tag <span class="variable">$store_repo_path</span>/<span class="variable">$image</span> <span class="variable">$url</span></span><br><span class="line">	docker rmi <span class="variable">$store_repo_path</span>/<span class="variable">$image</span></span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">unset ARCH mversion nversion images username password repo store_repo store_repo_path</span><br></pre></td></tr></table></figure>
<p>上传脚本可以在这里找到：<a href="https://github.com/gunsluo/k8s-example/tree/master/version">https://github.com/gunsluo/k8s-example/tree/master/version</a></p>
<h3 id="初始化主节点"><a href="#初始化主节点" class="headerlink" title="初始化主节点"></a>初始化主节点</h3><p>$ kubeadm init –kubernetes-version v1.10.4 –service-cidr 10.96.0.0/16 –pod-network-cidr 10.244.0.0/16 –apiserver-advertise-address 10.0.100.2<br>$ kubeadm init –config kubeadm.yaml –service-cidr 10.96.0.0/16 –pod-network-cidr 10.244.0.0/16<br>$ cat kubeadm.yaml<br>apiVersion: kubeadm.k8s.io/v1alpha1<br>kind: MasterConfiguration<br>kubernetesVersion: v1.10.4<br>api:<br>  advertiseAddress: ‘10.0.100.2’<br>etcd:<br>  extraArgs:<br>    ‘listen-peer-urls’: ‘<a href="http://127.0.0.1:2380&#39;">http://127.0.0.1:2380&#39;</a></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> mkdir <span class="literal">-p</span> <span class="variable">$HOME</span>/.kube</span><br><span class="line"><span class="variable">$</span> <span class="built_in">cp</span> <span class="literal">-i</span> /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line"><span class="variable">$</span> chown <span class="variable">$</span>(id <span class="literal">-u</span>):<span class="variable">$</span>(id <span class="literal">-g</span>) <span class="variable">$HOME</span>/.kube/config</span><br></pre></td></tr></table></figure>
<h3 id="主节点初始化网络"><a href="#主节点初始化网络" class="headerlink" title="主节点初始化网络"></a>主节点初始化网络</h3><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">$ curl -O https:<span class="regexp">//</span>raw.githubusercontent.com<span class="regexp">/coreos/</span>flannel<span class="regexp">/v0.10.0/</span>Documentation/kube-flannel.yml</span><br></pre></td></tr></table></figure>
<p>flanneld启动参数加上–iface=<iface-name></p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="keyword">command</span>:</span><br><span class="line">- <span class="string">/opt/bin/flanneld</span></span><br><span class="line">args:</span><br><span class="line">- <span class="params">--ip-masq</span></span><br><span class="line">- <span class="params">--kube-subnet-mgr</span></span><br><span class="line">- <span class="params">--iface=eth1</span></span><br></pre></td></tr></table></figure>
<figure class="highlight gams"><table><tr><td class="code"><pre><span class="line"><span class="symbol">$</span> kubectl apply -f kube-flannel.yml</span><br><span class="line"></span><br><span class="line"><span class="symbol">$</span> kubectl get nodes</span><br><span class="line"><span class="symbol">$</span> kubectl get pods --<span class="keyword">all</span>-namespaces</span><br></pre></td></tr></table></figure>
<h3 id="加入工作节点"><a href="#加入工作节点" class="headerlink" title="加入工作节点"></a>加入工作节点</h3><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">$ kubeadm <span class="keyword">join</span> --token <span class="symbol">&lt;token&gt;</span> <span class="symbol">&lt;master-ip&gt;</span>:<span class="symbol">&lt;master-port&gt;</span> --discovery-token-<span class="keyword">ca</span>-cert-hash <span class="built_in">sha256</span>:<span class="symbol">&lt;hash&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="安装Dashboard"><a href="#安装Dashboard" class="headerlink" title="安装Dashboard"></a>安装Dashboard</h3><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">$ curl -O https:<span class="regexp">//</span>raw.githubusercontent.com<span class="regexp">/kubernetes/</span>dashboard<span class="regexp">/master/</span>src<span class="regexp">/deploy/</span>recommended/kubernetes-dashboard.yaml</span><br><span class="line">$ kubectl create -f kubernetes-dashboard.yaml</span><br></pre></td></tr></table></figure>
<p>$ kubectl apply -f kubernetes-dashboard-admin.yaml</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="attribute">apiVersion</span>: rbac.authorization.k8s.io/v1beta1</span><br><span class="line"><span class="attribute">kind</span>: ClusterRoleBinding</span><br><span class="line"><span class="attribute">metadata</span>:</span><br><span class="line">  <span class="attribute">name</span>: kubernetes-dashboard</span><br><span class="line">  <span class="attribute">labels</span>:</span><br><span class="line">    <span class="attribute">k8s-app</span>: kubernetes-dashboard</span><br><span class="line"><span class="attribute">roleRef</span>:</span><br><span class="line">  <span class="attribute">apiGroup</span>: rbac.authorization.k8s.io</span><br><span class="line">  <span class="attribute">kind</span>: ClusterRole</span><br><span class="line">  <span class="attribute">name</span>: cluster-admin</span><br><span class="line"><span class="attribute">subjects</span>:</span><br><span class="line">- <span class="attribute">kind</span>: ServiceAccount</span><br><span class="line">  <span class="attribute">name</span>: kubernetes-dashboard</span><br><span class="line">  <span class="attribute">namespace</span>: kube-system</span><br></pre></td></tr></table></figure>
<p>配置代理</p>
<p>将Master节点的/etc/kubernetes/admin.conf拷贝到本机的$HOME/.kube目录下，然后运行<code>kubectl proxy</code>。最后在浏览器中输入：<a href="http://localhost:8001/api/v1/namespaces/kube-system/services/https:kubernetes-dashboard:/proxy/">http://localhost:8001/api/v1/namespaces/kube-system/services/https:kubernetes-dashboard:/proxy/</a> 现在可以登录dashboard</p>
<p>配置远程访问dashboard，上面方法需要在本机启动代理。我们可以直接使用IP进行访问，这需要修改kubernetes-dashboard-admin.yaml配置。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">443</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">8443</span></span><br><span class="line">      <span class="attr">nodePort:</span> <span class="number">31000</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">kubernetes-dashboard</span></span><br></pre></td></tr></table></figure>
<p>指定NodePort类型和对外提供端口31000。 使用命令<code>kubectl replace -f kubernetes-dashboard.yaml --force</code>重启服务。浏览器中输入: <a href="https://ip:31000/">https://ip:31000/</a> 即可访问。</p>
]]></content>
      <categories>
        <category>k8s</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
        <tag>k8s</tag>
        <tag>centos</tag>
        <tag>kubeadm</tag>
      </tags>
  </entry>
  <entry>
    <title>部署数据库Portgres到Kubernetes</title>
    <url>/k8s/k8s-install-portgres-20180802.html</url>
    <content><![CDATA[<p>之前我们已成功安装了kubernetes，现在可以部署我们的应用服务。我们在安装ingres前先部署Portgres数据库，数据库被要求不能被外网访问并且大多数应用服务都会依赖数据库。这里需要注意的一点是数据库的数据不能丢失，所有我们需要使用持久化卷(<a href="https://kubernetes.io/docs/concepts/storage/persistent-volumes/">persistent volumes</a>)。 </p>
<a id="more"></a>

<h3 id="创建Namespace"><a href="#创建Namespace" class="headerlink" title="创建Namespace"></a>创建Namespace</h3><p>编写00-namespace.yaml</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">apiVersion:</span> v1</span><br><span class="line"><span class="symbol">kind:</span> Namespace</span><br><span class="line"><span class="symbol">metadata:</span></span><br><span class="line"><span class="symbol">  name:</span> db</span><br><span class="line"><span class="symbol">  labels:</span></span><br><span class="line"><span class="symbol">    name:</span> db</span><br></pre></td></tr></table></figure>
<p>运行命令创建 <code>kubectl create -f 00-namespace.yaml</code></p>
<h3 id="创建PV-PVC"><a href="#创建PV-PVC" class="headerlink" title="创建PV/PVC"></a>创建PV/PVC</h3><p>编写01-postgres-pv.yaml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolume</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">db-postgres-pv</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">db</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">capacity:</span></span><br><span class="line">    <span class="attr">storage:</span> <span class="string">5Gi</span></span><br><span class="line">  <span class="comment"># volumeMode field requires BlockVolume Alpha feature gate to be enabled.</span></span><br><span class="line">  <span class="attr">volumeMode:</span> <span class="string">Filesystem</span></span><br><span class="line">  <span class="attr">accessModes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">ReadWriteOnce</span></span><br><span class="line">  <span class="attr">persistentVolumeReclaimPolicy:</span> <span class="string">Delete</span></span><br><span class="line">  <span class="attr">storageClassName:</span> <span class="string">local-storage</span></span><br><span class="line">  <span class="attr">local:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/data</span></span><br><span class="line">  <span class="attr">nodeAffinity:</span></span><br><span class="line">    <span class="attr">required:</span></span><br><span class="line">      <span class="attr">nodeSelectorTerms:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">matchExpressions:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">kubernetes.io/hostname</span></span><br><span class="line">          <span class="attr">operator:</span> <span class="string">In</span></span><br><span class="line">          <span class="attr">values:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">node01</span></span><br></pre></td></tr></table></figure>
<p>kubernetes支持多种PV，由于我本机没有额外的存储服务(nfs service/cefs …)，所以我选择使用local方式，也就是<code>storageClassName: local-storage</code>。这种方式需要指定节点和挂载目录，并需要提前将目录准备好。如上例子中被指定到node01接点的/data目录。</p>
<p>运行命令创建 <code>kubectl create -f 01-postgres-pv.yaml</code></p>
<p>创建后可使用<code>kubectl get pv -n db</code>查看</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"># kubectl <span class="keyword">get</span> pv -n db</span><br><span class="line"><span class="type">NAME</span>               CAPACITY   <span class="keyword">ACCESS</span> MODES   RECLAIM <span class="keyword">POLICY</span>   STATUS    CLAIM                               STORAGECLASS    REASON    AGE</span><br><span class="line">db-postgres-pv     <span class="number">5</span>Gi        RWO            <span class="keyword">Delete</span>           Bound                                         <span class="keyword">local</span>-<span class="keyword">storage</span>             <span class="number">1</span>d</span><br></pre></td></tr></table></figure>

<p>编写02-postgres-pvc.yaml</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">apiVersion:</span> v1</span><br><span class="line"><span class="symbol">kind:</span> PersistentVolumeClaim</span><br><span class="line"><span class="symbol">metadata:</span></span><br><span class="line"><span class="symbol">  name:</span> db-postgres-pvc-postgres<span class="number">-0</span></span><br><span class="line"><span class="symbol">  namespace:</span> db</span><br><span class="line"><span class="symbol">spec:</span></span><br><span class="line"><span class="symbol">  accessModes:</span></span><br><span class="line">    - ReadWriteOnce</span><br><span class="line"><span class="symbol">  volumeMode:</span> Filesystem</span><br><span class="line"><span class="symbol">  resources:</span></span><br><span class="line"><span class="symbol">    requests:</span></span><br><span class="line"><span class="symbol">      storage:</span> <span class="number">5</span>Gi</span><br><span class="line"><span class="symbol">  storageClassName:</span> local-storage</span><br></pre></td></tr></table></figure>
<p>注意：pvc的命名是有一定规则的，否则就无法将PV与PVC关系起来，关联成功后PV的CLAIM值是对应的namespace/PVC名称。</p>
<p>运行命令创建 <code>kubectl create -f 02-postgres-pvc.yaml</code></p>
<p>创建后可使用<code>kubectl get pvc -n db</code>查看</p>
<figure class="highlight excel"><table><tr><td class="code"><pre><span class="line"># kubectl get <span class="built_in">pv</span> -<span class="built_in">n</span> <span class="built_in">db</span></span><br><span class="line">NAME               CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS    CLAIM                               STORAGECLASS    REASON    AGE</span><br><span class="line"><span class="built_in">db</span>-postgres-<span class="built_in">pv</span>     <span class="number">5</span>Gi        RWO            Delete           Bound     <span class="built_in">db</span>/<span class="built_in">db</span>-postgres-pvc-postgres-<span class="number">0</span>       local-storage             <span class="number">1</span>d</span><br><span class="line"></span><br><span class="line"># kubectl get pvc -<span class="built_in">n</span> <span class="built_in">db</span></span><br><span class="line">NAME                         STATUS    VOLUME           CAPACITY   ACCESS MODES   STORAGECLASS    AGE</span><br><span class="line"><span class="built_in">db</span>-postgres-pvc-postgres-<span class="number">0</span>   Bound     <span class="built_in">db</span>-postgres-<span class="built_in">pv</span>   <span class="number">5</span>Gi        RWO            local-storage   <span class="number">1</span>d</span><br></pre></td></tr></table></figure>
<h3 id="创建Portgres服务"><a href="#创建Portgres服务" class="headerlink" title="创建Portgres服务"></a>创建Portgres服务</h3><p>编写03-postgres-statefulset.yaml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">postgres</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">db</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">svc:</span> <span class="string">postgres</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">5432</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="number">5432</span></span><br><span class="line">    <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">postgres</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">svc:</span> <span class="string">postgres</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">StatefulSet</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">postgres</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">db</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">svc:</span> <span class="string">postgres</span> <span class="comment"># has to match .spec.template.metadata.labels</span></span><br><span class="line">  <span class="attr">serviceName:</span> <span class="string">&quot;postgres&quot;</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span> <span class="comment"># by default is 1</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">svc:</span> <span class="string">postgres</span> <span class="comment"># has to match .spec.selector.matchLabels</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">terminationGracePeriodSeconds:</span> <span class="number">10</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">postgres</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">postgres:10.3-alpine</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">POSTGRES_USER</span></span><br><span class="line">          <span class="attr">value:</span> <span class="string">&quot;postgres&quot;</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">POSTGRES_PASSWORD</span></span><br><span class="line">          <span class="attr">value:</span> <span class="string">&quot;password&quot;</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">PGDATA</span></span><br><span class="line">          <span class="attr">value:</span> <span class="string">&quot;/var/lib/postgresql/data&quot;</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">5432</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">postgres</span></span><br><span class="line">          <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">db-postgres-pvc</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/var/lib/postgresql/data</span></span><br><span class="line">  <span class="attr">volumeClaimTemplates:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">db-postgres-pvc</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">accessModes:</span> [ <span class="string">&quot;ReadWriteOnce&quot;</span> ]</span><br><span class="line">      <span class="attr">storageClassName:</span> <span class="string">&quot;local-storage&quot;</span></span><br><span class="line">      <span class="attr">resources:</span></span><br><span class="line">        <span class="attr">requests:</span></span><br><span class="line">          <span class="attr">storage:</span> <span class="string">5Gi</span></span><br></pre></td></tr></table></figure>
<p>创建了集群内部访问的Service, 使用StatefulSet创建带状态的服务类型，服务使用了本地PV，Portgres服务只会在node01节点运行。参数replicas: 1指定副本数，这里设置1就好，如果想达到多副本，使用数据库本身的集群方式搭建。 </p>
<p>运行命令创建 <code>kubectl create -f 03-postgres-statefulset.yaml</code></p>
<p>OK, 我们登陆<a href="http://127.0.0.1:8001/api/v1/namespaces/kube-system/services/https:kubernetes-dashboard:/proxy/#!/overview?namespace=db">UI界面</a>查看服务运行状况。</p>
<h3 id="访问Portgres"><a href="#访问Portgres" class="headerlink" title="访问Portgres"></a>访问Portgres</h3><p>Portgres的Service类型只能在集群内部访问，访问方式：postgres.db:5432 (service.namespace:port)。如果想外部访问你可以修改service类型或使用Ingress实现，但这里我们不想外部能访问到数据库。</p>
<p>不过这里可以使用proxy临时访问到集群内部服务：<code>kubectl port-forward postgres-0 -n db 5434:5432</code></p>
]]></content>
      <categories>
        <category>k8s</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
        <tag>k8s</tag>
        <tag>centos</tag>
        <tag>portgres</tag>
        <tag>db</tag>
      </tags>
  </entry>
  <entry>
    <title>Html中支持数学公式，MathJax</title>
    <url>/%E5%B7%A5%E5%85%B7/mathjax-intro-20170502.html</url>
    <content><![CDATA[<p>MathJax允许你在你的网页中包含公式，无论是使用LaTeX、MathML或者AsciiMath符号，这些公式都会被javascript处理为HTML、SVG或者MathML符号。</p>
<p>这里有三种方法获取MathJax：最简单的方法就是使用分布式网络服务中的MathJax的副本，它位于 cdn.mathjax.org ,但是你也可以下载并安装一个MathJax的副本到你的服务器,或者使用在你本地硬盘的副本（这样是不需要使用网络）。这三种方法接下来的内容中都有详细的描述。这个页面描述了最简单快捷的设置MathJax并在你的页面运行的方法，但是你也许需要阅读更多细节以帮助你为你的网页定制一些设置。</p>
<a id="more"></a>

<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>话不多说，先看下用MathJax编写的公式效果。</p>
<script type="text/x-mathjax-config">
MathJax.Hub.Config({
  tex2jax: {inlineMath: [['$','$'], ['\\(','\\)']]}
});
</script>
<script type="text/javascript" async
  src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-MML-AM_CHTML">
</script>

<p>When $a \ne 0$, there are two solutions to \\(ax^2 + bx + c = 0\\) and they are $$x = {-b \pm \sqrt{b^2-4ac} \over 2a}.$$</p>

<p>接下来看下如下编写Mahtjax。</p>
<h3 id="编写格式"><a href="#编写格式" class="headerlink" title="编写格式"></a>编写格式</h3><p>MathJax有三种编写格式，如下：</p>
<ul>
<li>TeX和LaTeX格式</li>
<li>MathML格式</li>
<li>AsciiMath格式</li>
</ul>
<h3 id="TeX和LaTeX"><a href="#TeX和LaTeX" class="headerlink" title="TeX和LaTeX"></a>TeX和LaTeX</h3><p>编写Tex和LaTex时，需要将下面代码引入html的head或body中。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span></span><br><span class="line">  src=<span class="string">&quot;http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML&quot;</span>&gt;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>配置分隔符</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/x-mathjax-config&quot;</span>&gt;</span><br><span class="line">MathJax.Hub.Config(&#123;</span><br><span class="line">  tex2jax: &#123;<span class="attr">inlineMath</span>: [[<span class="string">&#x27;$&#x27;</span>,<span class="string">&#x27;$&#x27;</span>], [<span class="string">&#x27;\\(&#x27;</span>,<span class="string">&#x27;\\)&#x27;</span>]]&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>默认的公式分隔符是 <code>$$...$$</code> 和 <code>\[...\]</code> ，还有 <code>\(...\)</code> 常用于段落中的公式。请特别注意， <code>\(...\)</code> 分隔符 不是 默认使用的。美元符号$常常在其他情况下使用，这会导致本文被错误的当做公式解析了。</p>
<p>编写Tex和LaTex公式</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">When $a \ne 0$, there are two solutions to \(ax^2 + bx + c = 0\) and they are</span><br><span class="line">$$x = &#123;-b \pm \sqrt&#123;b^2-4ac&#125; \over 2a&#125;.$$</span><br></pre></td></tr></table></figure>
<h3 id="MathML"><a href="#MathML" class="headerlink" title="MathML"></a>MathML</h3><p>同样需要将下面代码引入html的head或body中。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span></span><br><span class="line">  src=<span class="string">&quot;http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML&quot;</span>&gt;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>编写MathML公式(html)</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">When</span><br><span class="line"><span class="tag">&lt;<span class="name">math</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/1998/Math/MathML&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mi</span>&gt;</span>a<span class="tag">&lt;/<span class="name">mi</span>&gt;</span><span class="tag">&lt;<span class="name">mo</span>&gt;</span><span class="symbol">&amp;#x2260;</span><span class="tag">&lt;/<span class="name">mo</span>&gt;</span><span class="tag">&lt;<span class="name">mn</span>&gt;</span>0<span class="tag">&lt;/<span class="name">mn</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">math</span>&gt;</span>,</span><br><span class="line">there are two solutions to</span><br><span class="line"><span class="tag">&lt;<span class="name">math</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/1998/Math/MathML&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mi</span>&gt;</span>a<span class="tag">&lt;/<span class="name">mi</span>&gt;</span><span class="tag">&lt;<span class="name">msup</span>&gt;</span><span class="tag">&lt;<span class="name">mi</span>&gt;</span>x<span class="tag">&lt;/<span class="name">mi</span>&gt;</span><span class="tag">&lt;<span class="name">mn</span>&gt;</span>2<span class="tag">&lt;/<span class="name">mn</span>&gt;</span><span class="tag">&lt;/<span class="name">msup</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mo</span>&gt;</span>+<span class="tag">&lt;/<span class="name">mo</span>&gt;</span> <span class="tag">&lt;<span class="name">mi</span>&gt;</span>b<span class="tag">&lt;/<span class="name">mi</span>&gt;</span><span class="tag">&lt;<span class="name">mi</span>&gt;</span>x<span class="tag">&lt;/<span class="name">mi</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mo</span>&gt;</span>+<span class="tag">&lt;/<span class="name">mo</span>&gt;</span> <span class="tag">&lt;<span class="name">mi</span>&gt;</span>c<span class="tag">&lt;/<span class="name">mi</span>&gt;</span> <span class="tag">&lt;<span class="name">mo</span>&gt;</span>=<span class="tag">&lt;/<span class="name">mo</span>&gt;</span> <span class="tag">&lt;<span class="name">mn</span>&gt;</span>0<span class="tag">&lt;/<span class="name">mn</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">math</span>&gt;</span></span><br><span class="line">and they are</span><br><span class="line"><span class="tag">&lt;<span class="name">math</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/1998/Math/MathML&quot;</span> <span class="attr">display</span>=<span class="string">&quot;block&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mi</span>&gt;</span>x<span class="tag">&lt;/<span class="name">mi</span>&gt;</span> <span class="tag">&lt;<span class="name">mo</span>&gt;</span>=<span class="tag">&lt;/<span class="name">mo</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mrow</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mfrac</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">mrow</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mo</span>&gt;</span><span class="symbol">&amp;#x2212;</span><span class="tag">&lt;/<span class="name">mo</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mi</span>&gt;</span>b<span class="tag">&lt;/<span class="name">mi</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mo</span>&gt;</span><span class="symbol">&amp;#x00B1;</span><span class="tag">&lt;/<span class="name">mo</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">msqrt</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">msup</span>&gt;</span><span class="tag">&lt;<span class="name">mi</span>&gt;</span>b<span class="tag">&lt;/<span class="name">mi</span>&gt;</span><span class="tag">&lt;<span class="name">mn</span>&gt;</span>2<span class="tag">&lt;/<span class="name">mn</span>&gt;</span><span class="tag">&lt;/<span class="name">msup</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">mo</span>&gt;</span><span class="symbol">&amp;#x2212;</span><span class="tag">&lt;/<span class="name">mo</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">mn</span>&gt;</span>4<span class="tag">&lt;/<span class="name">mn</span>&gt;</span><span class="tag">&lt;<span class="name">mi</span>&gt;</span>a<span class="tag">&lt;/<span class="name">mi</span>&gt;</span><span class="tag">&lt;<span class="name">mi</span>&gt;</span>c<span class="tag">&lt;/<span class="name">mi</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">msqrt</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">mrow</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">mrow</span>&gt;</span> <span class="tag">&lt;<span class="name">mn</span>&gt;</span>2<span class="tag">&lt;/<span class="name">mn</span>&gt;</span><span class="tag">&lt;<span class="name">mi</span>&gt;</span>a<span class="tag">&lt;/<span class="name">mi</span>&gt;</span> <span class="tag">&lt;/<span class="name">mrow</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mfrac</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mrow</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mtext</span>&gt;</span>.<span class="tag">&lt;/<span class="name">mtext</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">math</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="AsciiMath"><a href="#AsciiMath" class="headerlink" title="AsciiMath"></a>AsciiMath</h3><p>需要将下面代码引入html的head或body中（与上面的引入不相同）。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span></span><br><span class="line">  src=<span class="string">&quot;http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=AM_HTMLorMML-full&quot;</span>&gt;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>编写MathML公式</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>When `a != 0`, there are two solutions to `ax^2 + bx + c = 0` and</span><br><span class="line">they are<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;text-align:center&quot;</span>&gt;</span></span><br><span class="line">  `x = (-b +- sqrt(b^2-4ac))/(2a) .`</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>AsciiMath相对要简洁些，是MathJax2.0提出的。选择哪种方式根据实际情况而定。更多的编写方法从下面提供MathJax文档查找：</p>
<ul>
<li><a href="http://docs.mathjax.org/en/latest/start.html">MathJax英文文档</a></li>
<li><a href="https://mathjax-chinese-doc.readthedocs.io/en/latest/">MathJax中文文档</a></li>
<li>推荐一个网站 <a href="http://detexify.kirelabs.org/classify.html">Detexify</a>， 可以在上面画数学符号，然后它会帮你找到符合的 <code>Tex</code> 代码。</li>
</ul>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>mathjax</tag>
        <tag>html</tag>
        <tag>数学公式</tag>
      </tags>
  </entry>
  <entry>
    <title>(转) 什么是NFV?它与SDN有什么关系?</title>
    <url>/%E7%AC%94%E8%AE%B0/nfv-and-sdn-20160908.html</url>
    <content><![CDATA[<p>什么叫网络虚拟化？先上两张简单粗暴的图。</p>
<a id="more"></a>

<p><img src="http://7xnzbp.com2.z0.glb.qiniucdn.com/wp-content/uploads/2015/05/%E4%BB%80%E4%B9%88%E6%98%AFNFV%EF%BC%9F%E5%AE%83%E4%B8%8ESDN%E6%9C%89%E4%BB%80%E4%B9%88%E5%85%B3%E7%B3%BB%EF%BC%9F%E5%9B%BE1.png" alt="Alt text" title="图1"></p>
<p><img src="http://7xnzbp.com2.z0.glb.qiniucdn.com/wp-content/uploads/2015/05/%E4%BB%80%E4%B9%88%E6%98%AFNFV%EF%BC%9F%E5%AE%83%E4%B8%8ESDN%E6%9C%89%E4%BB%80%E4%B9%88%E5%85%B3%E7%B3%BB%EF%BC%9F%E5%9B%BE2.png" alt="Alt text" title="图2"></p>
<p>所有的通信应用无非就是两部分组成：计算和网络。这两者关系密不可分，但两者关系严重缺乏对称性，网络一直拖累着计算。</p>
<p>4G网络RAN将会不断进化，据说，未来的4G网络空口速率将是现在的10倍。随着智能硬件的爆发，大量的应用接入4G网络，人们的流量需求如同海啸般汹涌而至，我们似乎赶上了好时代。不过，传统的通信网络里，每一类服务对应基于专用集成电路的带有专用处理器的专用服务器。网络里的设备很多，但是，这些家伙就像霸道总裁的办公室，仅供总裁专用，不管他在与不在，位置都占在那里，谁也不敢冒然挪用。</p>
<p>这样下去，网络会严重拖计算的后腿。于是，有人想到了虚拟化。</p>
<p>或者，可以这么理解，服务器觉得老这样拖着网络跑不是办法，迟早会被累死，就开始向网络扔砖头了！</p>
<p><img src="http://7xnzbp.com2.z0.glb.qiniucdn.com/wp-content/uploads/2015/05/%E4%BB%80%E4%B9%88%E6%98%AFNFV%EF%BC%9F%E5%AE%83%E4%B8%8ESDN%E6%9C%89%E4%BB%80%E4%B9%88%E5%85%B3%E7%B3%BB%EF%BC%9F%E5%9B%BE3.jpg" alt="Alt text" title="图3"></p>
<p>专用的硬件对应专用的服务，这样的花费是昂贵的，为了节省成本，我们得想想物尽其用。</p>
<p>想想你有一栋超级大的空置的公寓，你想出租，但是每一位租客的需求是不一样的。这个时候，你想到了“虚拟化”。根据租客的需求，把这栋公寓虚拟化成不同的建筑风格。于是，你对租客1说，“我有两栋公寓要出租，你喜欢红色那一栋还是蓝色那一栋？”。然后你对租客2说，“我有三栋公寓要出租，大、中、小，你喜欢哪一栋？”。接着租客3。。。 继续忽悠。。。 然后，所有的租客都住进了你的虚拟公寓，你按住宿时间和使用空间来收租金。</p>
<p><img src="http://7xnzbp.com2.z0.glb.qiniucdn.com/wp-content/uploads/2015/05/%E4%BB%80%E4%B9%88%E6%98%AFNFV%EF%BC%9F%E5%AE%83%E4%B8%8ESDN%E6%9C%89%E4%BB%80%E4%B9%88%E5%85%B3%E7%B3%BB%EF%BC%9F%E5%9B%BE4.png" alt="Alt text" title="图4"></p>
<p>2012年10月，13家运营商发起在ETSI组织下正式成立网络功能虚拟化工作组，即ETSI ISG NFV，致力于实现网络虚拟化的需求定义和系统架构制定。</p>
<p>谈到虚拟化，首先得了解什么是虚拟化技术？最常用的虚拟化技术有操作系统中内存的虚拟化，实际运行时用户需要的内存空间可能远远大于物理机器的内存大小，利用内存的虚拟化技术，用户可以将一部分硬盘虚拟化为内存，而这对用户是透明的。又如，可以利用虚拟专用网技术（VPN）在公共网络中虚拟化一条安全，稳定的“隧道”，用户感觉像是使用私有网络一样。</p>
<p>NFV就是基于大型共享的OTS（Off-The-Shelf，成品）服务器，通过软件定义的方式，探索网络实体的虚拟化使用。在NFV中使用的虚拟机（Virtual Machines，VMs）技术是虚拟化技术的一种。</p>
<p>基于软件定义的虚拟机部署成本低，而且可以快速适应网络需求变化。虚拟机就像是将所有能想到的东西都放在一台物理服务器（physical server）上，有了云计算和虚拟化，那些冗余的服务器都可以部署在独立的物理服务器上，不但可以并行处理，满足网络峰值需求，还可以根据网络需求随时释放资源，方便部署，利于故障管理，快速升级，快速满足市场需求。</p>
<p>NFV技术颠覆了传统电信封闭专用平台的思想，同时引入灵活的弹性资源管理理念，因此，ETSI NFV提出了突破传统网元功能限制、全新通用的NFV架构下图所示。</p>
<p><img src="http://7xnzbp.com2.z0.glb.qiniucdn.com/wp-content/uploads/2015/05/%E4%BB%80%E4%B9%88%E6%98%AFNFV%EF%BC%9F%E5%AE%83%E4%B8%8ESDN%E6%9C%89%E4%BB%80%E4%B9%88%E5%85%B3%E7%B3%BB%EF%BC%9F%E5%9B%BE5.png" alt="Alt text" title="图5"></p>
<p>NFV技术主要由3个部分构成：VNF（虚拟网络层，Virtualized Network Function）、NFVI（网络功能虚拟化基础设施NFVI，NFV Infrastructure)和MANO（NFV管理与编排，Management and Orchestration)。</p>
<p>（1）虚拟网络层是共享同一物理OTS服务器的VNF集。对应的就是各个网元功能的软件实现，比如EPC网元、IMS网元等的逻辑实现。</p>
<p>（2）NFVI，你可以将它理解为基础设施层，从云计算的角度看，就是一个资源池。NFVI需要将物理计算/存储/交换资源通过虚拟化转换为虚拟的计算/存储/交换资源池。NFVI映射到物理基础设施就是多个地理上分散的数据中心，通过高速通信网连接起来。</p>
<p>（3）NFVMANO。基于不同的服务等级协议（Service Level Agreements ，SLAs），NFVMANO运营支撑层负责“公平”的分配物理资源，同时还负责冗余管理、错误管理和弹性调整等，相当于目前目前的OSS/BSS系统。</p>
<p>这样一来，现在的移动通信网络结构就变成了这样：</p>
<p><img src="http://7xnzbp.com2.z0.glb.qiniucdn.com/wp-content/uploads/2015/05/%E4%BB%80%E4%B9%88%E6%98%AFNFV%EF%BC%9F%E5%AE%83%E4%B8%8ESDN%E6%9C%89%E4%BB%80%E4%B9%88%E5%85%B3%E7%B3%BB%EF%BC%9F%E5%9B%BE6.png" alt="Alt text" title="图6"></p>
<p>上图顶部的VNF对应了网元功能的逻辑实现，比如，由多个VNF组成的VNF-FG（VNF Forwarding Graph）定义了LTE网络服务。</p>
<p>那么软件定义网络（SDN）和NFV又有什么关系呢？</p>
<p>NFV负责各种网元的虚拟化，而SDN负责网络本身的虚拟化（比如，网络节点和节点之间的相互连接）。我们先来看看一个典型的网络结构图。</p>
<p><img src="http://7xnzbp.com2.z0.glb.qiniucdn.com/wp-content/uploads/2015/05/%E4%BB%80%E4%B9%88%E6%98%AFNFV%EF%BC%9F%E5%AE%83%E4%B8%8ESDN%E6%9C%89%E4%BB%80%E4%B9%88%E5%85%B3%E7%B3%BB%EF%BC%9F%E5%9B%BE7.png" alt="Alt text" title="图7"></p>
<p>如上图，一个网络由网络节点和节点间的链路组成。每一个节点都有一个控制面和与其它节点交换的网络信息。在上图中，右边的H节点获知一个新的网络（10.2.3.x/24）存在，现在它需要将这一信息告诉给网络中的其它节点。然而，节点H只和节点F和G直接相连，节点H通过链路状态通告（Link State Advertisements ，LSAs）通知节点F和G，F和G再将信息传递给它们的邻近节点，最终该消息传达到整个网络。这样，网络内每个节点都会更新自己的路由表，以确保数据可以传送到网络10.2.3.x/24。</p>
<p>如果节点C和E之间的链路中断，尽管C和E知道C-E链路中断，但节点A并不知道，节点A会继续通过C-E链路向网络10.2.3.x/24传送数据包。由于节点的“近视”，导致数据堆积在该节点，这需要花一些时间来向整个网络传送网络状态更新信息和完成纠错。网络越大，这种情况就越容易发生。</p>
<p>我们再来看看节点G，它由控制面（control plane）和数据面（data plane）组成。为了适应快速更新，控制面基本上是基于软件的，这实际上意味着控制消息的处理时长比基于硬件的逻辑单元（比如，数据面）要慢5到10倍。一直以来，我们仅要求控制面能够灵活更新，但对时延要求并不是太高。相对于数据面来讲，时延要求较高，我们希望数据包能够传送得越快越好，所以它必须是基于硬件来实现的。尽管基于软件实现的控制面能满足目前的要求，但随着设备的大量接入，特别是物联网的应用，控制面的时延也需要进一步提升。</p>
<p>软件定义网络（SDN）负责分离控制面和数据面，将网络控制面整合于一体。这样，网络控制面对网络数据面就有一个宏观的全面的视野。路由协议交换、路由表生成等路由功能均在统一的控制面完成。实现控制平面与数据平面分离的协议叫OpenFlow，OpenFlow是SDN一个网络协议。如下图所示：</p>
<p><img src="http://7xnzbp.com2.z0.glb.qiniucdn.com/wp-content/uploads/2015/05/%E4%BB%80%E4%B9%88%E6%98%AFNFV%EF%BC%9F%E5%AE%83%E4%B8%8ESDN%E6%9C%89%E4%BB%80%E4%B9%88%E5%85%B3%E7%B3%BB%EF%BC%9F%E5%9B%BE8.png" alt="Alt text" title="图8"></p>
<p>从上图中，我们可以看到，首先需要通过OpenFlow将网络拓扑镜像到控制面，控制面初始化网络拓扑，初始化完成后，控制面会实时更新网络拓扑。</p>
<p>控制面完成初始化后，会向每个转发节点发送转发表，根据转发表用户数据在网络内传送。假设现在节点H获知新的网络 (10.2.3.x/24)。节点H将通过OpenFlow告知控制面，因为控制面统领全局，它可以快速的为每一个转发节点创建新的路由表，这样用户数据就可以传送到这个新网络。</p>
<p>转载自：<a href="http://my.oschina.net/tantexian/">tantexian博客</a></p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>网络</tag>
        <tag>虚拟化</tag>
      </tags>
  </entry>
  <entry>
    <title>使用minkube代替docker compose作为本地开发环境</title>
    <url>/k8s/minkube-instead-of-docker-compose-20200504.html</url>
    <content><![CDATA[<p>Minikub K3s MicroK8s都是轻量化的K8s。Minikube更着重在本地轻松运行Kubernetes的工具，MicroK8s则不需要VirtualBox 并具有Isito. K3s是开源的一个Kubernetes的裁剪版。 </p>
<a id="more"></a>

<h3 id="本地开发Docker-compose的问题"><a href="#本地开发Docker-compose的问题" class="headerlink" title="本地开发Docker compose的问题"></a>本地开发Docker compose的问题</h3><p>使用Docker Compose作为本地开发工具已经好几年，它管理着我每一个项目的依赖服务。但随着项目越来越多，依赖越来越错综复杂，每个项目有单独的docker-compose文件，开发一段时间后，对于管理多个docker compose文件也是个难题。我的解决方案是将公共服务使用一个独立的docker-compose来管理，再使用公用network。有时需要同时启动相同服务的不同版本，但端口是不能复用的。如果使用不同端口，修改依赖服务的配置也是个繁琐的工作。</p>
<p>使用minkube完美的解决了这个问题。</p>
<h3 id="安装minkube"><a href="#安装minkube" class="headerlink" title="安装minkube"></a>安装minkube</h3><p>1.要检查操作系统是否支持虚拟化技术，请运行下面的命令(我的是macOS)：</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line">$ sysctl -a | grep -E --color <span class="string">&#x27;machdep.cpu.features|VMX&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">machdep.cpu.features:</span> FPU VME DE PSE TSC MSR PAE MCE CX8 APIC SEP MTRR PGE MCA CMOV PAT PSE36 CLFSH <span class="built_in">DS</span> ACPI MMX FXSR SSE SSE2 <span class="built_in">SS</span> HTT TM PBE SSE3 <span class="keyword">PCLMULQDQ</span> DTES64 MON DSCPL VMX EST TM2 SSSE3 FMA CX16 TPR PDCM SSE4<span class="number">.1</span> SSE4<span class="number">.2</span> x2APIC <span class="keyword">MOVBE</span> <span class="keyword">POPCNT</span> AES PCID <span class="keyword">XSAVE</span> OSXSAVE SEGLIM64 TSCTMR AVX1<span class="number">.0</span> <span class="keyword">RDRAND</span> F16C</span><br></pre></td></tr></table></figure>
<p>显示VMX说明系统支持，其他操作系统查看官方文档。</p>
<ol start="2">
<li>安装 kubectl </li>
</ol>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">brew </span><span class="keyword">install </span>kubectl </span><br></pre></td></tr></table></figure>
<ol start="3">
<li>安装 Minikube</li>
</ol>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">brew </span><span class="keyword">install </span>minikube</span><br></pre></td></tr></table></figure>
<h3 id="配置minkube"><a href="#配置minkube" class="headerlink" title="配置minkube"></a>配置minkube</h3><p>minkube支持多种Dirver</p>
<ul>
<li>Docker - VM + Container (preferred)</li>
<li>Hyperkit - VM</li>
<li>VirtualBox - VM</li>
<li>Parallels - VM</li>
<li>VMware - VM</li>
</ul>
<p>我的配置</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">minikube<span class="built_in"> config </span><span class="builtin-name">set</span> driver docker</span><br><span class="line">minikube<span class="built_in"> config </span><span class="builtin-name">set</span> cpus 4</span><br><span class="line">minikube<span class="built_in"> config </span><span class="builtin-name">set</span> memory 8192</span><br></pre></td></tr></table></figure>
<p>使用minkube安装k8s</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">minikube</span> start --extra-config=apiserver.service-node-port-range=<span class="number">30000</span>-<span class="number">39999</span></span><br></pre></td></tr></table></figure>
<p>配置插件</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">minikube addons configure metallb</span><br><span class="line">minikube addons <span class="builtin-name">enable</span> metallb</span><br><span class="line">kubectl <span class="builtin-name">get</span> pods -n metallb-system</span><br><span class="line">kubectl describe configmap<span class="built_in"> config </span>-n metallb-system</span><br></pre></td></tr></table></figure>
<p>安装Istio</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">curl -sL https:<span class="regexp">//i</span>stio.io/downloadIstioctl | sh -</span><br><span class="line">export PATH=<span class="variable">$PATH</span>:<span class="variable">$HOME</span><span class="regexp">/.istioctl/</span>bin</span><br><span class="line">istioctl install --set profile=demo</span><br><span class="line">minikube addons enable istio</span><br></pre></td></tr></table></figure>
<p>检查minkube状态</p>
<figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">$ minikube status</span><br><span class="line">minikube</span><br><span class="line">type: Control Plane</span><br><span class="line">host: Running</span><br><span class="line">kubelet: Running</span><br><span class="line">apiserver: Running</span><br><span class="line">kubeconfig: Configured</span><br><span class="line"></span><br><span class="line">$ minikube addons list</span><br><span class="line">|<span class="string">-----------------------------</span>|<span class="string">----------</span>|<span class="string">--------------</span>|</span><br><span class="line">|<span class="string">         ADDON NAME          </span>|<span class="string"> PROFILE  </span>|<span class="string">    STATUS    </span>|</span><br><span class="line">|<span class="string">-----------------------------</span>|<span class="string">----------</span>|<span class="string">--------------</span>|</span><br><span class="line">|<span class="string"> ambassador                  </span>|<span class="string"> minikube </span>|<span class="string"> disabled     </span>|</span><br><span class="line">|<span class="string"> dashboard                   </span>|<span class="string"> minikube </span>|<span class="string"> disabled     </span>|</span><br><span class="line">|<span class="string"> default-storageclass        </span>|<span class="string"> minikube </span>|<span class="string"> enabled ✅   </span>|</span><br><span class="line">|<span class="string"> efk                         </span>|<span class="string"> minikube </span>|<span class="string"> disabled     </span>|</span><br><span class="line">|<span class="string"> freshpod                    </span>|<span class="string"> minikube </span>|<span class="string"> disabled     </span>|</span><br><span class="line">|<span class="string"> gcp-auth                    </span>|<span class="string"> minikube </span>|<span class="string"> disabled     </span>|</span><br><span class="line">|<span class="string"> gvisor                      </span>|<span class="string"> minikube </span>|<span class="string"> disabled     </span>|</span><br><span class="line">|<span class="string"> helm-tiller                 </span>|<span class="string"> minikube </span>|<span class="string"> disabled     </span>|</span><br><span class="line">|<span class="string"> ingress                     </span>|<span class="string"> minikube </span>|<span class="string"> disabled     </span>|</span><br><span class="line">|<span class="string"> ingress-dns                 </span>|<span class="string"> minikube </span>|<span class="string"> disabled     </span>|</span><br><span class="line">|<span class="string"> istio                       </span>|<span class="string"> minikube </span>|<span class="string"> enabled ✅   </span>|</span><br><span class="line">|<span class="string"> istio-provisioner           </span>|<span class="string"> minikube </span>|<span class="string"> disabled     </span>|</span><br><span class="line">|<span class="string"> kubevirt                    </span>|<span class="string"> minikube </span>|<span class="string"> disabled     </span>|</span><br><span class="line">|<span class="string"> logviewer                   </span>|<span class="string"> minikube </span>|<span class="string"> disabled     </span>|</span><br><span class="line">|<span class="string"> metallb                     </span>|<span class="string"> minikube </span>|<span class="string"> enabled ✅   </span>|</span><br><span class="line">|<span class="string"> metrics-server              </span>|<span class="string"> minikube </span>|<span class="string"> disabled     </span>|</span><br><span class="line">|<span class="string"> nvidia-driver-installer     </span>|<span class="string"> minikube </span>|<span class="string"> disabled     </span>|</span><br><span class="line">|<span class="string"> nvidia-gpu-device-plugin    </span>|<span class="string"> minikube </span>|<span class="string"> disabled     </span>|</span><br><span class="line">|<span class="string"> olm                         </span>|<span class="string"> minikube </span>|<span class="string"> disabled     </span>|</span><br><span class="line">|<span class="string"> pod-security-policy         </span>|<span class="string"> minikube </span>|<span class="string"> disabled     </span>|</span><br><span class="line">|<span class="string"> registry                    </span>|<span class="string"> minikube </span>|<span class="string"> disabled     </span>|</span><br><span class="line">|<span class="string"> registry-aliases            </span>|<span class="string"> minikube </span>|<span class="string"> disabled     </span>|</span><br><span class="line">|<span class="string"> registry-creds              </span>|<span class="string"> minikube </span>|<span class="string"> disabled     </span>|</span><br><span class="line">|<span class="string"> storage-provisioner         </span>|<span class="string"> minikube </span>|<span class="string"> enabled ✅   </span>|</span><br><span class="line">|<span class="string"> storage-provisioner-gluster </span>|<span class="string"> minikube </span>|<span class="string"> disabled     </span>|</span><br><span class="line">|<span class="string">-----------------------------</span>|<span class="string">----------</span>|<span class="string">--------------</span>|</span><br></pre></td></tr></table></figure>
<h3 id="部署服务"><a href="#部署服务" class="headerlink" title="部署服务"></a>部署服务</h3><p>以配置postgres数据库为例来演示，并使用yaml文件，你也可以选择自己喜欢的工具如helm3。</p>
<ol>
<li><p>创建namespace</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">apiVersion:</span> v1</span><br><span class="line"><span class="symbol">kind:</span> Namespace</span><br><span class="line"><span class="symbol">metadata:</span></span><br><span class="line"><span class="symbol">  name:</span> postgres</span><br><span class="line"><span class="symbol">  labels:</span></span><br><span class="line"><span class="symbol">    name:</span> postgres</span><br></pre></td></tr></table></figure>
<p>运行 <code>k apply -f 00-namespace.yaml</code></p>
</li>
<li><p>为数据库创建pv</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">apiVersion:</span> v1</span><br><span class="line"><span class="symbol">kind:</span> PersistentVolume</span><br><span class="line"><span class="symbol">metadata:</span></span><br><span class="line"><span class="symbol">  name:</span> postgres-pv</span><br><span class="line"><span class="symbol">  namespace:</span> postgres</span><br><span class="line"><span class="symbol">  labels:</span></span><br><span class="line"><span class="symbol">    type:</span> local</span><br><span class="line"><span class="symbol">spec:</span></span><br><span class="line"><span class="symbol">  storageClassName:</span> local-postgres-storage</span><br><span class="line"><span class="symbol">  capacity:</span></span><br><span class="line"><span class="symbol">    storage:</span> <span class="number">1</span>Gi</span><br><span class="line">  <span class="meta"># volumeMode field requires BlockVolume Alpha feature gate to be enabled.</span></span><br><span class="line"><span class="symbol">  volumeMode:</span> Filesystem</span><br><span class="line"><span class="symbol">  accessModes:</span></span><br><span class="line">  - ReadWriteOnce</span><br><span class="line"><span class="symbol">  persistentVolumeReclaimPolicy:</span> Delete</span><br><span class="line"><span class="symbol">  hostPath:</span></span><br><span class="line"><span class="symbol">    path:</span> <span class="meta-keyword">/data/</span>postgres</span><br></pre></td></tr></table></figure>
<p>运行 <code>k apply -f 02-pv.yaml</code></p>
</li>
</ol>
<ol start="3">
<li>为数据库创建pvc<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">apiVersion:</span> v1</span><br><span class="line"><span class="symbol">kind:</span> PersistentVolumeClaim</span><br><span class="line"><span class="symbol">metadata:</span></span><br><span class="line"><span class="symbol">  name:</span> postgres-pvc-postgres<span class="number">-0</span></span><br><span class="line"><span class="symbol">  namespace:</span> postgres</span><br><span class="line"><span class="symbol">spec:</span></span><br><span class="line"><span class="symbol">  accessModes:</span></span><br><span class="line">    - ReadWriteOnce</span><br><span class="line"><span class="symbol">  volumeMode:</span> Filesystem</span><br><span class="line"><span class="symbol">  resources:</span></span><br><span class="line"><span class="symbol">    requests:</span></span><br><span class="line"><span class="symbol">      storage:</span> <span class="number">1</span>Gi</span><br><span class="line"><span class="symbol">  storageClassName:</span> local-postgres-storage</span><br></pre></td></tr></table></figure>
运行 <code>k apply -f 03-pvc.yaml</code></li>
</ol>
<ol start="4">
<li><p>为数据库创建Pod</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="attribute">apiVersion</span>: apps/v1</span><br><span class="line"><span class="attribute">kind</span>: StatefulSet</span><br><span class="line"><span class="attribute">metadata</span>:</span><br><span class="line">  <span class="attribute">name</span>: postgres</span><br><span class="line">  <span class="attribute">namespace</span>: postgres</span><br><span class="line"><span class="attribute">spec</span>:</span><br><span class="line">  <span class="attribute">selector</span>:</span><br><span class="line">    <span class="attribute">matchLabels</span>:</span><br><span class="line">      <span class="attribute">app</span>: postgres # has to match .spec.template.metadata.labels</span><br><span class="line">  <span class="attribute">serviceName</span>: <span class="string">&quot;postgres&quot;</span></span><br><span class="line">  <span class="attribute">replicas</span>: <span class="number">1</span> # by default is <span class="number">1</span></span><br><span class="line">  <span class="attribute">template</span>:</span><br><span class="line">    <span class="attribute">metadata</span>:</span><br><span class="line">      <span class="attribute">labels</span>:</span><br><span class="line">        <span class="attribute">app</span>: postgres # has to match .spec.selector.matchLabels</span><br><span class="line">    <span class="attribute">spec</span>:</span><br><span class="line">      <span class="attribute">terminationGracePeriodSeconds</span>: <span class="number">10</span></span><br><span class="line">      <span class="attribute">containers</span>:</span><br><span class="line">      - <span class="attribute">name</span>: postgres</span><br><span class="line">        <span class="attribute">image</span>: <span class="attribute">postgres</span>:<span class="number">12.4</span>-alpine</span><br><span class="line">        <span class="attribute">env</span>:</span><br><span class="line">        - <span class="attribute">name</span>: POSTGRES_USER</span><br><span class="line">          <span class="attribute">value</span>: <span class="string">&quot;postgres&quot;</span></span><br><span class="line">        - <span class="attribute">name</span>: POSTGRES_PASSWORD</span><br><span class="line">          <span class="attribute">value</span>: <span class="string">&quot;password&quot;</span></span><br><span class="line">        - <span class="attribute">name</span>: PGDATA</span><br><span class="line">          <span class="attribute">value</span>: <span class="string">&quot;/var/lib/postgresql/data&quot;</span></span><br><span class="line">        <span class="attribute">ports</span>:</span><br><span class="line">        - <span class="attribute">containerPort</span>: <span class="number">5432</span></span><br><span class="line">          <span class="attribute">name</span>: tcp</span><br><span class="line">          <span class="attribute">protocol</span>: TCP</span><br><span class="line">        <span class="attribute">volumeMounts</span>:</span><br><span class="line">        - <span class="attribute">name</span>: postgres-pvc</span><br><span class="line">          <span class="attribute">mountPath</span>: /var/lib/postgresql/data</span><br><span class="line">  <span class="attribute">volumeClaimTemplates</span>:</span><br><span class="line">  - <span class="attribute">metadata</span>:</span><br><span class="line">      <span class="attribute">name</span>: postgres-pvc</span><br><span class="line">    <span class="attribute">spec</span>:</span><br><span class="line">      <span class="attribute">accessModes</span>: [ <span class="string">&quot;ReadWriteOnce&quot;</span> ]</span><br><span class="line">      <span class="attribute">storageClassName</span>: <span class="string">&quot;local-postgres-storage&quot;</span></span><br><span class="line">      <span class="attribute">resources</span>:</span><br><span class="line">        <span class="attribute">requests</span>:</span><br><span class="line">          <span class="attribute">storage</span>: <span class="number">1</span>Gi</span><br></pre></td></tr></table></figure>
<p>运行 <code>k apply -f 04-ss.yaml</code></p>
</li>
<li><p>为数据库创建Service</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">postgres</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">postgres</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">svc:</span> <span class="string">postgres</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">LoadBalancer</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">5432</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="number">5432</span></span><br><span class="line">    <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">tcp</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">postgres</span></span><br></pre></td></tr></table></figure>
<p>运行 <code>k apply -f 05-service.yaml</code><br>Note: 请注意Service的类型是LoadBalancer，不是nodeport。后面说明理由。</p>
</li>
<li><p>查看数据库运行状况</p>
<figure class="highlight fortran"><table><tr><td class="code"><pre><span class="line">$ k get pods -n postgres</span><br><span class="line"><span class="keyword">NAME</span>         READY   <span class="keyword">STATUS</span>    RESTARTS   AGE</span><br><span class="line">postgres-<span class="number">0</span>   <span class="number">1</span>/<span class="number">1</span>     Running   <span class="number">0</span>          <span class="number">11</span>d</span><br></pre></td></tr></table></figure>
<h3 id="访问服务"><a href="#访问服务" class="headerlink" title="访问服务"></a>访问服务</h3><p>熟悉K8s的都知道使用<code>port-forward</code> 可以将Pod端口映射到本地端口。</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">k</span> port-forward postgres-<span class="number">0</span> <span class="number">5432</span>:<span class="number">5432</span> -n postgres</span><br></pre></td></tr></table></figure>
<p>这种方式没有问题，但需要映射端口的服务过多，一一使用forward命令也非常麻烦。这里我推荐使用第二种方式</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">minikube tunnel</span></span><br></pre></td></tr></table></figure>
<p>这是minkube提供的隧道功能。它将LoadBalancer端口映射到本地端口。这就是创建Service是为什么使用LoadBalancer的原因。tunnel是我个人最喜欢的功能之一。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>k8s</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>工具</tag>
        <tag>k8s</tag>
        <tag>minkube</tag>
      </tags>
  </entry>
  <entry>
    <title>NoSQL数据库对比</title>
    <url>/nosql/nosql-compare-20171106.html</url>
    <content><![CDATA[<p>本文主要对主流NoSQL进行对比，从各个方面进行对比，意在不同场景下选择正确的 NoSql 数据库。本文主要对比HBase、Cassandra、MongoDB、LevelDB、DoltDB。</p>
<a id="more"></a>

<table>
<thead>
<tr>
<th align="center"></th>
<th align="center">集群</th>
<th align="center">数据一致性</th>
<th align="center">事务</th>
<th align="center">扩展能力</th>
</tr>
</thead>
<tbody><tr>
<td align="center">HBase</td>
<td align="center">支持</td>
<td align="center">强一致性</td>
<td align="center">不支持</td>
<td align="center">动态扩容</td>
</tr>
<tr>
<td align="center">Cassandra</td>
<td align="center">支持</td>
<td align="center">可调节</td>
<td align="center">轻量级</td>
<td align="center">虚拟节点,数据迁移</td>
</tr>
<tr>
<td align="center">LevelDB</td>
<td align="center">不支持</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">BoltDB</td>
<td align="center">不支持</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">MongoDB</td>
<td align="center">Replica Set，Master-Slave</td>
<td align="center">强一致性</td>
<td align="center">支持</td>
<td align="center">命名扩容</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="center"></th>
<th align="center">存储模型</th>
<th align="center">NoSQL类型</th>
<th align="center">语言</th>
<th align="center">描述</th>
<th align="center">公司</th>
</tr>
</thead>
<tbody><tr>
<td align="center">HBase</td>
<td align="center">HDFS</td>
<td align="center">column-oriented</td>
<td align="center">JAVA</td>
<td align="center">实时数据查询</td>
<td align="center">google</td>
</tr>
<tr>
<td align="center">Cassandra</td>
<td align="center">CommitLog Memtable SSTable</td>
<td align="center">column-oriented</td>
<td align="center">JAVA</td>
<td align="center">CQL支持</td>
<td align="center">facebook</td>
</tr>
<tr>
<td align="center">LevelDB</td>
<td align="center">Log Memtable SSTable</td>
<td align="center">key-value</td>
<td align="center">多写少读</td>
<td align="center">内嵌数据库</td>
<td align="center">开源</td>
</tr>
<tr>
<td align="center">BoltDB</td>
<td align="center">单文件</td>
<td align="center">key-value</td>
<td align="center">Golang</td>
<td align="center">内嵌数据库</td>
<td align="center">开源</td>
</tr>
<tr>
<td align="center">MongoDB</td>
<td align="center">文件</td>
<td align="center">document-oriented</td>
<td align="center">C/C++</td>
<td align="center">文档存储</td>
<td align="center">开源</td>
</tr>
</tbody></table>
<ul>
<li>HBase数据库在HRegionServer宕机恢复需要时间长。</li>
</ul>
]]></content>
      <categories>
        <category>nosql</category>
      </categories>
      <tags>
        <tag>cassandra</tag>
        <tag>nosql</tag>
        <tag>hbase</tag>
        <tag>leveldb</tag>
        <tag>boltdb</tag>
        <tag>mongodb</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang与Mongo数据库</title>
    <url>/Golang/mongo-golang-20181110.html</url>
    <content><![CDATA[<p>随着Mongo数据库的使用越来越多，在开发中选择Mongo也并不少见。这是Golang连接Mongo数据库的示例，介绍了开发中应如何写连接Mongo数据库，如何写单元测试，如何mock数据。</p>
<a id="more"></a>

<h3 id="驱动包"><a href="#驱动包" class="headerlink" title="驱动包"></a>驱动包</h3><p>Golang的Mongo驱动包有两个:</p>
<ul>
<li><a href="https://github.com/mongodb/mongo-go-driver">官方包</a></li>
<li><a href="https://github.com/globalsign/mgo">Mgo</a><br>本人正好都使用过这两个包，个人使用体验是官方包偏繁琐些，代码写出来偏mongo命令行风格，不支持ORM功能，所有代码量相对多些。相对而言Mgo支持ORM，写出的代码量少，可维护性好。对于性能方面没有去做过比较，就不做对比了。目前我使用mgo多些，主要考虑因素是编码效率。下面就以mgo为例来介绍</li>
</ul>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><ul>
<li>导入包<code>github.com/globalsign/mgo</code>和<code>github.com/globalsign/mgo/bson</code></li>
<li>连接Mongo <code>mgo.Dial(mongoURL)</code></li>
<li>指定数据库和Collection <code>session.DB(&quot;db name&quot;).C(&quot;collection&quot;)</code></li>
<li>插入数据 <code>c.Insert(&amp;db.Person&#123;&#125;</code></li>
<li>查找数据 <code>c.Find(bson.M&#123;&#125;).One()</code></li>
</ul>
<p><a href="https://github.com/gunsluo/go-example/blob/master/mgo/main.go">代码</a></p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;log&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="string">&quot;github.com/globalsign/mgo&quot;</span></span><br><span class="line">	<span class="string">&quot;github.com/globalsign/mgo/bson&quot;</span></span><br><span class="line">	<span class="string">&quot;github.com/gunsluo/go-example/mgo/db&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">	mongoURL = <span class="string">&quot;mongodb://root:password@127.0.0.1:27017&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">	session, <span class="keyword">err</span> := mgo.Dial(mongoURL)</span><br><span class="line">	<span class="keyword">if</span> <span class="keyword">err</span> != nil &#123;</span><br><span class="line">		panic(<span class="keyword">err</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	defer session.<span class="keyword">Close</span>()</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Optional. Switch the session to a monotonic behavior.</span></span><br><span class="line">	session.SetMode(mgo.Monotonic, true)</span><br><span class="line"></span><br><span class="line">	c := session.<span class="keyword">DB</span>(<span class="string">&quot;fm&quot;</span>).C(<span class="string">&quot;people&quot;</span>)</span><br><span class="line">	<span class="keyword">err</span> = c.Insert(&amp;<span class="keyword">db</span>.Person&#123;<span class="string">&quot;Ale&quot;</span>, <span class="string">&quot;+55 53 8116 9639&quot;</span>&#125;,</span><br><span class="line">		&amp;<span class="keyword">db</span>.Person&#123;<span class="string">&quot;Cla&quot;</span>, <span class="string">&quot;+55 53 8402 8510&quot;</span>&#125;)</span><br><span class="line">	<span class="keyword">if</span> <span class="keyword">err</span> != nil &#123;</span><br><span class="line">		<span class="keyword">log</span>.Fatal(<span class="keyword">err</span>)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	result := <span class="keyword">db</span>.Person&#123;&#125;</span><br><span class="line">	<span class="keyword">err</span> = c.Find(bson.<span class="keyword">M</span>&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;Ale&quot;</span>&#125;).<span class="keyword">One</span>(&amp;result)</span><br><span class="line">	<span class="keyword">if</span> <span class="keyword">err</span> != nil &#123;</span><br><span class="line">		<span class="keyword">log</span>.Fatal(<span class="keyword">err</span>)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	fmt.Println(<span class="string">&quot;Phone:&quot;</span>, result.Phone)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight elm"><table><tr><td class="code"><pre><span class="line"><span class="title">package</span> db</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="type">Person</span> struct &#123;</span><br><span class="line">	<span class="type">Name</span>  string</span><br><span class="line">	<span class="type">Phone</span> string</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Mock"><a href="#Mock" class="headerlink" title="Mock"></a>Mock</h3><p><a href="https://github.com/golang/mock">gomcok</a>是Golang中非常好的mock数据工具，它的原理是基于interface的实现。显然目前版本的mgo不是interface的实现，所以我们需要对mgo实现interface抽象。github上有percona/pmgo项目已经实现了该功能，但它不是最新版本的mgo实现且接口不全。我fork该项目修改了问题实现了<a href="https://github.com/gunsluo/pmgo">pmgo</a>;</p>
<h4 id="查询用户信息"><a href="#查询用户信息" class="headerlink" title="查询用户信息"></a>查询用户信息</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;log&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="string">&quot;github.com/globalsign/mgo/bson&quot;</span></span><br><span class="line">	<span class="string">&quot;github.com/percona/pmgo&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// User is  a user information</span></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">	ID   <span class="keyword">int</span>    <span class="string">`bson:&quot;id&quot;`</span></span><br><span class="line">	Name <span class="keyword">string</span> <span class="string">`bson:&quot;name&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	dialer := pmgo.NewDialer()</span><br><span class="line">	session, err := dialer.Dial(<span class="string">&quot;mongodb://root:password@localhost:27017&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">print</span>(err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> err := addUser(session, &amp;User&#123;ID: <span class="number">1</span>, Name: <span class="string">&quot;jerry&quot;</span>&#125;); err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Printf(<span class="string">&quot;error add the user to the db: %s&quot;</span>, err.Error())</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	user, err := getUser(session, <span class="number">1</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Printf(<span class="string">&quot;error reading the user from the db: %s&quot;</span>, err.Error())</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;User: %+v\n&quot;</span>, user)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">addUser</span><span class="params">(session pmgo.SessionManager, user *User)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> session.DB(<span class="string">&quot;test&quot;</span>).C(<span class="string">&quot;testc&quot;</span>).Insert(user)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getUser</span><span class="params">(session pmgo.SessionManager, id <span class="keyword">int</span>)</span> <span class="params">(*User, error)</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> user User</span><br><span class="line">	err := session.DB(<span class="string">&quot;test&quot;</span>).C(<span class="string">&quot;testc&quot;</span>).Find(bson.M&#123;<span class="string">&quot;id&quot;</span>: id&#125;).One(&amp;user)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> &amp;user, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="单元测试代码"><a href="#单元测试代码" class="headerlink" title="单元测试代码"></a>单元测试代码</h4><ul>
<li>使用gomock创建Controller </li>
<li>pmgomock模拟mock返回数据</li>
</ul>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	&quot;reflect&quot;</span><br><span class="line">	&quot;testing&quot;</span><br><span class="line"></span><br><span class="line">	&quot;github.com/globalsign/mgo/bson&quot;</span><br><span class="line">	&quot;github.com/golang/mock/gomock&quot;</span><br><span class="line">	&quot;github.com/gunsluo/pmgo/pmgomock&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func TestGetUser(t *testing.T) &#123;</span><br><span class="line">	ctrl := gomock.NewController(t)</span><br><span class="line">	defer ctrl.Finish()</span><br><span class="line"></span><br><span class="line">	<span class="keyword">user</span> := <span class="keyword">User</span>&#123;</span><br><span class="line">		ID:   <span class="number">1</span>,</span><br><span class="line">		<span class="type">Name</span>: &quot;Zapp Brannigan&quot;,</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	// Mock up a <span class="keyword">database</span>, <span class="keyword">session</span>, collection <span class="keyword">and</span> a query <span class="keyword">and</span> <span class="keyword">set</span></span><br><span class="line">	// expected/returned <span class="keyword">values</span> <span class="keyword">for</span> <span class="keyword">each</span> <span class="keyword">type</span></span><br><span class="line">	query := pmgomock.NewMockQueryManager(ctrl)</span><br><span class="line">	query.EXPECT().One(gomock.<span class="keyword">Any</span>()).SetArg(<span class="number">0</span>, <span class="keyword">user</span>).<span class="keyword">Return</span>(nil)</span><br><span class="line"></span><br><span class="line">	collection := pmgomock.NewMockCollectionManager(ctrl)</span><br><span class="line">	collection.EXPECT().Find(bson.M&#123;&quot;id&quot;: <span class="number">1</span>&#125;).<span class="keyword">Return</span>(query)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">database</span> := pmgomock.NewMockDatabaseManager(ctrl)</span><br><span class="line">	<span class="keyword">database</span>.EXPECT().C(&quot;testc&quot;).<span class="keyword">Return</span>(collection)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">session</span> := pmgomock.NewMockSessionManager(ctrl)</span><br><span class="line">	<span class="keyword">session</span>.EXPECT().DB(&quot;test&quot;).<span class="keyword">Return</span>(<span class="keyword">database</span>)</span><br><span class="line"></span><br><span class="line">	// <span class="keyword">Call</span> the <span class="keyword">function</span> we want <span class="keyword">to</span> test. It will use the mocked interfaces</span><br><span class="line">	readUser, err := getUser(<span class="keyword">session</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> err != nil &#123;</span><br><span class="line">		t.Errorf(&quot;getUser returned an error: %s\n&quot;, err.Error())</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> !reflect.DeepEqual(*readUser, <span class="keyword">user</span>) &#123;</span><br><span class="line">		t.Errorf(&quot;Users don&#x27;t match. Got %+v, want %+v\n&quot;, readUser, <span class="keyword">user</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="集成测试"><a href="#集成测试" class="headerlink" title="集成测试"></a>集成测试</h4><p>pmgo支持集成测试，测试开始后启动一个真实的mongo服务用于测试。需要指定mongo的服务路径: <code>Server = pmgo.NewDBServer(); Server.SetPath(tempDir)</code></p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	&quot;io/ioutil&quot;</span><br><span class="line">	&quot;os&quot;</span><br><span class="line">	&quot;reflect&quot;</span><br><span class="line">	&quot;testing&quot;</span><br><span class="line"></span><br><span class="line">	&quot;github.com/globalsign/mgo/bson&quot;</span><br><span class="line">	&quot;github.com/golang/mock/gomock&quot;</span><br><span class="line">	&quot;github.com/gunsluo/pmgo&quot;</span><br><span class="line">	&quot;github.com/gunsluo/pmgo/pmgomock&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func TestGetUser(t *testing.T) &#123;</span><br><span class="line">	ctrl := gomock.NewController(t)</span><br><span class="line">	defer ctrl.Finish()</span><br><span class="line"></span><br><span class="line">	<span class="keyword">user</span> := <span class="keyword">User</span>&#123;</span><br><span class="line">		ID:   <span class="number">1</span>,</span><br><span class="line">		<span class="type">Name</span>: &quot;Zapp Brannigan&quot;,</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	// Mock up a <span class="keyword">database</span>, <span class="keyword">session</span>, collection <span class="keyword">and</span> a query <span class="keyword">and</span> <span class="keyword">set</span></span><br><span class="line">	// expected/returned <span class="keyword">values</span> <span class="keyword">for</span> <span class="keyword">each</span> <span class="keyword">type</span></span><br><span class="line">	query := pmgomock.NewMockQueryManager(ctrl)</span><br><span class="line">	query.EXPECT().One(gomock.<span class="keyword">Any</span>()).SetArg(<span class="number">0</span>, <span class="keyword">user</span>).<span class="keyword">Return</span>(nil)</span><br><span class="line"></span><br><span class="line">	collection := pmgomock.NewMockCollectionManager(ctrl)</span><br><span class="line">	collection.EXPECT().Find(bson.M&#123;&quot;id&quot;: <span class="number">1</span>&#125;).<span class="keyword">Return</span>(query)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">database</span> := pmgomock.NewMockDatabaseManager(ctrl)</span><br><span class="line">	<span class="keyword">database</span>.EXPECT().C(&quot;testc&quot;).<span class="keyword">Return</span>(collection)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">session</span> := pmgomock.NewMockSessionManager(ctrl)</span><br><span class="line">	<span class="keyword">session</span>.EXPECT().DB(&quot;test&quot;).<span class="keyword">Return</span>(<span class="keyword">database</span>)</span><br><span class="line"></span><br><span class="line">	// <span class="keyword">Call</span> the <span class="keyword">function</span> we want <span class="keyword">to</span> test. It will use the mocked interfaces</span><br><span class="line">	readUser, err := getUser(<span class="keyword">session</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> err != nil &#123;</span><br><span class="line">		t.Errorf(&quot;getUser returned an error: %s\n&quot;, err.Error())</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> !reflect.DeepEqual(*readUser, <span class="keyword">user</span>) &#123;</span><br><span class="line">		t.Errorf(&quot;Users don&#x27;t match. Got %+v, want %+v\n&quot;, readUser, <span class="keyword">user</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var <span class="keyword">Server</span> pmgo.DBTestServer</span><br><span class="line"></span><br><span class="line">func TestIntegration(t *testing.T) &#123;</span><br><span class="line">	setup()</span><br><span class="line"></span><br><span class="line">	readUser, err := getUser(<span class="keyword">Server</span>.<span class="keyword">Session</span>(), <span class="number">1</span>)</span><br><span class="line">	<span class="keyword">if</span> err != nil &#123;</span><br><span class="line">		t.Errorf(&quot;getUser returned an error: %s\n&quot;, err.Error())</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> !reflect.DeepEqual(*readUser, mockUser()) &#123;</span><br><span class="line">		t.Errorf(&quot;Users don&#x27;t match. Got %+v, want %+v\n&quot;, readUser, mockUser())</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	tearDown()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func setup() &#123;</span><br><span class="line">	os.Setenv(&quot;CHECK_SESSIONS&quot;, &quot;0&quot;)</span><br><span class="line">	tempDir, err := ioutil.TempDir(&quot;&quot;, &quot;testing&quot;)</span><br><span class="line">	<span class="keyword">if</span> err != nil &#123;</span><br><span class="line">		panic(err)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">Server</span> = pmgo.NewDBServer()</span><br><span class="line">	<span class="keyword">Server</span>.SetPath(tempDir)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">session</span> := <span class="keyword">Server</span>.<span class="keyword">Session</span>()</span><br><span class="line">	// <span class="keyword">load</span> <span class="keyword">some</span> fake data <span class="keyword">into</span> the db</span><br><span class="line">	<span class="keyword">session</span>.DB(&quot;test&quot;).C(&quot;testc&quot;).<span class="keyword">Insert</span>(mockUser())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func mockUser() <span class="keyword">User</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">User</span>&#123;</span><br><span class="line">		ID:   <span class="number">1</span>,</span><br><span class="line">		<span class="type">Name</span>: &quot;Zapp Brannigan&quot;,</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func tearDown() &#123;</span><br><span class="line">	<span class="keyword">Server</span>.<span class="keyword">Session</span>().<span class="keyword">Close</span>()</span><br><span class="line">	<span class="keyword">Server</span>.<span class="keyword">Session</span>().DB(&quot;samples&quot;).DropDatabase()</span><br><span class="line">	<span class="keyword">Server</span>.Stop()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>go</tag>
        <tag>mongo</tag>
      </tags>
  </entry>
  <entry>
    <title>互联网监控, Open-falcon用户配置</title>
    <url>/open-falcon/open-falcon-deploy-20160806.html</url>
    <content><![CDATA[<p>Open-Falcon 是小米运维部开源的一款互联网企业级监控系统解决方案。监控系统是整个运维环节，乃至整个产品生命周期中最重要的一环，事前及时预警发现故障，事后提供翔实的数据用于追查定位问题。监控系统作为一个成熟的运维产品，业界有很多开源的实现可供选择。<br>本文档对多节点负载open-falcon部署配置说明。请阅读<a href="http://book.open-falcon.org/zh/index.html">官方参考文档</a></p>
<a id="more"></a>

<p><img src="http://ww4.sinaimg.cn/mw690/0065glrAgw1f6jxj0iaugj31270pcjwo.jpg" alt="Alt text" title="open-falcon arch"></p>
<h3 id="机器部署"><a href="#机器部署" class="headerlink" title="机器部署"></a>机器部署</h3><p>系统：Centos7</p>
<table>
<thead>
<tr>
<th align="center">主机名</th>
<th align="left">主机IP</th>
<th align="center">备注</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>falconpoc01</strong></td>
<td align="left">10.128.31.136</td>
<td align="center">open-falcon模块测试机</td>
</tr>
<tr>
<td align="center"><strong>falconpoc02</strong></td>
<td align="left">10.128.31.137</td>
<td align="center">open-falcon模块测试机</td>
</tr>
<tr>
<td align="center"><strong>falconpoc03</strong></td>
<td align="left">10.128.31.138</td>
<td align="center">open-falcon数据测试机</td>
</tr>
</tbody></table>
<p>基于<a href="/open-falcon-deploy-muti-nodes-20160807.html">&lt;&lt;多节点Open-falcon部署&gt;&gt;</a>文章的环境进行部署</p>
<h3 id="Nginx安装"><a href="#Nginx安装" class="headerlink" title="Nginx安装"></a>Nginx安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install epel-release</span><br><span class="line">yum install nginx</span><br><span class="line"></span><br><span class="line">systemctl <span class="built_in">enable</span> nginx</span><br><span class="line">systemctl start nginx</span><br></pre></td></tr></table></figure>
<h3 id="Nginx配置"><a href="#Nginx配置" class="headerlink" title="Nginx配置"></a>Nginx配置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/nginx/nginx.conf</span><br><span class="line"><span class="comment"># For more information on configuration, see:</span></span><br><span class="line"><span class="comment">#   * Official English Documentation: http://nginx.org/en/docs/</span></span><br><span class="line"><span class="comment">#   * Official Russian Documentation: http://nginx.org/ru/docs/</span></span><br><span class="line"></span><br><span class="line">user nginx;</span><br><span class="line">worker_processes auto;</span><br><span class="line">error_log /var/<span class="built_in">log</span>/nginx/error.log;</span><br><span class="line">pid /run/nginx.pid;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections 1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    log_format  main  <span class="string">&#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span></span><br><span class="line">                      <span class="string">&#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span></span><br><span class="line">                      <span class="string">&#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    access_log  /var/<span class="built_in">log</span>/nginx/access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile            on;</span><br><span class="line">    tcp_nopush          on;</span><br><span class="line">    tcp_nodelay         on;</span><br><span class="line">    keepalive_timeout   65;</span><br><span class="line">    types_hash_max_size 2048;</span><br><span class="line"></span><br><span class="line">    include             /etc/nginx/mime.types;</span><br><span class="line">    default_type        application/octet-stream;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Load modular configuration files from the /etc/nginx/conf.d directory.</span></span><br><span class="line">    <span class="comment"># See http://nginx.org/en/docs/ngx_core_module.html#include</span></span><br><span class="line">    <span class="comment"># for more information.</span></span><br><span class="line">    include /etc/nginx/conf.d/*.conf;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/nginx/conf.d/falcon.conf</span><br><span class="line">upstream dashboard &#123;</span><br><span class="line">        ip_hash;</span><br><span class="line">        server   10.128.31.136:8081;</span><br><span class="line">        server   10.128.31.137:8081;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">upstream uic &#123;</span><br><span class="line">        ip_hash;</span><br><span class="line">        server   10.128.31.136:1234;</span><br><span class="line">        server   10.128.31.137:1234;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">upstream portal &#123;</span><br><span class="line">        ip_hash;</span><br><span class="line">        server   10.128.31.136:5050;</span><br><span class="line">        server   10.128.31.137:5050;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">upstream alarm &#123;</span><br><span class="line">        server   10.128.31.136:9912;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">      listen  8081;</span><br><span class="line">      server_name  10.128.31.138;</span><br><span class="line"></span><br><span class="line">      location / &#123;</span><br><span class="line">               proxy_pass        http://dashboard;</span><br><span class="line">               proxy_set_header   Host             <span class="variable">$host</span>;</span><br><span class="line">               proxy_set_header   X-Real-IP        <span class="variable">$remote_addr</span>;</span><br><span class="line">               proxy_set_header   X-Forwarded-For  <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">      &#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">      listen  1234;</span><br><span class="line">      server_name  10.128.31.138;</span><br><span class="line"></span><br><span class="line">      location / &#123;</span><br><span class="line">               proxy_pass        http://uic;</span><br><span class="line">               proxy_set_header   Host             <span class="variable">$host</span>;</span><br><span class="line">               proxy_set_header   X-Real-IP        <span class="variable">$remote_addr</span>;</span><br><span class="line">               proxy_set_header   X-Forwarded-For  <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">      &#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">      listen  5050;</span><br><span class="line">      server_name  10.128.31.138;</span><br><span class="line"></span><br><span class="line">      location / &#123;</span><br><span class="line">               proxy_pass        http://portal;</span><br><span class="line">               proxy_set_header   Host             <span class="variable">$host</span>;</span><br><span class="line">               proxy_set_header   X-Real-IP        <span class="variable">$remote_addr</span>;</span><br><span class="line">               proxy_set_header   X-Forwarded-For  <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">      &#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">      listen  9912;</span><br><span class="line">      server_name  10.128.31.138;</span><br><span class="line"></span><br><span class="line">      location / &#123;</span><br><span class="line">               proxy_pass        http://alarm;</span><br><span class="line">               proxy_set_header   Host             <span class="variable">$host</span>;</span><br><span class="line">               proxy_set_header   X-Real-IP        <span class="variable">$remote_addr</span>;</span><br><span class="line">               proxy_set_header   X-Forwarded-For  <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">      &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<h3 id="Open-falcon用户接口配置"><a href="#Open-falcon用户接口配置" class="headerlink" title="Open-falcon用户接口配置"></a>Open-falcon用户接口配置</h3><h4 id="uic用户管理模块"><a href="#uic用户管理模块" class="headerlink" title="uic用户管理模块"></a>uic用户管理模块</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#配置</span></span><br><span class="line">vim cfg.json</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;log&quot;</span>: <span class="string">&quot;debug&quot;</span>,</span><br><span class="line">    <span class="string">&quot;company&quot;</span>: <span class="string">&quot;MI&quot;</span>,</span><br><span class="line">    <span class="string">&quot;http&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;enabled&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&quot;listen&quot;</span>: <span class="string">&quot;0.0.0.0:1234&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;cache&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;enabled&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&quot;redis&quot;</span>: <span class="string">&quot;falcon:6379&quot;</span>,</span><br><span class="line">        <span class="string">&quot;idle&quot;</span>: 10,</span><br><span class="line">        <span class="string">&quot;max&quot;</span>: 1000,</span><br><span class="line">        <span class="string">&quot;timeout&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;conn&quot;</span>: 10000,</span><br><span class="line">            <span class="string">&quot;read&quot;</span>: 5000,</span><br><span class="line">            <span class="string">&quot;write&quot;</span>: 5000</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;salt&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;canRegister&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;ldap&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;enabled&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;addr&quot;</span>: <span class="string">&quot;ldap.example.com:389&quot;</span>,</span><br><span class="line">        <span class="string">&quot;baseDN&quot;</span>: <span class="string">&quot;dc=example,dc=com&quot;</span>,</span><br><span class="line">        <span class="string">&quot;bindDN&quot;</span>: <span class="string">&quot;cn=mananger,dc=example,dc=com&quot;</span>,</span><br><span class="line">        <span class="string">&quot;bindPasswd&quot;</span>: <span class="string">&quot;12345678&quot;</span>,</span><br><span class="line">        <span class="string">&quot;userField&quot;</span>: <span class="string">&quot;uid&quot;</span>,</span><br><span class="line">        <span class="string">&quot;attributes&quot;</span>: [<span class="string">&quot;sn&quot;</span>,<span class="string">&quot;mail&quot;</span>,<span class="string">&quot;telephoneNumber&quot;</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;uic&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;addr&quot;</span>: <span class="string">&quot;root:password@tcp(falcon-mysql:3306)/uic?charset=utf8&amp;loc=Asia%2FChongqing&quot;</span>,</span><br><span class="line">        <span class="string">&quot;idle&quot;</span>: 10,</span><br><span class="line">        <span class="string">&quot;max&quot;</span>: 100</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;shortcut&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;falconPortal&quot;</span>: <span class="string">&quot;http://10.128.31.138:5050/&quot;</span>,</span><br><span class="line">        <span class="string">&quot;falconDashboard&quot;</span>: <span class="string">&quot;http://10.128.31.138:8081/&quot;</span>,</span><br><span class="line">        <span class="string">&quot;falconAlarm&quot;</span>: <span class="string">&quot;http://10.128.31.138:9912/&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="query绘图查询模块"><a href="#query绘图查询模块" class="headerlink" title="query绘图查询模块"></a>query绘图查询模块</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#配置</span></span><br><span class="line">vim cfg.json</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;debug&quot;</span>: <span class="string">&quot;false&quot;</span>,</span><br><span class="line">    <span class="string">&quot;http&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;enabled&quot;</span>:  <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&quot;listen&quot;</span>:   <span class="string">&quot;0.0.0.0:9966&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;graph&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;connTimeout&quot;</span>: 1000,</span><br><span class="line">        <span class="string">&quot;callTimeout&quot;</span>: 5000,</span><br><span class="line">        <span class="string">&quot;maxConns&quot;</span>: 32,</span><br><span class="line">        <span class="string">&quot;maxIdle&quot;</span>: 32,</span><br><span class="line">        <span class="string">&quot;replicas&quot;</span>: 500,</span><br><span class="line">        <span class="string">&quot;cluster&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;graph-00&quot;</span>: <span class="string">&quot;falcon-graph:6070&quot;</span>,</span><br><span class="line">            <span class="string">&quot;graph-01&quot;</span>: <span class="string">&quot;falcon-graph2:6070&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;api&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;query&quot;</span>: <span class="string">&quot;http://10.128.31.137:9966&quot;</span>,</span><br><span class="line">        <span class="string">&quot;dashboard&quot;</span>: <span class="string">&quot;http://10.128.31.138:8081&quot;</span>,</span><br><span class="line">        <span class="string">&quot;max&quot;</span>: 500</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="alarm报警处理模块"><a href="#alarm报警处理模块" class="headerlink" title="alarm报警处理模块"></a>alarm报警处理模块</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#配置</span></span><br><span class="line">vim cfg.json</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;debug&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;uicToken&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;http&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;enabled&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&quot;listen&quot;</span>: <span class="string">&quot;0.0.0.0:9912&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;queue&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;sms&quot;</span>: <span class="string">&quot;/sms&quot;</span>,</span><br><span class="line">        <span class="string">&quot;mail&quot;</span>: <span class="string">&quot;/mail&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;redis&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;addr&quot;</span>: <span class="string">&quot;falcon-redis:6379&quot;</span>,</span><br><span class="line">        <span class="string">&quot;maxIdle&quot;</span>: 5,</span><br><span class="line">        <span class="string">&quot;highQueues&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;event:p0&quot;</span>,</span><br><span class="line">            <span class="string">&quot;event:p1&quot;</span>,</span><br><span class="line">            <span class="string">&quot;event:p2&quot;</span>,</span><br><span class="line">            <span class="string">&quot;event:p3&quot;</span>,</span><br><span class="line">            <span class="string">&quot;event:p4&quot;</span>,</span><br><span class="line">            <span class="string">&quot;event:p5&quot;</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&quot;lowQueues&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;event:p6&quot;</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&quot;userSmsQueue&quot;</span>: <span class="string">&quot;/queue/user/sms&quot;</span>,</span><br><span class="line">        <span class="string">&quot;userMailQueue&quot;</span>: <span class="string">&quot;/queue/user/mail&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;api&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;portal&quot;</span>: <span class="string">&quot;http://10.128.31.138:5050&quot;</span>,</span><br><span class="line">        <span class="string">&quot;uic&quot;</span>: <span class="string">&quot;http://10.128.31.138:1234&quot;</span>,</span><br><span class="line">        <span class="string">&quot;links&quot;</span>: <span class="string">&quot;http://10.128.31.138:5090&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="用户接口"><a href="#用户接口" class="headerlink" title="用户接口"></a>用户接口</h3><table>
<thead>
<tr>
<th align="center">描述</th>
<th align="center">访问接口</th>
<th align="center">功能</th>
<th align="center">备注</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>dashborad</strong></td>
<td align="center"><a href="http://10.128.31.138:8081/">http://10.128.31.138:8081/</a></td>
<td align="center">监控主机数据查询</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"><strong>uic</strong></td>
<td align="center"><a href="http://10.128.31.138:1234/">http://10.128.31.138:1234/</a></td>
<td align="center">用户组管理</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"><strong>portal</strong></td>
<td align="center"><a href="http://10.128.31.138:5050/">http://10.128.31.138:5050/</a></td>
<td align="center">监控策略配置</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"><strong>alarm</strong></td>
<td align="center"><a href="http://10.128.31.138:9912/">http://10.128.31.138:9912/</a></td>
<td align="center">报警查询</td>
<td align="center"></td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>open-falcon</category>
      </categories>
      <tags>
        <tag>golang</tag>
        <tag>监控</tag>
        <tag>linux</tag>
        <tag>分布式</tag>
        <tag>open-falcon</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>OpenStack 模块介紹（入门篇）</title>
    <url>/openstack/openstack-simple-intro-20161013.html</url>
    <content><![CDATA[<p>OpenStack是美國國家航空暨太空總署和Rackspace共同打造的雲端開源軟體，以Apache許可證授權，並且是一個自由軟體和開放原始碼項目，來打造基礎設施即服務(Infrastructure as a Service)。OpenStack擁有三大模組運算模組、網通模組和儲存模組，加上一套集中式管理的儀表板模組，來組合成一套OpenStack共享服務，並且以提供虛擬機方式，對外帶來運算資源，以便利彈性擴充或調度。</p>
<a id="more"></a>

<p>從2010年10月到現今已歷經12個版本，來到了Liberty與下一個版本Mitaka，專案數也從A版的2個發展到現今超過10個以上專案，許多大廠也紛紛加入該行列，打造一套自己的雲端平台。<br>值得一提的是 OpenStack 已在 Liberty 加入了 Big Tent 模型。讓管理人員只需要更新核心的專案，其餘專案可以隨自己需求選擇是否要更新。也將在 2016年第二季推出第一個OpenStack認證管理員（COA）認證。</p>
<p><img src="https://kairen.gitbooks.io/openstack-liberty/content/conceptions/images/openstack_kilo_conceptual_arch.png" alt="Alt text" title="openstack arch"></p>
<h3 id="套件介紹"><a href="#套件介紹" class="headerlink" title="套件介紹"></a>套件介紹</h3><h4 id="Keystone-身分識別套件-Identity-service"><a href="#Keystone-身分識別套件-Identity-service" class="headerlink" title="Keystone 身分識別套件 (Identity service)"></a>Keystone 身分識別套件 (Identity service)</h4><p>Keystone套件作為OpenStack的身份驗證服務，具有中央目錄能查看哪位使用者可存取哪些服務，並且提供了多種驗證方式，包括使用者帳號密碼、Token以及類似AWS的登入機制。另外，Keystone可以整合現有的中央控管系統，像是LDAP（輕型目錄訪問協議）。</p>
<blockquote>
<p>類似 Amazon AWS 的 IAM。</p>
</blockquote>
<h4 id="Nova-運算套件-Compute"><a href="#Nova-運算套件-Compute" class="headerlink" title="Nova 運算套件 (Compute)"></a>Nova 運算套件 (Compute)</h4><p>Nova 主要擔任著部署與管理虛擬機角色。Nova提供了一套API來開發額外的應用程式，IT人員可以透過網頁介面來查看與管理資源狀態，且可以控制啟動、停止、調整虛擬機。<br>IT人員可將Nova套件部署在多家廠商的虛擬化平臺上，目前來說以KVM和Xen虛擬化平臺最為穩定。除了支援不同的虛擬化平臺之外，在硬體架構的部份，OpenStack支援x86架構、ARM架構等。另外Nova套件還支援Linux羽量級的虛擬化技術LXC，能夠在切割虛擬機時，分出更多的虛擬化執行環境。<br>此外，Nova套件還具有管理LAN網路的功能，可程式化的分配IP位址與VLAN，快速部署網路與資安功能。Nova套件還可將某幾臺虛擬機器設為群組，和不同群組作隔離，並有基於角色的訪問控制（RBAC）功能，可根據使用者的角色確保可存取的資源為何。+</p>
<blockquote>
<p>類似 Amazon AWS 的 EC2。</p>
</blockquote>
<h4 id="Glance-映象檔管理套件-Image-Service"><a href="#Glance-映象檔管理套件-Image-Service" class="headerlink" title="Glance 映象檔管理套件 (Image Service)"></a>Glance 映象檔管理套件 (Image Service)</h4><p>Glance套件提供了硬碟或伺服器的Image尋找、註冊以及服務交付等功能。儲存的Image可作為新伺服器部署所需的範本，加快服務上線速度。若是有多臺伺服器需要配置新服務，就不需要額外花費時間單獨設定，也可做為備份時所用。</p>
<blockquote>
<p>類似 Amazon AWS 的 VM Import／Export。</p>
</blockquote>
<h4 id="Horizon-儀表板套件-Dashboard"><a href="#Horizon-儀表板套件-Dashboard" class="headerlink" title="Horizon 儀表板套件 (Dashboard)"></a>Horizon 儀表板套件 (Dashboard)</h4><p>Horizon套件提供IT人員一套圖形化的網頁介面，讓IT人員可以綜觀雲端服務目前的規模與狀態，並且能夠統一存取、部署與管理所有雲端服務所使用到的資源。<br>Horizon套件是個可擴展的網頁式Application。所以Horizon套件可以整合第三方的服務或是產品，像是計費、監控或是額外的管理工具。</p>
<blockquote>
<p>類似 Amazon AWS 的 Console。</p>
</blockquote>
<h4 id="Neutron-網通套件-Networking"><a href="#Neutron-網通套件-Networking" class="headerlink" title="Neutron 網通套件 (Networking)"></a>Neutron 網通套件 (Networking)</h4><p>Neutron套件為其它OpenStack服務提供網路連接即服務（Network-Connectivity-as-a-Service）功能。比如OpenStack運算，為租戶提供API定義網路和使用。基於插件式的架構，使其支援眾多的網路供應商和技術，，IT人員可分配IP位址、靜態IP或是動態IP。且IT人員也可以使用SDN技術，像是OpenFlow協定來打造更大規模或是多租戶的網路環境。<br>此外，允許部署和管理其他網路服務，像是入侵偵測系統（IDS）、負載平衡、防火牆、VPN等。</p>
<blockquote>
<p>類似 Amazon AWS 的 VPC。</p>
</blockquote>
<h4 id="Swift-物件儲存套件-Object-Storage"><a href="#Swift-物件儲存套件-Object-Storage" class="headerlink" title="Swift 物件儲存套件 (Object Storage)"></a>Swift 物件儲存套件 (Object Storage)</h4><p>Swift套件提供可擴展的分散式儲存平臺，以防止單點故障的情況發生。使用者可透過API進行存取，可存放非結構化的資料，像是圖片、網頁、網誌等，並可作為應用程式資料備份、歸檔以及保留之用。<br>透過Swift套件，可讓業界標準的設備存放PB等級的資料量。而且，當新增伺服器後，儲存群集可輕易的橫向擴充。<br>此外，因為Swift套件是透過軟體的邏輯，確保資料被複製與分布在不同設備上，這可讓企業使用較便宜的設備，節省成本。</p>
<blockquote>
<p>類似 Amazon AWS 的 S3。</p>
</blockquote>
<h4 id="Cinder-區塊儲存套件-Block-Storage"><a href="#Cinder-區塊儲存套件-Block-Storage" class="headerlink" title="Cinder 區塊儲存套件 (Block Storage)"></a>Cinder 區塊儲存套件 (Block Storage)</h4><p>Cinder套件允許區塊儲存設備能夠整合商業化的企業儲存平臺，像是NetApp、Nexenta、SolidFire等。區塊儲存系統可讓IT人員設置伺服器和區塊儲存設備的各項指令，包括建立、連接和分離等，並整合了運算套件，可讓IT人員查看儲存設備的容量使用狀態。<br>Cinder套件並提供快照管理功能，可保護虛擬機器上的資料，作為系統回復時所用，快照甚至可用來建立一個新的區塊儲存容量。</p>
<blockquote>
<p>類似 Amazon AWS 的 EBS。</p>
</blockquote>
<h4 id="Ceilometer-資料監控計量套件-Telemetry"><a href="#Ceilometer-資料監控計量套件-Telemetry" class="headerlink" title="Ceilometer 資料監控計量套件(Telemetry)"></a>Ceilometer 資料監控計量套件(Telemetry)</h4><p>Ceilometer提供OpenStack雲端服務可藉由監控與量測OpenStack的使用，來收集CPU與網路的使用資料，以提供收費計價（Billing）、評測（Benchmarking）等使用，或是使用這些資料當作評估系統延展性以及進行系統相關統計之用。</p>
<h4 id="Heat-編排模板套件-Orchestration"><a href="#Heat-編排模板套件-Orchestration" class="headerlink" title="Heat 編排模板套件 (Orchestration)"></a>Heat 編排模板套件 (Orchestration)</h4><p>Heat主要提供一個以模板（Templeate）為基礎的架構來描述雲端的應用，模板中可以讓使用者建立如虛擬映像實體（Instance）、浮動IP位址、安全群組（Security Group）或是使用者等OpenStack各種資源，也就是說，Heat讓使用者可以設定一個雲端應用模板，來串連建立設定相關所需的OpenStack服務資源，而不必一個個分別去建立設定。</p>
<h4 id="Sahara-資料處理套件-Data-Processing"><a href="#Sahara-資料處理套件-Data-Processing" class="headerlink" title="Sahara 資料處理套件 (Data Processing)"></a>Sahara 資料處理套件 (Data Processing)</h4><p>Sahara 目的是提供給搭建Haddoop 分散式叢集的工程師能用簡單的概念， 就能在 OpenStack 上面部署和管理「Haddoop 分散式叢集」。Sahara 也提供了MapR Distribution、Spark、Cloudera、Hortonworks插件，替IT人員打造一系列Hadoop ecosystem。</p>
<h4 id="Trove-資料庫服務套件-Database-as-a-Service"><a href="#Trove-資料庫服務套件-Database-as-a-Service" class="headerlink" title="Trove 資料庫服務套件 (Database as a Service)"></a>Trove 資料庫服務套件 (Database as a Service)</h4><p>Trove主要負責銜接與簡化實際資料庫的使用，提供OpenStack各個服務一個具延展性且可靠的雲端資料庫服務（Cloud Database-as-a-Service），Database服務包含了銜接傳統關聯式資料庫與新興非關聯式資料庫。</p>
<h4 id="Ironic-裸機部署套件-Bare-Metal"><a href="#Ironic-裸機部署套件-Bare-Metal" class="headerlink" title="Ironic 裸機部署套件 (Bare Metal )"></a>Ironic 裸機部署套件 (Bare Metal )</h4><p>Ironic裸機部署功能，在Kilo版中釋出，IT人員可以在實體伺服器自動化部署OpenStack，等於能用管理虛擬機器的方式，來管理實體伺服器，有助於一次部署大量OpenStack主機來滿足大型IaaS環境的需要。</p>
<h4 id="Zaqar-雲端訊息佇列服務-Message-service"><a href="#Zaqar-雲端訊息佇列服務-Message-service" class="headerlink" title="Zaqar 雲端訊息佇列服務(Message service)"></a>Zaqar 雲端訊息佇列服務(Message service)</h4><p>Zaqar 是對 Web 開發人員提供了多租戶（Multi tenant）的雲端訊息服務。它結合開創了 Amazon 的 SQS 產品與附加的語義來支援事件的廣播想法。<br>本服務擁有一個完全基於 RESTful 的 API，開發人員可使用他們的 Saas 與行動應用程式的各種元件之間的訊息發送，透過使用多種通訊模式。這個 API 是一種高效的訊息傳送引擎設計，充分的考慮可擴展性與安全性。<br>然而其他 OpenStack 的套件可以與 Zaqar 的表面事件 End users 進行整合以及與訪客的Agent運作於 『Over-cloud』層。雲端公司可以利用Zaqar提供如同 SQS 與 SNS給他們的客戶。</p>
<h4 id="Barbican-金鑰管理服務-Key-management"><a href="#Barbican-金鑰管理服務-Key-management" class="headerlink" title="Barbican 金鑰管理服務(Key management)"></a>Barbican 金鑰管理服務(Key management)</h4><p>Barbican 是一個以 REST API 設計來進行安全儲存、配置以及機密的管理，如密碼、加密金鑰以及 X.509 憑證。其目的是為了適用於所有環境，包含大型短暫性雲端。</p>
<h4 id="Designate-DNS管理服務-DNS"><a href="#Designate-DNS管理服務-DNS" class="headerlink" title="Designate DNS管理服務 (DNS)"></a>Designate DNS管理服務 (DNS)</h4><p>Designate 提供了 DNSaaS 服務於 OpenStack 上，包含以下幾項功能：</p>
<ul>
<li>使用 REST API 管理 domain/record</li>
<li>多租戶</li>
<li>整合 Keystone 驗證</li>
<li>以框架來整合 Nova 與 Neutrion 的通知（自動產生記錄）</li>
<li>支援立即可用的 PowerDNS 與 Bind9</li>
</ul>
<h4 id="Manila-共享式檔案系統服務-Shared-Filesystems"><a href="#Manila-共享式檔案系統服務-Shared-Filesystems" class="headerlink" title="Manila 共享式檔案系統服務 (Shared Filesystems)"></a>Manila 共享式檔案系統服務 (Shared Filesystems)</h4><p>Manila 提供 OpenStack 共享的檔案系統，核心概念有共享目錄、ACL、共享網路、快照與後端驅動程式，目前支援有 GPFS、GlusterFS、EMCVNX等。在雲端平台上，所有服務必須要考慮多租戶資源隔離，目前 Manila 的多租戶資源隔離依賴於 Neutron 的私有網路隔離。</p>
<h4 id="Magnum-容器即服務-Containers-service"><a href="#Magnum-容器即服務-Containers-service" class="headerlink" title="Magnum 容器即服務 (Containers service)"></a>Magnum 容器即服務 (Containers service)</h4><p>Magnum 是一個 OpenStack API 服務，是由 OpenStack Containers Team 開發作為Container orchestration 的引擎，諸如 Docker、Kubernetes 這一類別可以在 Openstack 上作為資源。<br>Magnum 使用 Heat 來編排一個 OS Image，其中包含 Docker 以及 Kubernetes，並執行 Image 於任何的虛擬機或 Bare Metal 叢集配置。</p>
<h4 id="Murano-應用程式目錄服務-Application-Catalog"><a href="#Murano-應用程式目錄服務-Application-Catalog" class="headerlink" title="Murano 應用程式目錄服務(Application Catalog)"></a>Murano 應用程式目錄服務(Application Catalog)</h4><p>Murano 專案引入一個 Application Catalog 於 OpenStack，使應用程式開發人員與雲端管理人員，可以快速的發布各種已就緒的雲端應用程式，並以目錄方式進行分類。<br>雲端使用者、包括沒經驗的人可以通過統一的框架與 API 實現應用程式的快速部署與應用程式的生命週期管理，來降低應用程式對底層平台（IaaS 層）的依賴。</p>
]]></content>
      <categories>
        <category>openstack</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>虚拟化</tag>
        <tag>openstack</tag>
        <tag>云计算</tag>
      </tags>
  </entry>
  <entry>
    <title>OpenStack O版 安装部署及问题解决</title>
    <url>/openstack/opentstack-o-deploy-20180131.html</url>
    <content><![CDATA[<p>OpenStack项目是由Rackspace和NASA（美国国家航空航天局）共同发起的。它是一个开源软件，它提供了一个部署云的平台。为虚拟计算或存储服务的公有/私有云，提供可扩展的、灵活的云计算。是一个旨在为公共及私有云的建设与管理提供软件的开源项目。OpenStack目前版本Pike并在持续更新中，本文选用Ocata版本进行部署，并记录部署过程中遇到的问题。</p>
<a id="more"></a>

<h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><p><strong>操作系统</strong><br>Centos7.2.1151 mini(国内mirrors没有，<a href="http://vault.centos.org/7.2.1511/isos/x86_64/">官方下载</a>)</p>
<p><strong>服务节点</strong><br>本文使用三个节点部署stand-one方式，按照官方文档进行部署，高可用部署之后文章会跟进。</p>
<ul>
<li>controller节点</li>
<li>computer节点</li>
<li>block storage节点</li>
</ul>
<p><strong>网络说明</strong> </p>
<ul>
<li>Manage network 管理网络，OpenStack各个模块之间的交互，连接数据库，连接Message Queue都是通过这个网络来进行。</li>
<li>Private network 私有网络，虚拟机之间的数据传输通过这个网络来进行，虚拟机要连接虚拟路由都是通过这个网络来进行。</li>
<li>External network 外部网络，无论是用户调用OpenStack的API，还是创建出来的虚拟机要访问外网，或者外网要ssh到虚拟机，都用这个网络。</li>
</ul>
<p>OpenStack将三个网络进行隔离，一方面是安全，在虚拟机里面，干扰的都仅仅是Private Network，都不可能访问到我的数据库。一方面是流量分离，Manage Network的流量不是很大的，而且一般都会比较优雅的使用，而Prviate Network和External Network就需要有流量控制策略。</p>
<p>| 节点 | Manage network | Private network | External network |<br>| :—: | :— | :—: | :—: | :—: |<br>| controller | 10.50.1.11 | 10.50.1.11 | 10.112.1.116 |<br>| computer | 10.50.1.10 | 10.50.1.11 | 10.112.1.117(临时) |<br>| block storage | 10.50.1.12 | 10.50.1.12 | 10.112.1.118(临时) |</p>
<p>注意：非高可用环境采用Manage Private同网方式，computer和block storage节点的External network的外网用于安装环境的。</p>
<p><strong>配置节点别名</strong> </p>
<p>修改/etc/hostname的主机名称，修改每个节点的**/etc/hosts**</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">10.50.1.11 controller</span><br><span class="line">10.50.1.10 computer</span><br><span class="line">10.50.1.12 blokstorage</span><br></pre></td></tr></table></figure>
<p><strong>Yum下载源</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup</span><br><span class="line">curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class="line">yum makecache</span><br></pre></td></tr></table></figure>
<h3 id="安装流程"><a href="#安装流程" class="headerlink" title="安装流程"></a>安装流程</h3><p>请参看<a href="https://docs.openstack.org/ocata/install-guide-rdo/common/conventions.html">官方Ocata版本安装向导</a>进行安装。请一步一步进行安装，官方文档已经非常详尽了，这里就不在重复写了，我会我部署过程中的问题中列举出来并记录。</p>
<h3 id="安装问题及解决方案"><a href="#安装问题及解决方案" class="headerlink" title="安装问题及解决方案"></a>安装问题及解决方案</h3><p><strong>编码unknown locale: UTF-8</strong><br>在进行同步数据库命令时，有时会出现<code>unknown locale: UTF-8</code>错误并同步失败。终端中输入以下命令后再执行同步命令即可:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> LC_ALL=en_US.UTF-8</span><br><span class="line"><span class="built_in">export</span> LANG=en_US.UTF-8</span><br></pre></td></tr></table></figure>
<p><strong>连接不上rabbitmq的问题</strong><br>其它节点连接不上rabbitmq并提示<strong>127.0.0.1:5672</strong>(/var/log/下的日志)，文档中已经明确配置了<strong>transport_url = rabbit://openstack:RABBIT_PASS@controller</strong>，这里的rabbitmq的主机是controller而不是127.0.0.1。问题在于配置中还有rabbit_host参数指定，配置<strong>rabbit_host=controller</strong>重启服务即可。</p>
<p><strong>chrony时间同步问题</strong><br>参看各个节点的时区是否一致，可使用<code>timedatectl</code>命令进行查看与修改。如果chrony没有能同步时间，请使用命令修改系统时间后再<code>systemctl restart chrony</code>。如果时间没有同步，会导致controller检查block storage的cinder-volume服务一直为down状态。controller节点使用命令<strong>openstack volume service list</strong>查看。</p>
<p>设置时区</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">timedatectl set-timezone Asia/Shanghai</span><br></pre></td></tr></table></figure>
<p><strong>重启机器后无法访问web的问题</strong><br>重启后mysql、rabbitmq服务可能没有启动，需要检查并启动。启动后先需要重启http和memcached.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl start mariadb.service</span><br><span class="line">systemctl start rabbitmq-server.service</span><br><span class="line">systemctl restart httpd.service memcached.service</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>openstack</category>
      </categories>
      <tags>
        <tag>虚拟化</tag>
        <tag>openstack</tag>
        <tag>云计算</tag>
        <tag>centos7.2</tag>
        <tag>ocata</tag>
      </tags>
  </entry>
  <entry>
    <title>基于Redis Cluster的分布式缓存备份篇（七）</title>
    <url>/redis/redis-cache-backup-20170212.html</url>
    <content><![CDATA[<p>redis的数据备份比较简单，持久化策略有aof与rdb两种方式，rdb对存储数据有压缩，备份最好选择rdb文件进行备份。数据恢复在从rdb文件中提取。</p>
<ul>
<li>RDB 将数据库的快照（snapshot）以二进制的方式保存到磁盘中。文件小，便于备份恢复</li>
<li>AOF 以协议文本的方式，将所有对数据库进行过写入的命令（及其参数）记录到AOF文件，以此达到记录数据库状态的目的。文件大用于主备数据同步</li>
</ul>
<a id="more"></a>

<h3 id="定时备份"><a href="#定时备份" class="headerlink" title="定时备份"></a>定时备份</h3><p>linux系统有cron定时任务，编写简单脚本备份rdb文件即可。</p>
<h4 id="备份脚本"><a href="#备份脚本" class="headerlink" title="备份脚本"></a>备份脚本</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line">REDIS_DATA_HOME=<span class="string">&quot;/root/redis/data/&quot;</span></span><br><span class="line">REDIS_BACKUP_FILES=<span class="string">&quot;appendonly-7000.aof dump-7000.rdb&quot;</span></span><br><span class="line"></span><br><span class="line">BACKUP_DAYS=7</span><br><span class="line">REDIS_BACKUP_FILES_ARR=(<span class="variable">$REDIS_BACKUP_FILES</span>)</span><br><span class="line">CUR_DAY=$(date +%Y%m%d)</span><br><span class="line">EXPIRED_DAY=$(date -d <span class="string">&quot;<span class="variable">$BACKUP_DAYS</span> days ago&quot;</span> +%Y%m%d)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> f <span class="keyword">in</span> <span class="variable">$&#123;REDIS_BACKUP_FILES_ARR[@]&#125;</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">	tempFPath=$(<span class="built_in">echo</span> <span class="string">&quot;$REDIS_DATA_HOME<span class="variable">$f</span>&quot;</span> | awk <span class="string">&#x27;gsub(/^ *| *$/,&quot;&quot;)&#x27;</span>) </span><br><span class="line">	<span class="keyword">if</span> [ ! -f <span class="string">&quot;<span class="variable">$tempFPath</span>&quot;</span> ]; <span class="keyword">then</span> </span><br><span class="line">		<span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$tempFPath</span> not exist!&quot;</span></span><br><span class="line">		<span class="built_in">exit</span> 1</span><br><span class="line">	<span class="keyword">fi</span> </span><br><span class="line"></span><br><span class="line">	tempBPath=<span class="string">&quot;<span class="variable">$tempFPath</span>.<span class="variable">$CUR_DAY</span>&quot;</span></span><br><span class="line">	<span class="keyword">if</span> [ -f <span class="string">&quot;<span class="variable">$tempBPath</span>&quot;</span> ]; <span class="keyword">then</span> </span><br><span class="line">		<span class="built_in">echo</span> <span class="string">&quot;backup-file [<span class="variable">$tempBPath</span>] exist already.&quot;</span></span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="built_in">echo</span> <span class="string">&quot;start backup <span class="variable">$tempFPath</span> to <span class="variable">$tempBPath</span>.&quot;</span></span><br><span class="line">		cp <span class="variable">$tempFPath</span> <span class="variable">$tempBPath</span></span><br><span class="line">	<span class="keyword">fi</span> </span><br><span class="line"></span><br><span class="line">	<span class="comment">#delete backup file by expired </span></span><br><span class="line">	tempEPath=<span class="string">&quot;<span class="variable">$tempFPath</span>.<span class="variable">$EXPIRED_DAY</span>&quot;</span></span><br><span class="line">	<span class="keyword">if</span> [ -f <span class="string">&quot;<span class="variable">$tempEPath</span>&quot;</span> ]; <span class="keyword">then</span> </span><br><span class="line">		<span class="built_in">echo</span> <span class="string">&quot;delete backup-file [<span class="variable">$tempEPath</span>].&quot;</span></span><br><span class="line">		rm -f <span class="variable">$tempEPath</span></span><br><span class="line">	<span class="comment">#else</span></span><br><span class="line">		<span class="comment">#echo &quot;backup-file [$tempEPath] not exist.&quot;</span></span><br><span class="line">	<span class="keyword">fi</span> </span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;ok.&quot;</span></span><br></pre></td></tr></table></figure>
<h4 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h4><p>配置<code>vim /etc/crontab</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SHELL=/bin/bash</span><br><span class="line">PATH=/sbin:/bin:/usr/sbin:/usr/bin</span><br><span class="line">MAILTO=root</span><br><span class="line"></span><br><span class="line"><span class="comment"># For details see man 4 crontabs</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Example of job definition:</span></span><br><span class="line"><span class="comment"># .---------------- minute (0 - 59)</span></span><br><span class="line"><span class="comment"># |  .------------- hour (0 - 23)</span></span><br><span class="line"><span class="comment"># |  |  .---------- day of month (1 - 31)</span></span><br><span class="line"><span class="comment"># |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...</span></span><br><span class="line"><span class="comment"># |  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat</span></span><br><span class="line"><span class="comment"># |  |  |  |  |</span></span><br><span class="line"><span class="comment"># *  *  *  *  * user-name  command to be executed</span></span><br><span class="line">30 3 * * * root shell.sh </span><br></pre></td></tr></table></figure>
<p>重启生效</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl restart crond.service</span><br></pre></td></tr></table></figure>
<h3 id="备份恢复"><a href="#备份恢复" class="headerlink" title="备份恢复"></a>备份恢复</h3><p>备份恢复期间是不能提供服务了，请慎重恢复。</p>
<h4 id="关闭Slave节点"><a href="#关闭Slave节点" class="headerlink" title="关闭Slave节点"></a>关闭Slave节点</h4><p>关闭salve节点防止主备切换，使用<code>SHUTDOWN</code>命令关闭节点。</p>
<h4 id="关闭Master节点"><a href="#关闭Master节点" class="headerlink" title="关闭Master节点"></a>关闭Master节点</h4><p>关闭Master节点防止主备切换，使用<code>SHUTDOWN</code>命令关闭节点。</p>
<h4 id="拷贝rdb文件"><a href="#拷贝rdb文件" class="headerlink" title="拷贝rdb文件"></a>拷贝rdb文件</h4><p>拷贝rdb文件到Master节点数据目录</p>
<h4 id="Master节点关闭AOF持久化"><a href="#Master节点关闭AOF持久化" class="headerlink" title="Master节点关闭AOF持久化"></a>Master节点关闭AOF持久化</h4><p>设置节点<code>appendonly</code>配置项为<code>no</code>，关闭AOF持久化，并启动节点。</p>
<h4 id="重写AOF文件"><a href="#重写AOF文件" class="headerlink" title="重写AOF文件"></a>重写AOF文件</h4><p>客户端连接Master节点，执行<code>bgrewriteaof</code>命令重新aof。</p>
<h4 id="Master节点开启AOF持久化"><a href="#Master节点开启AOF持久化" class="headerlink" title="Master节点开启AOF持久化"></a>Master节点开启AOF持久化</h4><p>设置节点<code>appendonly</code>配置项为<code>yes</code>，关闭AOF持久化，并重启节点。</p>
<h4 id="开启Slave节点"><a href="#开启Slave节点" class="headerlink" title="开启Slave节点"></a>开启Slave节点</h4><p>开启Salve节点，同步master的数据。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol>
<li>定时备份数据</li>
<li>备份数据恢复请慎重，期间不会中断服务。</li>
</ol>
]]></content>
      <categories>
        <category>redis</category>
      </categories>
      <tags>
        <tag>分布式</tag>
        <tag>redis</tag>
        <tag>cluster</tag>
        <tag>cache</tag>
        <tag>缓存</tag>
      </tags>
  </entry>
  <entry>
    <title>基于Redis Cluster的分布式缓存配置篇（二）</title>
    <url>/redis/redis-cache-config-20170125.html</url>
    <content><![CDATA[<p>工欲善其事，必先利其器。先了解Redis的配置项，通常保存在redis.conf配置文件，如下对redis-3.2.6的配置文件做详细介绍。</p>
<a id="more"></a>

<table>
<thead>
<tr>
<th align="center">配置项</th>
<th align="center">默认值</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>bind</code></td>
<td align="center"><strong>127.0.0.1</strong></td>
<td align="center">指定节点绑定的IP地址, 要监听所有请求则设置“0.0.0.0”。</td>
</tr>
<tr>
<td align="center"><code>protected-mode</code></td>
<td align="center"><strong>yes</strong></td>
<td align="center">是否开启保护模式。 如果bind配置项没有限制IP、也未设置访问密码，则建议开启该参数，表示Redis只会本地进行访问，拒绝外部访问。如果bind配置项限制了IP和requirepass设置了访问密码，则建议关闭此配置项。</td>
</tr>
<tr>
<td align="center"><code>port</code></td>
<td align="center"><strong>6379</strong></td>
<td align="center">Redis实例默认端口号，可根据实际场景修改。</td>
</tr>
<tr>
<td align="center"><code>tcp-backlog</code></td>
<td align="center"><strong>511</strong></td>
<td align="center">高并发环境中设置高速后台日志，避免慢客户端连接问题。</td>
</tr>
<tr>
<td align="center"><code>timeout</code></td>
<td align="center"><strong>15</strong></td>
<td align="center">设置客户端连接时的超时时间，单位秒。当客户端在这段时间内没有发出任何指令，那么关闭该连接。如果设置为0 表示关闭此设置。</td>
</tr>
<tr>
<td align="center"><code>tcp-keepalive</code></td>
<td align="center"><strong>300</strong></td>
<td align="center">指定用于发送ACKs的时间,单位秒。设置为0表示禁用长连接, 非0值表示开启长连接。同时client端socket也可以通过配置keepalive选项,开启长连接。 需要注意的是关闭连接需要双倍的时间。</td>
</tr>
<tr>
<td align="center"><code>daemonize</code></td>
<td align="center"><strong>no</strong></td>
<td align="center">设置为yes表示redis是后台运行的进程。</td>
</tr>
<tr>
<td align="center"><code>supervised</code></td>
<td align="center"><strong>no</strong></td>
<td align="center">是否需要配置supervise进程管理方式，有四个值 no  upstart  system  auto  可根据实际情况调整。</td>
</tr>
<tr>
<td align="center"><code>pidfile</code></td>
<td align="center"><strong>/var/run/redis.pid</strong></td>
<td align="center">运行Redis存放pid的文件，默认是/var/run/redis.pid。运行多个redis实例则需要指定不同的pid文件和端口。</td>
</tr>
<tr>
<td align="center"><code>loglevel</code></td>
<td align="center"><strong>notice</strong></td>
<td align="center">日志级别，总共支持四个级别：debug、verbose、 notice、 warning。生产环境推荐notice级别。</td>
</tr>
<tr>
<td align="center"><code>logfile</code></td>
<td align="center"><strong>./redis.log</strong></td>
<td align="center">日志文件名，文件名推荐以port区分，如 ./redis/logs/node-7001.log</td>
</tr>
<tr>
<td align="center"><code>databases</code></td>
<td align="center"><strong>16</strong></td>
<td align="center">最大db簇的个数</td>
</tr>
<tr>
<td align="center"><code>save</code></td>
<td align="center"><strong>save 900 1</strong><br><strong>save 300 10</strong><br><strong>save 60 10000</strong></td>
<td align="center">数据持久化的频率：在一定时间内执行一定数量的写操作时自动保存快照，其中第一个参数表示多长时间，第二个参数表示执行多少次写操作。<br>save 900 1  是指900秒内至少有1次写操作<br>save 300 10  是指300秒内至少有10次写操作<br>save 60 10000 指60秒内至少有10000次写操作</td>
</tr>
<tr>
<td align="center"><code>stop-writes-on-bgsave-error</code></td>
<td align="center"><strong>yes</strong></td>
<td align="center">集群后台存储发生错误，是否终止所有客户端write请求。测试中服务器内存不足、永久缓存value过大造成磁盘空间不足、强制停止集群等均会造成后台存储发生错误而导致集群节点crash的情况。<br>注：此配置通常需要根据操作系统内核参数vm.overcommit_memory的配置来优化。</td>
</tr>
<tr>
<td align="center"><code>rdbcompression</code></td>
<td align="center"><strong>yes</strong></td>
<td align="center">缓存数据持久化到快照时，是否用LZF压缩数据。如果期望提高部分CPU性能，可设置为no关闭此压缩选项。</td>
</tr>
<tr>
<td align="center"><code>rdbchecksum</code></td>
<td align="center"><strong>yes</strong></td>
<td align="center">是否对rdb文件使用CRC64校验和，设置yes表示每个rdb文件内容末尾都追加CRC校验和。以便于其他第三方校验工具很方便的检测文件的完整性。</td>
</tr>
<tr>
<td align="center"><code>dbfilename</code></td>
<td align="center"><strong>dump.rdb</strong></td>
<td align="center">设置dump的文件位置。如：dump-7001.rdb</td>
</tr>
<tr>
<td align="center"><code>dir</code></td>
<td align="center"><strong>./</strong></td>
<td align="center">redis工作目录，该配置项一定是个目录，而不能是文件名。</td>
</tr>
<tr>
<td align="center"><code>slave-serve-stale-data</code></td>
<td align="center"><strong>yes</strong></td>
<td align="center">当slave与master失去联系，或者复制正在进行的时候，slave可能会有两种表现：<br>1. 如果为yes，slave仍然会应答客户端请求，但返回的数据可能是过时，或者在第一次同步的时候数据可能是空的。<br>2. 如果为no，在你执行除了info he salveof之外的其他命令时，slave 都将返回一个 “SYNC with master in progress” 的错误</td>
</tr>
<tr>
<td align="center"><code>slave-read-only</code></td>
<td align="center"><strong>yes</strong></td>
<td align="center">Slave是否设置为只读，通常不建议修改此项。</td>
</tr>
<tr>
<td align="center"><code>repl-diskless-sync</code></td>
<td align="center"><strong>no</strong></td>
<td align="center">通常用来设置无硬盘复制功能。</td>
</tr>
<tr>
<td align="center"><code>repl-diskless-sync-delay</code></td>
<td align="center"><strong>10</strong></td>
<td align="center">diskless复制的延迟时间，单位秒。一旦复制开始，节点不会再接收新slave的复制请求，直到下一个rdb传输。最好等待一段时间，等更多的slave连上来。</td>
</tr>
<tr>
<td align="center"><code>repl-disable-tcp-nodelay</code></td>
<td align="center"><strong>no</strong></td>
<td align="center">slave与master的连接,是否禁用TCP-nodelay选项。设置”yes”表示禁用,那么socket通讯中数据将会以packet方式发送(packet大小受到socket buffer限制)。可提高socket通讯的效率,但是小数据将会被buffer,不会被立即发送,对于接受者可能存在延迟。 设置“no”表示开启TCP-nodelay选项,任何数据都会被立即发送,及时性较好,但是效率较低。建议设为no，但是在高并发或者主从有大量操作的情况下，设置为yes</td>
</tr>
<tr>
<td align="center"><code>slave-priority</code></td>
<td align="center"><strong>100</strong></td>
<td align="center">slave的权重值。当master失效后,Sentinel将会从slave列表中找到权重值最低(&gt;0)的slave,并提升为master。如果权重值为0,表示此slave为”观察者”,不参与master选举。</td>
</tr>
<tr>
<td align="center"><code>appendonly</code></td>
<td align="center"><strong>yes</strong></td>
<td align="center">是否启用AOF文件持久化</td>
</tr>
<tr>
<td align="center"><code>appendfilename</code></td>
<td align="center"><strong>appendonly.aof</strong></td>
<td align="center">设置aof的文件位置。如：appendonly-7001.aof</td>
</tr>
<tr>
<td align="center"><code>appendfsync</code></td>
<td align="center"><strong>everysec</strong></td>
<td align="center">Redis支持三种同步AOF文件的策略:<br>always  表示每次有写操作都进行同步 效率最低， 数据可靠性最高<br>everysec  每秒同步一次 性能折中 <br>no 不主动调用fsync同步到磁盘，完全由操作系统调用，linux是30秒写一次, 性能最高，数据可靠性最低</td>
</tr>
<tr>
<td align="center"><code>no-appendfsync-on-rewrite</code></td>
<td align="center"><strong>no</strong></td>
<td align="center">在aof rewrite期间,是否对aof新记录的append暂缓使用文件同步策略,主要考虑磁盘IO开支和请求阻塞时间。默认为no,表示”不暂缓”,新的aof记录仍然会被立即同步。</td>
</tr>
<tr>
<td align="center"><code>auto-aof-rewrite-percentage</code></td>
<td align="center"><strong>100</strong></td>
<td align="center">Redis会隐式调用BGREWRITEAOF来重写log文件，以缩减文件大小，此配置判断log文件大小的基准值和百分比。</td>
</tr>
<tr>
<td align="center"><code>auto-aof-rewrite-min-size</code></td>
<td align="center"><strong>64mb</strong></td>
<td align="center">Redis会记录上次重写时的aof大小。假如Redis自启动至今还没有进行过重写，那么启动时aof文件的大小会被作为基准值。这个基准值会和当前的aof大小进行比较。如果当前aof大小超出所设置的增长比例，则会触发重写。如果设置auto-aof-rewrite-percentage为0，则会关闭此重写功能。</td>
</tr>
<tr>
<td align="center"><code>aof-load-truncated</code></td>
<td align="center"><strong>yes</strong></td>
<td align="center">指Redis在恢复时，会忽略最后一条可能存在问题的指令。即在aof写入时，可能存在指令写错的问题(突然断电，写了一半)，这种情况下，如果设置yes会记录日志并继续，而设置no会直接恢复失败。</td>
</tr>
<tr>
<td align="center"><code>lua-time-limit</code></td>
<td align="center"><strong>5000</strong></td>
<td align="center">lua脚本执行的最大时间，单位毫秒。redis会记个log，然后返回error。当一个脚本超过了最大时限。只有SCRIPT KILL和SHUTDOWN NOSAVE可以用。如果为0或负数表示无限执行时间</td>
</tr>
<tr>
<td align="center"><code>slowlog-log-slower-than</code></td>
<td align="center"><strong>10000</strong></td>
<td align="center">慢日志记录，单位微妙。如果操作时间超过此值,将会把command信息”记录”起来(内存,非文件)。  其中”操作时间”不包括网络IO开支,只包括请求达到server后进行”内存实施”的时间。 如果设置为”0”，则表示记录全部操作，不建议设置为0。</td>
</tr>
<tr>
<td align="center"><code>slowlog-max-len</code></td>
<td align="center"><strong>128</strong></td>
<td align="center">“慢操作日志”保留的最大条数,”记录”将会被队列化,如果超过了此长度,旧记录将会被移除。此类日志只会维持在内存中而不会写入磁盘。<br>slowlog get 5  返回最近的5条慢查询日志<br>slowlog len   返回当前已有慢查询日志的条数<br>slowlog reset  清空当前所有的慢查询日志</td>
</tr>
<tr>
<td align="center"><code>latency-monitor-threshold</code></td>
<td align="center"><strong>0</strong></td>
<td align="center">是否开启redis自身延迟监控配置，默认0是关闭监控。</td>
</tr>
<tr>
<td align="center"><code>notify-keyspace-events</code></td>
<td align="center"><strong>“”</strong></td>
<td align="center">默认空字符串，表示关闭通知</td>
</tr>
<tr>
<td align="center"><code>hash-max-ziplist-entries</code></td>
<td align="center"><strong>512</strong></td>
<td align="center">Hash在条目数量较小的时候会使用一种高效的内存数据结构编码，当超过某个临界点就会采用另一种存储方式，该临界点由下面的hash-max-ziplist-value和hash-max-ziplist-entries两个配置决定。</td>
</tr>
<tr>
<td align="center"><code>hash-max-ziplist-value</code></td>
<td align="center"><strong>64</strong></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"><code>list-max-ziplist-size</code></td>
<td align="center"><strong>-2</strong></td>
<td align="center">与Hash类似，较小的List会以一种特殊的编码方式来节省空间，只要List不超过设定的上限。</td>
</tr>
<tr>
<td align="center"><code>list-compress-depth</code></td>
<td align="center"><strong>0</strong></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"><code>set-max-intset-entries</code></td>
<td align="center"><strong>512</strong></td>
<td align="center">限制特殊编码的最大上限，特殊编码指的是缓存数据全是64位无符号整型数字构成的字符串。</td>
</tr>
<tr>
<td align="center"><code>zset-max-ziplist-entries</code></td>
<td align="center"><strong>128</strong></td>
<td align="center">有序集合也会采用特殊编码来节省空间，只要不超过上限。</td>
</tr>
<tr>
<td align="center"><code>zset-max-ziplist-value</code></td>
<td align="center"><strong>64</strong></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"><code>hll-sparse-max-bytes</code></td>
<td align="center"><strong>3000</strong></td>
<td align="center">RedisHyperLogLog是用来做基数统计的算法，HyperLogLog的优点是，在输入元素的数量或者体积非常非常大时，计算基数所需的空间总是固定并且很小的。当HyperLogLog用稀疏式表示法时所用内存超过下面的限制，就会转换成稠密式表示，为了更高的内存利用率，官方建议值为3000，不建议修改此配置项。</td>
</tr>
<tr>
<td align="center"><code>activerehashing</code></td>
<td align="center"><strong>yes</strong></td>
<td align="center">是否开启顶层数据结构的rehash功能,如果内存允许、实时性要求不高,请设置为true开启它。rehash能够很大程度上提高K-V存取的效率。</td>
</tr>
<tr>
<td align="center"><code>client-output-buffer-limit</code></td>
<td align="center"><strong>normal 0 0 0</strong></td>
<td align="center">普通client，包括monitor</td>
</tr>
<tr>
<td align="center"><code>client-output-buffer-limit</code></td>
<td align="center"><strong>slave 256mb 64mb 60</strong></td>
<td align="center">slave用来同步master数据的client</td>
</tr>
<tr>
<td align="center"><code>client-output-buffer-limit</code></td>
<td align="center"><strong>pubsub 32mb 8mb 60</strong></td>
<td align="center">Pub/Sub模式中订阅了至少一个channel或者模式的client</td>
</tr>
<tr>
<td align="center"><code>hz</code></td>
<td align="center"><strong>10</strong></td>
<td align="center">Redis server执行后台任务的频率，此值越大表示redis对”间歇性task”的执行次数越频繁(次数/秒)。”间歇性task”包括”过期集合”检测、关闭”空闲超时”的连接等,此值必须大于0且小于500。此值过小就意味着更多的cpu周期消耗,后台task被轮询的次数更频繁。此值过大意味着”内存敏感”性较差。建议采用默认值。</td>
</tr>
<tr>
<td align="center"><code>aof-rewrite-incremental-fsync</code></td>
<td align="center"><strong>yes</strong></td>
<td align="center">当一个child在重写AOF文件的时候，如果设置为true，那么这个文件会以每次32M数据的来被同步，在大量新增提交到磁盘的场景下是有用的，并且能避免高峰延迟。</td>
</tr>
<tr>
<td align="center"><code>requirepass</code></td>
<td align="center"><strong>“”</strong></td>
<td align="center">设置客户端连接后进行任何其他指定前需要使用的密码。</td>
</tr>
<tr>
<td align="center"><code>maxclients</code></td>
<td align="center"><strong>10000</strong></td>
<td align="center">最大并发连接数，默认为10000，这个跟系统本身的 open-file-limit 有关。</td>
</tr>
<tr>
<td align="center"><code>cluster-enabled</code></td>
<td align="center"><strong>no</strong></td>
<td align="center">节点开启集群选项配置</td>
</tr>
<tr>
<td align="center"><code>cluster-config-file</code></td>
<td align="center">** **</td>
<td align="center">节点的配置文件，该文件是由集群节点来创建和维护的，不能人工修改。多个实例的节点需要，建议以端口号标记配置文件。</td>
</tr>
<tr>
<td align="center"><code>cluster-node-timeout</code></td>
<td align="center">** **</td>
<td align="center">节点超时时间(单位毫秒)，超过则认为节点宕机。</td>
</tr>
<tr>
<td align="center"><code>cluster-slave-validity-factor</code></td>
<td align="center"><strong>10</strong></td>
<td align="center">如果将该项设置为0(单位秒)，不管slave节点和master节点间失联多久都会一直尝试failover（设为正数，失联大于一定时间（factor节点TimeOut），不再进行FailOver）</td>
</tr>
<tr>
<td align="center"><code>cluster-require-full-coverage</code></td>
<td align="center"><strong>yes</strong></td>
<td align="center">默认情况下，当集群检测到某个哈希槽（hash slot）没有被覆盖（没有任何节点为此服务）会停止接受查询服务，如果集群部分宕机最终会导致整个集群不可用，当哈希槽重新被全覆盖的时候会自动变为可用。如果希望哈希槽未被覆盖的集群节点继续接受服务，需要将cluster-require-full-coverage设置为no。</td>
</tr>
<tr>
<td align="center"><code>cluster-migration-barrier</code></td>
<td align="center"><strong>1</strong></td>
<td align="center">考虑一种极端情况，集群有一台主Redis和四台从Redis，从Redis全部挂掉，failover机制有可能造成集群只有主Redis而无从Redis的尴尬境况。为了保证集群的名副其实，可以规定，当从Redis少于某个数量时，拒绝执行failover。</td>
</tr>
</tbody></table>
<p>配置参照上表，接下来可以搭建集群了。</p>
]]></content>
      <categories>
        <category>redis</category>
      </categories>
      <tags>
        <tag>分布式</tag>
        <tag>redis</tag>
        <tag>cluster</tag>
        <tag>cache</tag>
        <tag>缓存</tag>
      </tags>
  </entry>
  <entry>
    <title>基于Redis Cluster的分布式缓存部署篇（三）</title>
    <url>/redis/redis-cache-deploy-20170125.html</url>
    <content><![CDATA[<p>了解Redis的配置后就开始搭建集群。redis集群建议最少6个节点，在此之前先明确几个概念。</p>
<ul>
<li>节点/集群节点 对应集群的逻辑节点，是一个进程。通常说的节点就是集群节点。</li>
<li>主备节点组/主备集群节点组 一组集群节点的集合，包括一个主节点及至少一个备节点。</li>
<li>主机/主机节点 对应一台物理主机或虚拟主机，主机节点上可以有多个集群节点（不建议）。</li>
</ul>
<a id="more"></a>

<h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><p>集群架构<br><img src="http://wx2.sinaimg.cn/mw690/0065glrAgy1fc3c9peo2aj30lr0oj14o.jpg" alt="Alt text" title="redis cluster"></p>
<h4 id="硬件参数"><a href="#硬件参数" class="headerlink" title="硬件参数"></a>硬件参数</h4><p>先准备部署redis的硬件，以下是服务器参数。</p>
<table>
<thead>
<tr>
<th align="center">参数</th>
<th align="center">值</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>CPU</code></td>
<td align="center"><strong>8 core   Intel(R) Xeon(R) CPU E7-4860 @ 2.27GHz</strong></td>
</tr>
<tr>
<td align="center"><code>内存</code></td>
<td align="center"><strong>16G</strong></td>
</tr>
<tr>
<td align="center"><code>磁盘</code></td>
<td align="center"><strong>128G</strong></td>
</tr>
<tr>
<td align="center"><code>OS</code></td>
<td align="center">**Centos7 **</td>
</tr>
</tbody></table>
<h4 id="节点规划"><a href="#节点规划" class="headerlink" title="节点规划"></a>节点规划</h4><table>
<thead>
<tr>
<th align="center">主机名</th>
<th align="center">IP地址</th>
<th align="center">端口</th>
<th align="center">备注</th>
</tr>
</thead>
<tbody><tr>
<td align="center">ma</td>
<td align="center">10.128.31.104</td>
<td align="center">7000</td>
<td align="center">主节点a</td>
</tr>
<tr>
<td align="center">mb</td>
<td align="center">10.128.31.105</td>
<td align="center">7000</td>
<td align="center">主节点b</td>
</tr>
<tr>
<td align="center">mc</td>
<td align="center">10.128.31.106</td>
<td align="center">7000</td>
<td align="center">主节点c</td>
</tr>
<tr>
<td align="center">sa</td>
<td align="center">10.128.31.107</td>
<td align="center">7001</td>
<td align="center">从节点a</td>
</tr>
<tr>
<td align="center">sb</td>
<td align="center">10.128.31.108</td>
<td align="center">7001</td>
<td align="center">从节点b</td>
</tr>
<tr>
<td align="center">sc</td>
<td align="center">10.128.31.109</td>
<td align="center">7001</td>
<td align="center">从节点c</td>
</tr>
</tbody></table>
<h4 id="Redis版本"><a href="#Redis版本" class="headerlink" title="Redis版本"></a>Redis版本</h4><p>当前redis稳定版本号3.2.6, 因此以3.2.6版本搭建集群。</p>
<h3 id="安装Redis"><a href="#安装Redis" class="headerlink" title="安装Redis"></a>安装Redis</h3><h4 id="下载Redis"><a href="#下载Redis" class="headerlink" title="下载Redis"></a>下载Redis</h4><p>在用户根目录下创建目录并下载redis3.2.6</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir ~/redis</span><br><span class="line"><span class="built_in">cd</span> ~/redis</span><br><span class="line"></span><br><span class="line">wget http://download.redis.io/releases/redis-3.2.6.tar.gz</span><br></pre></td></tr></table></figure>
<h4 id="编译Redis"><a href="#编译Redis" class="headerlink" title="编译Redis"></a>编译Redis</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar –zxvf redis-3.2.6.tar.gz</span><br><span class="line"><span class="built_in">cd</span> redis-3.2.6</span><br><span class="line"></span><br><span class="line">make</span><br></pre></td></tr></table></figure>
<h4 id="安装Redis-1"><a href="#安装Redis-1" class="headerlink" title="安装Redis"></a>安装Redis</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make install</span><br></pre></td></tr></table></figure>
<p>注：在每台主机都需要安装Redis Server。</p>
<h4 id="安装集群工具"><a href="#安装集群工具" class="headerlink" title="安装集群工具"></a>安装集群工具</h4><p>安装epel源</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install epel-release</span><br></pre></td></tr></table></figure>
<p>安装ruby环境，部署工具是使用ruby编写的。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install rubygems-devel</span><br></pre></td></tr></table></figure>
<p>更换ruby国内安装源</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gem sources --add https://gems.ruby-china.org/ --remove https://rubygems.org/</span><br><span class="line">gem sources –l           </span><br></pre></td></tr></table></figure>
<p>安装ruby redis</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gem install redis</span><br></pre></td></tr></table></figure>
<p>拷贝部署脚本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cp redis-3.2.6/src/redis-trib.rb /usr/<span class="built_in">local</span>/bin/ </span><br></pre></td></tr></table></figure>
<p>注：只需在一台主机上安装部署脚本。</p>
<h3 id="集群配置"><a href="#集群配置" class="headerlink" title="集群配置"></a>集群配置</h3><h4 id="主节点配置"><a href="#主节点配置" class="headerlink" title="主节点配置"></a>主节点配置</h4><p>修改redis.conf配置文件，修改如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">port    7000</span><br><span class="line"><span class="built_in">bind</span>    0.0.0.0</span><br><span class="line">daemonize   yes</span><br><span class="line">logfile    <span class="string">&quot;logs/node-7000.log&quot;</span></span><br><span class="line">cluster-enabled   yes</span><br><span class="line">cluster-config-file   nodes-7000.conf</span><br><span class="line">cluster-node-timeout   5000</span><br><span class="line">cluster-slave-validity-factor   10</span><br><span class="line">appendonly   yes</span><br><span class="line">dir   ./data</span><br><span class="line">dbfilename   dump-7000.rdb</span><br><span class="line">appendfilename   <span class="string">&quot;appendonly-7000.aof&quot;</span></span><br></pre></td></tr></table></figure>
<h4 id="从节点配置"><a href="#从节点配置" class="headerlink" title="从节点配置"></a>从节点配置</h4><p>修改redis.conf配置文件，修改如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">port    7001</span><br><span class="line"><span class="built_in">bind</span>    0.0.0.0</span><br><span class="line">daemonize  yes</span><br><span class="line">logfile   <span class="string">&quot;logs/node-7001.log&quot;</span></span><br><span class="line">cluster-enabled  yes</span><br><span class="line">cluster-config-file   nodes-7001.conf</span><br><span class="line">cluster-node-timeout   5000</span><br><span class="line">cluster-slave-validity-factor    10</span><br><span class="line">appendonly  yes</span><br><span class="line">dir   ./data</span><br><span class="line">dbfilename    dump-7001.rdb</span><br><span class="line">appendfilename    <span class="string">&quot;appendonly-7001.aof&quot;</span></span><br></pre></td></tr></table></figure>
<h4 id="启动节点"><a href="#启动节点" class="headerlink" title="启动节点"></a>启动节点</h4><p>在每台主机上启动节点服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis-server redis.conf    </span><br></pre></td></tr></table></figure>
<h4 id="主节点加入集群"><a href="#主节点加入集群" class="headerlink" title="主节点加入集群"></a>主节点加入集群</h4><p>使用部署脚本将节点加入集群。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis-trib.rb  create  --replicas  0  10.128.31.104:7000  10.128.31.105:7000  10.128.31.106:7000</span><br></pre></td></tr></table></figure>
<p>命令说明：<br><code>redis-trib.rb  create  --replicas  &lt;int&gt;  &lt;ip:port&gt;  &lt;ip:port&gt;  &lt;ip:port&gt;  &lt;ip:port&gt;</code><br>其中replicas后的数字表示配置slave个数；集群新增的节点按照顺序，前面的为master节点，后面的为slave节点。通常节点个数是偶数，便于对等分master和slave节点。<br>如果replicas参数后是0，表示新增的节点全部是master，没有slave节点。</p>
<h4 id="从节点加入集群"><a href="#从节点加入集群" class="headerlink" title="从节点加入集群"></a>从节点加入集群</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis-trib.rb add-node  –slave --master-id 9294dfb4e38ada705ae14d4b2b7cb6178bead23c 10.128.31.107:7001 10.128.31.104:7000   </span><br></pre></td></tr></table></figure>
<p>命令说明：<br><code>redis-trib.rb  add-node  --slave  --master-id  &lt;arg&gt;  ip:port</code><br>注意：(9294dfb4e38ada705ae14d4b2b7cb6178bead23c)是主节点的node id</p>
<h4 id="补充说明"><a href="#补充说明" class="headerlink" title="补充说明"></a>补充说明</h4><p>使用以下命令一次性添加主备节点，缺点在于不能指定主备关系，用脚本自动匹配。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis-trib.rb create --replicas 1 10.128.31.104:7000 10.128.31.105:7000 10.128.31.106:7000 10.128.31.107:7001  10.128.31.108:7001  10.128.31.109:7001</span><br></pre></td></tr></table></figure>
<h3 id="验证集群"><a href="#验证集群" class="headerlink" title="验证集群"></a>验证集群</h3><h4 id="查看集群节点状态"><a href="#查看集群节点状态" class="headerlink" title="查看集群节点状态"></a>查看集群节点状态</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis-cli -h 10.128.31.104 -p 7000 cluster nodes</span><br></pre></td></tr></table></figure>
<h4 id="查看集群节点slot分布"><a href="#查看集群节点slot分布" class="headerlink" title="查看集群节点slot分布"></a>查看集群节点slot分布</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis-cli -h 10.128.31.104 -p 7000 cluster slots</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>redis</category>
      </categories>
      <tags>
        <tag>分布式</tag>
        <tag>redis</tag>
        <tag>cluster</tag>
        <tag>cache</tag>
        <tag>缓存</tag>
      </tags>
  </entry>
  <entry>
    <title>基于Redis Cluster的分布式缓存扩容篇（六）</title>
    <url>/redis/redis-cache-expand-20170210.html</url>
    <content><![CDATA[<p>redis cluster集群提供了扩容功能，以解决在线动态扩容和数据迁移等问题。Redis 集群没有并使用传统的一致性哈希来分配数据，而是采用另外一种叫做哈希槽 (hash slot)的方式来分配的。redis cluster 默认分配了 16384 个slot，当我们set一个key 时，会用CRC16算法来取模得到所属的slot，然后将这个key 分到哈希槽区间的节点上，具体算法就是：<code>CRC16(key) % 16384</code>。</p>
<p>注意的是：必须要3个以后的主节点，否则在创建集群时会失败，我们在后续会实践到。</p>
<a id="more"></a>

<h3 id="集群节点"><a href="#集群节点" class="headerlink" title="集群节点"></a>集群节点</h3><p>请参考<a href="https://www.jerrylou.me/redis/redis-cache-deploy-20170125.html">基于Redis Cluster的分布式缓存部署篇（三）</a></p>
<table>
<thead>
<tr>
<th align="center">主机名</th>
<th align="center">主机地址</th>
<th align="center">端口</th>
<th align="center">备注</th>
</tr>
</thead>
<tbody><tr>
<td align="center">nodea-7000</td>
<td align="center">10.128.31.104</td>
<td align="center">7000</td>
<td align="center">主机A7000端口节点</td>
</tr>
<tr>
<td align="center">nodea-7001</td>
<td align="center">10.128.31.104</td>
<td align="center">7001</td>
<td align="center">主机A7001端口节点</td>
</tr>
<tr>
<td align="center">nodeb-7000</td>
<td align="center">10.128.31.108</td>
<td align="center">7000</td>
<td align="center">主机B7000端口节点</td>
</tr>
<tr>
<td align="center">nodeb-7001</td>
<td align="center">10.128.31.108</td>
<td align="center">7001</td>
<td align="center">主机B7001端口节点</td>
</tr>
<tr>
<td align="center">nodec-7000</td>
<td align="center">10.128.31.109</td>
<td align="center">7000</td>
<td align="center">主机C7000端口节点</td>
</tr>
<tr>
<td align="center">nodec-7001</td>
<td align="center">10.128.31.109</td>
<td align="center">7001</td>
<td align="center">主机C7001端口节点</td>
</tr>
</tbody></table>
<h3 id="新增集群节点"><a href="#新增集群节点" class="headerlink" title="新增集群节点"></a>新增集群节点</h3><table>
<thead>
<tr>
<th align="center">主机名</th>
<th align="center">主机地址</th>
<th align="center">端口</th>
<th align="center">备注</th>
</tr>
</thead>
<tbody><tr>
<td align="center">noded-7000</td>
<td align="center">10.128.31.103</td>
<td align="center">7000</td>
<td align="center">主机D7000端口节点</td>
</tr>
<tr>
<td align="center">noded-7001</td>
<td align="center">10.128.31.105</td>
<td align="center">7001</td>
<td align="center">主机E7001端口节点</td>
</tr>
</tbody></table>
<h3 id="扩容准备"><a href="#扩容准备" class="headerlink" title="扩容准备"></a>扩容准备</h3><h4 id="启动新节点"><a href="#启动新节点" class="headerlink" title="启动新节点"></a>启动新节点</h4><p>启动命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis-server  ~/redis/etc/redis-7000.conf</span><br><span class="line">redis-server  ~/redis/etc/redis-7001.conf</span><br></pre></td></tr></table></figure>
<h4 id="重新规划槽位"><a href="#重新规划槽位" class="headerlink" title="重新规划槽位"></a>重新规划槽位</h4><p> 原集群槽位</p>
<table>
<thead>
<tr>
<th align="center">节点</th>
<th align="center">槽位号</th>
<th align="center">备注</th>
</tr>
</thead>
<tbody><tr>
<td align="center">nodea</td>
<td align="center">0-5460</td>
<td align="center">节点A槽位段</td>
</tr>
<tr>
<td align="center">nodeb</td>
<td align="center">5461-10922</td>
<td align="center">节点B槽位段</td>
</tr>
<tr>
<td align="center">nodec</td>
<td align="center">10923-16383</td>
<td align="center">节点C槽位段</td>
</tr>
</tbody></table>
<p>新集群槽位，新增一组节点，按平均分配策略各组节点槽16384/4=4096</p>
<table>
<thead>
<tr>
<th align="center">节点</th>
<th align="center">槽位号</th>
<th align="center">备注</th>
</tr>
</thead>
<tbody><tr>
<td align="center">nodea</td>
<td align="center">0-4095</td>
<td align="center">节点A槽位段</td>
</tr>
<tr>
<td align="center">nodeb</td>
<td align="center">4096-8491</td>
<td align="center">节点B槽位段</td>
</tr>
<tr>
<td align="center">nodec</td>
<td align="center">8492-12287</td>
<td align="center">节点C槽位段</td>
</tr>
<tr>
<td align="center">nodec</td>
<td align="center">12288-16383</td>
<td align="center">节点D槽位段</td>
</tr>
</tbody></table>
<p>上面的调整方案槽位移动多，可以将每组节点的1365槽分配给新增节点</p>
<h3 id="集群扩容"><a href="#集群扩容" class="headerlink" title="集群扩容"></a>集群扩容</h3><h4 id="添加Master节点"><a href="#添加Master节点" class="headerlink" title="添加Master节点"></a>添加Master节点</h4><p>添加节点，需要知道节点IP和port，通常情况是同时添加两个节点。使用redis-trib.rb add-node分别将两个新结点添加到集群中，按照顺序，前一个节点作为Master，后一个作为其Slave。执行命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis-trib.rb   add-node 10.128.31.103:7000   10.128.31.104:7000</span><br></pre></td></tr></table></figure>
<p><img src="http://wx2.sinaimg.cn/mw690/0065glrAgy1fcyfrjtu11j30o10i3dp4.jpg" alt="Alt text"></p>
<p>查看Mater节点NodeId</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis-cli  -h 10.128.31.104  -p  7000 cluster nodes</span><br></pre></td></tr></table></figure>
<p><img src="http://wx3.sinaimg.cn/mw690/0065glrAgy1fcyfrnup8gj30o103awhn.jpg" alt="Alt text"></p>
<h4 id="添加Slave节点"><a href="#添加Slave节点" class="headerlink" title="添加Slave节点"></a>添加Slave节点</h4><p>集群节点是一主多备，添加master节点，再给Master添加Salve，不能挂起或关闭原有节点。添加从节点的命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis-trib.rb  add-node  --slave --master-id 2aeade86ccf4027a56df26d275db91cd3c689fe9 </span><br></pre></td></tr></table></figure>
<p><img src="http://wx3.sinaimg.cn/mw690/0065glrAgy1fcyfrojg7zj30o10bs79o.jpg" alt="Alt text"></p>
<h4 id="迁移槽数据"><a href="#迁移槽数据" class="headerlink" title="迁移槽数据"></a>迁移槽数据</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis-trib.rb  reshard  10.128.31.104:7000</span><br></pre></td></tr></table></figure>
<p>执行命令询问需要迁移的槽位数量，打印一份期望的执行结果，确认后输入4096<br><img src="http://wx1.sinaimg.cn/mw690/0065glrAgy1fcyfrp6klxj30jx0l2akq.jpg" alt="Alt text"></p>
<p>输入接收槽位的集群节点ID，也就是10.128.31.103:7000的节点node id<br><img src="http://wx1.sinaimg.cn/mw690/0065glrAgy1fcyfrsl5l6j30o106v775.jpg" alt="Alt text"></p>
<p>全部节点的迁移槽位，则输入all，最终每个节点迁移迁移一部分槽<br><img src="http://wx3.sinaimg.cn/mw690/0065glrAgy1fcyfrszcypj30o104pwg3.jpg" alt="Alt text"></p>
<h4 id="新槽位分布"><a href="#新槽位分布" class="headerlink" title="新槽位分布"></a>新槽位分布</h4><table>
<thead>
<tr>
<th align="center">节点</th>
<th align="center">槽位号</th>
<th align="center">备注</th>
</tr>
</thead>
<tbody><tr>
<td align="center">nodea</td>
<td align="center">0-4095</td>
<td align="center">节点A槽位段</td>
</tr>
<tr>
<td align="center">nodeb</td>
<td align="center">4096-8491</td>
<td align="center">节点B槽位段</td>
</tr>
<tr>
<td align="center">nodec</td>
<td align="center">8492-12287</td>
<td align="center">节点C槽位段</td>
</tr>
<tr>
<td align="center">nodec</td>
<td align="center">12288-16383</td>
<td align="center">节点D槽位段</td>
</tr>
</tbody></table>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol>
<li>迁移过程中允许slot继续有操作，redis保证了迁移过程中slot的正常访问。</li>
<li>集群扩容前后，slot总数保存不变，每个集群中的节点持有总slot的一部分，有效的保证了数据的完整性。</li>
</ol>
]]></content>
      <categories>
        <category>redis</category>
      </categories>
      <tags>
        <tag>分布式</tag>
        <tag>redis</tag>
        <tag>cluster</tag>
        <tag>cache</tag>
        <tag>缓存</tag>
      </tags>
  </entry>
  <entry>
    <title>基于Redis Cluster的分布式缓存性能篇（五）</title>
    <url>/redis/redis-cache-performance-20170209.html</url>
    <content><![CDATA[<p>redis良好的性能是做缓存的最佳选择之一，其自带的<a href="https://redis.io/topics/benchmarks">benchmarks</a>性能测试工具的数据也说明。但Cluster集群，不同业务场景下的性能有什么不同吗？耳听为虚，眼见为实，让我们来测试下吧。</p>
<a id="more"></a>

<h3 id="集群节点"><a href="#集群节点" class="headerlink" title="集群节点"></a>集群节点</h3><p>请参考<a href="https://www.jerrylou.me/redis/redis-cache-deploy-20170125.html">基于Redis Cluster的分布式缓存部署篇（三）</a></p>
<table>
<thead>
<tr>
<th align="center">主机名</th>
<th align="center">主机地址</th>
<th align="center">端口</th>
<th align="center">备注</th>
</tr>
</thead>
<tbody><tr>
<td align="center">nodea-7000</td>
<td align="center">10.128.31.104</td>
<td align="center">7000</td>
<td align="center">主机A7000端口节点</td>
</tr>
<tr>
<td align="center">nodea-7001</td>
<td align="center">10.128.31.104</td>
<td align="center">7001</td>
<td align="center">主机A7001端口节点</td>
</tr>
<tr>
<td align="center">nodeb-7000</td>
<td align="center">10.128.31.108</td>
<td align="center">7000</td>
<td align="center">主机B7000端口节点</td>
</tr>
<tr>
<td align="center">nodeb-7001</td>
<td align="center">10.128.31.108</td>
<td align="center">7001</td>
<td align="center">主机B7001端口节点</td>
</tr>
<tr>
<td align="center">nodec-7000</td>
<td align="center">10.128.31.109</td>
<td align="center">7000</td>
<td align="center">主机C7000端口节点</td>
</tr>
<tr>
<td align="center">nodec-7001</td>
<td align="center">10.128.31.109</td>
<td align="center">7001</td>
<td align="center">主机C7001端口节点</td>
</tr>
</tbody></table>
<h3 id="测试脚本"><a href="#测试脚本" class="headerlink" title="测试脚本"></a>测试脚本</h3><p>java编写的测试程序</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jcache;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jcache.clients.jcachecluster.base.JCacheClient;</span><br><span class="line"><span class="keyword">import</span> jcache.clients.jcachecluster.common.PropertiesConst;</span><br><span class="line"><span class="keyword">import</span> jcache.clients.jcachecluster.factory.CacheFactorySingle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.BrokenBarrierException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CyclicBarrier;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicLong;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JcacheClusterTPS</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String HostAndPort =</span><br><span class="line">                    <span class="string">&quot;10.128.31.104:7000;&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;10.128.31.104:7001;&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;10.128.31.105:7000;&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;10.128.31.105:7001;&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;10.128.31.109:7000;&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;10.128.31.109:7001&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> JCacheClient cluster = getCluster();</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> nThreads = args.length &gt;= <span class="number">1</span> ? Integer.parseInt(args[<span class="number">0</span>]) : <span class="number">8</span>;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> sendNumOnceTime = args.length &gt;= <span class="number">2</span> ? Integer.parseInt(args[<span class="number">1</span>]) : <span class="number">100</span>;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> keySize = args.length &gt;= <span class="number">3</span> ? Integer.parseInt(args[<span class="number">2</span>]) : <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> messageSize = args.length &gt;= <span class="number">4</span> ? Integer.parseInt(args[<span class="number">3</span>]) : <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> times = args.length &gt;= <span class="number">5</span> ? Integer.parseInt(args[<span class="number">4</span>]) : <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> setOrGet = args.length &gt;= <span class="number">6</span> ? Integer.parseInt(args[<span class="number">5</span>]) : <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">final</span> String keyParam = args.length &gt;= <span class="number">7</span> ? args[<span class="number">6</span>] : <span class="string">&quot;0&quot;</span>;</span><br><span class="line">        <span class="keyword">final</span> AtomicLong atomicSuccessNums = <span class="keyword">new</span> AtomicLong(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">final</span> List&lt;Long&gt; tpsList = <span class="keyword">new</span> ArrayList&lt;Long&gt;();</span><br><span class="line">        <span class="keyword">final</span> String msg = buildMessage(messageSize);</span><br><span class="line">        <span class="keyword">final</span> List&lt;String&gt; keys = getKeys(keySize, nThreads * sendNumOnceTime, times);</span><br><span class="line">        doRun(cluster, tpsList, atomicSuccessNums, nThreads, times, sendNumOnceTime, keys, msg, keySize, messageSize, setOrGet, keyParam);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> JCacheClient <span class="title">getCluster</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">        properties.put(PropertiesConst.Keys.HOST_AND_PORT, HostAndPort);</span><br><span class="line">        properties.put(PropertiesConst.Keys.AUTH_KEY, <span class="string">&quot;13F455A8E9DC2BBEBE1BD906C82B3C0A1&quot;</span>);</span><br><span class="line">        properties.put(PropertiesConst.Keys.NAMESPACE, <span class="string">&quot;weidian-1&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> CacheFactorySingle.createJCacheClient(properties);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">doRun</span><span class="params">(<span class="keyword">final</span> JCacheClient cluster,</span></span></span><br><span class="line"><span class="function"><span class="params">                              <span class="keyword">final</span> List&lt;Long&gt; tpsList, <span class="keyword">final</span> AtomicLong atomicSuccessNums,</span></span></span><br><span class="line"><span class="function"><span class="params">                              <span class="keyword">final</span> <span class="keyword">int</span> nThreads, <span class="keyword">final</span> <span class="keyword">int</span> times, <span class="keyword">final</span> <span class="keyword">int</span> sendNumOnceTime,</span></span></span><br><span class="line"><span class="function"><span class="params">                              <span class="keyword">final</span> List&lt;String&gt; keys, <span class="keyword">final</span> String msg, <span class="keyword">final</span> <span class="keyword">int</span> keySize, <span class="keyword">final</span> <span class="keyword">int</span> messageSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                              <span class="keyword">final</span> <span class="keyword">int</span> setOrGet, <span class="keyword">final</span> String keyParam)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> AtomicLong atomicFailNum = <span class="keyword">new</span> AtomicLong(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> time = <span class="number">0</span>; time &lt; times; time++) &#123;</span><br><span class="line">            <span class="keyword">final</span> Object object = <span class="keyword">new</span> Object();</span><br><span class="line">            <span class="keyword">synchronized</span> (object) &#123;</span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">int</span> t = time + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">final</span> ExecutorService exec = Executors.newCachedThreadPool();</span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">long</span> startCurrentTimeMillis = System.currentTimeMillis();</span><br><span class="line">                <span class="keyword">final</span> CyclicBarrier barrier = <span class="keyword">new</span> CyclicBarrier(nThreads, <span class="keyword">new</span> Runnable() &#123; <span class="comment">// 设置几个线程为一组,当这一组的几个线程都执行完成后,然后执行住线程的</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                        <span class="keyword">synchronized</span> (object) &#123;</span><br><span class="line">                            <span class="keyword">long</span> endCurrentTimeMillis = System.currentTimeMillis();</span><br><span class="line">                            <span class="keyword">long</span> sendNums = nThreads * sendNumOnceTime;</span><br><span class="line">                            <span class="keyword">long</span> escapedTimeMillis = endCurrentTimeMillis - startCurrentTimeMillis;</span><br><span class="line">                            <span class="keyword">long</span> tps = sendNums * <span class="number">1000</span> / escapedTimeMillis;</span><br><span class="line">                            String type = <span class="string">&quot;set&quot;</span>;</span><br><span class="line">                            <span class="keyword">if</span> (setOrGet != <span class="number">0</span>) &#123;</span><br><span class="line">                                type = <span class="string">&quot;get&quot;</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            tpsList.add(tps);</span><br><span class="line">                            System.out.printf(<span class="string">&quot;第 %d 次, 发送完成, 用时 : %d ms, &quot;</span> + <span class="string">&quot;线程大小 : %d , &quot;</span> + <span class="string">&quot;key大小 : %d , &quot;</span> + <span class="string">&quot;msg大小 : %d , &quot;</span> + <span class="string">&quot;发送数量 : %d , &quot;</span> + <span class="string">&quot;成功数量 : %d , &quot;</span> + <span class="string">&quot;失败数量 : %d , &quot;</span> + <span class="string">&quot;统计方式 : %s , &quot;</span> + <span class="string">&quot;TPS : %d !!!&quot;</span>,</span><br><span class="line">                                    t, escapedTimeMillis, nThreads, keySize, messageSize, sendNums, atomicSuccessNums.intValue(), atomicFailNum.intValue(), type, tps);</span><br><span class="line">                            exec.shutdown();</span><br><span class="line">                            object.notify();</span><br><span class="line">                            System.out.println();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nThreads; i++) &#123;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">final</span> String finalI = <span class="string">&quot;i&quot;</span> + i;</span><br><span class="line">                    exec.execute(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                            <span class="keyword">try</span> &#123;</span><br><span class="line">                                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; sendNumOnceTime; j++) &#123;</span><br><span class="line">                                    <span class="keyword">if</span> (setOrGet == <span class="number">0</span>) &#123;</span><br><span class="line">                                        String key = <span class="string">&quot;ke&quot;</span> + keyParam + finalI + <span class="string">&quot;j&quot;</span> + j;</span><br><span class="line">                                        <span class="keyword">try</span> &#123;</span><br><span class="line">                                            String resp = cluster.set(key, msg);</span><br><span class="line">                                            <span class="keyword">if</span> (!<span class="string">&quot;OK&quot;</span>.equals(resp)) &#123;</span><br><span class="line">                                                atomicFailNum.incrementAndGet();</span><br><span class="line">                                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                                atomicSuccessNums.incrementAndGet();</span><br><span class="line">                                            &#125;</span><br><span class="line">                                        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                                            atomicFailNum.incrementAndGet();</span><br><span class="line">                                        &#125;</span><br><span class="line">                                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                        cluster.get(keys.get(atomicSuccessNums.intValue()));</span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125;</span><br><span class="line">                                barrier.await();</span><br><span class="line">                            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                                <span class="keyword">try</span> &#123;</span><br><span class="line">                                    barrier.await();</span><br><span class="line">                                &#125; <span class="keyword">catch</span> (InterruptedException e1) &#123;</span><br><span class="line">                                    e1.printStackTrace();</span><br><span class="line">                                &#125; <span class="keyword">catch</span> (BrokenBarrierException e1) &#123;</span><br><span class="line">                                    e1.printStackTrace();</span><br><span class="line">                                &#125;</span><br><span class="line">                                e.printStackTrace();</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    object.wait();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (Long tps : tpsList) &#123;</span><br><span class="line">            sum += tps;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.printf(<span class="string">&quot;全部发送完成, 平均TPS : %d !!!&quot;</span>, sum / tpsList.size());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">buildMessage</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> messageSize)</span> </span>&#123;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; messageSize; i += <span class="number">8</span>) &#123;</span><br><span class="line">            sb.append(<span class="string">&quot;hello baby&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">getKeys</span><span class="params">(<span class="keyword">int</span> keySize, <span class="keyword">int</span> keys, <span class="keyword">int</span> times)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;正在生成Key&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;</span>);</span><br><span class="line">        List&lt;String&gt; keysList = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"><span class="comment">//        for (int i = 0; i &lt; keys * times; i++) &#123;</span></span><br><span class="line"><span class="comment">//            keysList.add(getUId(keySize, i));</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        System.out.println(<span class="string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;生成成功Key&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> keysList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">getUId</span><span class="params">(<span class="keyword">int</span> keySize, <span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">&quot;%0&quot;</span> + keySize + <span class="string">&quot;d&quot;</span>, i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">getUUId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> UUID.randomUUID().toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>用例执行命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -cp jedis-2.9.0.jar:commons-pool2-2.3.jar: RedisClusterDataCorrect 100 10000 10 10 1 0</span><br></pre></td></tr></table></figure>
<p>用例参数说明</p>
<ul>
<li>第一个参数是线程数量</li>
<li>第二个参数是每个线程执行操作次数</li>
<li>第三个参数是key的大小（字节）</li>
<li>第四个参数是val的大小（字节）</li>
<li>第五个参数是运行次数</li>
<li>第六个参数是操作类型，0标示set，1标示get</li>
</ul>
<h3 id="场景测试"><a href="#场景测试" class="headerlink" title="场景测试"></a>场景测试</h3><h4 id="客户端线程数量"><a href="#客户端线程数量" class="headerlink" title="客户端线程数量"></a>客户端线程数量</h4><p>分别设置Key和Value大小固定为10个字节，写操作1000000次，线程数逐步增加，统计每次发送数据的TPS，如下:</p>
<table>
<thead>
<tr>
<th align="center">序号</th>
<th align="center">Key（字节）</th>
<th align="center">Value（字节）</th>
<th align="center">执行次数</th>
<th align="center">客户端线程数</th>
<th align="center">集群TPS</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">10</td>
<td align="center">10</td>
<td align="center">1000000</td>
<td align="center">5</td>
<td align="center">9704</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">10</td>
<td align="center">10</td>
<td align="center">1000000</td>
<td align="center">10</td>
<td align="center">19534</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">10</td>
<td align="center">10</td>
<td align="center">1000000</td>
<td align="center">20</td>
<td align="center">36406</td>
</tr>
<tr>
<td align="center">4</td>
<td align="center">10</td>
<td align="center">10</td>
<td align="center">1000000</td>
<td align="center">50</td>
<td align="center">42634</td>
</tr>
<tr>
<td align="center">5</td>
<td align="center">10</td>
<td align="center">10</td>
<td align="center">1000000</td>
<td align="center">100</td>
<td align="center">43050</td>
</tr>
<tr>
<td align="center">6</td>
<td align="center">10</td>
<td align="center">10</td>
<td align="center">1000000</td>
<td align="center">200</td>
<td align="center">44086</td>
</tr>
<tr>
<td align="center">7</td>
<td align="center">10</td>
<td align="center">10</td>
<td align="center">1000000</td>
<td align="center">500</td>
<td align="center">42902</td>
</tr>
<tr>
<td align="center">8</td>
<td align="center">10</td>
<td align="center">10</td>
<td align="center">1000000</td>
<td align="center">1000</td>
<td align="center">43046</td>
</tr>
<tr>
<td align="center">9</td>
<td align="center">10</td>
<td align="center">10</td>
<td align="center">1000000</td>
<td align="center">2000</td>
<td align="center">42542</td>
</tr>
<tr>
<td align="center">10</td>
<td align="center">10</td>
<td align="center">10</td>
<td align="center">1000000</td>
<td align="center">5000</td>
<td align="center">42858</td>
</tr>
</tbody></table>
<p><img src="http://wx3.sinaimg.cn/mw690/0065glrAgy1fcxyawec37j30kw0ckwf6.jpg" alt="Alt text" title="测试结果"></p>
<h4 id="缓存Value长度"><a href="#缓存Value长度" class="headerlink" title="缓存Value长度"></a>缓存Value长度</h4><p>分别设置Key固定10个字节，客户端线程数固定100，进行写操作1000000次，缓存的value长度逐步增加，统计每次发送数据的TPS，如下:</p>
<table>
<thead>
<tr>
<th align="center">序号</th>
<th align="center">Key（字节）</th>
<th align="center">Value（字节）</th>
<th align="center">执行次数</th>
<th align="center">客户端线程数</th>
<th align="center">集群TPS</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">10</td>
<td align="center">10</td>
<td align="center">1000000</td>
<td align="center">100</td>
<td align="center">47777</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">10</td>
<td align="center">20</td>
<td align="center">1000000</td>
<td align="center">100</td>
<td align="center">46213</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">10</td>
<td align="center">50</td>
<td align="center">1000000</td>
<td align="center">100</td>
<td align="center">45209</td>
</tr>
<tr>
<td align="center">4</td>
<td align="center">10</td>
<td align="center">100</td>
<td align="center">1000000</td>
<td align="center">100</td>
<td align="center">43539</td>
</tr>
<tr>
<td align="center">5</td>
<td align="center">10</td>
<td align="center">200</td>
<td align="center">1000000</td>
<td align="center">100</td>
<td align="center">40692</td>
</tr>
<tr>
<td align="center">6</td>
<td align="center">10</td>
<td align="center">500</td>
<td align="center">1000000</td>
<td align="center">100</td>
<td align="center">32023</td>
</tr>
<tr>
<td align="center">7</td>
<td align="center">10</td>
<td align="center">1000</td>
<td align="center">1000000</td>
<td align="center">100</td>
<td align="center">30835</td>
</tr>
<tr>
<td align="center">8</td>
<td align="center">10</td>
<td align="center">2000</td>
<td align="center">1000000</td>
<td align="center">100</td>
<td align="center">15550</td>
</tr>
<tr>
<td align="center">9</td>
<td align="center">10</td>
<td align="center">5000</td>
<td align="center">1000000</td>
<td align="center">100</td>
<td align="center">13956</td>
</tr>
<tr>
<td align="center">10</td>
<td align="center">10</td>
<td align="center">10000</td>
<td align="center">1000000</td>
<td align="center">100</td>
<td align="center">9608</td>
</tr>
</tbody></table>
<p><img src="http://wx1.sinaimg.cn/mw690/0065glrAgy1fcxyawt2q4j30kw0ckq3i.jpg" alt="Alt text" title="测试结果"></p>
<h4 id="读取数据性能"><a href="#读取数据性能" class="headerlink" title="读取数据性能"></a>读取数据性能</h4><p>客户端读取缓存数据，影响TPS的因素主要就是key的长度。因此只需要保持缓存value固定10个字节，设置客户端线程数为100，在逐步增加缓存Key大小的同时，客户端多线程读取当前测试用例的相同key，如下:</p>
<table>
<thead>
<tr>
<th align="center">序号</th>
<th align="center">Key（字节）</th>
<th align="center">Value（字节）</th>
<th align="center">执行次数</th>
<th align="center">客户端线程数</th>
<th align="center">集群TPS</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">10</td>
<td align="center">10</td>
<td align="center">1000000</td>
<td align="center">100</td>
<td align="center">14468</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">20</td>
<td align="center">10</td>
<td align="center">1000000</td>
<td align="center">100</td>
<td align="center">14753</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">30</td>
<td align="center">10</td>
<td align="center">1000000</td>
<td align="center">100</td>
<td align="center">15874</td>
</tr>
<tr>
<td align="center">4</td>
<td align="center">40</td>
<td align="center">10</td>
<td align="center">1000000</td>
<td align="center">100</td>
<td align="center">14588</td>
</tr>
<tr>
<td align="center">5</td>
<td align="center">50</td>
<td align="center">10</td>
<td align="center">1000000</td>
<td align="center">100</td>
<td align="center">16880</td>
</tr>
<tr>
<td align="center">6</td>
<td align="center">60</td>
<td align="center">10</td>
<td align="center">1000000</td>
<td align="center">100</td>
<td align="center">16283</td>
</tr>
<tr>
<td align="center">7</td>
<td align="center">100</td>
<td align="center">10</td>
<td align="center">1000000</td>
<td align="center">100</td>
<td align="center">14543</td>
</tr>
<tr>
<td align="center">8</td>
<td align="center">200</td>
<td align="center">10</td>
<td align="center">1000000</td>
<td align="center">100</td>
<td align="center">13992</td>
</tr>
<tr>
<td align="center">9</td>
<td align="center">500</td>
<td align="center">10</td>
<td align="center">1000000</td>
<td align="center">100</td>
<td align="center">13283</td>
</tr>
<tr>
<td align="center">10</td>
<td align="center">1000</td>
<td align="center">10</td>
<td align="center">1000000</td>
<td align="center">100</td>
<td align="center">12062</td>
</tr>
</tbody></table>
<p><img src="http://wx2.sinaimg.cn/mw690/0065glrAgy1fcxyax5arxj30kw0ck3z4.jpg" alt="Alt text" title="测试结果"></p>
<h4 id="Swap性能开启"><a href="#Swap性能开启" class="headerlink" title="Swap性能开启"></a>Swap性能开启</h4><p>设置并发300线程，每个线程执行20972次，每个key设置10字节，每个value设置512字节，如下：</p>
<p><img src="http://wx4.sinaimg.cn/mw690/0065glrAgy1fcxyay58wbj30o107zqb8.jpg" alt="Alt text" title="测试结果"></p>
<h4 id="Swap性能关闭"><a href="#Swap性能关闭" class="headerlink" title="Swap性能关闭"></a>Swap性能关闭</h4><p>设置并发300线程，每个线程执行20972次，每个key设置10字节，每个value设置512字节，如下：</p>
<p><img src="http://wx2.sinaimg.cn/mw690/0065glrAgy1fcxyaytbu4j30o104ogqf.jpg" alt="Alt text" title="测试结果"></p>
<h4 id="持久化策略性能"><a href="#持久化策略性能" class="headerlink" title="持久化策略性能"></a>持久化策略性能</h4><h5 id="everysec策略"><a href="#everysec策略" class="headerlink" title="everysec策略"></a>everysec策略</h5><p><img src="http://wx3.sinaimg.cn/mw690/0065glrAgy1fcxyb319z7j30o103kjul.jpg" alt="Alt text" title="测试结果"><br>平均的TPS是22855。</p>
<h5 id="always策略"><a href="#always策略" class="headerlink" title="always策略"></a>always策略</h5><p><img src="http://wx1.sinaimg.cn/mw690/0065glrAgy1fcxyb3ztcej30o103541e.jpg" alt="Alt text" title="测试结果"><br>平均的TPS是11604</p>
<h5 id="no策略"><a href="#no策略" class="headerlink" title="no策略"></a>no策略</h5><p><img src="http://wx4.sinaimg.cn/mw690/0065glrAgy1fcxyb4706hj30o103e0vs.jpg" alt="Alt text" title="测试结果"><br>平均的TPS是27383。注意：通常情况都不会配置“no”持久化策略。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><h4 id="读写性能"><a href="#读写性能" class="headerlink" title="读写性能"></a>读写性能</h4><ol>
<li>在一定范围内，提高客户端线程数可以提高集群写数据的性能，超过范围再提供线程数则会导致集群写数据性能急速下降。</li>
<li>缓存Value长度对redis写数据性能影响很大,它们呈现相反的变化趋势；增加Value长度则集群写数据的TPS下降，因此redis合适缓存小数据。</li>
</ol>
<h4 id="Swap性能"><a href="#Swap性能" class="headerlink" title="Swap性能"></a>Swap性能</h4><ol>
<li>关闭swap内存，集群整体性能有所提高；在高并发环境下，关闭swap性能会提高，也是以处理能力下降为代价。</li>
<li>开启swap内存，集群的整体内存使用量会增加，当服务器有足够的内存，建议关闭swap以提高集群的效率。</li>
</ol>
<h4 id="持久化策略"><a href="#持久化策略" class="headerlink" title="持久化策略"></a>持久化策略</h4><ol>
<li>always策略每次持久化，性能最低。建议数据安全性要求很到的业务场景使用，作为缓存建议不使用。</li>
<li>everysec策略每秒持久化，测试数据看是always性能的两倍以上。建议采用everysec持久化策略，即保证了数据稳定性，又兼顾缓存的效率。</li>
<li>no策略由操作系统置换页时持久化，性能最高，例如linux是30秒一次。no策略数据安全性较差，请在合适的业务场景下选择。</li>
</ol>
]]></content>
      <categories>
        <category>redis</category>
      </categories>
      <tags>
        <tag>分布式</tag>
        <tag>redis</tag>
        <tag>cluster</tag>
        <tag>cache</tag>
        <tag>缓存</tag>
      </tags>
  </entry>
  <entry>
    <title>基于Redis Cluster的分布式缓存介绍篇（一）</title>
    <url>/redis/redis-cache-intro-20170125.html</url>
    <content><![CDATA[<p>最近公司需要基于第三方开源项目做分布式缓存，业界有Redis、Memcached、Ehcache等产品。对产品redis做了一些研究，于是决定整理一下该产品的特性及使用场景拿出来分享。</p>
<p>Redis有sentinel哨兵机制监控管理多节点，也有通过代理管理的codis，3.0之后官方推出Cluster的集群方案。它们各有优缺点，sentinel简洁方便，codis管理方便，cluster性能优越。</p>
<a id="more"></a>

<h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><ul>
<li>少量数据存储，高速读写访问。通过数据全部in-momery 的方式来保证高速访问，同时提供数据落地的功能，实际这正是Redis最主要的适用场景。</li>
<li>海量数据存储，分布式系统支持，数据一致性保证，方便的集群节点添加/删除。</li>
</ul>
<h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><h4 id="网络模型"><a href="#网络模型" class="headerlink" title="网络模型"></a>网络模型</h4><p>Redis使用单线程的IO复用模型，自己封装了一个简单的AeEvent事件处理框架，主要实现了epoll、kqueue和select，对于单纯只有IO操作来说，单线程可以将速度优势发挥到最大，但是Redis也提供了一些简单的计算功能，比如排序、聚合等，对于这些操作，单线程模型实际会严重影响整体吞吐量，CPU计算过程中，整个IO调度都是被阻塞住的。</p>
<h4 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h4><p>Redis使用现场申请内存的方式来存储数据，并且很少使用free-list等方式来优化内存分配，会在一定程度上存在内存碎片，Redis跟据存储命令参数，会把带过期时间的数据单独存放在一起，并把它们称为临时数据，非临时数据是永远不会被剔除的，即便物理内存不够，导致swap也不会剔除任何非临时数据（但会尝试剔除部分临时数据），这点上Redis更适合作为存储而不是cache。</p>
<h4 id="数据一致性问题"><a href="#数据一致性问题" class="headerlink" title="数据一致性问题"></a>数据一致性问题</h4><p>在一致性问题上，个人感觉redis没有memcached实现的好，Memcached提供了cas命令，可以保证多个并发访问操作同一份数据的一致性问题。 Redis没有提供cas 命令，并不能保证这点，不过Redis提供了事务的功能，可以保证一串命令的原子性，中间不会被任何操作打断。集群中使用tag实现。</p>
<h4 id="支持的KEY类型"><a href="#支持的KEY类型" class="headerlink" title="支持的KEY类型"></a>支持的KEY类型</h4><p>Redis除key/value之外，还支持list,set,sorted set,hash等众多数据结构，提供了KEYS进行枚举操作，但不能在线上使用，如果需要枚举线上数据，Redis提供了工具可以直接扫描其dump文件，枚举出所有数据，Redis还同时提供了持久化和复制等功能。</p>
<h4 id="客户端支持"><a href="#客户端支持" class="headerlink" title="客户端支持"></a>客户端支持</h4><p>redis官方提供了丰富的客户端支持，包括了绝大多数编程语言的客户端，比如我此次测试就选择了官方推荐了Java客户端Jedis.里面提供了丰富的接口、方法使得开发人员无需关系内部的数据分片、读取数据的路由等，只需简单的调用即可，非常方便。</p>
<h4 id="数据复制"><a href="#数据复制" class="headerlink" title="数据复制"></a>数据复制</h4><p>从2.8开始，Slave会周期性（每秒一次）发起一个Ack确认复制流（replication stream）被处理进度。</p>
<h4 id="读写分离"><a href="#读写分离" class="headerlink" title="读写分离"></a>读写分离</h4><p>redis支持读写分离，而且使用简单，只需在配置文件中把redis读服务器和写服务器进行配置，多个服务器使用逗号分开。</p>
<h4 id="水平动态扩展"><a href="#水平动态扩展" class="headerlink" title="水平动态扩展"></a>水平动态扩展</h4><p>历时三年之久，终于等来了期待已由的Redis 3.0。新版本主要是实现了Cluster的功能，增删集群节点后会自动的进行数据迁移。实现 Redis 集群在线重配置的核心就是将槽从一个节点移动到另一个节点的能力。因为一个哈希槽实际上就是一些键的集合， 所以 Redis 集群在重哈希（rehash）时真正要做的，就是将一些键从一个节点移动到另一个节点。</p>
<h4 id="数据淘汰策略"><a href="#数据淘汰策略" class="headerlink" title="数据淘汰策略"></a>数据淘汰策略</h4><p>redis 内存数据集大小上升到一定大小的时候，就会施行数据淘汰策略。redis 提供 6种数据淘汰策略：</p>
<ul>
<li>noeviction : 默认，不淘汰</li>
<li>volatile-lru：从已设置过期时间的数据集（server.db[i].expires）中挑选最近最少使用的数据淘汰</li>
<li>volatile-ttl：从已设置过期时间的数据集（server.db[i].expires）中挑选将要过期的数据淘汰</li>
<li>volatile-random：从已设置过期时间的数据集（server.db[i].expires）中任意选择数据淘汰</li>
<li>allkeys-lru：从数据集（server.db[i].dict）中挑选最近最少使用的数据淘汰</li>
<li>allkeys-random：从数据集（server.db[i].dict）中任意选择数据淘汰</li>
</ul>
<h4 id="集群"><a href="#集群" class="headerlink" title="集群"></a>集群</h4><ol>
<li>所有的redis节点彼此互联(PING-PONG机制),内部使用二进制协议优化传输速度和带宽。</li>
<li>节点的fail是通过集群中超过半数的节点检测失效时才生效。</li>
<li>客户端与redis节点直连,不需要中间proxy层.客户端不需要连接集群所有节点,连接集群中任何一个可用节点即可。</li>
<li>redis-cluster把所有的物理节点映射到[0-16383]slot上,cluster 负责维护node-&gt;slot-&gt;value</li>
</ol>
<p>这里对Redis做简单的介绍，接下来会对集群的配置、部署、IO、性能、扩容、备份、迁移进行说明和测试。</p>
]]></content>
      <categories>
        <category>redis</category>
      </categories>
      <tags>
        <tag>分布式</tag>
        <tag>redis</tag>
        <tag>cluster</tag>
        <tag>cache</tag>
        <tag>缓存</tag>
      </tags>
  </entry>
  <entry>
    <title>环形数据库rrd及rrdtool介绍</title>
    <url>/%E7%AC%94%E8%AE%B0/rrd-intro-20170408.html</url>
    <content><![CDATA[<p>RRD 全称是 Round Robin Database ，即「环型数据库」。顾名思义，它是一种循环使用存储空间的数据库，适用于存储和时间序列相关的数据。RRDTool是RRD的实现工具，可用于存储和展示被监测对象随时间的变化情况。</p>
<p>“Round Robin”是一种存储数据的方式，使用固定大小的空间来存储数据，并有一个指针指向最新的数据的位置。存储数据的数据库的空间看成一个圆，上面有很多刻度，每个刻度上可以存储一个数值，同时有一个从圆心指向最新存储值的指针。随着时间推移，指针会绕着圆心一直移动下去，当它指向下一个刻度后，就可以在那个位置上存储一个新的数值。在一段时间后，当所有的空间都存满了数据，就又从头开始存放。这样整个存储空间的大小就是一个固定的数值。</p>
<a id="more"></a>

<h3 id="RRD术语"><a href="#RRD术语" class="headerlink" title="RRD术语"></a>RRD术语</h3><ul>
<li><p>ds：Data Source (ds) providing input to the database.<br>定义数据源(Data Source)属性，包括数据源名称 ds-name，比如我们可以给监测内存使用率的数据源命名为memory-rate。</p>
</li>
<li><p>dst：Data Source Type (dst).<br>数据源类型(Data Source Type)，常用的有以下4种数据源类型GAUGE、COUNTER、ABSOLUTE、DERIVE。</p>
</li>
<li><p>pdp： Primary Data Point (pdp).<br>原始数据点，例如cpu的监控数据每分钟上报，每分钟上报的的数据为原始数据。</p>
</li>
<li><p>cdp：Consolidated Data Point (cdp) is the long term storage format for data in the rrd database.<br>归档数据点，原始数据通过归档函数计算出的数据。</p>
</li>
<li><p>rra：Round Robin Archive (rra). This is the place where the consolidated data points (cdp) get stored.<br>RRA (Round Robin Archive) 是用来定义RRD数据库归档模型</p>
</li>
<li><p>cf：Consolidation Function (cf).<br>归档函数，表示{AVERAGE | MIN | MAX | LAST}中的一个归档函数。</p>
</li>
<li><p>xff: xfiles factor.<br>xfiles 因子(factor)，表示超过多少比率的有效 PDP 才可以计算出 CDP，通常为0.5。</p>
</li>
</ul>
<h3 id="数据据源类型-Data-Source-Type"><a href="#数据据源类型-Data-Source-Type" class="headerlink" title="数据据源类型(Data Source Type)"></a>数据据源类型(Data Source Type)</h3><ul>
<li>GAUGE<br>实测值，RRD将如实记录，比如温度变化曲线</li>
</ul>
<table>
<thead>
<tr>
<th align="center">时间</th>
<th align="left">监控值</th>
<th align="center">存储值</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>10:00</strong></td>
<td align="left">6℃</td>
<td align="center">6℃</td>
</tr>
<tr>
<td align="center"><strong>11:00</strong></td>
<td align="left">11℃</td>
<td align="center">11℃</td>
</tr>
<tr>
<td align="center"><strong>12:00</strong></td>
<td align="left">14℃</td>
<td align="center">14℃</td>
</tr>
<tr>
<td align="center"><strong>13:00</strong></td>
<td align="left">12℃</td>
<td align="center">12℃</td>
</tr>
<tr>
<td align="center"><strong>14:00</strong></td>
<td align="left">10℃</td>
<td align="center">10℃</td>
</tr>
</tbody></table>
<ul>
<li>COUNTER<br>计数值，这是一个只增不减的正整数。比如，汽车行驶里程，从汽车第一次上路开始，里程就从0开始不断增长。假设每隔30分钟监测一次汽车里程，当RRD收到COUNTER 类型的数据时，并不会像 GAUGE 类型那样直接存储，而是计算变化率：</li>
</ul>
<table>
<thead>
<tr>
<th align="center">时间</th>
<th align="left">监控值</th>
<th align="center">存储值</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>10:00</strong></td>
<td align="left">12100km</td>
<td align="center">Unknown</td>
</tr>
<tr>
<td align="center"><strong>10:30</strong></td>
<td align="left">12121km</td>
<td align="center">6.11m/s</td>
</tr>
<tr>
<td align="center"><strong>11:00</strong></td>
<td align="left">12135km</td>
<td align="center">7.78m/s</td>
</tr>
<tr>
<td align="center"><strong>11:30</strong></td>
<td align="left">12160km</td>
<td align="center">13.89m/s</td>
</tr>
</tbody></table>
<p><strong>计算原理： (12121km - 12100km) / (10:30 - 10:00) = 11000m / 1800s = 6.11m/s</strong></p>
<p>RRD对于COUNTER 类型的数据源存储的是变化率，对于上述里程表而言就是行驶速度。<br>注：第一个存储值为 UNKNOWN，因为没有更早的数据，所以没有变化可言）</p>
<ul>
<li>ABSOLUTE<br>ABSOLUTE 类型存储的也是变化率，假设我们正在微信和好友聊天，每五分钟我们会看一下有没有新消息，如果有的话就立即处理，这样未读提醒就会变为0，然后下一个五分钟后继续看未读新消息数，会得到这样一个监测表：</li>
</ul>
<table>
<thead>
<tr>
<th align="center">时间</th>
<th align="left">监控值</th>
<th align="center">存储值</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>10:00</strong></td>
<td align="left">100条</td>
<td align="center">Unknown</td>
</tr>
<tr>
<td align="center"><strong>10:05</strong></td>
<td align="left">120条</td>
<td align="center">0.4条/s</td>
</tr>
<tr>
<td align="center"><strong>10:10</strong></td>
<td align="left">300条</td>
<td align="center">1条/s</td>
</tr>
<tr>
<td align="center"><strong>10:15</strong></td>
<td align="left">99条</td>
<td align="center">0.33条/s</td>
</tr>
</tbody></table>
<p><strong>计算原理：120条 / 300秒 = 0.4条/秒</strong></p>
<ul>
<li>DERIVE<br>DERIVE类型存储的也是变化率，和 COUNTER 类型不同的是，监测值可以增长也可以下降，例如水库的水位监测：</li>
</ul>
<table>
<thead>
<tr>
<th align="center">时间</th>
<th align="left">监控值</th>
<th align="center">存储值</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>10:00</strong></td>
<td align="left">1000cm</td>
<td align="center">Unknown</td>
</tr>
<tr>
<td align="center"><strong>10:10</strong></td>
<td align="left">1200cm</td>
<td align="center">0.33cm/s</td>
</tr>
<tr>
<td align="center"><strong>10:20</strong></td>
<td align="left">800cm</td>
<td align="center">-0.67cm/s</td>
</tr>
<tr>
<td align="center"><strong>10:30</strong></td>
<td align="left">1000km</td>
<td align="center">0.33cm/s</td>
</tr>
</tbody></table>
<p><strong>计算原理： (1200cm - 1000km) / (10:10 - 10:00) = 200cm / 600s = 0.33cm/s</strong></p>
<h3 id="归档模型"><a href="#归档模型" class="headerlink" title="归档模型"></a>归档模型</h3><p><code>RRA:CF:xff:steps:rows</code></p>
<ul>
<li>归档函数CF<br>假如每秒一个原始数据上报，如果我们把每小时监测的3600个原始数据点计算一个归档平均值的话。归档函数AVERAGE。</li>
</ul>
<p>RRD提供的归档方法有4种，除了上述的计算平均值AVERAGE方法外，还有：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">计算最大值 MAX(d1,d2,d3,...dn) = 最大的那个监测值</span><br><span class="line"></span><br><span class="line">计算最小值 MIN(d1,d2,d3,...dn) = 最小的那个监测值</span><br><span class="line"></span><br><span class="line">计算最后值 LAST(d1,d2,d3,...dn) = 最后的那个监测值</span><br></pre></td></tr></table></figure>
<ul>
<li><p>xfiles因子<br>xff默认值为0.5，即有大于50%的有效监测值就可以在这些有效值上计算出归档值，否则这段时间内的归档值记为 UNKNOWN。</p>
</li>
<li><p>steps<br>表示多少个PDP计算出一个CDP。例如，在每秒获取一个监测值的实例中，steps = 60 表示每60个原始数据计算一个归档数据，即一分钟一个数据点。</p>
</li>
<li><p>rows<br>表示多少个CDP组成一个RRA。例如，在每秒获取一个监测值的实例中，steps = 60，rows=60，即一小时数据组成一个RRA。</p>
</li>
</ul>
<h3 id="RRD文件结构"><a href="#RRD文件结构" class="headerlink" title="RRD文件结构"></a>RRD文件结构</h3><table>
<thead>
<tr>
<th align="center">时间</th>
<th align="left">监控值</th>
<th align="center">存储值</th>
</tr>
</thead>
<tbody><tr>
<td align="center">char cookie[4]</td>
<td align="left"><code>RRD\0</code></td>
<td align="center">RRD文件标志</td>
</tr>
<tr>
<td align="center">char version[5]</td>
<td align="left"><code>0003\0</code></td>
<td align="center">RRD文件版本</td>
</tr>
<tr>
<td align="center">double float_cookie</td>
<td align="left">8.642135E130</td>
<td align="center">Magic number</td>
</tr>
<tr>
<td align="center">unsigned long ds_cnt</td>
<td align="left"></td>
<td align="center">定义的DS个数</td>
</tr>
<tr>
<td align="center">unsigned long rra_cnt</td>
<td align="left"></td>
<td align="center">定义的RRA个数</td>
</tr>
<tr>
<td align="center">unsigned long pdp_step</td>
<td align="left"></td>
<td align="center">pdp时间间隔</td>
</tr>
<tr>
<td align="center">unival par[10]</td>
<td align="left"></td>
<td align="center">保留，未使用</td>
</tr>
<tr>
<td align="center">char ds_nam[DS_NAM_SIZE]</td>
<td align="left"></td>
<td align="center">DS的名称，DS_NAM_SIZE=20</td>
</tr>
<tr>
<td align="center">char dst[DST_SIZE]</td>
<td align="left"></td>
<td align="center">DS的类型</td>
</tr>
<tr>
<td align="center">unival par[10]</td>
<td align="left"></td>
<td align="center">DS的参数队列(heartbeat:min:max)</td>
</tr>
<tr>
<td align="center"></td>
<td align="left">DS参数cnt次</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">char cf_nam[CF_NAM_SIZE]</td>
<td align="left"></td>
<td align="center">CF的名称</td>
</tr>
<tr>
<td align="center">unsigned long row_cnt</td>
<td align="left"></td>
<td align="center">存储记录的行数</td>
</tr>
<tr>
<td align="center">unsigned long pdp_cnt</td>
<td align="left"></td>
<td align="center">cf函数执行时，需要的pdp个数</td>
</tr>
<tr>
<td align="center">unival par[MAX_RRA_PAR_EN]</td>
<td align="left"></td>
<td align="center">RRA的参数队列</td>
</tr>
<tr>
<td align="center"></td>
<td align="left">RRA参数cnt次</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">time_t last_up</td>
<td align="left"></td>
<td align="center">最后一次更新的秒数部分</td>
</tr>
<tr>
<td align="center">long last_up_usec</td>
<td align="left"></td>
<td align="center">最后一次跟新的微秒数部分</td>
</tr>
<tr>
<td align="center">char last_ds[LAST_DS_LEN]</td>
<td align="left"></td>
<td align="center">最后一次更新后ds的值</td>
</tr>
<tr>
<td align="center">unival scratch[10]</td>
<td align="left"></td>
<td align="center">最后一次更新后pdp的相关数值</td>
</tr>
<tr>
<td align="center"></td>
<td align="left">DS参数cnt次</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">Unival scratch[MAX_CDP_PAR_EN]</td>
<td align="left"></td>
<td align="center">最后一次更新后cdp的相关数值</td>
</tr>
<tr>
<td align="center"></td>
<td align="left">DS参数cnt次*RRA参数cnt次</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">unsigned long cur_row</td>
<td align="left"></td>
<td align="center">指向RRA当前的记录</td>
</tr>
<tr>
<td align="center"></td>
<td align="left">RRA参数cnt次</td>
<td align="center"></td>
</tr>
</tbody></table>
<h3 id="RRDTool语法"><a href="#RRDTool语法" class="headerlink" title="RRDTool语法"></a>RRDTool语法</h3><p>Create语法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rrdtool create filename [–start|-b start time] [–step|-s step] \</span><br><span class="line"></span><br><span class="line">[DS:ds-name:DST:dst arguments] \</span><br><span class="line"></span><br><span class="line">[RRA:CF:cf arguments]</span><br></pre></td></tr></table></figure>
<p>Update语法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rrdtool update filename [timestamp:value timestamp:value timestamp:value] </span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>rrd</tag>
        <tag>环形数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>玩转魔方，玩自己</title>
    <url>/%E5%85%B4%E8%B6%A3/rubik-cube-formulas-20140429.html</url>
    <content><![CDATA[<p>看了菲神三阶魔方的出神入化，自己也开始蠢蠢欲动。闲来无事，了解下玩魔方入门方法，也不知道是玩魔方，还是玩自己。只以此记录下，以便以后查看。</p>
<a id="more"></a>

<p>##魔方公式</p>
<p>@(兴趣)</p>
<h4 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h4><p>白色中心为底面，黄色中心为顶面</p>
<table>
<thead>
<tr>
<th align="center"></th>
<th align="center">白</th>
<th align="center">&nbsp;</th>
</tr>
</thead>
<tbody><tr>
<td align="center">白</td>
<td align="center">黄</td>
<td align="center">白</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">白</td>
<td align="center">&nbsp;</td>
</tr>
<tr>
<td align="center">顶面四边中块为白色，使用公式</td>
<td align="center"></td>
<td align="center"></td>
</tr>
</tbody></table>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">公式 FU`R</span><br></pre></td></tr></table></figure>

<h4 id="第二步-底面归位"><a href="#第二步-底面归位" class="headerlink" title="第二步 底面归位"></a>第二步 底面归位</h4><ol>
<li>顶层白色角块，观察另外两块颜色，与F和R面相同 公式</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">公式 RUR`U`</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>将白色块放于右下角执行公式，会变成1</li>
</ol>
<h4 id="第三步-中棱归位"><a href="#第三步-中棱归位" class="headerlink" title="第三步 中棱归位"></a>第三步 中棱归位</h4><ol>
<li>找一顶层一边中块无黄色模块（两面都无），移至与中心颜色相同面，使其在右边，使用公式</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">顶面与F面颜色相同 R`U`R`U`R`URUR</span><br><span class="line">顶面与F面颜色不同 RURURU`R`U`R`</span><br><span class="line">特殊情况两块对换  R`U`R`U`R`URUR</span><br></pre></td></tr></table></figure>
<h4 id="第四步-顶面十字"><a href="#第四步-顶面十字" class="headerlink" title="第四步 顶面十字"></a>第四步 顶面十字</h4><ol>
<li>顶端已有一个一字</li>
<li>已有黄色连成左上直角</li>
<li>只有一个黄色中心块</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">公式  FRUR`U`F`</span><br></pre></td></tr></table></figure>
<h4 id="第五步-顶面归位"><a href="#第五步-顶面归位" class="headerlink" title="第五步 顶面归位"></a>第五步 顶面归位</h4><ol>
<li>只有一个黄色角块 置于右下角</li>
<li>有2个两黄角块，转动顶面直到R面前上角有黄色角块</li>
<li>顶端无黄色角块，转动顶面直到F右上角有黄色角块​，执行公式</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">公式  R`U2RUR`UR</span><br></pre></td></tr></table></figure>
<h4 id="第六步-顶角归位"><a href="#第六步-顶角归位" class="headerlink" title="第六步 顶角归位"></a>第六步 顶角归位</h4><ol>
<li>找到有2个相同角块一面置于F面</li>
<li>若无则先应用公式变为1</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">公式  IU`RD2R`URD2R`<span class="number">2</span></span><br></pre></td></tr></table></figure>
<h4 id="第七步-顶棱归位"><a href="#第七步-顶棱归位" class="headerlink" title="第七步 顶棱归位"></a>第七步 顶棱归位</h4><ol>
<li>有一面已经正确归位，置于左侧，执行公式</li>
<li>若无则先用公式变为1</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">公式      R`<span class="number">2</span>U`MF`U2MFU`R`<span class="number">2</span></span><br><span class="line">反方向公式 R`<span class="number">2</span>U MF`U2MFU R`<span class="number">2</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>兴趣</category>
      </categories>
      <tags>
        <tag>魔方</tag>
        <tag>层先法</tag>
        <tag>爱好</tag>
      </tags>
  </entry>
  <entry>
    <title>sql-migrate支持oracle数据库</title>
    <url>/%E5%B7%A5%E5%85%B7/sql-migrate-support-oracle-20200304.html</url>
    <content><![CDATA[<p>数据库migrate工具有很多，但基于Golang且较为流行的有<a href="https://github.com/rubenv/sql-migrate">sql-migrate</a>和<a href="https://github.com/golang-migrate/migrate">migrate</a>，但都不支持Oracle。前段时间项目上正好使用到Oracle，索性提交了个PR来支持Oracle.</p>
<a id="more"></a>


<h3 id="对比sql-migrate和migrate"><a href="#对比sql-migrate和migrate" class="headerlink" title="对比sql-migrate和migrate"></a>对比sql-migrate和migrate</h3><ul>
<li>sql-migrate是个轻量级的migrate工具，同时支持代码集成。这意味服务启动时可方便的管理sql版本。</li>
<li>migrate也是个migrate工具，同时支持代码集成。不同的是sql-migrate支持bindatq，而migrate不支持。</li>
</ul>
<h3 id="Oracle驱动"><a href="#Oracle驱动" class="headerlink" title="Oracle驱动"></a>Oracle驱动</h3><ul>
<li>oci8(github.com/mattn/go-oci8)</li>
<li>godror(<a href="https://github.com/godror/godror">https://github.com/godror/godror</a>)<br>oci8和godror都不是pure Go代码的驱动库，他们都需要Oracle Office Client (Instant Client)的支持。两相相比较，个人使用godror较多，因为godror是运行时依赖，编译是不依赖Oracle的lib库。sql-migrate两种驱动都支持。</li>
</ul>
<h3 id="使用编译tag"><a href="#使用编译tag" class="headerlink" title="使用编译tag"></a>使用编译tag</h3><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">//</span> +build oracle</span><br></pre></td></tr></table></figure>
<p>代码中加入golang的条件编译就能轻松实现。sql-migrate默认提供的工具是不支持oracle，需要你编译oracle版本</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">go</span> <span class="built_in">get</span> -<span class="keyword">tags</span> godror -v github.<span class="keyword">com</span>/rubenv/sql-migrate/...</span><br></pre></td></tr></table></figure>
<h3 id="使用sql-migrate"><a href="#使用sql-migrate" class="headerlink" title="使用sql-migrate"></a>使用sql-migrate</h3><p>下载依赖并配置依赖库路径</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">wget https:<span class="regexp">//</span>download.oracle.com<span class="regexp">/otn_software/m</span>ac<span class="regexp">/instantclient/</span><span class="number">193000</span>/instantclient-basic-macos.x64-<span class="number">19.3</span>.<span class="number">0.0</span>.<span class="number">0</span>dbru.zip</span><br></pre></td></tr></table></figure>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="builtin-name">export</span> <span class="attribute">LD_LIBRARY_PATH</span>=your_oracle_office_path/instantclient_19_3</span><br></pre></td></tr></table></figure>
<p>配置文件样例</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="attribute">development</span>:</span><br><span class="line">    <span class="attribute">dialect</span>: godror</span><br><span class="line">    <span class="attribute">datasource</span>: user/password<span class="variable">@localhost</span>:<span class="number">1521</span>/sid</span><br><span class="line">    <span class="attribute">dir</span>: migrations/oracle</span><br><span class="line">    <span class="attribute">table</span>: migrations</span><br></pre></td></tr></table></figure>
<p>最后使用sql-migrate命令行</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">sql-migrate  up</span></span><br></pre></td></tr></table></figure>
<h3 id="作为library"><a href="#作为library" class="headerlink" title="作为library"></a>作为library</h3><figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">import <span class="string">&quot;github.com/rubenv/sql-migrate&quot;</span></span><br><span class="line">import _ <span class="string">&quot;github.com/godror/godror&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">db</span>, <span class="keyword">err</span> := sql.<span class="keyword">Open</span>(<span class="string">&quot;sqlite3&quot;</span>, filename)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">err</span> != nil &#123;</span><br><span class="line">    <span class="comment">// Handle errors!</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">n</span>, <span class="keyword">err</span> := migrate.Exec(<span class="keyword">db</span>, <span class="string">&quot;godror&quot;</span>, migrations, migrate.Up)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">err</span> != nil &#123;</span><br><span class="line">    <span class="comment">// Handle errors!</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;Applied %d migrations!\n&quot;</span>, <span class="keyword">n</span>)</span><br></pre></td></tr></table></figure>
<h3 id="PR"><a href="#PR" class="headerlink" title="PR"></a>PR</h3><p><a href="https://github.com/rubenv/sql-migrate/pull/166">https://github.com/rubenv/sql-migrate/pull/166</a></p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>golang</tag>
        <tag>migrate</tag>
        <tag>sql</tag>
        <tag>database</tag>
        <tag>oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>TCP BBR拥塞控制算法，为你的网络提速！</title>
    <url>/%E7%BD%91%E7%BB%9C/tcp-bbr-20170509.html</url>
    <content><![CDATA[<p>TCP BBR是谷歌出品的TCP拥塞控制算法。BBR目的是要尽量跑满带宽，并且尽量不要有排队的情况。BBR可以起到单边加速TCP连接的效果。替代锐速再合适不过，毕竟免费。</p>
<p>Google提交到Linux主线并发表在ACM queue期刊上的TCP-BBR拥塞控制算法。继承了Google“先在生产环境上部署，再开源和发论文”的研究传统。TCP-BBR已经再YouTube服务器和Google跨数据中心的内部广域网(B4)上部署。由此可见出该算法的前途。</p>
<p>TCP-BBR的目标就是最大化利用网络上瓶颈链路的带宽。一条网络链路就像一条水管，要想最大化利用这条水管，最好的办法就是给这跟水管灌满水。</p>
<a id="more"></a>

<p>BBR解决了两个问题：</p>
<ol>
<li><p>再有一定丢包率的网络链路上充分利用带宽。非常适合高延迟，高带宽的网络链路。</p>
</li>
<li><p>降低网络链路上的buffer占用率，从而降低延迟。非常适合慢速接入网络的用户。</p>
</li>
</ol>
<p>项目地址:<a href="https://github.com/google/bbr">https://github.com/google/bbr</a></p>
<h3 id="安装BBR"><a href="#安装BBR" class="headerlink" title="安装BBR"></a>安装BBR</h3><p>BBR是内嵌在Linux内核中的，目前Linux Kernel 4.9已加入了该算法，所以安装新版本内核开启BBR即可享用。</p>
<h4 id="Debian-Ubuntu"><a href="#Debian-Ubuntu" class="headerlink" title="Debian/Ubuntu"></a>Debian/Ubuntu</h4><p>下面简单讲述如何在Debian/Ubuntu 64bit系统中升级kernel开启TCP BBR拥塞控制算法。</p>
<p><strong>下载最新内核</strong><br>最新内核查看这里：<a href="http://kernel.ubuntu.com/~kernel-ppa/mainline/">http://kernel.ubuntu.com/~kernel-ppa/mainline/</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~;mkdir linux49; <span class="built_in">cd</span> linux49</span><br><span class="line">$ wget http://kernel.ubuntu.com/~kernel-ppa/mainline/v4.9/linux-headers-4.9.0-040900-generic_4.9.0-040900.201612111631_amd64.deb</span><br><span class="line">$ wget http://kernel.ubuntu.com/~kernel-ppa/mainline/v4.9/linux-image-4.9.0-040900-generic_4.9.0-040900.201612111631_amd64.deb</span><br><span class="line">$ wget http://kernel.ubuntu.com/~kernel-ppa/mainline/v4.9/linux-headers-4.9.0-040900_4.9.0-040900.201612111631_all.deb</span><br></pre></td></tr></table></figure>
<p><strong>开始安装</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ dpkg -i *.deb</span><br></pre></td></tr></table></figure>
<p>以上用于64位系统，其它可以自行下载Index of /~kernel-ppa/mainline/v4.9 对应版本。</p>
<p><strong>删除其余内核(非必需)</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ dpkg -l|grep linux-image </span><br><span class="line">$ apt-get remove linux-image-[Tab补全] <span class="comment">#删旧内核，在这里，就是把第一个删掉</span></span><br></pre></td></tr></table></figure>
<p><strong>更新grub系统引导文件并重启</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ update-grub</span><br></pre></td></tr></table></figure>
<p>重启系统并查看内核</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ reboot</span><br><span class="line">$ uname -a</span><br></pre></td></tr></table></figure>
<h4 id="Centos-RHEL"><a href="#Centos-RHEL" class="headerlink" title="Centos/RHEL"></a>Centos/RHEL</h4><p>通过使用ELRepo源的方式在CentOS中安装最新版kernel。</p>
<p><strong>CentOS 6</strong></p>
<p>下载内核并安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org</span><br><span class="line">$ rpm -Uvh http://www.elrepo.org/elrepo-release-6-6.el6.elrepo.noarch.rpm</span><br><span class="line">$ yum --enablerepo=elrepo-kernel install kernel-ml kernel-ml-devel -y</span><br></pre></td></tr></table></figure>
<p>查看内核是否安装成功</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ rpm -qa | grep kernel</span><br></pre></td></tr></table></figure>
<p>更新grub系统引导文件并重启</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sed -i <span class="string">&#x27;s:default=.*:default=0:g&#x27;</span> /etc/grub.conf</span><br><span class="line">$ reboot</span><br></pre></td></tr></table></figure>
<p><strong>CentOS 7</strong></p>
<p>下载内核并安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org</span><br><span class="line">$ rpm -Uvh http://www.elrepo.org/elrepo-release-7.0-2.el7.elrepo.noarch.rpm</span><br><span class="line">$ yum --enablerepo=elrepo-kernel install kernel-ml  kernel-ml-devel -y</span><br></pre></td></tr></table></figure>
<p>查看内核是否安装成功</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ rpm -qa | grep kernel</span><br></pre></td></tr></table></figure>
<p>更新grub系统引导文件并重启</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ egrep ^menuentry /etc/grub2.cfg | cut -f 2 -d \<span class="string">&#x27; #删除其余内核(非必需) $ grub2-set-default 0  #default 0表示第一个内核设置为默认运行, 选择最新内核就对了 $ reboot</span></span><br></pre></td></tr></table></figure>
<h4 id="Google-TCP-BBR一键安装脚本"><a href="#Google-TCP-BBR一键安装脚本" class="headerlink" title="Google TCP BBR一键安装脚本"></a>Google TCP BBR一键安装脚本</h4><p>适用于Centos6 32位和64位</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wget --no-check-certificate https://github.com/52fancy/GooGle-BBR/raw/master/BBR.sh &amp;&amp; sh BBR.sh</span><br><span class="line">适用于Centos 6/7  仅适用64位）</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wget -O- http://soft.wellphp.com/scripts/install_bbr_centos.sh | bash</span><br></pre></td></tr></table></figure>
<h3 id="开启BBR"><a href="#开启BBR" class="headerlink" title="开启BBR"></a>开启BBR</h3><p>安装内核后从刚安装的内核启动，然后执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;net.core.default_qdisc=fq&quot;</span> &gt;&gt; /etc/sysctl.conf</span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;net.ipv4.tcp_congestion_control=bbr&quot;</span> &gt;&gt; /etc/sysctl.conf</span><br></pre></td></tr></table></figure>
<p>保存生效</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sysctl -p</span><br></pre></td></tr></table></figure>
<p>验证是否安装成功</p>
<p>执行以下命令，如果结果中有bbr则证明你的内核已开启bbr。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sysctl net.ipv4.tcp_available_congestion_control</span><br><span class="line">net.ipv4.tcp_available_congestion_control = bbr cubic reno</span><br><span class="line"></span><br><span class="line">$ lsmod | grep bbr</span><br><span class="line">tcp_bbr                20480  0</span><br></pre></td></tr></table></figure>
<h3 id="关闭BBR"><a href="#关闭BBR" class="headerlink" title="关闭BBR"></a>关闭BBR</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sed -i <span class="string">&#x27;/net\.core\.default_qdisc=fq/d&#x27;</span> /etc/sysctl.conf</span><br><span class="line">$ sed -i <span class="string">&#x27;/net\.ipv4\.tcp_congestion_control=bbr/d&#x27;</span> /etc/sysctl.conf</span><br><span class="line">$ sysctl -p</span><br></pre></td></tr></table></figure>
<p>执行完上面的代码，使用reboot重启后才能关闭bbr，重启后再用下面的查看bbr状态代码，查看是否关闭了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ lsmod | grep bbr</span><br></pre></td></tr></table></figure>
<p>如果结果中没有bbr, 则证明你的内核已关闭bbr</p>
]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>tcp</tag>
        <tag>bbr</tag>
      </tags>
  </entry>
  <entry>
    <title>TCP(GRPC)/HTTPS中TLS单向和双向认证</title>
    <url>/%E7%BD%91%E7%BB%9C/tcp-https-tls-cert-20180911.html</url>
    <content><![CDATA[<p>目前，浏览器中开启HTTPS是比较简单的事情。首先我们需要一个域名，然后找一家可信CA机构申请证书并将证书安装到服务器(例如：RapidSSL、Trustwave SSL、Let’s Encrypt等)。但对TCP协议的服务使用self-signed证书我们应该如何完成？</p>
<a id="more"></a>

<h3 id="证书的分类"><a href="#证书的分类" class="headerlink" title="证书的分类"></a>证书的分类</h3><p>验证方式</p>
<ul>
<li>DV SSL证书(域名验证)</li>
<li>OV SSL证书(企业验证)</li>
<li>EV SSL证书(企业增强/扩展验证)</li>
</ul>
<p>功能分类</p>
<ul>
<li>UCC/SAN SSL证书(多域名)</li>
<li>SGC SSL证书(强加密)</li>
<li>Wildcard SSL证书(通配符)</li>
<li>Code Signing SSL证书(代码签名)</li>
</ul>
<p>认证流程</p>
<ul>
<li>one-way authentication(单向认证)</li>
<li>two-way(mutual) authentication(双向认证)</li>
</ul>
<p>浏览器中大部分应用使用单向认证，即服务器认证客户端，客户端无需认证服务器。大型企业有很多域名一般使用OV SSL和SAN SSL证书，而个人网站则使用DV SSL证书。</p>
<h3 id="证书使用"><a href="#证书使用" class="headerlink" title="证书使用"></a>证书使用</h3><p>什么时候使用可信CA签发证书，什么时候使用自签证书？ 什么时候使用单向证书或双向证书。</p>
<p>这些都应根据应用的实际业务而定，浏览器应用中使用可信CA签发的证书，这样浏览器访问你的网站时就不会提示<code>not secure</code>错误，这是因浏览器中预置可信CA机构的CA证书。这也不是绝对的，例如12306网站就使用的自签证书，你会看到<code>not secure</code>错误，导入12306网站的CA证书可以消除这个提示。自签证书不是说比可信CA机构签发的证书有更高的安全性。因为加密算法都是公开的，而是私钥文件自己保管。对于安全性高的场景，例如金融行业对账，就应该使用自签和双向认证。</p>
<h3 id="证书自签"><a href="#证书自签" class="headerlink" title="证书自签"></a>证书自签</h3><p>生成自签证书脚本</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line"></span><br><span class="line">mkdir -p &#123;certs,crl,newcerts&#125;</span><br><span class="line">touch <span class="keyword">index</span>.txt</span><br><span class="line">echo <span class="number">1000</span> &gt; <span class="type">serial</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># CA private key (<span class="keyword">unencrypted</span>)</span><br><span class="line">openssl genrsa -<span class="keyword">out</span> ca.key <span class="number">4096</span></span><br><span class="line"># Certificate Authority (self-signed certificate)</span><br><span class="line">openssl req -config openssl.cnf -<span class="built_in">new</span> -x509 -days <span class="number">3650</span> -sha256 -key ca.key -extensions v3_ca -<span class="keyword">out</span> ca.crt -subj &quot;/CN=fake-ca&quot;</span><br><span class="line"></span><br><span class="line"># <span class="keyword">Server</span> private key (<span class="keyword">unencrypted</span>)</span><br><span class="line">openssl genrsa -<span class="keyword">out</span> <span class="keyword">server</span>.key <span class="number">2048</span></span><br><span class="line"># <span class="keyword">Server</span> certificate signing request (CSR)</span><br><span class="line">openssl req -config openssl.cnf -<span class="built_in">new</span> -sha256 -key <span class="keyword">server</span>.key -<span class="keyword">out</span> <span class="keyword">server</span>.csr -subj &quot;/CN=fake.grpc&quot;</span><br><span class="line"># Certificate Authority signs CSR <span class="keyword">to</span> <span class="keyword">grant</span> a certificate</span><br><span class="line">openssl ca -batch -config openssl.cnf -extensions server_cert -days <span class="number">365</span> -notext -md sha256 -<span class="keyword">in</span> <span class="keyword">server</span>.csr -<span class="keyword">out</span> <span class="keyword">server</span>.crt -cert ca.crt -keyfile ca.key</span><br><span class="line"></span><br><span class="line"># Client private key (<span class="keyword">unencrypted</span>)</span><br><span class="line">openssl genrsa -<span class="keyword">out</span> client.key <span class="number">2048</span></span><br><span class="line"># Signed client certificate signing request (CSR)</span><br><span class="line">openssl req -config openssl.cnf -<span class="built_in">new</span> -sha256 -key client.key -<span class="keyword">out</span> client.csr -subj &quot;/CN=fake.client&quot;</span><br><span class="line"># Certificate Authority signs CSR <span class="keyword">to</span> <span class="keyword">grant</span> a certificate</span><br><span class="line">openssl ca -batch -config openssl.cnf -extensions usr_cert -days <span class="number">365</span> -notext -md sha256 -<span class="keyword">in</span> client.csr -<span class="keyword">out</span> client.crt -cert ca.crt -keyfile ca.key</span><br><span class="line"></span><br><span class="line"><span class="meta">#openssl x509 -text -noout -in ca.crt</span></span><br><span class="line"></span><br><span class="line">rm *.csr</span><br></pre></td></tr></table></figure>

<p>自签证书配置</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line">SAN =</span><br><span class="line"></span><br><span class="line"><span class="section">[ ca ]</span></span><br><span class="line"><span class="comment"># `man ca`</span></span><br><span class="line"><span class="attr">default_ca</span> = CA_default</span><br><span class="line"></span><br><span class="line"><span class="section">[ CA_default ]</span></span><br><span class="line"><span class="comment"># Directory and file locations.</span></span><br><span class="line"><span class="attr">dir</span>               = .</span><br><span class="line"><span class="attr">certs</span>             = <span class="variable">$dir</span>/certs</span><br><span class="line"><span class="attr">crl_dir</span>           = <span class="variable">$dir</span>/crl</span><br><span class="line"><span class="attr">new_certs_dir</span>     = <span class="variable">$dir</span>/newcerts</span><br><span class="line"><span class="attr">database</span>          = <span class="variable">$dir</span>/index.txt</span><br><span class="line"><span class="attr">serial</span>            = <span class="variable">$dir</span>/serial</span><br><span class="line"><span class="comment"># certificate revocation lists.</span></span><br><span class="line"><span class="attr">crlnumber</span>         = <span class="variable">$dir</span>/crlnumber</span><br><span class="line"><span class="attr">crl</span>               = <span class="variable">$dir</span>/crl/intermediate-ca.crl</span><br><span class="line"><span class="attr">crl_extensions</span>    = crl_ext</span><br><span class="line"><span class="attr">default_crl_days</span>  = <span class="number">30</span></span><br><span class="line"><span class="attr">default_md</span>        = sha256</span><br><span class="line"></span><br><span class="line"><span class="attr">name_opt</span>          = ca_default</span><br><span class="line"><span class="attr">cert_opt</span>          = ca_default</span><br><span class="line"><span class="attr">default_days</span>      = <span class="number">375</span></span><br><span class="line"><span class="attr">preserve</span>          = <span class="literal">no</span></span><br><span class="line"><span class="attr">policy</span>            = policy_loose</span><br><span class="line"></span><br><span class="line"><span class="section">[ policy_loose ]</span></span><br><span class="line"><span class="comment"># Allow the CA to sign a range of certificates.</span></span><br><span class="line"><span class="attr">countryName</span>             = optional</span><br><span class="line"><span class="attr">stateOrProvinceName</span>     = optional</span><br><span class="line"><span class="attr">localityName</span>            = optional</span><br><span class="line"><span class="attr">organizationName</span>        = optional</span><br><span class="line"><span class="attr">organizationalUnitName</span>  = optional</span><br><span class="line"><span class="attr">commonName</span>              = supplied</span><br><span class="line"><span class="attr">emailAddress</span>            = optional</span><br><span class="line"></span><br><span class="line"><span class="section">[ req ]</span></span><br><span class="line"><span class="comment"># `man req`</span></span><br><span class="line"><span class="attr">default_bits</span>        = <span class="number">4096</span></span><br><span class="line"><span class="attr">distinguished_name</span>  = req_distinguished_name</span><br><span class="line"><span class="attr">string_mask</span>         = utf8only</span><br><span class="line"><span class="attr">default_md</span>          = sha256</span><br><span class="line"></span><br><span class="line"><span class="section">[ req_distinguished_name ]</span></span><br><span class="line"><span class="attr">countryName</span>                    = Country Name (<span class="number">2</span> letter code)</span><br><span class="line"><span class="attr">stateOrProvinceName</span>            = State or Province Name</span><br><span class="line"><span class="attr">localityName</span>                   = Locality Name</span><br><span class="line"><span class="attr">0.organizationName</span>             = Organization Name</span><br><span class="line"><span class="attr">organizationalUnitName</span>         = Organizational Unit Name</span><br><span class="line"><span class="attr">commonName</span>                     = Common Name</span><br><span class="line"></span><br><span class="line"><span class="comment"># Certificate extensions (`man x509v3_config`)</span></span><br><span class="line"></span><br><span class="line"><span class="section">[ v3_ca ]</span></span><br><span class="line"><span class="attr">subjectKeyIdentifier</span> = hash</span><br><span class="line"><span class="attr">authorityKeyIdentifier</span> = keyid:always,issuer</span><br><span class="line"><span class="attr">basicConstraints</span> = critical, CA:<span class="literal">true</span>, pathlen:<span class="number">0</span></span><br><span class="line"><span class="attr">keyUsage</span> = critical, digitalSignature, cRLSign, keyCertSign</span><br><span class="line"></span><br><span class="line"><span class="section">[ usr_cert ]</span></span><br><span class="line"><span class="attr">basicConstraints</span> = CA:<span class="literal">FALSE</span></span><br><span class="line"><span class="attr">nsCertType</span> = client</span><br><span class="line"><span class="attr">nsComment</span> = <span class="string">&quot;OpenSSL Generated Client Certificate&quot;</span></span><br><span class="line"><span class="attr">subjectKeyIdentifier</span> = hash</span><br><span class="line"><span class="attr">authorityKeyIdentifier</span> = keyid,issuer</span><br><span class="line"><span class="attr">keyUsage</span> = critical, nonRepudiation, digitalSignature, keyEncipherment</span><br><span class="line"><span class="attr">extendedKeyUsage</span> = clientAuth</span><br><span class="line"></span><br><span class="line"><span class="section">[ server_cert ]</span></span><br><span class="line"><span class="attr">basicConstraints</span> = CA:<span class="literal">FALSE</span></span><br><span class="line"><span class="attr">nsCertType</span> = server</span><br><span class="line"><span class="attr">nsComment</span> = <span class="string">&quot;OpenSSL Generated Server Certificate&quot;</span></span><br><span class="line"><span class="attr">subjectKeyIdentifier</span> = hash</span><br><span class="line"><span class="attr">authorityKeyIdentifier</span> = keyid,issuer:always</span><br><span class="line"><span class="attr">keyUsage</span> = critical, digitalSignature, keyEncipherment</span><br><span class="line"><span class="attr">extendedKeyUsage</span> = serverAuth</span><br><span class="line"><span class="attr">subjectAltName</span> = <span class="variable">$ENV</span>::SAN</span><br></pre></td></tr></table></figure>
<h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> (</span><br><span class="line">	argAddress <span class="keyword">string</span></span><br><span class="line">	argCrtFile <span class="keyword">string</span></span><br><span class="line">	argKeyFile <span class="keyword">string</span></span><br><span class="line">	argCAFile  <span class="keyword">string</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> verbose <span class="keyword">bool</span></span><br><span class="line"><span class="keyword">var</span> rootCmd *cobra.Command</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">	rootCmd = &amp;cobra.Command&#123;</span><br><span class="line">		Use:   <span class="string">&quot;grpc&quot;</span>,</span><br><span class="line">		Short: <span class="string">&quot;demo service&quot;</span>,</span><br><span class="line">		Long:  <span class="string">&quot;Top level command for demo service, it provides GRPC service&quot;</span>,</span><br><span class="line">		Run:   run,</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	rootCmd.Flags().StringVarP(&amp;argAddress, <span class="string">&quot;address&quot;</span>, <span class="string">&quot;a&quot;</span>, <span class="string">&quot;:3264&quot;</span>, <span class="string">&quot;address to listen on&quot;</span>)</span><br><span class="line">	rootCmd.Flags().StringVar(&amp;argCrtFile, <span class="string">&quot;cert-file&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;certificate file for gRPC TLS authentication&quot;</span>)</span><br><span class="line">	rootCmd.Flags().StringVar(&amp;argKeyFile, <span class="string">&quot;key-file&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;key file for gRPC TLS authentication&quot;</span>)</span><br><span class="line">	rootCmd.Flags().StringVar(&amp;argCAFile, <span class="string">&quot;ca-file&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;ca file for gRPC client&quot;</span>)</span><br><span class="line">	rootCmd.PersistentFlags().BoolVarP(&amp;verbose, <span class="string">&quot;verbose&quot;</span>, <span class="string">&quot;v&quot;</span>, <span class="literal">false</span>, <span class="string">&quot;verbose output&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Service <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *Service)</span> <span class="title">SayHello</span><span class="params">(ctx context.Context, req *pb.HelloRequest)</span> <span class="params">(*pb.HelloReply, error)</span></span> &#123;</span><br><span class="line">	md, ok := metadata.FromIncomingContext(ctx)</span><br><span class="line">	<span class="keyword">if</span> !ok &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span>, grpc.Errorf(codes.Unauthenticated, <span class="string">&quot;no metadata&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	token := md.Get(<span class="string">&quot;token&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">len</span>(token) == <span class="number">0</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span>, grpc.Errorf(codes.Unauthenticated, <span class="string">&quot;no token&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	fmt.Println(<span class="string">&quot;requst:&quot;</span>, token[<span class="number">0</span>], req.Name)</span><br><span class="line">	<span class="keyword">return</span> &amp;pb.HelloReply&#123;</span><br><span class="line">		Message: <span class="string">&quot;hello, &quot;</span> + req.Name,</span><br><span class="line">	&#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> err := rootCmd.Execute(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(err)</span><br><span class="line">		os.Exit(<span class="number">1</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">run</span><span class="params">(cmd *cobra.Command, _ []<span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">	listener, err := net.Listen(<span class="string">&quot;tcp&quot;</span>, argAddress)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(err)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Create the TLS credentials</span></span><br><span class="line">	<span class="keyword">var</span> opts []grpc.ServerOption</span><br><span class="line">	<span class="keyword">if</span> argCrtFile != <span class="string">&quot;&quot;</span> &amp;&amp; argKeyFile != <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;enable credentials in the grpc&quot;</span>)</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> argCAFile == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">			creds, err := credentials.NewServerTLSFromFile(argCrtFile, argKeyFile)</span><br><span class="line">			<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">				<span class="built_in">panic</span>(err)</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			opts = <span class="built_in">append</span>(opts, grpc.Creds(creds))</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="comment">// Parse certificates from certificate file and key file for server.</span></span><br><span class="line">			cert, err := tls.LoadX509KeyPair(argCrtFile, argKeyFile)</span><br><span class="line">			<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">				<span class="built_in">panic</span>(err)</span><br><span class="line">				<span class="comment">//return fmt.Errorf(&quot;invalid config: error parsing gRPC certificate file: %v&quot;, err)</span></span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="comment">// Parse certificates from client CA file to a new CertPool.</span></span><br><span class="line">			cPool := x509.NewCertPool()</span><br><span class="line">			clientCert, err := ioutil.ReadFile(argCAFile)</span><br><span class="line">			<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">				<span class="built_in">panic</span>(err)</span><br><span class="line">				<span class="comment">//return fmt.Errorf(&quot;invalid config: reading from client CA file: %v&quot;, err)</span></span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> cPool.AppendCertsFromPEM(clientCert) != <span class="literal">true</span> &#123;</span><br><span class="line">				<span class="built_in">panic</span>(err)</span><br><span class="line">				<span class="comment">//return errors.New(&quot;invalid config: failed to parse client CA&quot;)</span></span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			tlsConfig := tls.Config&#123;</span><br><span class="line">				Certificates: []tls.Certificate&#123;cert&#125;,</span><br><span class="line">				ClientAuth:   tls.RequireAndVerifyClientCert,</span><br><span class="line">				ClientCAs:    cPool,</span><br><span class="line">			&#125;</span><br><span class="line">			opts = <span class="built_in">append</span>(opts,</span><br><span class="line">				grpc.Creds(credentials.NewTLS(&amp;tlsConfig)),</span><br><span class="line">			)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	server := grpc.NewServer(opts...)</span><br><span class="line">	pb.RegisterGreeterServer(server, &amp;Service&#123;&#125;)</span><br><span class="line"></span><br><span class="line">	logrus.WithField(<span class="string">&quot;addr&quot;</span>, argAddress).Println(<span class="string">&quot;Starting server&quot;</span>)</span><br><span class="line">	server.Serve(listener)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>客户端代码</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> (</span><br><span class="line">	argGRPCAddr   <span class="keyword">string</span></span><br><span class="line">	argCrtFile    <span class="keyword">string</span></span><br><span class="line">	argKeyFile    <span class="keyword">string</span></span><br><span class="line">	argCAFile     <span class="keyword">string</span></span><br><span class="line">	argCNOverride <span class="keyword">string</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> verbose <span class="keyword">bool</span></span><br><span class="line"><span class="keyword">var</span> rootCmd *cobra.Command</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">	rootCmd = &amp;cobra.Command&#123;</span><br><span class="line">		Use:   <span class="string">&quot;grpc-client&quot;</span>,</span><br><span class="line">		Short: <span class="string">&quot;demo client&quot;</span>,</span><br><span class="line">		Long:  <span class="string">&quot;Top level command for demo client&quot;</span>,</span><br><span class="line">		Run:   run,</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	rootCmd.Flags().StringVarP(&amp;argGRPCAddr, <span class="string">&quot;grpc-addr&quot;</span>, <span class="string">&quot;a&quot;</span>, <span class="string">&quot;127.0.0.1:3264&quot;</span>, <span class="string">&quot;grpc address&quot;</span>)</span><br><span class="line">	rootCmd.Flags().StringVar(&amp;argCrtFile, <span class="string">&quot;cert-file&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;certificate file for gRPC TLS authentication&quot;</span>)</span><br><span class="line">	rootCmd.Flags().StringVar(&amp;argKeyFile, <span class="string">&quot;key-file&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;key file for gRPC TLS authentication&quot;</span>)</span><br><span class="line">	rootCmd.Flags().StringVar(&amp;argCAFile, <span class="string">&quot;ca-file&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;ca file for gRPC client&quot;</span>)</span><br><span class="line">	rootCmd.Flags().StringVar(&amp;argCNOverride, <span class="string">&quot;cn-override&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;domain name override&quot;</span>)</span><br><span class="line">	rootCmd.PersistentFlags().BoolVarP(&amp;verbose, <span class="string">&quot;verbose&quot;</span>, <span class="string">&quot;v&quot;</span>, <span class="literal">false</span>, <span class="string">&quot;verbose output&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// customCredential 自定义认证</span></span><br><span class="line"><span class="keyword">type</span> customCredential <span class="keyword">struct</span> &#123;</span><br><span class="line">	token    <span class="keyword">string</span></span><br><span class="line">	security <span class="keyword">bool</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c customCredential)</span> <span class="title">GetRequestMetadata</span><span class="params">(ctx context.Context, uri ...<span class="keyword">string</span>)</span> <span class="params">(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>, error)</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>&#123;</span><br><span class="line">		<span class="string">&quot;token&quot;</span>: c.token,</span><br><span class="line">	&#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c customCredential)</span> <span class="title">RequireTransportSecurity</span><span class="params">()</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> c.security</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> err := rootCmd.Execute(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(err)</span><br><span class="line">		os.Exit(<span class="number">1</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">run</span><span class="params">(cmd *cobra.Command, _ []<span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> opts []grpc.DialOption</span><br><span class="line">	customCred := &amp;customCredential&#123;token: <span class="string">&quot;custom-token&quot;</span>&#125;</span><br><span class="line">	<span class="keyword">if</span> argCAFile != <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;enable credentials in the grpc&quot;</span>)</span><br><span class="line">		<span class="keyword">if</span> argCrtFile != <span class="string">&quot;&quot;</span> &amp;&amp; argKeyFile != <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">			cPool := x509.NewCertPool()</span><br><span class="line">			caCert, err := ioutil.ReadFile(argCAFile)</span><br><span class="line">			<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">				<span class="built_in">panic</span>(err)</span><br><span class="line">				<span class="comment">//return nil, fmt.Errorf(&quot;invalid CA crt file: %s&quot;, caPath)</span></span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> cPool.AppendCertsFromPEM(caCert) != <span class="literal">true</span> &#123;</span><br><span class="line">				<span class="built_in">panic</span>(err)</span><br><span class="line">				<span class="comment">//return nil, fmt.Errorf(&quot;failed to parse CA crt&quot;)</span></span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			clientCert, err := tls.LoadX509KeyPair(argCrtFile, argKeyFile)</span><br><span class="line">			<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">				<span class="built_in">panic</span>(err)</span><br><span class="line">				<span class="comment">//return nil, fmt.Errorf(&quot;invalid client crt file: %s&quot;, caPath)</span></span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			clientTLSConfig := &amp;tls.Config&#123;</span><br><span class="line">				RootCAs:      cPool,</span><br><span class="line">				Certificates: []tls.Certificate&#123;clientCert&#125;,</span><br><span class="line">			&#125;</span><br><span class="line">			creds := credentials.NewTLS(clientTLSConfig)</span><br><span class="line"></span><br><span class="line">			opts = <span class="built_in">append</span>(opts, grpc.WithTransportCredentials(creds))</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">			<span class="comment">// target is common name(host name) in the cert file</span></span><br><span class="line">			creds, err := credentials.NewClientTLSFromFile(argCAFile, argCNOverride)</span><br><span class="line">			<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">				<span class="built_in">panic</span>(err)</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			opts = <span class="built_in">append</span>(opts, grpc.WithTransportCredentials(creds))</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		customCred.security = <span class="literal">true</span></span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		opts = <span class="built_in">append</span>(opts, grpc.WithInsecure())</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// custom credentials</span></span><br><span class="line">	opts = <span class="built_in">append</span>(opts, grpc.WithPerRPCCredentials(customCred))</span><br><span class="line"></span><br><span class="line">	conn, err := grpc.Dial(argGRPCAddr, opts...)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(err)</span><br><span class="line">	&#125;</span><br><span class="line">	greeterClient := pb.NewGreeterClient(conn)</span><br><span class="line"></span><br><span class="line">	reply, err := greeterClient.SayHello(context.Background(),</span><br><span class="line">		&amp;pb.HelloRequest&#123;Name: <span class="string">&quot;luoji&quot;</span>&#125;)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		logrus.WithError(err).Fatal(<span class="string">&quot;unable to sayhello&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	logrus.Info(<span class="string">&quot;reply:&quot;</span>, reply.Message)</span><br><span class="line">	conn.Close()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>https</tag>
        <tag>tls</tag>
        <tag>tcp</tag>
        <tag>grpc</tag>
        <tag>cert</tag>
        <tag>证书</tag>
      </tags>
  </entry>
  <entry>
    <title>尝鲜, ubuntu 安装Docker</title>
    <url>/docker/ubuntu-docker-install-20150410.html</url>
    <content><![CDATA[<p>尝鲜、尝鲜、尝鲜!!! 开始安装Docker吧，多余的话不说了。</p>
<a id="more"></a>

<h3 id="安装要求"><a href="#安装要求" class="headerlink" title="安装要求"></a>安装要求</h3><ul>
<li>ubuntu 64 bit系统</li>
<li>系统内核3.10及以上 命令<code>uname -r</code></li>
</ul>
<h3 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h3><p><strong>系统包更新</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">$ sudo apt-get install apt-transport-https ca-certificates</span><br></pre></td></tr></table></figure>
<p><strong>增加GPG key</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys 58118E89F3A912897C070ADBF76221572C52609D</span><br></pre></td></tr></table></figure>
<p><strong>增加下载源</strong></p>
<p><code>vim /etc/apt/sources.list.d/docker.list</code> 添加以下内容：</p>
<ul>
<li>On Ubuntu Precise 12.04 (LTS)</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">deb https://apt.dockerproject.org/repo ubuntu-precise main</span><br></pre></td></tr></table></figure>
<ul>
<li>On Ubuntu Trusty 14.04 (LTS)</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">deb https://apt.dockerproject.org/repo ubuntu-trusty main</span><br></pre></td></tr></table></figure>
<ul>
<li>On Ubuntu Wily 15.10</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">deb https://apt.dockerproject.org/repo ubuntu-wily main</span><br></pre></td></tr></table></figure>
<ul>
<li>On Ubuntu Xenial 16.04 (LTS)</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">deb https://apt.dockerproject.org/repo ubuntu-xenial main</span><br></pre></td></tr></table></figure>
<p><strong>系统包更新</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure>
<p><strong>删除旧Docker</strong><br>检查系统是否已经安装docker并移除老版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get purge lxc-docker</span><br></pre></td></tr></table></figure>
<p><strong>验证安装Docker</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-cache policy docker-engine</span><br></pre></td></tr></table></figure>
<p><strong>安装依赖包</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install linux-image-extra-$(uname -r) linux-image-extra-virtual</span><br></pre></td></tr></table></figure>
<p><strong>安装Docker</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install docker-engine</span><br></pre></td></tr></table></figure>
<p><strong>启动Docker</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo service docker start</span><br></pre></td></tr></table></figure>
<p><strong>验证Docker安装</strong><br>下载并启动hello-world的docker镜像，终端打印<code>hello world</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo docker run hello-world</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>linux</tag>
        <tag>容器</tag>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>评论系统更换，多说替代Disqus</title>
    <url>/%E7%AC%94%E8%AE%B0/use-duoshuo-20170112.html</url>
    <content><![CDATA[<p>对于评论系统我个人比较偏爱Disqus，喜欢Disqus的简洁风格，博客启用至今一直使用它。多说是国内使用最多最便捷的第三方评论系统。为什么要用多说呢？当然是Disqus别强了，虽说翻墙对于程序员来说像吃饭一样简单，但对新手还是有一定的门槛。考虑再三还是决定换用多说，让评论飞扬起来吧。已有的Disqus的评论再见了，相信Disqus会在回来的。</p>
<p>以此来祭奠逝去的Disqus。 </p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
  </entry>
  <entry>
    <title>渐进式框架Vue学习资料</title>
    <url>/vue/vue-learning-note-20181009.html</url>
    <content><![CDATA[<p>对于前端开发本人还在Javascript、JQuery阶段，学习新的(ES6, TS, MVVM)等前端开发技能。我选择了学习Vue，Vue.js是一套用于构建用户界面的渐进式框架。 </p>
<a id="more"></a>

<h3 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h3><ul>
<li>JavaScript 和基本的 Web 开发</li>
<li><a href="https://cn.vuejs.org/v2/guide/">中文官网</a></li>
<li><a href="https://www.tutorialspoint.com/es6">ES6教程</a></li>
<li><a href="https://cli.vuejs.org/guide/">VUE CLI</a></li>
<li><a href="https://webpack.js.org/concepts/">WEBPACK</a></li>
<li><a href="https://www.typescriptlang.org/docs/">TypeScript</a></li>
</ul>
<h3 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h3><h4 id="官方资源"><a href="#官方资源" class="headerlink" title="官方资源"></a>官方资源</h4><ul>
<li><a href="http://vuejs.org/guide/">Official Guide</a></li>
<li><a href="http://vuejs.org/api/">API Reference</a></li>
<li><a href="https://github.com/vuejs/vue">GitHub Repo</a></li>
<li><a href="https://github.com/vuejs/vue/releases">Release Notes</a></li>
<li><a href="https://vuejs.org/v2/style-guide/">Style Guide</a></li>
<li><a href="https://news.vuejs.org/">Vue.js News</a></li>
</ul>
<h4 id="External资源"><a href="#External资源" class="headerlink" title="External资源"></a>External资源</h4><ul>
<li><a href="https://gist.github.com/hashrock/f575928d0e109ace9ad0">Vue.js資料まとめ(for japanese)</a> by @hashrock</li>
<li><a href="http://vue-newsletter.com/">Vue.js Newsletter</a> - Weekly dose of handpicked Vue.js news</li>
<li><a href="http://vuetips.com/">Vue.js Tips</a> - Tips to become a better Vue.js developer</li>
<li><a href="https://en.wikipedia.org/wiki/Vue.js">Vue.js Wikipedia</a></li>
<li><a href="https://www.vuejsradar.com/">Vue.js Radar</a> - Curated newsletter + site covering new Vue.js releases/contributions.</li>
<li><a href="https://vuenews.io/">Vue News</a> - Social website focusing on the latest Vue.js news and information.</li>
<li><a href="https://hackr.io/tutorials/learn-vue-js">Vue Curated Resources</a> - Recommended Vue.js courses and tutorials.</li>
<li><a href="https://builtforvue.com/">BuiltForVue</a> - NPM Mirror of all Vue.js components and packages.</li>
<li><a href="https://vueschool.io/">Vue School</a> - Learn Vue.js from video courses by core members and industry experts</li>
<li><a href="https://vuedose.tips/">VueDose</a>. Tips &amp; tricks about the Vue ecosystem, for busy devs.</li>
</ul>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>front-end</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Vagrant搭建Kubernetes集群</title>
    <url>/k8s/vagrant-k8s-20180729.html</url>
    <content><![CDATA[<p>Vagrant是用来管理虚拟机的，如VirtualBox、VMware、AWS等，主要好处是可以提供一个可配置、可移植和复用的软件环境，可以使用shell、chef、puppet等工具部署。所以vagrant不能单独使用，如果你用它来管理自己的开发环境的话，必须在自己的电脑里安装了虚拟机软件，这里使用virtualbox。 virtualbox是免费使用，VMware使用需要购买license。使用Vagrant方便快捷的搭建kubernetes集群.</p>
<a id="more"></a>

<h3 id="安装Vagrant"><a href="#安装Vagrant" class="headerlink" title="安装Vagrant"></a>安装Vagrant</h3><ul>
<li>下载安装VirtualBox: <a href="https://www.virtualbox.org/wiki/Downloads">https://www.virtualbox.org/wiki/Downloads</a></li>
<li>下载安装Vagrant:    <a href="http://downloads.vagrantup.com/">http://downloads.vagrantup.com</a></li>
</ul>
<h3 id="安装Vagrant插件"><a href="#安装Vagrant插件" class="headerlink" title="安装Vagrant插件"></a>安装Vagrant插件</h3><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">vagrant plugin <span class="keyword">install</span> vagrant-vbguest</span><br><span class="line">vagrant plugin <span class="keyword">install</span> vagrant-vbox-snapshot</span><br></pre></td></tr></table></figure>
<figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta"># 保存快照</span></span><br><span class="line">vagrant snapshot take</span><br><span class="line">vagrant snapshot list</span><br><span class="line"><span class="meta"># 恢复快照</span></span><br><span class="line">vagrant snapshot go</span><br><span class="line"><span class="meta"># 删除快照</span></span><br><span class="line">vagrant snapshot delete</span><br></pre></td></tr></table></figure>
<h3 id="编写Vagrantfile"><a href="#编写Vagrantfile" class="headerlink" title="编写Vagrantfile"></a>编写Vagrantfile</h3><figure class="highlight coq"><table><tr><td class="code"><pre><span class="line">Vagrant.configure(<span class="string">&quot;2&quot;</span>) <span class="built_in">do</span> |<span class="type">config</span>|<span class="type"></span></span><br><span class="line"><span class="type"></span></span><br><span class="line"><span class="type">  config</span>.vm.define <span class="string">&quot;master&quot;</span> <span class="built_in">do</span> |<span class="type">master</span>|<span class="type"></span></span><br><span class="line"><span class="type">    master</span>.vm.box = <span class="string">&quot;geerlingguy/centos7&quot;</span></span><br><span class="line">    master.vm.hostname = <span class="string">&quot;master&quot;</span></span><br><span class="line"></span><br><span class="line">    master.vm.provider <span class="string">&quot;virtualbox&quot;</span> <span class="built_in">do</span> |<span class="type">vb</span>|<span class="type"></span></span><br><span class="line"><span class="type">        vb</span>.memory = <span class="string">&quot;2048&quot;</span></span><br><span class="line">        vb.cpus = <span class="number">2</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    master.vm.network <span class="string">&quot;private_network&quot;</span>, ip: <span class="string">&quot;10.0.100.2&quot;</span></span><br><span class="line">    master.vm.synced_folder <span class="string">&quot;./data&quot;</span>, <span class="string">&quot;/share&quot;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  config.vm.define <span class="string">&quot;node01&quot;</span> <span class="built_in">do</span> |<span class="type">node01</span>|<span class="type"></span></span><br><span class="line"><span class="type">    node01</span>.vm.box = <span class="string">&quot;geerlingguy/centos7&quot;</span></span><br><span class="line">    node01.vm.hostname = <span class="string">&quot;node01&quot;</span></span><br><span class="line"></span><br><span class="line">    node01.vm.provider <span class="string">&quot;virtualbox&quot;</span> <span class="built_in">do</span> |<span class="type">vb</span>|<span class="type"></span></span><br><span class="line"><span class="type">        vb</span>.memory = <span class="string">&quot;2048&quot;</span></span><br><span class="line">        vb.cpus = <span class="number">2</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    node01.vm.network <span class="string">&quot;private_network&quot;</span>, ip: <span class="string">&quot;10.0.100.3&quot;</span></span><br><span class="line">    node01.vm.synced_folder <span class="string">&quot;./data&quot;</span>, <span class="string">&quot;/share&quot;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  config.vm.define <span class="string">&quot;node02&quot;</span> <span class="built_in">do</span> |<span class="type">node02</span>|<span class="type"></span></span><br><span class="line"><span class="type">    node02</span>.vm.box = <span class="string">&quot;geerlingguy/centos7&quot;</span></span><br><span class="line">    node02.vm.hostname = <span class="string">&quot;node02&quot;</span></span><br><span class="line"></span><br><span class="line">    node02.vm.provider <span class="string">&quot;virtualbox&quot;</span> <span class="built_in">do</span> |<span class="type">vb</span>|<span class="type"></span></span><br><span class="line"><span class="type">        vb</span>.memory = <span class="string">&quot;2048&quot;</span></span><br><span class="line">        vb.cpus = <span class="number">2</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    node02.vm.network <span class="string">&quot;private_network&quot;</span>, ip: <span class="string">&quot;10.0.100.4&quot;</span></span><br><span class="line">    node02.vm.synced_folder <span class="string">&quot;./data&quot;</span>, <span class="string">&quot;/share&quot;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<h3 id="启动虚拟机"><a href="#启动虚拟机" class="headerlink" title="启动虚拟机"></a>启动虚拟机</h3><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">vagrant up</span></span><br></pre></td></tr></table></figure>
<h3 id="安装kubernetes"><a href="#安装kubernetes" class="headerlink" title="安装kubernetes"></a>安装kubernetes</h3><p>参考：<a href="/k8s/k8s-install-on-centos7-20180609.html">安装k8s集群</a></p>
<h3 id="kubernetes-v1-11-1"><a href="#kubernetes-v1-11-1" class="headerlink" title="kubernetes v1.11.1"></a>kubernetes v1.11.1</h3><p>kubernetes更新到v1.11.1版本，dns服务使用corends替代原有dns插件。其他插件镜像也升级了，国内无法下载，可提前下载Dokcer镜像，如果你机器有科学上网请忽略这一步。我提前将Docker镜像下载到国内私有hub中。</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">ARCH</span>=amd64</span><br><span class="line"><span class="attribute">mversion</span>=v1.11.1</span><br><span class="line"><span class="attribute">username</span>=luoji</span><br><span class="line"><span class="attribute">password</span>=password</span><br><span class="line"><span class="attribute">repo</span>=k8s.gcr.io</span><br><span class="line"><span class="attribute">store_repo</span>=r.xiaozhou.net</span><br><span class="line"><span class="attribute">store_repo_path</span>=r.xiaozhou.net/kubernetes</span><br><span class="line"></span><br><span class="line">images=(<span class="variable">$&#123;repo&#125;</span>/kube-apiserver-<span class="variable">$&#123;ARCH&#125;</span>:<span class="variable">$&#123;mversion&#125;</span> \</span><br><span class="line">	<span class="variable">$&#123;repo&#125;</span>/kube-controller-manager-<span class="variable">$&#123;ARCH&#125;</span>:<span class="variable">$&#123;mversion&#125;</span> \</span><br><span class="line">	<span class="variable">$&#123;repo&#125;</span>/kube-scheduler-<span class="variable">$&#123;ARCH&#125;</span>:<span class="variable">$&#123;mversion&#125;</span> \</span><br><span class="line">	<span class="variable">$&#123;repo&#125;</span>/kube-proxy-<span class="variable">$&#123;ARCH&#125;</span>:<span class="variable">$&#123;mversion&#125;</span> \</span><br><span class="line">	<span class="variable">$&#123;repo&#125;</span>/coredns:1.1.3 \</span><br><span class="line">	<span class="variable">$&#123;repo&#125;</span>/etcd-<span class="variable">$&#123;ARCH&#125;</span>:3.2.18 \</span><br><span class="line">	<span class="variable">$&#123;repo&#125;</span>/pause:3.1 \</span><br><span class="line">	<span class="variable">$&#123;repo&#125;</span>/kubernetes-dashboard-<span class="variable">$&#123;ARCH&#125;</span>:v1.8.3 \</span><br><span class="line">    quay.io/coreos/flannel:v0.10.0-amd64 \</span><br><span class="line">	)</span><br><span class="line"></span><br><span class="line">docker login -u <span class="variable">$username</span> -p <span class="variable">$password</span> <span class="variable">$store_repo</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> url <span class="keyword">in</span> <span class="variable">$&#123;images[@]&#125;</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="attribute">sub</span>=<span class="variable">$&#123;url%/*&#125;</span></span><br><span class="line">    <span class="attribute">idx</span>=<span class="variable">$&#123;#sub&#125;</span></span><br><span class="line">    <span class="attribute">image</span>=<span class="variable">$&#123;url:$idx+1&#125;</span></span><br><span class="line">    echo -e <span class="string">&quot;download -&gt; <span class="variable">$store_repo_path</span>/<span class="variable">$image</span> -&gt; <span class="variable">$url</span>&quot;</span></span><br><span class="line">	docker pull <span class="variable">$store_repo_path</span>/<span class="variable">$image</span></span><br><span class="line">	docker tag <span class="variable">$store_repo_path</span>/<span class="variable">$image</span> <span class="variable">$url</span></span><br><span class="line">	docker rmi <span class="variable">$store_repo_path</span>/<span class="variable">$image</span></span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">unset ARCH mversion images username password repo store_repo store_repo_path</span><br></pre></td></tr></table></figure>
<p>配置Hosts</p>
<figure class="highlight accesslog"><table><tr><td class="code"><pre><span class="line">$ cat /etc/hosts</span><br><span class="line"><span class="number">10.0.100.2</span> master</span><br><span class="line"><span class="number">10.0.100.3</span> node01</span><br><span class="line"><span class="number">10.0.100.4</span> node02</span><br></pre></td></tr></table></figure>
<p>主节点初始化命令：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">kubeadm</span> init --kubernetes-version=v<span class="number">1</span>.<span class="number">11</span>.<span class="number">1</span> --pod-network-cidr=<span class="number">10.244.0.0</span>/<span class="number">16</span> --apiserver-advertise-address=<span class="number">10.0.100.2</span></span><br></pre></td></tr></table></figure>
<p>因kubernetes的Servie使用NodeType类型时，默认对外暴露的端口范围是30000-32767，如果你的环境有LoadBalancer支持，建议不使用NodeType。由于这是本地环境，不支持Loadalancer(目前只支持一些云服务商)。我将端口范围扩展到1-32767，需要额外的配置，这里使用<code>--config</code>参数指定配置文件。</p>
<p>创建kubeadm-init.conf配置文件，内容如下:</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">apiVersion:</span> kubeadm.k8s.io/v1alpha2</span><br><span class="line"><span class="symbol">kind:</span> MasterConfiguration</span><br><span class="line"><span class="symbol">kubernetesVersion:</span> v1<span class="number">.11</span><span class="number">.1</span></span><br><span class="line"><span class="symbol">api:</span></span><br><span class="line"><span class="symbol">  advertiseAddress:</span> <span class="number">10.0</span><span class="number">.100</span><span class="number">.2</span></span><br><span class="line"><span class="symbol">apiServerExtraArgs:</span></span><br><span class="line">  <span class="string">&quot;service-node-port-range&quot;</span>: <span class="string">&quot;1-32767&quot;</span></span><br><span class="line"><span class="symbol">networking:</span></span><br><span class="line"><span class="symbol">  podSubnet:</span> <span class="number">10.244</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">16</span></span><br></pre></td></tr></table></figure>
<p>配置<code>service-node-port-range: 1-32767</code> 指定端口范围。使用<code>kubeadm init --config kubeadm-init.conf</code>初始化命令。</p>
]]></content>
      <categories>
        <category>k8s</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
        <tag>k8s</tag>
        <tag>kubeadm</tag>
        <tag>vagrant</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Let’s Encrypt为你的网站开启HTTPS</title>
    <url>/%E5%B7%A5%E5%85%B7/websit-enable-https-20180623.html</url>
    <content><![CDATA[<p>之前使用Let’s Encrypt没有记录步骤，服务器到期迁移Blog又花了1个多小时。最终决定记录下步骤，真是好记性不如烂笔头。</p>
<a id="more"></a>

<h3 id="下载Certbot"><a href="#下载Certbot" class="headerlink" title="下载Certbot"></a>下载Certbot</h3><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">$ git clone https:<span class="regexp">//gi</span>thub.com<span class="regexp">/certbot/</span>certbot</span><br></pre></td></tr></table></figure>
<h3 id="生成证书"><a href="#生成证书" class="headerlink" title="生成证书"></a>生成证书</h3><p>生成证书前要先配置好DNS和关闭Nginx。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> <span class="built_in">cd</span> certbot</span><br><span class="line"><span class="variable">$</span> ./letsencrypt<span class="literal">-auto</span> certonly <span class="literal">-d</span> www.jerrylou.me <span class="literal">-d</span> jerrylou.me</span><br></pre></td></tr></table></figure>
<p>选择standalone选择，证书生成在/etc/letsencrypt/live/<a href="http://www.jerrylou.me/">www.jerrylou.me/</a></p>
<h3 id="配置Nginx"><a href="#配置Nginx" class="headerlink" title="配置Nginx"></a>配置Nginx</h3><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">443</span> ssl;</span><br><span class="line">    <span class="attribute">server_name</span>  www.jerrylou.me blog.jerrylou.me jerrylou.me;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">ssl_certificate</span> /etc/letsencrypt/live/www.jerrylou.me/fullchain.pem;</span><br><span class="line">    <span class="attribute">ssl_certificate_key</span> /etc/letsencrypt/live/www.jerrylou.me/privkey.pem;</span><br><span class="line">    <span class="attribute">ssl_protocols</span> TLSv1 TLSv1.<span class="number">1</span> TLSv1.<span class="number">2</span>;</span><br><span class="line">    <span class="attribute">ssl_session_cache</span> shared:SSL:<span class="number">10m</span>;</span><br><span class="line">    <span class="attribute">ssl_session_timeout</span> <span class="number">10m</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">root</span>         /var/www/gunsluo.github.io;</span><br><span class="line">    <span class="attribute">index</span>        index.html index.htm;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span> default_server;</span><br><span class="line">    <span class="attribute">server_name</span>  www.jerrylou.me blog.jerrylou.me jerrylou.me;</span><br><span class="line">    <span class="attribute">return</span> <span class="number">301</span> https://$server_name$request_uri;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="配置Cron"><a href="#配置Cron" class="headerlink" title="配置Cron"></a>配置Cron</h3><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">$ cat <span class="regexp">/etc/</span>crontab</span><br><span class="line"><span class="number">0</span>  <span class="number">0</span>    <span class="number">1</span> *<span class="regexp">/2 * root    systemctl stop nginx &amp;&amp; /</span>root<span class="regexp">/certbot/</span>certbot-auto renew --post-hook <span class="string">&quot;systemctl start nginx&quot;</span></span><br><span class="line"></span><br><span class="line">$ <span class="regexp">/etc/i</span>nit.d/cron reload</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>https</tag>
        <tag>ssl</tag>
        <tag>websit</tag>
        <tag>let&#39;s encrypt</tag>
      </tags>
  </entry>
  <entry>
    <title>Cadvisor源码分析监控项</title>
    <url>/cadvisor/cadvisor-source-code-metrics-20160927.html</url>
    <content><![CDATA[<p>主要讨论常见的性能指标，cpu,memory,network，filesystem 看下几种比较好的工具是如何搜集这些性能数据的，并且结合cadvisor进行具体的分析，有些内容比较琐碎，只能慢慢完善了。</p>
<p>想起来初中生物老师说过的话，微观的问题往往通过宏观的现象表现出来。当时感觉不明觉厉。运用到性能监控这里，代码级别的性能问题，反应出来，就是各个性能指标得到的信息了。具体的指标都有哪些，这些指标的含义是什么，应该算是基本功了，对这一部分的学习，要是基于此，并不停留于此。</p>
<a id="more"></a>

<h3 id="关于CPU"><a href="#关于CPU" class="headerlink" title="关于CPU"></a>关于CPU</h3><h4 id="uptime"><a href="#uptime" class="headerlink" title="uptime"></a>uptime</h4><p><strong>load average</strong></p>
<p>这个指标可以用来查看系统负载，所谓系统负载，即是在特定时间间隔内，运行队列中的平均进程数。</p>
<p>如果一个进程满足以下条件则其就会位于运行队列中：</p>
<p>它没有在等待I/O操作的结果 它没有主动进入等待状态(也就是没有调用’wait’) 没有被停止(例如：等待终止)</p>
<p>一般来说，每个CPU内核当前活动进程数不大于3，则系统运行表现良好！</p>
<p>当然这里说的是每个cpu内核，也就是如果你的主机是四核cpu的话，那么只要uptime最后输出的一串字符数值的和小于12，即表示系统负载不是很严重.当然如果达到20，那就表示当前系统负载非常严重，估计打开执行web脚本非常缓慢。这个指标还是与一定程度上还是与机器上的进程相关的，因为衡量的是等待队列的长度。</p>
<p>一般常用的工具中（比如top工具）的load average是统计 1分钟 5分钟 15分钟 时间段内的load average。</p>
<h4 id="vmstat"><a href="#vmstat" class="headerlink" title="vmstat"></a>vmstat</h4><p>vmstat是输出的信息比较全面，memory,swamp,io,cpu,system 可以从不同的角度对系统进行衡量，还有一些更细节的参数，可以用于信息的输出。</p>
<p>vmstat 1 可以每隔1s中打印出来一些信息（后面的信息是这1s之内的信息？？？），其中最后的几行是跟cpu有关的信息。先只看最后几行的信息，其实就是各种cpu时间的占比，其实这几个值是对cpu时间的进一步细分。</p>
<ul>
<li>us os在用户模式下所消耗的cpu时间占比。</li>
<li>sy os在系统模式下所消耗的cpu时间的占比，在内核模式下执行的时间的占比。</li>
<li>id 空闲的时候的cpu占比</li>
<li>wa 实际上是iowait time 等待时间 比如线程在I/O处理的时候阻塞，这个时候的cpu时间就被算到了id里面 就是等待着去为线程服务的时间</li>
<li>st（不是太常用） cpu steal time 在虚拟化的环境下，cpu被调用起来用于服务其他虚拟化资源的时间，注意这个并不是指虚拟机运行时候所占用的cpu时间，而是说hypervisor调用一些资源来进行，这个调用操作所占用的这部分时间，参考这里,通常解释就是 Time stolen from a virtual machine，这个里面有好多例子，介绍不同情况下，各个数据看起来是什么样子的。</li>
</ul>
<p>其实这个还是通过cpu的各种不同时间，从比较宏观的角度，反映出机器上进程的状态是什么样的，比如系统调用过多，RAM瓶颈，high IO Read/Write，以及cpu wait IO 等等。</p>
<h4 id="mpstat"><a href="#mpstat" class="headerlink" title="mpstat"></a>mpstat</h4><p>mpstat从更细的粒度上对cpu指标进行测量，比如<code>mpstat -P ALL 1</code>可以每隔1s的时间打印出本机上所有的cpu状态信息。具体测量方法也是对cpu的时间进行分类，名字不同，本质上是与vmstat是类似的，类别分的也更细一点，具体在需要的时候可以更细致地查询，这里就不再一一罗列。采用<code>sar -P ALL 1</code>也可以实现类似的结果。</p>
<h4 id="其他工具"><a href="#其他工具" class="headerlink" title="其他工具"></a>其他工具</h4><p>再细化的话，可以通过<code>ps -aux</code>或者 <code>ps -ef</code>查看每个进程所占用的cpu时间，如果就在终端查看的话，top工具应该比较实用，上面介绍的相关参数信息，在top工具中都有具体的体现。</p>
<p>由于top工具展示的数据比较多，因此就可以比较好的发现进系统出现的异常，比如哪个进程占用了过多的资源等等。当然类似的工具还有很多，可以从不同粒度对cpu的时间进行衡量，比如time,ptime,pidstat，要是粒度更细的话，可以从代码的层级进行衡量，比如使用DTrace，这里暂不讨论。</p>
<p>还有一个使用很广泛的工具,sysdig，可以达到很细的粒度。</p>
<h4 id="在cadvisor中-cpu相关指标测量-CpuStats-以及-TaskStats"><a href="#在cadvisor中-cpu相关指标测量-CpuStats-以及-TaskStats" class="headerlink" title="在cadvisor中 cpu相关指标测量 CpuStats 以及 TaskStats"></a>在cadvisor中 cpu相关指标测量 CpuStats 以及 TaskStats</h4><p><code>stats api</code>的具体输出如下 结果是ns。其中cpu_inst表示的是In nanocores per second (instantaneous)的cpu使用情况，可以认为是瞬间的使用率，表示cpu的瞬间使用率，即是在1s钟的时间内，cpu的使用的绝对时间。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;cpu&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;load_average&quot;</span>: 0,</span><br><span class="line">    <span class="string">&quot;usage&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;per_cpu_usage&quot;</span>: [</span><br><span class="line">            9866509286700,</span><br><span class="line">            9889084073920</span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&quot;system&quot;</span>: 12599470000000,</span><br><span class="line">        <span class="string">&quot;total&quot;</span>: 19755593360620,</span><br><span class="line">        <span class="string">&quot;user&quot;</span>: 6738860000000</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&quot;cpu_inst&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;usage&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;per_cpu_usage&quot;</span>: [</span><br><span class="line">            61482158,</span><br><span class="line">            71646320</span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&quot;system&quot;</span>: 60023536,</span><br><span class="line">        <span class="string">&quot;total&quot;</span>: 133128478,</span><br><span class="line">        <span class="string">&quot;user&quot;</span>: 50019613</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>summary api的相关部分具体输出如下 (又细分为 day _ usage，hour _ usage，minute _ usage)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;cpu&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;fifty&quot;</span>: 70,</span><br><span class="line">    <span class="string">&quot;max&quot;</span>: 232,</span><br><span class="line">    <span class="string">&quot;mean&quot;</span>: 96,</span><br><span class="line">    <span class="string">&quot;ninety&quot;</span>: 174,</span><br><span class="line">    <span class="string">&quot;ninetyfive&quot;</span>: 213,</span><br><span class="line">    <span class="string">&quot;present&quot;</span>: <span class="literal">true</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>先看下 summary api 这部分的含义，首先确定搜集的数据是什么，这里补充下百分比的这种表示方式，可以参考<a href="http://www2.arnes.si/~gljsentvid10/pct.html">这里</a>，在95%的时间之内，使用量低于这个值，其他的类似。剩下的几个是平均值，最大值等等。这里测量的值是</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Mean, Max, and 90p cpu rate value <span class="keyword">in</span> milliCpus/seconds. Converted to milliCpus to avoid floats.</span><br></pre></td></tr></table></figure>
<p>即是1s之内的cpu的使用时间（多少毫秒），这个是针对于每个容器而言的。比如这里，就是95%的采样时间都低于213ms。Instant sample 会在1s内更新一次。如果second数据足够多，就会产生minute数据。具体的这些指标又可以从 day _ usage，hour _ usage，minute _ usage 几个角度进行了细分。</p>
<p>关于summary stats 目前仅仅是追踪 cpu 以及 memory 的信息</p>
<p><strong>关于TaskStats</strong></p>
<p>具体cpuloader（manager中的一个字段）是由linux中的netlink实现的，cadvisor对netlink实现了一个封装，具体在utils/cpuload/netlink文件夹中，里面有个example.go的文件，介绍了主要的使用方式，从cgroups文件夹中获取不同的对应的信息，cpuloader主要用来获取TaskStats的相关信息。</p>
<p>netlink是一个用于在用户空间和内核空间进行通讯的工具，也是一种socket可以参考这个 <a href="http://blog.csdn.net/bingqingsuimeng/article/details/8470029">http://blog.csdn.net/bingqingsuimeng/article/details/8470029</a></p>
<p>通过netlink可以得到的具体的信息，这部分信息实际上最后被放在TaskStats LoadStats字段当中。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// Number of sleeping tasks.</span><br><span class="line">NrSleeping uint64 `json:<span class="string">&quot;nr_sleeping&quot;</span>`</span><br><span class="line"></span><br><span class="line">// Number of running tasks.</span><br><span class="line">NrRunning uint64 `json:<span class="string">&quot;nr_running&quot;</span>`</span><br><span class="line"></span><br><span class="line">// Number of tasks <span class="keyword">in</span> stopped state</span><br><span class="line">NrStopped uint64 `json:<span class="string">&quot;nr_stopped&quot;</span>`</span><br><span class="line"></span><br><span class="line">// Number of tasks <span class="keyword">in</span> uninterruptible state</span><br><span class="line">NrUninterruptible uint64 `json:<span class="string">&quot;nr_uninterruptible&quot;</span>`</span><br><span class="line"></span><br><span class="line">// Number of tasks waiting on IO</span><br><span class="line">NrIoWait uint64 `json:<span class="string">&quot;nr_io_wait&quot;</span>`</span><br></pre></td></tr></table></figure>
<p>在containerStats中的cpu usage中包含的信息可以根据libcontaner中的相关操作得出，其中显示的单位是ns，明显这种显示不是太友好，百分比的形式会更好点，percpuusage显然是每个cpu使用的时间。</p>
<p>在updateStats的时候，会通过manager查看一下其cpuloader是否为nil之后get相关的信息,可以看到最后的结果被存在了stats.TaskStats字段中。这部分的信息目前是单独获取的，还没有被缓存起来。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> c.loadReader != nil &#123;</span><br><span class="line">      // TODO(vmarmol): Cache this path.</span><br><span class="line">      path, err := c.handler.GetCgroupPath(<span class="string">&quot;cpu&quot;</span>)</span><br><span class="line">      <span class="keyword">if</span> err == nil &#123;</span><br><span class="line">          loadStats, err := c.loadReader.GetCpuLoad(c.info.Name, path)</span><br><span class="line">          <span class="keyword">if</span> err != nil &#123;</span><br><span class="line">              <span class="built_in">return</span> fmt.Errorf(<span class="string">&quot;failed to get load stat for %q - path %q, error %s&quot;</span>, c.info.Name, path, err)</span><br><span class="line">          &#125;</span><br><span class="line">          stats.TaskStats = loadStats</span><br><span class="line">          c.updateLoad(loadStats.NrRunning)</span><br><span class="line">          // convert to <span class="string">&#x27;milliLoad&#x27;</span> to avoid floats and preserve precision.</span><br><span class="line">          stats.Cpu.LoadAverage = int32(c.loadAvg * 1000)</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>
<p>按理说在/sys/fs/cgroup/cpuacct这里面都可以找到cpu相关的信息，为何还要使用netlink socket的方式？具体原因可以<a href="https://groups.google.com/forum/#!topic/google-containers/A4MqwpTCpMw">参考</a></p>
<p>cpuacct gives us CPU usage, but the netlink code will get us load which we define as the number of threads waiting on CPU. This is not provided by cpuacct today. (在cadvisor中所定义的load包含等待cpu的task的数目(task load的相关信息) 单纯的cpuacct无法提供相关信息 这个与vmstat有点类似了)</p>
<p>在cadvisor中，这部分自己定义的信息叫做LoadStats，于CpuStats（包含相对普通的cpu信息）有所区别。</p>
<h3 id="关于Memory"><a href="#关于Memory" class="headerlink" title="关于Memory"></a>关于Memory</h3><p>背景知识补充</p>
<p>catched memroy 读写文件的时候，一些文件会在cache中缓存，以便提高读写速度，这部分内容就存在cache中。缓存内存(Cache Memory)在你需要使用内存的时候会自动释放，所以你不必担心没有内存可用。</p>
<p>page cache 以及 buffer cache 两种cache都是 disk到memory中的中间结构，只不多存储的内容不同。</p>
<h4 id="free"><a href="#free" class="headerlink" title="free"></a>free</h4><p>通过free命令查看内存的使用情况</p>
<p>第一行</p>
<ul>
<li>total 总共的物理内存</li>
<li>used 应用程序所占用的内存+cache做占用的内存</li>
<li>free 完全没有被使用的内存 free+used=total</li>
<li>shared 应用程序共享的内存</li>
<li>buffers 缓存，主要用于目录方面，inode值等（ls大目录可看到这个值增加） cached 缓存，用于已打开的文件</li>
</ul>
<p>其他注意 total=free+used used &gt; buffer+cached (所谓应用程序占用实际上就体现在这两个方面) 第二行描述应用程序的内存使用： 前个值表示-buffers/cache —— 应用程序本身可以使用的内存大小，used减去缓存值 后个值表示+buffers/cache —— 所有可供应用程序使用的内存大小，free加上缓存值</p>
<p>注意<br>-buffers/cache=used-buffers-cached<br>+buffers/cache=free+buffers+cached</p>
<p>第三行表示swap的使用： used——已使用  free——未使用</p>
<h4 id="实际场景"><a href="#实际场景" class="headerlink" title="实际场景"></a>实际场景</h4><p>又一次进行监控，发现top时候，%MEM中显示的容器的内存占用百分比与通过cgroup的时候进行操作的结果是不一致的。在docker stats中显示出来的结果明显大于通过top命令显示出来的结果，这就是所谓的“度量不一致“导致的原因吧。</p>
<p>通过ps -aux可以看到 RSS 以及 %MEM 这里的RSS表示的是（resident set size）表示的是系统的常驻内存，而这里的%MEM表示的是RSS所站的内存总量的百分比。</p>
<p>通过top命令显示出来的字段被称为RES这个实际上也表示的是常驻内存，就是不同工具带来的拼写有差异。</p>
<p>在docker stats &lt;容器id&gt;中显示出来的当前容器所占用的内存，实际上是cgroups文件系统中的memory.stat文件下，cache+rss两部分的总和，所以通过docker stats或得到的memory会稍微大一些。</p>
<h4 id="vmstat-1"><a href="#vmstat-1" class="headerlink" title="vmstat"></a>vmstat</h4><p>首先还是看vmstat中的数据，这个还是从比较宏观的层面上显示了一些具体的指标信息。其中涉及内存健康状况的信息包括以下方面：</p>
<h4 id="memory角度"><a href="#memory角度" class="headerlink" title="memory角度"></a>memory角度</h4><p>这里的单位都是 KB （注意buffer与cache的区别）</p>
<ul>
<li>swpd 从内存中换出的容量（从memory换出到disk上的容量）</li>
<li>free 当前可以使用的memory的大小</li>
<li>buff 在buffer cache中的内存的大小</li>
<li>cache 在page cache中的内存大小</li>
</ul>
<h4 id="swap角度"><a href="#swap角度" class="headerlink" title="swap角度"></a>swap角度</h4><ul>
<li>si 被换入的内存的大小</li>
<li>so 被换出的内存的大小</li>
</ul>
<h4 id="top"><a href="#top" class="headerlink" title="top"></a>top</h4><p>通过top工具的Mem那一行可以比较清楚地看出mem的占用情况，其中 total=used+free used=程序实际使用的+buffer(buffer cache)+cache(page cache)</p>
<h4 id="cadvisor中的实现"><a href="#cadvisor中的实现" class="headerlink" title="cadvisor中的实现"></a>cadvisor中的实现</h4><p>cadvisor中的内存指标数据</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">type</span> MemoryStats struct &#123;</span><br><span class="line">  // Current memory usage, this includes all memory regardless of when it was</span><br><span class="line">  // accessed.</span><br><span class="line">  // Units: Bytes.</span><br><span class="line">  Usage uint64 `json:<span class="string">&quot;usage&quot;</span>`</span><br><span class="line"></span><br><span class="line">  // The amount of working <span class="built_in">set</span> memory, this includes recently accessed memory,</span><br><span class="line">  // dirty memory, and kernel memory. Working <span class="built_in">set</span> is &lt;= <span class="string">&quot;usage&quot;</span>.</span><br><span class="line">  // Units: Bytes.（实际上是一些cache page）</span><br><span class="line">  WorkingSet uint64 `json:<span class="string">&quot;working_set&quot;</span>`</span><br><span class="line"></span><br><span class="line">  Failcnt uint64 `json:<span class="string">&quot;failcnt&quot;</span>`</span><br><span class="line"></span><br><span class="line">  ContainerData    MemoryStatsMemoryData `json:<span class="string">&quot;container_data,omitempty&quot;</span>`</span><br><span class="line">  HierarchicalData MemoryStatsMemoryData `json:<span class="string">&quot;hierarchical_data,omitempty&quot;</span>`</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>具体的信息还是通过runc/libcontainer获得的。libcontainer可以获得的信息包括：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Stats <span class="keyword">struct</span> &#123;</span><br><span class="line">  CpuStats    CpuStats    <span class="string">`json:&quot;cpu_stats,omitempty&quot;`</span></span><br><span class="line">  MemoryStats MemoryStats <span class="string">`json:&quot;memory_stats,omitempty&quot;`</span></span><br><span class="line">  BlkioStats  BlkioStats  <span class="string">`json:&quot;blkio_stats,omitempty&quot;`</span></span><br><span class="line">  <span class="comment">// the map is in the format &quot;size of hugepage: stats of the hugepage&quot;</span></span><br><span class="line">  HugetlbStats <span class="keyword">map</span>[<span class="keyword">string</span>]HugetlbStats <span class="string">`json:&quot;hugetlb_stats,omitempty&quot;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其他的信息就需要通过别的渠道获取了。获取的方式也就是打开对应的文件，之后得到相应的数值。在/sys/fs/cgroup/memory中包含大量的了memory相关的信息。具体含义可以参考cgroup的相关说明。之后通过相关的函数把从cgroups中获得到的信息即sgroup.stats转化成为cadvisor可以使用的containerStats</p>
<ul>
<li>usage字段指的是 cgropup中进程当前使用的总得内存量 （实际上cgroup还可以对内存用量使用量的上限进行限制，因此还可以设置内存上限的使用量以及超过这个使用量的次数）</li>
<li>workingset字段指的是 cgroup中的total _ inactive _ anon ？？？of bytes of anonymous and swap cache memory on inactive LRU list（需要把LRU Page再看看）</li>
<li>Failcnt show the number of memory usage hits limits 指的是缺页的次数 (可能达到了limit还发生swamp交换？？？)</li>
</ul>
<p>关于cgroup在memory方面的使用可以<a href="http://xiezhenye.com/2013/10/%E7%94%A8-cgruops-%E7%AE%A1%E7%90%86%E8%BF%9B%E7%A8%8B%E5%86%85%E5%AD%98%E5%8D%A0%E7%94%A8.html">参考</a>，里面对于memrory的参数解释的比较清楚，比如memsw的含义，上限控制（含有soft时候的区别），oom killer等等。对于cgroup更全面的解释，最全的地方就是参考<a href="https://www.kernel.org/doc/Documentation/cgroup-v1/memory.txt">官方文档</a>了，其他的比较好的资源比如<a href="http://hustcat.github.io/memory-usage-in-process-and-cgroup/">这个</a>。里面对page的分类说的很好。</p>
<h3 id="关于network"><a href="#关于network" class="headerlink" title="关于network"></a>关于network</h3><p>cgroup本身没有对network进行什么限制。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">type</span> NetworkStats struct &#123;</span><br><span class="line">  InterfaceStats `json:<span class="string">&quot;,inline&quot;</span>`</span><br><span class="line">  Interfaces     []InterfaceStats `json:<span class="string">&quot;interfaces,omitempty&quot;</span>`</span><br><span class="line">  // TCP connection stats (Established, Listen...)</span><br><span class="line">  Tcp TcpStat `json:<span class="string">&quot;tcp&quot;</span>`</span><br><span class="line">  // TCP6 connection stats (Established, Listen...)</span><br><span class="line">  Tcp6 TcpStat `json:<span class="string">&quot;tcp6&quot;</span>`</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>terfaceStats就是网络interface的信息</p>
<p>容器没有自己的网络占的时候，就不搜集对应的信息（比如运行在k8s的 pod中的容器）</p>
<p>具体的信息也都是从/proc/<pid>/net/dev文件当中获取的，主要就是TCP链接的各种状态。</p>
<p>在./cadvisor/contianer/docker/handler.go GetStats（被housekeeping调用） 函数以及 ./cadvisor/libcontainer/helper.go 文件中的GetStats函数比较关键，它们两个是互相调用的关系，通过这个可以看出哪些信息是从libcontainer中搜集过来的，以及哪些信息是从host的其他地方搜集来的（比如 Filesystem 的信息以及 Network 的信息）</p>
<h3 id="关于Filesystem"><a href="#关于Filesystem" class="headerlink" title="关于Filesystem"></a>关于Filesystem</h3><p>单独使用的一系列函数得到的相关信息。</p>
<h3 id="iskIoStats"><a href="#iskIoStats" class="headerlink" title="iskIoStats"></a>iskIoStats</h3><p>这个信息是在cgroup信息转化为cadvisor中的container信息的时候进行的操作，具体可以参考这个函数toContainerStats1 信息来自于BlkioStats,主要之cgroup对于blkio方面的限制。可以参考这个<a href="http://www.elmerzhang.com/2012/12/cgroups-learning-6-blkio-subsystem/">http://www.elmerzhang.com/2012/12/cgroups-learning-6-blkio-subsystem/</a></p>
<p>具体cadvisor中的结果</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;diskio&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;io_service_bytes&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;major&quot;</span>: <span class="number">8</span>,</span><br><span class="line">            <span class="string">&quot;minor&quot;</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="string">&quot;stats&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;Async&quot;</span>: <span class="number">1646592</span>,</span><br><span class="line">                <span class="string">&quot;Read&quot;</span>: <span class="number">1536000</span>,</span><br><span class="line">                <span class="string">&quot;Sync&quot;</span>: <span class="number">0</span>,</span><br><span class="line">                <span class="string">&quot;Total&quot;</span>: <span class="number">1646592</span>,</span><br><span class="line">                <span class="string">&quot;Write&quot;</span>: <span class="number">110592</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&quot;io_serviced&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;major&quot;</span>: <span class="number">8</span>,</span><br><span class="line">            <span class="string">&quot;minor&quot;</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="string">&quot;stats&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;Async&quot;</span>: <span class="number">54</span>,</span><br><span class="line">                <span class="string">&quot;Read&quot;</span>: <span class="number">27</span>,</span><br><span class="line">                <span class="string">&quot;Sync&quot;</span>: <span class="number">0</span>,</span><br><span class="line">                <span class="string">&quot;Total&quot;</span>: <span class="number">54</span>,</span><br><span class="line">                <span class="string">&quot;Write&quot;</span>: <span class="number">27</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>cgroup中关于block io system 的表述</p>
<p><a href="https://www.kernel.org/doc/Documentation/cgroup-v1/blkio-controller.txt">https://www.kernel.org/doc/Documentation/cgroup-v1/blkio-controller.txt</a></p>
<p>主要是理解 <major>:<minor> <bytes_per_second>这种表述的含义。可以参考下这个，设备号被记录在/proc/devices 文件中，the major number identifies the driver associated with the device，The minor number is used by the kernel to determine exactly which device is being referred to， the minor number is used by the kernel to determine exactly which device is being referred to.</p>
<p>说的直接一点就是主设备代表的是驱动的大的类别，从设备代表的是驱动的具体的实体，主要是对主从设备号有一些理解。</p>
<h3 id="用户自定义Metric"><a href="#用户自定义Metric" class="headerlink" title="用户自定义Metric"></a>用户自定义Metric</h3><p>可以自定义一些metrics添加到manager的对应字段中</p>
<h3 id="相关参考资料"><a href="#相关参考资料" class="headerlink" title="相关参考资料"></a>相关参考资料</h3><p>cgroup各种参数中文版解释（由于好多信息都来自libcontainer而libcontainer中又是对cgroups的封装 直接查看文档比较快 这个资源很不错）</p>
<ul>
<li><a href="https://access.redhat.com/documentation/zh-CN/Red_Hat_Enterprise_Linux/6/html/Resource_Management_Guide/ch-Subsystems_and_Tunable_Parameters.html#sec-blkio">https://access.redhat.com/documentation/zh-CN/Red_Hat_Enterprise_Linux/6/html/Resource_Management_Guide/ch-Subsystems_and_Tunable_Parameters.html#sec-blkio</a></li>
<li>关于linux io的监控： <a href="http://www.cnblogs.com/york-hust/p/3793064.html">http://www.cnblogs.com/york-hust/p/3793064.html</a></li>
<li>network信息获取： 关键需要计算每秒的值 <a href="http://xmodulo.com/measure-packets-per-second-throughput-high-speed-network-interface.html">http://xmodulo.com/measure-packets-per-second-throughput-high-speed-network-interface.html</a></li>
<li>proc中的字段详细信息 <a href="http://linux.die.net/man/5/proc">http://linux.die.net/man/5/proc</a></li>
</ul>
]]></content>
      <categories>
        <category>cadvisor</category>
      </categories>
      <tags>
        <tag>cadvisor</tag>
        <tag>golang</tag>
        <tag>docker</tag>
        <tag>监控</tag>
      </tags>
  </entry>
  <entry>
    <title>Cadvisor源码分析管理篇（三）</title>
    <url>/cadvisor/cadvisor-source-code3-20160927.html</url>
    <content><![CDATA[<p>这一部分主要是对manager的相关组件进行分析，manager组件应该是整个cadvisor的核心功能，应该是诸多核心逻辑实现的部分，怎么注册信息，怎么提取数据，何时开始搜集数据，间隔时间怎样，何时停止等等，由于manager部分本身比较抽象，所以理解起来还是比较困难，这里也是大概记录，好多细节也理解的不太好，只能一点一点修改了。</p>
<a id="more"></a>

<p>在manager.go文件中可以看到，manager是一个interface类型，里面定义了诸多方法，于是要看下，在main函数中调用start方法的是哪个manager，定位到/manager/manager.go文件中。大致浏览interface中定义的方法，可以发现，manage的主要功能就是负责一些具体的逻辑的操作，怎么样启动，怎么样开始搜集信息等等，之后再调用上面提到之前part2存储部分中提到的cache接口和storage接口来把数据存到合适的地方。</p>
<p>这一块需要从两个角度来分析，一方面manager通过start启动，会开始搜集数据，另一方面，manager也会被注册到api逻辑的实现部分，因为并不是所有数据的都一次存好的，有些数据要等到真正发送api请求的时候，才会去搜集，进行真正的取数操作，相当于是动态进行的，这些动态取数的操作，在part4 中具体介绍api的时候再细分析。</p>
<p>首先从manager自身的角度看一下manager.start的实现。在cadvisor.go文件中，相关的有两个操作，一个manager.New操作，即生成一个新的containerManager组件，另一个是start，即启动manager，启动各种goroutine。</p>
<p>首先来看下manager.New都做了哪些事情:</p>
<h3 id="manager-New"><a href="#manager-New" class="headerlink" title="manager.New"></a>manager.New</h3><p>首先是检验该进程是否运行在容器中。</p>
<p>检验的方式是通过读取<code>/proc/self/cgroup</code>文件的某个子系统（这里是用cpu子系统）来获取容器id。<code>/proc/self/cgroup</code>文件的含义可以查看<a href="http://man7.org/linux/man-pages/man5/proc.5.html">这里</a>访问<code>/proc/self</code>和使用<code>/proc/&lt;本进程id&gt;</code>的效果是一样的，采用<code>/proc/self</code>会直接通过软链接的方式链接到当前进程所在的对应的目录下。可以<a href="http://unix.stackexchange.com/questions/34192/how-is-proc-self-implemented-in-linux">参考</a>。</p>
<p>目前在本机上直接运行的时候，这一步似乎有些问题。比如在我的本机上，获得到如下的信息<code>3:cpu:/user/1000.user/c3.session</code>，这似乎与通常形式docker容器的名称不一样。其实这里的容器是广泛意义上的容器，并不仅仅局限于docker容器，只要是被cgroup文件系统所监控的目录，在cadvisor看来，都是一个“容器”，因此直接在宿主机上运行cadvisor的时候（比如在自己的虚拟机上）得到的selfcontianer的id就是这个<code>/user/1000.user/c3.session</code>。???</p>
<p>毕竟绝大部分还是基于docker容器的，之后docker客户端给本地的docker daemon发请求，得到docker的信息，dockerInfo，之后生成一个叫做context结构的实例，其中包括dockerRoot以及dockerInfo，获取这个context的目的是根据这个信息生成RealFsInfo结构的一个实例，RealFsInfo是对FsInfo interface 的实现，并且还包含partition和labels两个字段cd，具体流程如下：</p>
<p>关于chroot可以参考下相关的资料以及<a href="http://lwn.net/Articles/531114/">namespace in operation</a>通过<code>/proc/pid/mountinfo</code>文件，可以查看到当前这个进程所在的mount namespace下所有的mount point，具体的文件中每个字段的信息，可以查看<a href="http://man7.org/linux/man-pages/man5/proc.5.html">这里</a>。</p>
<p>通过对mountinfo文件进行解析之后，每一条信息都会生成一个info结构体，包含对应的那几个字段。对每一条进行解析，首先是检验是否为支持的文件系统（Fstype包含ext的，或者btrfs或者xfs的）在docker context的文件类型为devicemapper的时候，需要单独进行一些额外的操作。最后通过这些从mountinfo文件中提取出来的信息，生成partition map。存储到FsInfo中，并返回，这一块还是有些不理解，主要是对文件系统相关的这块还不是很理解，下面是本机上运行cadvisor，生成RealFsInfo的内容，可以参考下这个(莫非是说docker image所在的设备号？？root那个是什么意思？？)：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&amp;&#123;partitions:map[/dev/disk/by-uuid/eb63c885-a9a8-4cc8-aad7-25357b10b3b3:</span><br><span class="line">&#123;mountpoint:/ major:8 minor:1 fsType: blockSize:0&#125;] labels:map[root:/</span><br><span class="line">dev/disk/by-uuid/eb63c885-a9a8-4cc8-aad7-25357b10b3b3 docker-images:/</span><br><span class="line">dev/disk/by-uuid/eb63c885-a9a8-4cc8-aad7-25357b10b3b3]&#125;</span><br></pre></td></tr></table></figure>
<p>之后再回到New函数中，下面一步是判断容器是否存在于hostnamespace(主要判断/rootfs/proc是否存在) 最后根据之前的信息生成manager结构体：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">newManager := &amp;manager&#123;</span><br><span class="line">	containers:               make(map[namespacedContainerName]*containerData),</span><br><span class="line">	quitChannels:             make([]chan error, 0, 2),</span><br><span class="line">	memoryCache:              memoryCache,</span><br><span class="line">	fsInfo:                   fsInfo,</span><br><span class="line">	cadvisorContainer:        selfContainer,</span><br><span class="line">	inHostNamespace:          inHostNamespace,</span><br><span class="line">	startupTime:              time.Now(),</span><br><span class="line">	maxHousekeepingInterval:  maxHousekeepingInterval,</span><br><span class="line">	allowDynamicHousekeeping: allowDynamicHousekeeping,</span><br><span class="line">	ignoreMetrics:            ignoreMetricsSet,</span><br><span class="line">	containerWatchers:        []watcher.ContainerWatcher&#123;&#125;,</span><br><span class="line">	eventsChannel:            eventsChannel,</span><br><span class="line">	collectorHttpClient:      collectorHttpClient,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>之后还要获得machine的信息（主要是查询各种文件）并且进行eventhandler(主要是封装了一些对event进行处理的操作，相当于是一个event manager)的注册，生成最后的manager返回。</p>
<p>关于FsInfo的几个问题还要再补充说明下。</p>
<h3 id="manager的Start-方法"><a href="#manager的Start-方法" class="headerlink" title="manager的Start()方法"></a>manager的Start()方法</h3><p>start方法就是启动一些一直要运行的go routine来用于实现各种监控操作。</p>
<p>首先是注册factory，facotory实质上是对容器的一些操作的方法的封装，具体可以看./cadvisor/container的package,其中有ContainerHandlerFactory以及ContainerHandler两个主要的接口，ContainerHandler主要是对容器的一些操作的实现，ContainerHandlerFactory是更上层的抽象，比如创建一个containerhandle或者判断当前的containerhandler可否使用。具体对这个两个接口的实现有方式也有两种，一个是在docker 文件夹下的实现，一个是在raw文件夹下的实现。</p>
<p>注册factory的操作就是调用docker.Register以及raw.Register方法将对应的Factory注册到所生成的manager实例中。之后根据参数判断是否启动cpuloadreader。（因为cpuload的值是不断变化的，而且变换速度很快，所以要单独设置一个loaderreader来不断地读取信息）</p>
<p>之后通过manager的watchForNewOoms方法，启动对于OOM的watch操作，这里主要是读取内核的日志文件，并进行解析，看是否捕获OOM信息。</p>
<p>后面的两个操作比较重要：<code>createContainer(&quot;/&quot;)</code>以及<code>detectSubcontainers(&quot;/&quot;)</code> 在manager中的具体操作如下，它们的功能主要就是注册cadvisor文件系统中名字为”/“的容器以及文件目录层次中的其它容器，稍后再具体分析这两个函数。</p>
<p>之后通过manager来watchNewContianer，即是watch cgroup的文件系统，如果其中有新的容器（目录）添加或者被删除，则需要动态地对内存中所存储的信息进行更新删除操作，保持存储的信息与实际的信息一致。</p>
<p>最后开启一个新的goroutine，其中主要执行的是一个定时器的操作，如果没有接收到quite信号，就继续执行detectSubcontainers(“/”)的操作，可以看到，具体的添加注册容器的操作应该都是在createContainer和detectSubcontainers中进行的，先看一下这一部分的结构图：</p>
<p><img src="http://7xn7vm.com1.z0.glb.clouddn.com/manager.001.jpeg" alt="Alt text" title="Cadvisor source code 3"></p>
<p>详细分析下涉及到的主要的函数</p>
<p>*<em>func (m <em>manager) createContainer(containerName string)</em></em></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">创建containerHandler,主要是通过遍历factories，根据containerName看是否能该factories处理，如果可以处理，就调用对应factory的NewContainerHandler方法。</span><br><span class="line"></span><br><span class="line">创建containerManager (拥有更上一层的方法的抽象) 实例 m，返回的是一个GenericCollectorManager的结构，里面有两个字段，一个是<span class="string">`[]*collectorData&#123;&#125;`</span>数组，另外一个是下次开始搜集的时间。</span><br><span class="line"></span><br><span class="line">创建newContainerData</span><br><span class="line"></span><br><span class="line">通过containerHandler的GetCollectorConfig得到collectorConfigs(一个<span class="keyword">map</span>)</span><br><span class="line"></span><br><span class="line">通过containerManager的registerCollectors添加Collectors</span><br><span class="line"></span><br><span class="line">Add colletors 这里还有点问题？？？</span><br><span class="line"></span><br><span class="line">检验container是否存在（即之前提到的m.containers字段），不存在则把新生成containerData添加进来。</span><br><span class="line"></span><br><span class="line">生成event对象，通过m的eventHandler把newEvent添加进来。</span><br><span class="line"></span><br><span class="line">之后开启containerData对象的start方法。</span><br></pre></td></tr></table></figure>
<p>前面已经列出了manager对象的主要结构，其中与这部分相关的是这几个：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> manager <span class="keyword">struct</span> &#123;</span><br><span class="line">	containers               <span class="keyword">map</span>[namespacedContainerName]*containerData</span><br><span class="line">	containersLock           sync.RWMutex</span><br><span class="line">	memoryCache              *memory.InMemoryCache</span><br><span class="line">	fsInfo                   fs.FsInfo</span><br><span class="line">	machineInfo              info.MachineInfo</span><br><span class="line">	quitChannels             []<span class="keyword">chan</span> error</span><br><span class="line">	cadvisorContainer        <span class="keyword">string</span></span><br><span class="line">	inHostNamespace          <span class="keyword">bool</span></span><br><span class="line">	eventHandler             events.EventManager</span><br><span class="line">	startupTime              time.Time</span><br><span class="line">	maxHousekeepingInterval  time.Duration</span><br><span class="line">	allowDynamicHousekeeping <span class="keyword">bool</span></span><br><span class="line">	ignoreMetrics            container.MetricSet</span><br><span class="line">	containerWatchers        []watcher.ContainerWatcher</span><br><span class="line">	eventsChannel            <span class="keyword">chan</span> watcher.ContainerEvent</span><br><span class="line">	collectorHttpClient      *http.Client</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到，对容器进行实际操作的应该是这个containerData结构。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> containerData <span class="keyword">struct</span> &#123;</span><br><span class="line">	handler                  container.ContainerHandler</span><br><span class="line">	info                     containerInfo</span><br><span class="line">	memoryCache              *memory.InMemoryCache</span><br><span class="line">	lock                     sync.Mutex</span><br><span class="line">	loadReader               cpuload.CpuLoadReader</span><br><span class="line">	summaryReader            *summary.StatsSummary</span><br><span class="line">	loadAvg                  <span class="keyword">float64</span> <span class="comment">// smoothed load average seen so far.</span></span><br><span class="line">	housekeepingInterval     time.Duration</span><br><span class="line">	maxHousekeepingInterval  time.Duration</span><br><span class="line">	allowDynamicHousekeeping <span class="keyword">bool</span></span><br><span class="line">	lastUpdatedTime          time.Time</span><br><span class="line">	lastErrorTime            time.Time</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Decay value used for load average smoothing. Interval length of 10 seconds is used.</span></span><br><span class="line">	loadDecay <span class="keyword">float64</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// Whether to log the usage of this container when it is updated.</span></span><br><span class="line">	logUsage <span class="keyword">bool</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// Tells the container to stop.</span></span><br><span class="line">	stop <span class="keyword">chan</span> <span class="keyword">bool</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// Runs custom metric collectors.</span></span><br><span class="line">	collectorManager collector.CollectorManager</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>实际上这个containerData也是一个中间层，再详细看下一个主要的几个部分：</p>
<ul>
<li>具体对容器操作的实现通过container.ContainerHandler进行,通过其方法大致就可以了解，比如像是ListContainer,GetStats这些操作，这是一个接口，rawContainerHandler以及dockContainerHandler对其进行了实现。</li>
<li>containerInfo包含三部分:</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> containerInfo <span class="keyword">struct</span> &#123;</span><br><span class="line">	info.ContainerReference</span><br><span class="line">	Subcontainers []info.ContainerReference</span><br><span class="line">	Spec          info.ContainerSpec</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以看到，这里也维护了一个containerCache?既然manager已经有了containerCache,这里为何还要维护 ？<br>注意看下创建containerData时候的newContainerData方法，可以发现其中的<code>memoryCache *memory.InMemoryCache</code>参数，这个是从manager那里传进去的，也就是说，对于manager的InMemoryCache进行实际操作的步骤是在containerData这一层完成的，所有新创建的containerData使用的是同一个manager中的InMemoryCache。</p>
<ul>
<li><p>SummayReader是一个summary信息</p>
</li>
<li><p>CollectorManager可以注册collector组件，从collector中搜集信息。</p>
</li>
</ul>
<p>EventManager主要是用于监控event信息，稍后再分析。</p>
<p>看到在createContainer的最后一步是执行containerData的Start方法，实际上是用一个goroutine来执行go c.housekeeping()，这个housekeeping的主要部分是一个for循环，主要执行以下操作：</p>
<p>确定housekeeping实际时间，通过select判断，如果接收到stop信号，释放相关用于监控的资源。否则执行<code>housekeepingTick()</code>这里主要的作用是<code>updateStats()</code>,最后执行的是memoryCache的AddStats操作，相关方法在前面存储的部分已经分析过，还有些细节信息，比如containerData实例中的相关信息的更新，就不再赘述，要注意的是，这里存放数据的实际位置是containerData中的memoryCache，containerData中的memoryCache与manager中的InMemoryCache的区别？？？。注意这里的RecentStats函数中的maxStats的选取这里取的是60个。</p>
<p>再回到之前的housekeeping方法，之后是判断在update的时候，相关信息是否要输出，通过lasthousekeepingtime返回下一次housekeeping的时间（allowDynamicHousekeeping以及HousekeepingInterval两个参数就在这里派上用场）。之后就检验时间是否达到下一次，要是没到，就sleep，否则就更新lasthousekeepingtime，重新开始下一次的循环。</p>
<p><strong>注意一下handler的选择问题？？</strong></p>
<p>实际选择的时候，通过CanHandleAndAccept函数的返回值来判断，是否这个handler可以处理。</p>
<p>rawFactory的CanHandleAndAccept逻辑： 很直接了，如果dockeronly参数被设置为false，或者容器的name为”/“，则CanHandleAndAccept都会返回true。factory注册的顺序先是dockerfactory其次是rawfactory，在检测的时候是遍历factory,执行它们的CanHandleAndAccept方法，那个先返回true，就先把那个factory注册进去，所以以”/“命名的容器应该被rawfactory处理，后面的应该被dockerfactory处理。</p>
<p>dockerFactory的CanHandleAndAccept的逻辑： 检验名称是否match docker的id:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> dockerCgroupRegexp = regexp.MustCompile(<span class="string">`.+-([a-z0-9]&#123;64&#125;)\.scope$`</span>)<span class="string">`</span></span><br></pre></td></tr></table></figure>
<p>如果不是则不能处理。 传入的container名称可能是<code>/docker/&lt;dockerid&gt;</code>的形式，之后将containername转化为dockername，就是取出后面一段的容器id。</p>
<p>之后通过dockerclient给docker daemon发请求，获取到这个容器的信息。</p>
<p>以上操作都成功，则认为这个容器可以被dockerFactory来处理。</p>
<p>*<em>func (m <em>manager) detectSubcontainers(containerName string) error</em></em></p>
<p>首先是执行getContainersDiff，这个操作会从manager存储的containers(一个map)字段中检测上一步中已经注册进去的containerName为”/“的containerData，之后通过其handler调用ListContainers方法，得到所有的container，之后添加新加入的container，以及移除已经不在list中的container。</p>
<p>通过前面的分析，清楚了createContainer(“/”)，注册进来的容器实际操作的时候，使用的hadler是rawContainerFactory，看下其ListContainer的实现:首先是通过cgroup的绝对路径来查看出都有哪些容器，在递归遍历每个容器的子容器，之后把这些信息存储在map中，之后遍历map，生成info.ContainerReference数组，并返回。</p>
<p>存在其中的cgroups路径就像这样：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">map</span>[memory:/sys/fs/cgroup/memory cpuacct:/sys/fs/cgroup/cpuacct blkio:/</span><br><span class="line">sys/fs/cgroup/blkio cpuset:/sys/fs/cgroup/cpuset cpu:/sys/fs/cgroup/cpu]</span><br></pre></td></tr></table></figure>
<p>这个信息是在每次createContainer的时候，通过NewCongainerHandler函数生成的，这个信息是生成registry的时候通过cgroupSubsystems传递进来的。之后list的时候，完全是利用cgroup的层次结构的性质，如果某个容器存在，则对应的cgroups路径，比如：/sys/fs/cgroup/memory/docker/&lt;容器id&gt;就是一个目录，在实际实现的时候，在每个cgroups子系统下，也是只抓取目录，之后会按照cgroups树的结构往下拼，比如/docker/&lt;容器id&gt;，之后进行递归操作，这一块有一点技巧性，本质上是目录的遍历操作。</p>
<p>可以这样理解，每次ListContainer操作实际上就是把对应的cgroups整个文件系统遍历了一次，之后按照对应的路径，吧文件系统的叶子节点存到map中返回。</p>
<p>这里有个问题，不加筛选的把cgroups下面的内容都遍历了一遍？在ubuntu上，容器的相关信息被放在对应的/docker目录下，在其他系统，比如centos上，容器被放在对应的/system.slice目录下。很有可能其他的某些使用cgroups文件系统的进程和cadvisor需要监控的进程发生混淆？还是说只要是cadvisor下面的进程都是cadvisor的监控对象？</p>
<p>这应该就是所谓的rawContainerHandler，就是从cgroups的视角去看，把受到cgroups目录树结构控制的进程都看做是一个raw的container。</p>
<p>有了上面的分析，对getContainerDiff的操作就更容易理解了。首先是按照上面的操作将所有的cgroups受控进程信息取出来。读取manager中已经记录的container信息和实际从cgroups中获取到的容器信息，二者进行比较，得到新add进来的容器以及已经删除掉的容器，以containerRefference数组的形式分别返回，这个就是getContainerDiff的全部操作。</p>
<p>显而易见，getContainersDiff应该会被多次调用，因为经常会需要检测有哪些容器被新加入或者删除。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>可以看到manage部分都是围绕manager组件进行操作的，主要的逻辑就是先将root容器注册进去之后，之后以root容器为起点，进行detectsubcontainer的操作，更新删除容器信息。具体的存储在内存中的信息就是containerStates的结构。这也只是cadvisor能提供的所有信息中的一部分，之后定期进行housekeeping操作，更新容器的状态。</p>
<p>在入门篇中也提到，在生成containerManager的时候要把inMemoryCache对象传入进去，之后存储manager就会通过inMemoryCache来对存储相关的操作进行进一步的控制。更详细地说，是所用生成的containerData实例持有一个对inMemoryCache的指针，进行具体操作。</p>
]]></content>
      <categories>
        <category>cadvisor</category>
      </categories>
      <tags>
        <tag>cadvisor</tag>
        <tag>golang</tag>
        <tag>docker</tag>
        <tag>监控</tag>
      </tags>
  </entry>
  <entry>
    <title>（转）分布式一致性哈希环</title>
    <url>/%E7%AC%94%E8%AE%B0/consistent-hash-intro-20170216.html</url>
    <content><![CDATA[<h3 id="哈希表的原理与实现"><a href="#哈希表的原理与实现" class="headerlink" title="哈希表的原理与实现"></a>哈希表的原理与实现</h3><p>一列键值对数据，存储在一个table中，如何通过数据的关键字快速查找相应值呢？不要告诉我一个个拿出来比较key啊，呵呵。 </p>
<p>大家都知道，在所有的线性数据结构中，数组的定位速度最快，因为它可通过数组下标直接定位到相应的数组空间，就不需要一个个查找。而哈希表就是利用数组这个能够快速定位数据的结构解决以上的问题的。 </p>
<a id="more"></a>

<p>具体如何做呢？大家是否有注意到前面说的话：“数组可以通过下标直接定位到相应的空间”，对就是这句，哈希表的做法其实很简单，就是把Key通过一个固定的算法函数，既所谓的哈希函数转换成一个整型数字，然后就将该数字对数组长度进行取余，取余结果就当作数组的下标，将value存储在以该数字为下标的数组空间里，而当使用哈希表进行查询的时候，就是再次使用哈希函数将key转换为对应的数组下标，并定位到该空间获取value，如此一来，就可以充分利用到数组的定位性能进行数据定位。</p>
<p>不知道说到这里，一些不了解的朋友是否大概了解了哈希表的原理，其实就是通过空间换取时间的做法。到这里，可能有的朋友就会问，哈希函数对key进行转换，取余的值一定是唯一的吗？这个当然不能保证，主要是由于hashcode会对数组长度进行取余，因此其结果由于数组长度的限制必然会出现重复，所以就会有“冲突”这一问题，至于解决冲突的办法其实有很多种，比如重复散列的方式，大概就是定位的空间已经存在value且key不同的话就重新进行哈希加一并求模数组元素个数，既 (h(k)+i) mod S , i=1,2,3…… ，直到找到空间为止。还有其他的方式大家如果有兴趣的话可以自己找找资料看看。 </p>
<p>Hash表这种数据结构在java中是原生的一个集合对象，在实际中用途极广，主要有这么几个特点：</p>
<ol>
<li>访问速度快</li>
<li>大小不受限制</li>
<li>按键进行索引，没有重复对象</li>
<li>用字符串(id:string)检索对象(object)</li>
</ol>
<p>今天整理以前写的一些算法，翻出来一个hash表的实现，就贴出来，自己也温习温习。先看看头文件，也就是数据结构的定义，相当于java中的接口的概念：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>    HASHSIZE 256</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//定义hash表中的节点的类型</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span>   <span class="title">nlist</span>&#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span>   <span class="title">nlist</span>    *<span class="title">next</span>;</span></span><br><span class="line">    <span class="keyword">char</span>   *name;</span><br><span class="line">    <span class="keyword">char</span>   *defn;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//定义接口中的函数，也就是对外来说，这个程序可以做什么</span></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span>    <span class="title">hash</span><span class="params">(<span class="keyword">char</span>*s)</span></span>;<span class="comment">//计算一个串的hash值</span></span><br><span class="line"><span class="function">struct   nlist    *<span class="title">lookup</span><span class="params">(<span class="keyword">char</span>*s)</span></span>;<span class="comment">//查找一个value，根据key</span></span><br><span class="line"><span class="function">struct   nlist    *<span class="title">install</span><span class="params">(<span class="keyword">char</span>*name,<span class="keyword">char</span>*defn)</span></span>;<span class="comment">//插入一个key=value的对象</span></span><br></pre></td></tr></table></figure>
<p>然后是具体实现：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"> <span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;list.h&quot;</span></span></span><br><span class="line"> </span><br><span class="line">staticstructnlist *hashtab[HASHSIZE];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">unsigned</span>    <span class="title">hash</span><span class="params">(<span class="keyword">char</span>*s)</span>  <span class="comment">//取得hash值</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span>    hashval;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">for</span>(hashval = <span class="number">0</span>; *s !=<span class="string">&#x27;\0&#x27;</span>;s++)</span><br><span class="line">            hashval = *s + <span class="number">31</span> * hashval;</span><br><span class="line">   returnhashval % HASHSIZE;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function">struct   nlist    *<span class="title">lookup</span><span class="params">(<span class="keyword">char</span>*s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="class"><span class="keyword">struct</span>   <span class="title">nlist</span>    *<span class="title">np</span>;</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">for</span>(np = hashtab[hash(s)]; np != <span class="literal">NULL</span>; np = np-&gt;next)</span><br><span class="line">       <span class="keyword">if</span>(<span class="built_in">strcmp</span>(s,np-&gt;name) == <span class="number">0</span>)</span><br><span class="line">           returnnp;</span><br><span class="line">   returnNULL;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function">struct   nlist    *<span class="title">install</span><span class="params">(<span class="keyword">char</span>*name,<span class="keyword">char</span>*defn)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="class"><span class="keyword">struct</span>   <span class="title">nlist</span>    *<span class="title">np</span>;</span></span><br><span class="line">    <span class="keyword">unsigned</span>    hashval;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span>((np = lookup(name)) == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        np = (structnlist *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(structnlist));</span><br><span class="line">       <span class="keyword">if</span>(np == <span class="literal">NULL</span> || (np-&gt;name = strdup(name)) == <span class="literal">NULL</span>)</span><br><span class="line">               returnNULL;</span><br><span class="line">        hashval = hash(name);</span><br><span class="line">        np-&gt;next= hashtab[hashval];</span><br><span class="line">        hashtab[hashval] = np;</span><br><span class="line">    &#125;<span class="keyword">else</span></span><br><span class="line">       <span class="built_in">free</span>((<span class="keyword">void</span>*)np-&gt;defn);</span><br><span class="line">   <span class="keyword">if</span>((np-&gt;defn = strdup(defn)) == <span class="literal">NULL</span>)</span><br><span class="line">           returnNULL;</span><br><span class="line">   returnnp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>很简单，只有两个外部接口，</p>
<ol>
<li>install(key, value),用来插入一个新的节点</li>
<li>lookup(key),根据一个键来进行搜索，并返回节点</li>
</ol>
<p>代码很简单，主要用到的hash算法跟java中的String的hashcode()方法中用到的算法一样，使用：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="title">hash</span><span class="params">(<span class="keyword">char</span>*s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span>    hashval;</span><br><span class="line">    <span class="keyword">for</span>(hashval = <span class="number">0</span>; *s !=<span class="string">&#x27;\0&#x27;</span>;s++)</span><br><span class="line">        hashval = *s + <span class="number">31</span> * hashval;</span><br><span class="line">    returnhashval % HASHSIZE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="一致性hash算法"><a href="#一致性hash算法" class="headerlink" title="一致性hash算法"></a>一致性hash算法</h3><p>consistent hashing 一致性 hash 算法早在 1997 年就在论文 Consistent hashing and random trees 中被提出，目前在 cache 系统中应用越来越广泛。</p>
<h4 id="基本场景"><a href="#基本场景" class="headerlink" title="基本场景"></a>基本场景</h4><p>比如你有 N 个 cache 服务器（后面简称 cache ），那么如何将一个对象 object 映射到 N 个 cache 上呢，你很可能会采用类似下面的通用方法计算 object 的 hash 值，然后均匀的映射到到 N 个 cache： hash(object)%N</p>
<p>一切都运行正常，再考虑如下的两种情况：</p>
<ol>
<li>一个 cache 服务器 m down 掉了（在实际应用中必须要考虑这种情况），这样所有映射到 cache m 的对象都会失效，怎么办，需要把 cache m 从 cache 中移除，这时候 cache 是 N-1 台，映射公式变成了 hash(object)%(N-1) ；</li>
<li>由于访问加重，需要添加 cache ，这时候 cache 是 N+1 台，映射公式变成了 hash(object)%(N+1) ；</li>
</ol>
<p>1 和 2 意味着什么？这意味着突然之间几乎所有的 cache 都失效了。对于服务器而言，这是一场灾难，洪水般的访问都会直接冲向后台服务器；</p>
<p>再来考虑第三个问题，由于硬件能力越来越强，你可能想让后面添加的节点多做点活，显然上面的 hash 算法也做不到。有什么方法可以改变这个状况呢，这就是 consistent hashing 一致性 hash 算法…</p>
<h4 id="hash算法和单调性"><a href="#hash算法和单调性" class="headerlink" title="hash算法和单调性"></a>hash算法和单调性</h4><p>Hash 算法的一个衡量指标是单调性（ Monotonicity ），定义如下：</p>
<p>单调性是指如果已经有一些内容通过哈希分派到了相应的缓冲中，又有新的缓冲加入到系统中。哈希的结果应能够保证原有已分配的内容可以被映射到新的缓冲中去，而不会被映射到旧的缓冲集合中的其他缓冲区。</p>
<p>容易看到，上面的简单 hash 算法 hash(object)%N 难以满足单调性要求。</p>
<h4 id="consistent-hashing-算法的原理"><a href="#consistent-hashing-算法的原理" class="headerlink" title="consistent hashing 算法的原理"></a>consistent hashing 算法的原理</h4><p>consistent hashing 是一种 hash 算法，简单的说，在移除 / 添加一个 cache 时，它能够尽可能小的改变已存在 key 映射关系，尽可能的满足单调性的要求。</p>
<p>下面就来按照 5 个步骤简单讲讲 consistent hashing 算法的基本原理。</p>
<ul>
<li>第一步环形hash 空间<br>考虑通常的 hash 算法都是将 value 映射到一个 32 为的 key 值，也即是 0~2^32-1 次方的数值空间；我们可以将这个空间想象成一个首（ 0 ）尾（ 2^32-1 ）相接的圆环，如下图所示的那样。</li>
</ul>
<p><img src="http://wx4.sinaimg.cn/mw690/0065glrAgy1fckd8mm5njj302j02w3ya.jpg" alt="Alt text" title="图"></p>
<ul>
<li>第二步把对象映射到hash 空间<br>接下来考虑 4 个对象 object1~object4 ，通过 hash 函数计算出的 hash 值 key 在环上的分布如下图所示。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">hash</span>(object1) = key1;</span><br><span class="line">...</span><br><span class="line"><span class="built_in">hash</span>(object4) = key4;</span><br></pre></td></tr></table></figure>
<p><img src="http://wx4.sinaimg.cn/mw690/0065glrAgy1fckd8pmms8j306i071dfr.jpg" alt="Alt text" title="图"><br>4 个对象的 key 值分布</p>
<ul>
<li>第三步把cache 映射到hash 空间</li>
</ul>
<p>Consistent hashing 的基本思想就是将对象和 cache 都映射到同一个 hash 数值空间中，并且使用相同的 hash 算法。假设当前有 A,B 和 C 共 3 台 cache ，那么其映射结果将如图 3 所示，他们在 hash 空间中，以对应的 hash 值排列。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">hash</span>(cache A) = key A;</span><br><span class="line">...</span><br><span class="line"><span class="built_in">hash</span>(cache C) = key C;</span><br></pre></td></tr></table></figure>
<p><img src="http://wx1.sinaimg.cn/mw690/0065glrAgy1fckd8pvqxbj307v0710sr.jpg" alt="Alt text" title="图"><br>cache 和对象的 key 值分布<br>说到这里，顺便提一下 cache 的 hash 计算，一般的方法可以使用 cache 机器的 IP 地址或者机器名作为 hash 输入。</p>
<ul>
<li>第四步把对象映射到cache</li>
</ul>
<p>现在 cache 和对象都已经通过同一个 hash 算法映射到 hash 数值空间中了，接下来要考虑的就是如何将对象映射到 cache 上面了。</p>
<p>在这个环形空间中，如果沿着顺时针方向从对象的 key 值出发，直到遇见一个 cache ，那么就将该对象存储在这个 cache 上，因为对象和 cache 的 hash 值是固定的，因此这个 cache 必然是唯一和确定的。这样不就找到了对象和 cache 的映射方法了吗？！</p>
<p>依然继续上面的例子（上图），那么根据上面的方法：</p>
<ol>
<li>对象 object1 将被存储到 cache A 上；</li>
<li>object2和 object3 对应到 cache C ； </li>
<li>object4 对应到 cache B。</li>
</ol>
<ul>
<li>第五步考察cache 的变动</li>
</ul>
<p>前面讲过，通过 hash 然后求余的方法带来的最大问题就在于不能满足单调性，当 cache 有所变动时， cache 会失效，进而对后台服务器造成巨大的冲击，现在就来分析分析 consistent hashing 算法。</p>
<p>考虑假设 cache B 挂掉了，根据上面讲到的映射方法，这时受影响的将仅是那些沿 cache B 逆时针遍历直到下一个 cache （ cache C ）之间的对象，也即是本来映射到 cache B 上的那些对象。</p>
<p>因此这里仅需要变动对象 object4 ，将其重新映射到 cache C 上即可：<br><img src="http://wx3.sinaimg.cn/mw690/0065glrAgy1fckd8q77v7j307v0713yj.jpg" alt="Alt text" title="图"></p>
<p>Cache B 被移除后的 cache 映射<br>再考虑添加一台新的 cache D 的情况，假设在这个环形 hash 空间中， cache D 被映射在对象 object2 和 object3 之间。这时受影响的将仅是那些沿 cache D 逆时针遍历直到下一个 cache （ cache B ）之间的对象（它们是也本来映射到 cache C 上对象的一部分），将这些对象重新映射到 cache D 上即可。</p>
<p>因此这里仅需要变动对象 object2 ，将其重新映射到 cache D 上：</p>
<p><img src="http://wx3.sinaimg.cn/mw690/0065glrAgy1fckd8qqwvlj307v071dfv.jpg" alt="Alt text" title="添加 cache D 后的映射关系图"></p>
<h4 id="虚拟节点"><a href="#虚拟节点" class="headerlink" title="虚拟节点"></a>虚拟节点</h4><p>考量 Hash 算法的另一个指标是平衡性 (Balance) ，定义如下：</p>
<p>平衡性是指哈希的结果能够尽可能分布到所有的缓冲中去，这样可以使得所有的缓冲空间都得到利用。</p>
<p>hash 算法并不是保证绝对的平衡，如果 cache 较少的话，对象并不能被均匀的映射到 cache 上，比如在上面的例子中，仅部署 cache A 和 cache C 的情况下，在 4 个对象中， cache A 仅存储了 object1 ，而 cache C 则存储了 object2 、 object3 和 object4 ；分布是很不均衡的。</p>
<p>为了解决这种情况， consistent hashing 引入了“虚拟节点”的概念，它可以如下定义：</p>
<p>“虚拟节点”（ virtual node ）是实际节点在 hash 空间的复制品（ replica ），一实际个节点对应了若干个“虚拟节点”，这个对应个数也成为“复制个数”，“虚拟节点”在 hash 空间中以 hash 值排列。</p>
<p>仍以仅部署 cache A 和 cache C 的情况为例，在前面 中我们已经看到， cache 分布并不均匀。现在我们引入虚拟节点，并设置“复制个数”为 2 ，这就意味着一共会存在 4 个“虚拟节点”， cache A1, cache A2 代表了 cache A ； cache C1, cache C2 代表了 cache C ；假设一种比较理想的情况，参见下图 。</p>
<p><img src="http://wx1.sinaimg.cn/mw690/0065glrAgy1fckd8rlgllj307v071jrf.jpg" alt="Alt text" title="引入“虚拟节点”后的映射关系图"></p>
<p>此时，对象到“虚拟节点”的映射关系为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">objec1-&gt;cache A2</span><br><span class="line">objec2-&gt;cache A1</span><br><span class="line">objec3-&gt;cache C1</span><br><span class="line">objec4-&gt;cache C2</span><br></pre></td></tr></table></figure>
<p>因此对象 object1 和 object2 都被映射到了 cache A 上，而 object3 和 object4 映射到了 cache C 上；平衡性有了很大提高。引入“虚拟节点”后，映射关系就从 { 对象 -&gt; 节点 } 转换到了 { 对象 -&gt; 虚拟节点 } 。查询物体所在 cache 时的映射关系如图 7 所示。</p>
<p><img src="http://wx1.sinaimg.cn/mw690/0065glrAgy1fckd8rhbcoj30ep06gq30.jpg" alt="Alt text" title="查询对象所在 cache图"></p>
<p>“虚拟节点”的 hash 计算可以采用对应节点的 IP 地址加数字后缀的方式。例如假设 cache A 的 IP 地址为 202.168.14.241 。</p>
<p>引入“虚拟节点”前，计算 cache A 的 hash 值：Hash(“202.168.14.241”);<br>引入“虚拟节点”后，计算“虚拟节”点 cache A1 和 cache A2 的 hash 值：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Hash(<span class="string">&quot;202.168.14.241#1&quot;</span>); // cache A1</span><br><span class="line">Hash(<span class="string">&quot;202.168.14.241#2&quot;</span>); // cache A2</span><br></pre></td></tr></table></figure>
<p><strong>小结</strong><br>Consistent hashing 的基本原理就是这些，具体的分布性等理论分析应该是很复杂的，不过一般也用不到。</p>
<h3 id="分布式哈希算法"><a href="#分布式哈希算法" class="headerlink" title="分布式哈希算法"></a>分布式哈希算法</h3><p>我们从浅入深一步一步介绍什么是分布式哈希表。</p>
<h4 id="哈希函数"><a href="#哈希函数" class="headerlink" title="哈希函数"></a>哈希函数</h4><p>哈希函数是一种计算方法，它可以把一个值A映射到一个特定的范围[begin, end]之内。对于一个值的集合{k1, k2, … , kN}，哈希函数把他们均匀的映射到某个范围之中。这样，通过这些值就可以很快的找到与之对应的映射地址{index1, index2, … , indexN}。对于同一个值，哈希函数要能保证对这个值的运算结果总是相同的。</p>
<p><img src="http://wx4.sinaimg.cn/mw690/0065glrAgy1fckd8s3sguj306s05bdg1.jpg" alt="Alt text" title="图"></p>
<p>哈希函数需要经过精心设计才能够达到比较好的效果，但是总是无法达到理想的效果。多个值也许会映射到同样的地址上。这样就会产生冲突，如图中的红线所示。在设计哈希函数时要尽量减少冲突的产生。</p>
<p>最简单的哈希函数就是一个求余运算：  hash(A) = A % N。这样就把A这个值映射到了[0~N-1]这样一个范围之中。</p>
<h4 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h4><p>哈希表的核心就是哈希函数hash()。</p>
<p>哈希表是一中数据结构，它把KEY 和 VALUE用某种方式对应起来。使用hash()函数把一个KEY值映射到一个index上，即hash(KEY) = index。这样就可以把一个KEY值同某个index对应起来。然后把与这个KEY值对应的VALUE存储到index所标记的存储空间中。这样，每次想要查找KEY所对应的VALUE值时，只需要做一次hash()运算就可以找到了。</p>
<p>举个例子：图书馆中的书会被某人借走，这样“书名”和“人名”之间就形成了KEY与VALUE的关系。假设现在有三个记录：</p>
<table>
<thead>
<tr>
<th align="left">简明现代魔法</th>
<th align="left">小明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">最后一天</td>
<td align="left">小红</td>
</tr>
<tr>
<td align="left">变形记</td>
<td align="left">小红</td>
</tr>
</tbody></table>
<p>这就是“书名”和“人名”的对应关系，它表示某人借了某本书。现在我们把这种对应关系用哈希表存储起来，它们的hash()值分别为：</p>
<table>
<thead>
<tr>
<th align="left">hash(简明现代魔法) = 2</th>
</tr>
</thead>
<tbody><tr>
<td align="left">hash(最后一天) = 0</td>
</tr>
<tr>
<td align="left">hash(变形记) = 1</td>
</tr>
</tbody></table>
<p>然后我们就可以在一个表中存储“人名”了：</p>
<table>
<thead>
<tr>
<th align="left">0</th>
<th align="left">小明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">1</td>
<td align="left">小红</td>
</tr>
<tr>
<td align="left">2</td>
<td align="left">小红</td>
</tr>
</tbody></table>
<p>这三个人名分别存储在0、1和2号存储空间中。当我们想要查找《简明现代魔法》这本书是被谁借走的时候，只要hash()一下这个书名，就可以找到它所对应的index，为2。然后在这个表中就可以找到对应的人名了。在这里，KEY为“书名”， VALUE为“人名”。</p>
<p>当有大量的KEY VALUE对应关系的数据需要存储时，这种方法就非常有效。</p>
<h4 id="分布式哈希表"><a href="#分布式哈希表" class="headerlink" title="分布式哈希表"></a>分布式哈希表</h4><p>哈希表把所有的东西都存储在一台机器上，当这台机器坏掉了之后，所存储的东西就全部消失了。分布式哈希表可以把一整张哈希表分成若干个不同的部分，分别存储在不同的机器上，这样就降低了数据全部被损坏的风险。</p>
<p>分布式哈希表通常采用一致性哈希函数来对机器和数据进行统一运算。这里先不用深究一致性哈希究竟是什么，只需要知道它是对机器（通常是其IP地址）和数据（通常是其KEY值）进行统一的运算，把他们全都映射到一个地址空间中。假设有一个一致性哈希函数可以把一个值映射到32bit的地址空间中，从0一直到2^32 – 1。我们用一个圆环来表示这个地址空间。<br><img src="http://wx4.sinaimg.cn/mw690/0065glrAgy1fckd8mm5njj302j02w3ya.jpg" alt="Alt text" title="图"></p>
<p>假设有N台机器，那么hash()就会把这N台机器映射到这个环的N个地方。然后我们把整个地址空间进行一下划分，使每台机器控制一个范围的地址空间。这样，当我们向这个系统中添加数据的时候，首先使用hash()函数计算一下这个数据的index，然后找出它所对应的地址在环中属于哪个地址范围，我们就可以把这个数据放到相应的机器上。这样，就把一个哈希表分布到了不同的机器上。如下图所示：<br><img src="http://wx1.sinaimg.cn/mw690/0065glrAgy1fckd8pvqxbj307v0710sr.jpg" alt="Alt text" title="图"></p>
<p>这里蓝色的圆点表示机器，红色的圆点表示某个数据经过hash()计算后所得出的地址。</p>
<p>在这个图中，按照逆时针方向，每个机器占据的地址范围为从本机器开始一直到下一个机器为止。用顺时针方向来看，每个机器所占据的地址范围为这台机器之前的这一段地址空间。图中的虚线表示数据会存储在哪台机器上。</p>
<p>哈希表的工作原理与常用操作</p>
<p>哈希表（Hash Table）的应用近两年才在NOI中出现，作为一种高效的数据结构，它正在竞赛中发挥着越来越重要的作用。 </p>
<p>哈希表最大的优点，就是把数据的存储和查找消耗的时间大大降低，几乎可以看成是常数时间；而代价仅仅是消耗比较多的内存。然而在当前可利用内存越来越多的情况下，用空间换时间的做法是值得的。另外，编码比较容易也是它的特点之一。 </p>
<p>哈希表又叫做散列表，分为“开散列” 和“闭散列”。考虑到竞赛时多数人通常避免使用动态存储结构，本文中的“哈希表”仅指“闭散列”，关于其他方面读者可参阅其他书籍。</p>
<h4 id="基础操作"><a href="#基础操作" class="headerlink" title="基础操作"></a>基础操作</h4><p>我们使用一个下标范围比较大的数组来存储元素。可以设计一个函数（哈希函数， 也叫做散列函数），使得每个元素的关键字都与一个函数值（即数组下标）相对应，于是用这个数组单元来存储这个元素。也可以简单的理解为，按照关键字为每一 个元素“分类”，然后将这个元素存储在相应“类”所对应的地方。</p>
<p>但是，不能够保证每个元素的关键字与函数值是一一对应的，因此极有可能出现对于不同的元素，却计算出了相同的函数值，这样就产生了“冲突”，换句话说，就是把不同的元素分在了相同的“类”之中。后面我们将看到一种解决“冲突”的简便做法。 </p>
<p>总的来说，“直接定址”与“解决冲突”是哈希表的两大特点。 </p>
<p>函数构造：构造函数的常用方法（下面为了叙述简洁，设 h(k) 表示关键字为 k 的元素所对应的函数值）： </p>
<ul>
<li>除余法： 选择一个适当的正整数 p ，令 h(k ) = k mod p ，这里， p 如果选取的是比较大的素数，效果比较好。而且此法非常容易实现，因此是最常用的方法。 </li>
<li>数字选择法： 如果关键字的位数比较多，超过长整型范围而无法直接运算，可以选择其中数字分布比较均匀的若干位，所组成的新的值作为关键字或者直接作为函数值。 </li>
</ul>
<p>冲突处理：线性重新散列技术易于实现且可以较好的达到目的。令数组元素个数为 S ，则当 h(k) 已经存储了元素的时候，依次探查 (h(k)+i) mod S , i=1,2,3…… ，直到找到空的存储单元为止（或者从头到尾扫描一圈仍未发现空单元，这就是哈希表已经满了，发生了错误。当然这是可以通过扩大数组范围避免的）。 </p>
<p>支持运算：哈希表支持的运算主要有：初始化(makenull)、哈希函数值的运算(h(x))、插入元素(insert)、查找元素(member)。 设插入的元素的关键字为 x ，A 为存储的数组。 初始化比较容易，例如 ：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">constempty=maxlongint;// 用非常大的整数代表这个位置没有存储元素</span><br><span class="line">p=9997;// 表的大小</span><br><span class="line">procedure makenull;</span><br><span class="line">var i:<span class="built_in">integer</span>;</span><br><span class="line">begin</span><br><span class="line">fori:=0 to p-1do</span><br><span class="line">A[i]:=empty;</span><br><span class="line">End; </span><br></pre></td></tr></table></figure>
<p>哈希函数值的运算根据函数的不同而变化，例如除余法的一个例子：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> h(x:longint):Integer;</span><br><span class="line">begin</span><br><span class="line">h:= x mod p;</span><br><span class="line">end;</span><br></pre></td></tr></table></figure>
<p>我们注意到，插入和查找首先都需要对这个元素定位，即如果这个元素若存在，它应该存储在什么位置，因此加入一个定位的函数 locate。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> locate(x:longint):<span class="built_in">integer</span>;</span><br><span class="line">var orig,i:<span class="built_in">integer</span>;</span><br><span class="line">begin</span><br><span class="line">orig:=h(x);</span><br><span class="line">i:=0;</span><br><span class="line"><span class="keyword">while</span>(i &lt; S)and(A[(orig+i)mod S]&lt;&gt;x)and(A[(orig+i)mod S]&lt;&gt;empty)<span class="keyword">do</span></span><br><span class="line">inc(i);</span><br><span class="line">//当这个循环停下来时，要么找到一个空的存储单元，要么找到这个元</span><br><span class="line">//素存储的单元，要么表已经满了</span><br><span class="line">locate:=(orig+i) mod S;</span><br><span class="line">end; </span><br></pre></td></tr></table></figure>
<p>插入元素：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">procedure insert(x:longint);</span><br><span class="line">var posi:<span class="built_in">integer</span>;</span><br><span class="line">begin</span><br><span class="line">posi:=locate(x);//定位函数的返回值</span><br><span class="line">ifA[posi]=empty <span class="keyword">then</span> A[posi]:=x</span><br><span class="line">elseerror;//error 即为发生了错误，当然这是可以避免的</span><br><span class="line">end; </span><br></pre></td></tr></table></figure>
<p>查找元素是否已经在表中：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">procedure member(x:longint):boolean;</span><br><span class="line">var posi:<span class="built_in">integer</span>;</span><br><span class="line">begin</span><br><span class="line">posi:=locate(x);</span><br><span class="line">ifA[posi]=x <span class="keyword">then</span> member:=<span class="literal">true</span></span><br><span class="line">elsemember:=<span class="literal">false</span>;</span><br><span class="line">end;</span><br></pre></td></tr></table></figure>
<p>这些就是建立在哈希表上的常用基本运算。</p>
<p>当数据规模接近哈希表上界或者下界的时候，哈希表完全不能够体现高效的特点，甚至还不如一般算法。但是如果规模在中央，它高效的特点可以充分体现。试验表明当元素充满哈希表的 90% 的时候，效率就已经开始明显下降。这就给了我们提示：如果确定使用哈希表，应该尽量使数组开大，但对最太大的数组进行操作也比较费时间，需要找到一个平衡点。通常使它的容量至少是题目最大需求的 120% ，效果比较好（这个仅仅是经验，没有严格证明）。</p>
<h4 id="应用举例"><a href="#应用举例" class="headerlink" title="应用举例"></a>应用举例</h4><p>什么时候适合应用哈希表呢？如果发现解决这个问题时经常要询问：“某个元素是否在已知集合中？”，也就是需要高效的数据存储和查找，则使用哈希表是最好不过的了！那么，在应用哈希表的过程中，值得注意的是什么呢？ </p>
<p>哈希函数的设计很重要。一个不好的哈希函数，就是指造成很多冲突的情况，从前面的例子已经可以看出来，解决冲突会浪费掉大量时间，因此我们的目标就是尽力避免冲突。前面提到，在使用“除余法”的时候，h(k)=k mod p ，p 最好是一个大素数。这就是为了尽力避免冲突。为什么呢？假设 p=1000 ，则哈希函数分类的标准实际上就变成了按照末三位数分类，这样最多1000类，冲突会很多。一般地说，如果 p 的约数越多，那么冲突的几率就越大。 </p>
<p>简单的证明：假设 p 是一个有较多约数的数，同时在数据中存在 q 满足 gcd(p,q)=d &gt;1 ，即有 p=a<em>d , q=b</em>d, 则有 q mod p= q – p* [q div p] =q – p*[b div a] . ① 其中 [b div a ] 的取值范围是不会超过 [0，b] 的正整数。也就是说， [b div a] 的值只有 b+1 种可能，而 p 是一个预先确定的数。因此 ① 式的值就只有 b+1 种可能了。这样，虽然mod 运算之后的余数仍然在 [0，p-1] 内，但是它的取值仅限于 ① 可能取到的那些值。也就是说余数的分布变得不均匀了。容易看出， p 的约数越多，发生这种余数分布不均匀的情况就越频繁，冲突的几率越高。而素数的约数是最少的，因此我们选用大素数。记住“素数是我们的得力助手”。 </p>
<p>另一方面，一味的追求低冲突率也不好。理论上，是可以设计出一个几乎完美，几乎没有冲突的函数的。然而，这样做显然不值得，因为这样的函数设计 很浪费时间而且编码一定很复杂，与其花费这么大的精力去设计函数，还不如用一个虽然冲突多一些但是编码简单的函数。因此，函数还需要易于编码，即易于实现。 </p>
<p>综上所述，设计一个好的哈希函数是很关键的。而“好”的标准，就是较低的冲突率和易于实现。 </p>
<p>另外，使用哈希表并不是记住了前面的基本操作就能以不变应万变的。有的时候，需要按照题目的要求对哈希表的结构作一些改进。往往一些简单的改进就可以带来巨大的方便。 </p>
<p>这些只是一般原则，真正遇到试题的时候实际情况千变万化，需要具体问题具体分析才行。</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>分布式</tag>
        <tag>一致性哈希</tag>
        <tag>hash</tag>
      </tags>
  </entry>
  <entry>
    <title>（转）重磅！GitHub发布开源负载均衡组件GLB</title>
    <url>/%E7%AC%94%E8%AE%B0/github-glb-20180811.html</url>
    <content><![CDATA[<p>在GitHub，我们在网络边缘的metal cloud上每秒处理数万个请求。 我们之前文章已经介绍过GLB，这是我们针对裸机数据中心的可扩展负载均衡解决方案，它支持大多数GitHub的对外服务，并且还为我们最关键的内部系统提供负载均衡服务，例如高可用MySQL集群。 今天，我们很高兴能够分享有关负载均衡器设计的更多细节，并将GLB Director开源。</p>
<p>GLB Director是4层负载均衡器，可在大量物理机器上扩展单个IP地址，同时尝试在修改期间最大限度地减少连接中断。 GLB Director不会替换像haproxy和nginx这样的服务，而是部署在这些服务（或任何TCP服务）之前，允许它们跨多个物理机器扩展，而不需要每台机器都有唯一的IP地址。</p>
<a id="more"></a>

<h3 id="使用ECMP扩展IP"><a href="#使用ECMP扩展IP" class="headerlink" title="使用ECMP扩展IP"></a>使用ECMP扩展IP</h3><p>4层负载均衡器的基本属性是能够使用单个IP地址在多个服务器之间实现均衡连接。 为了扩展单个IP以处理更多的流量，我们不仅需要在后端服务器之间进行流量拆分，还需要能够扩展负载均衡器本身。 这实际上是另一层负载均衡。</p>
<p>通常，我们将IP地址视为单个物理机器，将路由器视为将数据包移动到下一个最近路由器的机器。 在最简单的情况下，总是有一个最佳的下一跳，路由器选择该跳并转发所有数据包直到达到目的地。</p>
<p><img src="http://wx2.sinaimg.cn/mw690/0065glrAgy1fu8kv91psyj307p054dfr.jpg" alt="Alt text"></p>
<p>实际上，大多数网络都要复杂得多。 两台计算机之间通常有多条路径可用，例如，使用多个ISP或者两台路由器通过多条物理电缆连接在一起以增加容量并提供冗余。 这是等价多路径（ECMP）路由发挥作用的地方 - 而不是由路由器选择单个最佳下一跳，ECMP中很多路径具有相同成本（通常定义为到目的地的AS的数量）， 路由器分散流量以便在所有可用的相同成本路径之间均衡连接。</p>
<p><img src="http://wx2.sinaimg.cn/mw690/0065glrAgy1fu8kwanzsjj307p08qt8r.jpg" alt="Alt text"></p>
<p>ECMP通过对每个数据包进行hash以确定其中一个可用路径。此处使用的hash函数因设备而异，但通常是基于源和目标IP地址以及TCP流量的源和目标端口的一致性hash。这意味着同一个TCP连接的多个数据包通常会遍历相同的路径，这意味着即使路径具有不同的延迟，数据包也会以相同的顺序到达。值得注意的是，在这种情况下，路径可以在不中断连接的情况下进行更改，因为它们总是最终位于同一个目标服务器上，此时它所采用的路径大多无关紧要。</p>
<p>ECMP的另一种用法是当我们想要跨多个服务器而不是跨多个路径上的同一服务器时。每个服务器都可以使用BGP或其他类似的网络协议使用相同的IP地址，从而使连接在这些服务器之间进行分片，路由器不知道连接是在不同的地方处理的，而非传统做法那样所有的连接都同一台机器上处理。</p>
<p><img src="http://wx3.sinaimg.cn/mw690/0065glrAgy1fu8kwvqaxfj307p04yjra.jpg" alt="Alt text"></p>
<p>虽然ECMP会像对流量进行分片，但它有一个巨大的缺点：当相同IP的服务器更改（或沿途的任何路径或路由器发生变化）时，连接必须重新均衡，才能保证每个服务器上的连接比较均衡。 路由器通常是无状态设备，只是为每个数据包做出最佳决策而不考虑它所属的连接，这意味着在这种情况下某些连接会中断。</p>
<p><img src="http://wx1.sinaimg.cn/mw690/0065glrAgy1fu8kxhwid9j30k205cwen.jpg" alt="Alt text"></p>
<p>在上面的例子中，我们可以想象每种颜色代表一个活动的连接。 添加新的代理服务器使用相同的IP。 路由器保证一致性哈希，将1/3连接移动到新服务器，同时保持2/3连接在老服务器上。 不幸的是，对于进行中的1/3连接，数据包现在到达了无连接状态的服务器，因此连接会失败。</p>
<h3 id="将director-proxy分离"><a href="#将director-proxy分离" class="headerlink" title="将director/proxy分离"></a>将director/proxy分离</h3><p>以前仅使用ECMP的解决方案的问题在于它不知道给定数据包的完整上下文，也不能为每个数据包/连接存储数据。事实证明，通常使用Linux Virtual Server（LVS）等工具。我们创建了一个新的“director”服务器层，它通过ECMP从路由器获取数据包，但不是依靠路由器的ECMP hash来选择后端代理服务器，而是对所有链接控制hash和存储状态（选择后端）。当我们更改代理层服务器时，director层有望不变，我们的连接也不会断掉。</p>
<p><img src="http://wx4.sinaimg.cn/mw690/0065glrAgy1fu8kxvoc53j30ma08cgm7.jpg" alt="Alt text"></p>
<p>虽然这在许多情况下效果很好，但它确实有一些缺点。在上面的示例中，我们同时添加了LVS director和后端代理服务器。新的director接收到一些数据包，但是还没有任何状态（或者具有延迟状态），因此将其作为新连接进行hash处理并可能使其出错（并导致连接失败）。 LVS的典型解决方法是使用多播连接同步来保持所有LVS director服务器之间共享的连接状态。这仍然需要传播连接状态，并且仍然需要重复状态 - 不仅每个代理都需要Linux内核网络堆栈中每个连接的状态，而且每个LVS director还需要存储连接到后端代理服务器的映射。</p>
<h3 id="将所有状态从director层移除"><a href="#将所有状态从director层移除" class="headerlink" title="将所有状态从director层移除"></a>将所有状态从director层移除</h3><p>当我们设计GLB时，我们决定要改善这种情况而不是重复状态。 通过使用已存储在代理服务器中的流状态作为维护来自客户端的已建立Linux TCP连接的一部分，GLB采用与上述方法不同的方法。</p>
<p>对于每个进入的连接，我们选择可以处理该连接的主服务器和辅助服务器。 当数据包到达主服务器且无效时，会将数据包转发到辅助服务器。 选择主/辅助服务器的散列是预先完成一次，并存储在查找表中，因此不需要在每个流或每个数据包的基础上重新计算。 添加新的代理服务器时，对于1/N连接，它将成为新的主服务器，旧的主服务器将成为辅助服务器。 这允许现有流程完成，因为代理服务器可以使用其本地状态（单一事实来源）做出决策。 从本质上讲，这使得数据包在到达保持其状态的预期服务器时具有“第二次机会”。</p>
<p><img src="http://wx2.sinaimg.cn/mw690/0065glrAgy1fu8kyp7j6mj30mr09774y.jpg" alt="Alt text"></p>
<p>即使director仍然会将连接发送到错误的服务器，该服务器也会知道如何将数据包转发到正确的服务器。 就TCP流而言，GLB director层是完全无状态的：director服务器可以随时进出，并且总是选择相同的主/辅服务器，只要它们的转发表匹配（但它们很少改变）。 在变更代理时有些细节需要注意，我们将在下面介绍。</p>
<h3 id="维护Hash集合不变"><a href="#维护Hash集合不变" class="headerlink" title="维护Hash集合不变"></a>维护Hash集合不变</h3><p>GLB Director设计的核心归结为始终如一地选择主服务器和辅助服务器，并允许代理层服务器根据需要排空和填充。 我们认为每个代理服务器都有一个状态，当有服务器加入或者退出时调整状态。</p>
<p>我们创建一个静态二进制转发表，它以相同方式在每个控制器服务器上生成，以将进入的连接映射到给定的主服务器和辅助服务器。 我们并没有采用在数据包处理时从所有可用服务器中选择服务器的这种复杂逻辑，而是通过创建表（65k行）这种间接的方式，每行包含主服务器和辅助服务器IP地址。 该表以二维数组的方式将数据存储在内存中，每个表大约512kb。 当数据包到达时，我们始终将其（仅基于数据包数据）hash到该表中的同一行（使用hash作为数组的索引），这提供了一致的主服务器和辅助服务器对。</p>
<p><img src="http://wx1.sinaimg.cn/mw690/0065glrAgy1fu8kz1e7z2j30ma089t9a.jpg" alt="Alt text"></p>
<p>我们希望每个服务器在主要和辅助字段中大致相同，并且永远不会出现在同一行中。 当我们添加新服务器时，我们希望某些行使其主服务器成为辅助服务器，并且新服务器将成为主服务器。 同样，我们希望新服务器在某些行中成为辅助服务器。 当我们删除服务器时，在它是主服务器的任何行中，我们希望辅助服务器成为主服务器，而另一个服务器则成为辅助服务器。</p>
<p>这听起来很复杂，但可以用几个不变量简洁地概括：</p>
<ul>
<li>当我们更改服务器集时，应保持现有服务器的相对顺序。</li>
<li>服务器的顺序应该是可计算的，除了服务器列表之外没有任何其他状态（可能还有一些预定义的种子）。</li>
<li>每个服务器在每行中最多应出现一次。</li>
<li>每个服务器在每列中的出现次数应大致相同。</li>
</ul>
<p>针对上述的一些问题，集合hash是一个理想的选择，因为它可以很好地满足这些不变量。 每个服务器（在我们的例子中，IP）都与行号一起进行hash，服务器按该hash（只是一个数字）进行排序，并且我们获得该给定行的服务器的唯一顺序。 我们分别将前两个作为主要和次要。</p>
<p>将保持相对顺序，因为无论包含哪些其他服务器，每个服务器的hash都是相同的。 生成表所需的唯一信息是服务器的IP。由于我们只是对一组服务器进行排序，因此服务器只出现一次。 最后，如果我们使用伪随机的良好hash函数，那么排序将是伪随机的，因此分布将如我们所期望的那样均匀。</p>
<h3 id="代理-Proxy-相关操作"><a href="#代理-Proxy-相关操作" class="headerlink" title="代理(Proxy)相关操作"></a>代理(Proxy)相关操作</h3><p>添加或删除代理服务器，我们需要一些特别的处理方式。这是因为转发表条目仅定义主要/辅助代理，因此排空/故障转移仅适用单个代理主机。 我们为代理服务器定义以下有效状态和状态转换：<br><img src="http://wx4.sinaimg.cn/mw690/0065glrAgy1fu8kzfyezlj30de06ogls.jpg" alt="Alt text"></p>
<p>当代理服务器处于活动状态，耗尽或填充时，它将包含在转发表条目中。 在稳定状态下，所有代理服务器都是活动的，并且上面描述的集合点散列将在主列和辅助列中具有大致均匀且随机的每个代理服务器分布。<br>当代理服务器转换为耗尽时，我们通过交换我们原本包含的主要和次要条目来调整转发表中的条目：<br><img src="http://wx2.sinaimg.cn/mw690/0065glrAgy1fu8l17mw8ej30ma089dgh.jpg" alt="Alt text"></p>
<p>这具有将数据包发送到先前次要的服务器的效果。 由于它首先接收数据包，它将接受SYN数据包，因此接受任何新连接。 对于任何不理解为与本地流有关的数据包，它将其转发到其他服务器（先前的主服务器），这允许完成现有连接。</p>
<p>这样可以优雅地耗尽所需的连接服务器，之后可以完全删除它，并且代理可以随机填充到第二个空槽：<br><img src="http://wx1.sinaimg.cn/mw690/0065glrAgy1fu8l1o422gj30ma089wf2.jpg" alt="Alt text"><br>填充中的节点看起来就像活动一样，因为该表本身允许第二次机会：<br><img src="http://wx1.sinaimg.cn/mw690/0065glrAgy1fu8l429vx0j30ma089wf4.jpg" alt="Alt text"></p>
<p>此实现要求一次只有一个代理服务器处于活动状态以外的任何状态，这实际上在GitHub上运行良好。对代理服务器的状态更改可以与需要维护的最长连接持续时间一样快。我们正致力于设计的扩展，不仅支持主要和次要，而且一些组件（如下面列出的标题）已经包含对任意服务器列表的初始支持。</p>
<h3 id="数据中心内封装"><a href="#数据中心内封装" class="headerlink" title="数据中心内封装"></a>数据中心内封装</h3><p>现在有了一个算法来一致地选择后端代理服务器，但是如何在数据包内把辅助服务器（secondary server ）的信息也封装进去呢？这样主服务器可以在不理解数据包的情况下转发数据包。</p>
<p>LVS 的传统方式是使用IP over IP（IPIP）隧道。客户端 IP 数据包封装在内部IP数据包内，并转发到代理服务器，代理服务器对其进行解封装。但很难在 IPIP 数据包中编码其他服务器的元数据，因为唯一可用的空间是 IP 选项，数据中心路由器传递未知 IP 的数据包到处理软件（称之为“第2层慢速路径”），速度从每秒数百万到数千个数据包。<br><img src="http://wx4.sinaimg.cn/mw690/0065glrAgy1fu8l58ayonj30is0b4769.jpg" alt="Alt text"></p>
<p>为了避免这种情况，需要将数据隐藏在路由器不同数据包格式中，避免它试图去理解。我们最初采用原始 Foo-over-UDP（FOU）和自定义 GRE载荷（payload），基本上封装了 UDP 数据包中的所有内容。我们最近转换到通用 UDP 封装（GUE），它提供了封装内部 IP 协议的标准 UDP 数据包。我们将辅助服务器的 IP 放在GUE标头的私有数据中。从路由器的角度来看，这些数据包都是两个普通服务器之间的内部数据中心 UDP 数据包。</p>
<p>使用 UDP 的另一个好处是源端口可以使用每个连接的哈希填充，以便它们通过不同的路径（在数据中心内使用ECMP）在数据中心内流动，并可在代理服务器的 NIC 的不同 RX 队列上接收消息（类似使用 TCP/IP 头字段的哈希）。这对 IPIP 是不可能的，因为大多数数据中心的 NIC 只能理解普通 IP，TCP/IP 和 UDP/IP。值得注意的是，NIC 无法查看 IP/IP 数据包。</p>
<p>当代理服务器想要将数据包发送回客户端时，它不需要封装或通过我们的导向器层（director tier）返回，它可以直接发送数据到客户端（通常称为“Direct Server Return”）。这是典型的负载均衡器设计，对于内容提供商尤其有用，因为大多数情况都是出站流量远大于入站流量。<br>数据包流如下图所示：<br><img src="http://wx1.sinaimg.cn/mw690/0065glrAgy1fu8l5kjgejj30t10enjtj.jpg" alt="Alt text"></p>
<h3 id="引入DPDK"><a href="#引入DPDK" class="headerlink" title="引入DPDK"></a>引入DPDK</h3><p>自从首次公开讨论了我们的初始设计以来，我们已经完全使用 DPDK重写了 glb-director 。DPDK 是一个开源的通过绕过Linux内核，允许从用户空间进行非常快速的数据包处理的项目。这样就能够在普通 NIC 上通过 CPU 上实现 NIC 线路速率处理，并可轻松扩展导向器层，以处理与公共连接所需的入站流量一样多的流量。这在防 DDoS 攻击中尤为重要，我们不希望负载均衡器成为瓶颈。</p>
<p>GLB 最初的目标之一是可以在通用数据中心的硬件上运行，而无需任何特殊的硬件配置。 GLB 的 Director 和代理服务器都可像数据中心的普通服务器一样供应。每个服务器都有一对绑定的网络接口，这些接口在 GLB Director 服务器上的 DPDK 和 Linux 系统之间共享。</p>
<p>现代 NIC 支持SR-IOV，这种技术可以使单个 NIC 从操作系统的角度看起来像多个 NIC。这通常由虚拟机管理程序使用，以要求真实 NIC（“Physical Function”）为每个 VM 创建多个虚拟 NIC（“Virtual Functions”）。为了使 DPDK 和 Linux 内核能够共享 NIC，我们使用 flow bifurcation，它将特定流量（目标是 GLB IP 地址）发送给我们DPDK 在 Virtual Function 上处理，同时将剩余的数据包与 Linux 内核的网络堆栈保留在 Physical Function 上。</p>
<p>我们发现 Virtual Function 上 DPDK 的数据包处理速率可以满足要求。 GLB Director 使用 DPDK Packet Distributor模式来分发封装数据包的任务到机器上的 CPU，支持任意数量的 CPU 核心，因为它是无状态的，可以高度并行化。<br><img src="http://wx3.sinaimg.cn/mw690/0065glrAgy1fu8l5xvlvrj30sq086t9f.jpg" alt="Alt text"></p>
<p>GLB Director 支持匹配和转发包含 TCP 有效负载的入站 IPv4 和 IPv6 数据包，以及作为 Path MTU Discovery的一部分的入站 ICMP Fragmentation Required 消息。</p>
<h3 id="使用Scapy为DPDK加入测试用例"><a href="#使用Scapy为DPDK加入测试用例" class="headerlink" title="使用Scapy为DPDK加入测试用例"></a>使用Scapy为DPDK加入测试用例</h3><p>一个典型的问题是，在创建（或使用）那些使用了低级原语（例如直接与NIC通信）但是高速运行的技术时，它们变得非常难以测试。作为创建GLB Director的一部分，我们也创建了一个测试环境，支持对我们的DPDK应用进行简单的端对端包流测试，通过影响DPDK的方式支持一个环境抽象层（EAL），允许物理NIC和基于libpcap的本地接口，在应用视图中是相同的。</p>
<p>这允许我们在Scapy中写测试，使用简单的Python的lib包查看，操作和写数据包。通过创建一个Linux的虚拟网卡驱动，一边用Scapy，另一边用DPDK，我们能传输定制的包并且验证我们软件在另一边支持的功能，这是一个完整GUE封装的后端代理服务期望的数据包。<br><img src="http://wx1.sinaimg.cn/mw690/0065glrAgy1fu8l6bar2hj30dp04kmx5.jpg" alt="Alt text"></p>
<p>该方法允许我们测试更多的复杂行为，例如为了正确路由，遍历传输层的ICMPv4/ICMPv6头获取源IP和TCP端口，以便正确转发来自外部路由器的ICMP消息。</p>
<h3 id="健康检查"><a href="#健康检查" class="headerlink" title="健康检查"></a>健康检查</h3><p>GLB的设计包含了优雅地处理服务器故障的部分。目前设计包含主/备，对于给定的转发表/客户端，意味着我们可以通过健康检查通过观察每个Director来解决单服务器故障。我们运行一个名为glb-healthcheck的服务，它不断验证每个后端服务器的GUE隧道和任意HTTP端口。</p>
<p>当服务器出现故障时，我们将切换主/备，将备换成主。这是服务器的“软切换”，支持故障转移的好办法。如果健康检查失败是误报，则连接不会中断，它们只会换一条不同的路径遍历。</p>
<p>proxy使用iptables提供第二次机会</p>
<p>构成GLB的最后一个组件是Netfilter模块和iptables的目标，它在每个代理服务器上运行，并提供“第二次机会”进行设计。</p>
<p>此模块提供了一个简单的任务，根据Linux内核TCP堆栈，确定每个GUE数据包的内部TCP / IP数据包是否在本地有效，如果不是，则将其转发到下一个代理服务器（备服务器），而不是在当前服务器解封装。</p>
<p>在数据包是SYN（新连接）或在本地对已建立的连接有效的情况下，当前服务器会接收它。然后，我们接收GUE包，使用包含fou模块的Linux 内核4.x GUE在本地处理它。</p>
<h3 id="已经开源"><a href="#已经开源" class="headerlink" title="已经开源"></a>已经开源</h3><p>当我们准备开始写一个更好的数据中心负载均衡器时，我们决定将其开源，以便其他人可以从我们的工作中受益。我们很高兴能在github/glb-director上开源所有这些组件。我们允许其他人能使用它，并且将它作为负载均衡的通用解决方案，在物理数据中心环境中的商用硬件上运行。<br><img src="http://wx4.sinaimg.cn/mw690/0065glrAgy1fu8l6tqx4uj30e90apt95.jpg" alt="Alt text"></p>
<p>开源项目地址：<a href="https://github.com/github/glb-director">https://github.com/github/glb-director</a></p>
<p>英文原文：<a href="https://githubengineering.com/glb-director-open-source-load-balancer/">https://githubengineering.com/glb-director-open-source-load-balancer/</a></p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>glb</tag>
        <tag>load balance</tag>
        <tag>负载均衡</tag>
      </tags>
  </entry>
  <entry>
    <title>互联网监控, Open-falcon多节点用户配置</title>
    <url>/open-falcon/open-falcon-deploy-muti-nodes-20160807.html</url>
    <content><![CDATA[<p>Open-Falcon 是小米运维部开源的一款互联网企业级监控系统解决方案。监控系统是整个运维环节，乃至整个产品生命周期中最重要的一环，事前及时预警发现故障，事后提供翔实的数据用于追查定位问题。监控系统作为一个成熟的运维产品，业界有很多开源的实现可供选择。<br>本文档对多节点负载open-falcon部署配置说明。请阅读<a href="http://book.open-falcon.org/zh/index.html">官方参考文档</a></p>
<a id="more"></a>

<p><img src="http://ww4.sinaimg.cn/mw690/0065glrAgw1f6jxj0iaugj31270pcjwo.jpg" alt="Alt text" title="open-falcon arch"></p>
<h3 id="机器部署"><a href="#机器部署" class="headerlink" title="机器部署"></a>机器部署</h3><p>系统：Centos7</p>
<table>
<thead>
<tr>
<th align="center">主机名</th>
<th align="left">主机IP</th>
<th align="center">备注</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>falconpoc01</strong></td>
<td align="left">10.128.31.136</td>
<td align="center">open-falcon模块测试机</td>
</tr>
<tr>
<td align="center"><strong>falconpoc02</strong></td>
<td align="left">10.128.31.137</td>
<td align="center">open-falcon模块测试机</td>
</tr>
<tr>
<td align="center"><strong>falconpoc03</strong></td>
<td align="left">10.128.31.138</td>
<td align="center">open-falcon数据测试机</td>
</tr>
</tbody></table>
<h3 id="模块部署展示"><a href="#模块部署展示" class="headerlink" title="模块部署展示"></a>模块部署展示</h3><table>
<thead>
<tr>
<th align="center">模块</th>
<th align="left">主机名</th>
<th align="left">主机IP</th>
<th align="center">备注</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>hbs</strong></td>
<td align="left">falconpoc01</td>
<td align="left">10.128.31.136</td>
<td align="center">心跳服务</td>
</tr>
<tr>
<td align="center"><strong>hbs</strong></td>
<td align="left">falconpoc02</td>
<td align="left">10.128.31.137</td>
<td align="center">心跳服务</td>
</tr>
<tr>
<td align="center"><strong>judge</strong></td>
<td align="left">falconpoc01</td>
<td align="left">10.128.31.136</td>
<td align="center">告警判断</td>
</tr>
<tr>
<td align="center"><strong>judge</strong></td>
<td align="left">falconpoc02</td>
<td align="left">10.128.31.137</td>
<td align="center">告警判断</td>
</tr>
<tr>
<td align="center"><strong>graph</strong></td>
<td align="left">falconpoc01</td>
<td align="left">10.128.31.136</td>
<td align="center">存储绘图</td>
</tr>
<tr>
<td align="center"><strong>graph</strong></td>
<td align="left">falconpoc02</td>
<td align="left">10.128.31.137</td>
<td align="center">存储绘图</td>
</tr>
<tr>
<td align="center"><strong>transfer</strong></td>
<td align="left">falconpoc01</td>
<td align="left">10.128.31.136</td>
<td align="center">数据转发</td>
</tr>
<tr>
<td align="center"><strong>transfer</strong></td>
<td align="left">falconpoc02</td>
<td align="left">10.128.31.137</td>
<td align="center">数据转发</td>
</tr>
<tr>
<td align="center"><strong>query</strong></td>
<td align="left">falconpoc01</td>
<td align="left">10.128.31.136</td>
<td align="center">绘图查询</td>
</tr>
<tr>
<td align="center"><strong>query</strong></td>
<td align="left">falconpoc02</td>
<td align="left">10.128.31.137</td>
<td align="center">绘图查询</td>
</tr>
<tr>
<td align="center"><strong>dashboard</strong></td>
<td align="left">falconpoc01</td>
<td align="left">10.128.31.136</td>
<td align="center">用户查询</td>
</tr>
<tr>
<td align="center"><strong>dashboard</strong></td>
<td align="left">falconpoc02</td>
<td align="left">10.128.31.137</td>
<td align="center">用户查询</td>
</tr>
<tr>
<td align="center"><strong>uic</strong></td>
<td align="left">falconpoc01</td>
<td align="left">10.128.31.136</td>
<td align="center">用户管理</td>
</tr>
<tr>
<td align="center"><strong>uic</strong></td>
<td align="left">falconpoc02</td>
<td align="left">10.128.31.137</td>
<td align="center">用户管理</td>
</tr>
<tr>
<td align="center"><strong>portal</strong></td>
<td align="left">falconpoc01</td>
<td align="left">10.128.31.136</td>
<td align="center">策略配置</td>
</tr>
<tr>
<td align="center"><strong>portal</strong></td>
<td align="left">falconpoc02</td>
<td align="left">10.128.31.137</td>
<td align="center">策略配置</td>
</tr>
<tr>
<td align="center"><strong>alarm</strong></td>
<td align="left">falconpoc01</td>
<td align="left">10.128.31.136</td>
<td align="center">报警事件</td>
</tr>
<tr>
<td align="center"><strong>sender</strong></td>
<td align="left">falconpoc01</td>
<td align="left">10.128.31.136</td>
<td align="center">报警通知</td>
</tr>
<tr>
<td align="center"><strong>task</strong></td>
<td align="left">falconpoc01</td>
<td align="left">10.128.31.136</td>
<td align="center">定时任务</td>
</tr>
<tr>
<td align="center"><br /></td>
<td align="left"></td>
<td align="left"></td>
<td align="center"></td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="center"></th>
<th align="left">主机名</th>
<th align="left">主机IP</th>
<th align="center">备注</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>mysql</strong></td>
<td align="left">falconpoc03</td>
<td align="left">10.128.31.138</td>
<td align="center">mysql数据库</td>
</tr>
<tr>
<td align="center"><strong>redis</strong></td>
<td align="left">falconpoc03</td>
<td align="left">10.128.31.138</td>
<td align="center">redis数据库</td>
</tr>
<tr>
<td align="center"><strong>sms</strong></td>
<td align="left">falconpoc03</td>
<td align="left">10.128.31.138</td>
<td align="center">短信接口</td>
</tr>
<tr>
<td align="center"><br /></td>
<td align="left"></td>
<td align="left"></td>
<td align="center"></td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="center">模块</th>
<th align="left">主机名</th>
<th align="left">主机IP</th>
<th align="center">备注</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>agent</strong></td>
<td align="left">falconpoc01</td>
<td align="left">10.128.31.136</td>
<td align="center">指标采集</td>
</tr>
<tr>
<td align="center"><strong>agent</strong></td>
<td align="left">falconpoc02</td>
<td align="left">10.128.31.137</td>
<td align="center">指标采集</td>
</tr>
<tr>
<td align="center"><strong>agent</strong></td>
<td align="left">falconpoc03</td>
<td align="left">10.128.31.138</td>
<td align="center">指标采集</td>
</tr>
</tbody></table>
<h3 id="环境部署"><a href="#环境部署" class="headerlink" title="环境部署"></a>环境部署</h3><h4 id="更新centos7源"><a href="#更新centos7源" class="headerlink" title="更新centos7源"></a>更新centos7源</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup</span><br><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class="line">yum makecache</span><br></pre></td></tr></table></figure>
<h4 id="安装MySQL"><a href="#安装MySQL" class="headerlink" title="安装MySQL"></a>安装MySQL</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install mysql</span><br><span class="line"></span><br><span class="line">wget http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm</span><br><span class="line">rpm -ivh mysql-community-release-el7-5.noarch.rpm</span><br><span class="line">yum install mysql-community-server</span><br><span class="line"></span><br><span class="line">service mysqld restart</span><br></pre></td></tr></table></figure>
<h5 id="或者"><a href="#或者" class="headerlink" title="或者"></a>或者</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install mariadb-server mariadb</span><br><span class="line"></span><br><span class="line">systemctl start mariadb  <span class="comment">#启动MariaDB</span></span><br><span class="line">systemctl stop mariadb  <span class="comment">#停止MariaDB</span></span><br><span class="line">systemctl restart mariadb  <span class="comment">#重启MariaDB</span></span><br><span class="line">systemctl <span class="built_in">enable</span> mariadb  <span class="comment">#设置开机启动</span></span><br></pre></td></tr></table></figure>

<h5 id="远程访问"><a href="#远程访问" class="headerlink" title="远程访问"></a>远程访问</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -u root </span><br><span class="line">GRANT ALL PRIVILEGES ON *.* TO <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED BY <span class="string">&#x27;password&#x27;</span> WITH GRANT OPTION;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure>
<h4 id="安装Redis"><a href="#安装Redis" class="headerlink" title="安装Redis"></a>安装Redis</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install gcc</span><br></pre></td></tr></table></figure>
<h5 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget http://download.redis.io/releases/redis-3.0.0.tar.gz</span><br><span class="line">tar zxvf redis-3.0.0.tar.gz</span><br><span class="line"><span class="built_in">cd</span> redis-3.0.0</span><br><span class="line"></span><br><span class="line"><span class="comment">#如果不加参数,linux下会报错</span></span><br><span class="line">make MALLOC=libc</span><br><span class="line"></span><br><span class="line">cp src/redis-server /usr/bin/</span><br><span class="line">cp src/redis-cli /usr/bin/</span><br><span class="line">mkdir -p /etc/redis</span><br><span class="line">cp redis.conf /etc/redis/</span><br></pre></td></tr></table></figure>
<h5 id="配置redis"><a href="#配置redis" class="headerlink" title="配置redis"></a>配置redis</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/redis/ redis.conf</span><br><span class="line"><span class="built_in">bind</span> 0.0.0.0</span><br><span class="line">daemonize yes</span><br></pre></td></tr></table></figure>
<h5 id="启动redis"><a href="#启动redis" class="headerlink" title="启动redis"></a>启动redis</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/bin/redis-server /etc/redis/redis.conf</span><br></pre></td></tr></table></figure>

<h5 id="登录redis"><a href="#登录redis" class="headerlink" title="登录redis"></a>登录redis</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/bin/redis-cli</span><br></pre></td></tr></table></figure>
<h5 id="关闭redis"><a href="#关闭redis" class="headerlink" title="关闭redis"></a>关闭redis</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/bin/redis-cli shutdown</span><br></pre></td></tr></table></figure>
<h4 id="初始化MySQL数据"><a href="#初始化MySQL数据" class="headerlink" title="初始化MySQL数据"></a>初始化MySQL数据</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#下载初始化脚步</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/open-falcon/scripts.git</span><br><span class="line"><span class="built_in">cd</span> ./scripts/</span><br><span class="line">mysql -h localhost -u root --password=<span class="string">&quot;&quot;</span> &lt; db_schema/graph-db-schema.sql</span><br><span class="line">mysql -h localhost -u root --password=<span class="string">&quot;&quot;</span> &lt; db_schema/dashboard-db-schema.sql</span><br><span class="line"></span><br><span class="line">mysql -h localhost -u root --password=<span class="string">&quot;&quot;</span> &lt; db_schema/portal-db-schema.sql</span><br><span class="line">mysql -h localhost -u root --password=<span class="string">&quot;&quot;</span> &lt; db_schema/links-db-schema.sql</span><br><span class="line">mysql -h localhost -u root --password=<span class="string">&quot;&quot;</span> &lt; db_schema/uic-db-schema.sql</span><br></pre></td></tr></table></figure>
<h4 id="Python环境"><a href="#Python环境" class="headerlink" title="Python环境"></a>Python环境</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install mysql</span><br><span class="line">yum install mysql-devel</span><br><span class="line">yum install -y python-virtualenv</span><br></pre></td></tr></table></figure>
<h5 id="pip换源"><a href="#pip换源" class="headerlink" title="pip换源"></a>pip换源</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim ~/.pip/pip.conf</span><br><span class="line"></span><br><span class="line">[global]</span><br><span class="line">index-url = http://pypi.douban.com/simple</span><br><span class="line">trusted-host = pypi.douban.com</span><br></pre></td></tr></table></figure>
<h3 id="模块单点部署"><a href="#模块单点部署" class="headerlink" title="模块单点部署"></a>模块单点部署</h3><blockquote>
<p>先从模块单点开始部署，完成后再部署多点。前期条件有限，先将open-falcon模块部署falconpoc01服务器，之后再部署相同的模块到falconpoc02。</p>
</blockquote>
<p>内部模块相互访问使用host名称，方便于维护。falconpoc01配置 /etc/hosts;添加</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">10.128.31.138	falcon-mysql</span><br><span class="line">10.128.31.138	falcon-redis</span><br><span class="line">10.128.31.136	falcon-hbs</span><br><span class="line">10.128.31.137	falcon-hbs2</span><br><span class="line">10.128.31.136	falcon-graph</span><br><span class="line">10.128.31.137	falcon-graph2</span><br><span class="line">10.128.31.136  falcon-judge</span><br><span class="line">10.128.31.137	falcon-judge2</span><br></pre></td></tr></table></figure>
<h4 id="部署heartbeat心跳模块"><a href="#部署heartbeat心跳模块" class="headerlink" title="部署heartbeat心跳模块"></a>部署heartbeat心跳模块</h4><blockquote>
<p>模块部署的打包、上传不会做介绍说明，官方文档上已经写明。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#配置</span></span><br><span class="line">cp cfg.example.json cfg.json</span><br><span class="line">vim cfg.json</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;debug&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;database&quot;</span>: <span class="string">&quot;root:password@tcp(falcon-mysql:3306)/falcon_portal?loc=Local&amp;parseTime=true&quot;</span>,</span><br><span class="line">    <span class="string">&quot;hosts&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;maxIdle&quot;</span>: 100,</span><br><span class="line">    <span class="string">&quot;listen&quot;</span>: <span class="string">&quot;:6030&quot;</span>,</span><br><span class="line">    <span class="string">&quot;trustable&quot;</span>: [<span class="string">&quot;&quot;</span>],</span><br><span class="line">    <span class="string">&quot;http&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;enabled&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&quot;listen&quot;</span>: <span class="string">&quot;0.0.0.0:6031&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="部署judge报警判断模块"><a href="#部署judge报警判断模块" class="headerlink" title="部署judge报警判断模块"></a>部署judge报警判断模块</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#配置</span></span><br><span class="line">cp cfg.example.json cfg.json</span><br><span class="line">vim cfg.json</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;debug&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;debugHost&quot;</span>: <span class="string">&quot;nil&quot;</span>,</span><br><span class="line">    <span class="string">&quot;remain&quot;</span>: 11, </span><br><span class="line">    <span class="string">&quot;http&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;enabled&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&quot;listen&quot;</span>: <span class="string">&quot;0.0.0.0:6081&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;rpc&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;enabled&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&quot;listen&quot;</span>: <span class="string">&quot;0.0.0.0:6080&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;hbs&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;servers&quot;</span>: [<span class="string">&quot;falcon-hbs:6030&quot;</span>],</span><br><span class="line">        <span class="string">&quot;timeout&quot;</span>: 300,</span><br><span class="line">        <span class="string">&quot;interval&quot;</span>: 60</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;alarm&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;enabled&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&quot;minInterval&quot;</span>: 300,</span><br><span class="line">        <span class="string">&quot;queuePattern&quot;</span>: <span class="string">&quot;event:p%v&quot;</span>,</span><br><span class="line">        <span class="string">&quot;redis&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;dsn&quot;</span>: <span class="string">&quot;falcon-redis:6379&quot;</span>,</span><br><span class="line">            <span class="string">&quot;maxIdle&quot;</span>: 5,</span><br><span class="line">            <span class="string">&quot;connTimeout&quot;</span>: 5000,</span><br><span class="line">            <span class="string">&quot;readTimeout&quot;</span>: 5000,</span><br><span class="line">            <span class="string">&quot;writeTimeout&quot;</span>: 5000</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="部署graph存储绘图模块"><a href="#部署graph存储绘图模块" class="headerlink" title="部署graph存储绘图模块"></a>部署graph存储绘图模块</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#配置</span></span><br><span class="line">cp cfg.example.json cfg.json</span><br><span class="line">mkdir -p /root/data/6070</span><br><span class="line">vim cfg.json</span><br><span class="line">&#123;</span><br><span class="line">        <span class="string">&quot;debug&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;http&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;enabled&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="string">&quot;listen&quot;</span>: <span class="string">&quot;0.0.0.0:6071&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;rpc&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;enabled&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="string">&quot;listen&quot;</span>: <span class="string">&quot;0.0.0.0:6070&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;rrd&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;storage&quot;</span>: <span class="string">&quot;/root/data/6070&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;db&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;dsn&quot;</span>: <span class="string">&quot;root:password@tcp(falcon-mysql:3306)/graph?loc=Local&amp;parseTime=true&quot;</span>,</span><br><span class="line">                <span class="string">&quot;maxIdle&quot;</span>: 4</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;callTimeout&quot;</span>: 5000,</span><br><span class="line">        <span class="string">&quot;migrate&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;enabled&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="string">&quot;concurrency&quot;</span>: 2,</span><br><span class="line">                <span class="string">&quot;replicas&quot;</span>: 500,</span><br><span class="line">                <span class="string">&quot;cluster&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;graph-00&quot;</span> : <span class="string">&quot;falcon-graph:6070&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="部署transfer数据转发模块"><a href="#部署transfer数据转发模块" class="headerlink" title="部署transfer数据转发模块"></a>部署transfer数据转发模块</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#配置</span></span><br><span class="line">cp cfg.example.json cfg.json</span><br><span class="line">vim cfg.json</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;debug&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;minStep&quot;</span>: 30,</span><br><span class="line">    <span class="string">&quot;http&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;enabled&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&quot;listen&quot;</span>: <span class="string">&quot;0.0.0.0:6060&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;rpc&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;enabled&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&quot;listen&quot;</span>: <span class="string">&quot;0.0.0.0:8433&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;socket&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;enabled&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&quot;listen&quot;</span>: <span class="string">&quot;0.0.0.0:4444&quot;</span>,</span><br><span class="line">        <span class="string">&quot;timeout&quot;</span>: 3600</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;judge&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;enabled&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&quot;batch&quot;</span>: 200,</span><br><span class="line">        <span class="string">&quot;connTimeout&quot;</span>: 1000,</span><br><span class="line">        <span class="string">&quot;callTimeout&quot;</span>: 5000,</span><br><span class="line">        <span class="string">&quot;maxConns&quot;</span>: 32,</span><br><span class="line">        <span class="string">&quot;maxIdle&quot;</span>: 32,</span><br><span class="line">        <span class="string">&quot;replicas&quot;</span>: 500,</span><br><span class="line">        <span class="string">&quot;cluster&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;judge-00&quot;</span> : <span class="string">&quot;falcon-judge:6080&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;graph&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;enabled&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&quot;batch&quot;</span>: 200,</span><br><span class="line">        <span class="string">&quot;connTimeout&quot;</span>: 1000,</span><br><span class="line">        <span class="string">&quot;callTimeout&quot;</span>: 5000,</span><br><span class="line">        <span class="string">&quot;maxConns&quot;</span>: 32,</span><br><span class="line">        <span class="string">&quot;maxIdle&quot;</span>: 32,</span><br><span class="line">        <span class="string">&quot;replicas&quot;</span>: 500,</span><br><span class="line">        <span class="string">&quot;cluster&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;graph-00&quot;</span> : <span class="string">&quot;falcon-graph:6070&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;tsdb&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;enabled&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;batch&quot;</span>: 200,</span><br><span class="line">        <span class="string">&quot;connTimeout&quot;</span>: 1000,</span><br><span class="line">        <span class="string">&quot;callTimeout&quot;</span>: 5000,</span><br><span class="line">        <span class="string">&quot;maxConns&quot;</span>: 32,</span><br><span class="line">        <span class="string">&quot;maxIdle&quot;</span>: 32,</span><br><span class="line">        <span class="string">&quot;retry&quot;</span>: 3,</span><br><span class="line">        <span class="string">&quot;address&quot;</span>: <span class="string">&quot;127.0.0.1:8088&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="部署query绘图查询模块"><a href="#部署query绘图查询模块" class="headerlink" title="部署query绘图查询模块"></a>部署query绘图查询模块</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#配置</span></span><br><span class="line">cp cfg.example.json cfg.json</span><br><span class="line">vim cfg.json</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;debug&quot;</span>: <span class="string">&quot;false&quot;</span>,</span><br><span class="line">    <span class="string">&quot;http&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;enabled&quot;</span>:  <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&quot;listen&quot;</span>:   <span class="string">&quot;0.0.0.0:9966&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;graph&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;connTimeout&quot;</span>: 1000,</span><br><span class="line">        <span class="string">&quot;callTimeout&quot;</span>: 5000,</span><br><span class="line">        <span class="string">&quot;maxConns&quot;</span>: 32,</span><br><span class="line">        <span class="string">&quot;maxIdle&quot;</span>: 32,</span><br><span class="line">        <span class="string">&quot;replicas&quot;</span>: 500,</span><br><span class="line">        <span class="string">&quot;cluster&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;graph-00&quot;</span>: <span class="string">&quot;falcon-graph:6070&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;api&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;query&quot;</span>: <span class="string">&quot;http://10.128.31.136:9966&quot;</span>,</span><br><span class="line">        <span class="string">&quot;dashboard&quot;</span>: <span class="string">&quot;http://10.128.31.136:8081&quot;</span>,</span><br><span class="line">        <span class="string">&quot;max&quot;</span>: 500</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="部署dashboard用户查询模块"><a href="#部署dashboard用户查询模块" class="headerlink" title="部署dashboard用户查询模块"></a>部署dashboard用户查询模块</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#初始化</span></span><br><span class="line">virtualenv ./env</span><br><span class="line">./env/bin/pip install -r pip_requirements.txt</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#配置</span></span><br><span class="line">vim rrd/config.py</span><br><span class="line"><span class="comment">#-*-coding:utf8-*-</span></span><br><span class="line">import os</span><br><span class="line"></span><br><span class="line"><span class="comment">#-- dashboard db config --</span></span><br><span class="line">DASHBOARD_DB_HOST = <span class="string">&quot;falcon-mysql&quot;</span></span><br><span class="line">DASHBOARD_DB_PORT = 3306</span><br><span class="line">DASHBOARD_DB_USER = <span class="string">&quot;root&quot;</span></span><br><span class="line">DASHBOARD_DB_PASSWD = <span class="string">&quot;password&quot;</span></span><br><span class="line">DASHBOARD_DB_NAME = <span class="string">&quot;dashboard&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#-- graph db config --</span></span><br><span class="line">GRAPH_DB_HOST = <span class="string">&quot;falcon-mysql&quot;</span></span><br><span class="line">GRAPH_DB_PORT = 3306</span><br><span class="line">GRAPH_DB_USER = <span class="string">&quot;root&quot;</span></span><br><span class="line">GRAPH_DB_PASSWD = <span class="string">&quot;password&quot;</span></span><br><span class="line">GRAPH_DB_NAME = <span class="string">&quot;graph&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#-- app config --</span></span><br><span class="line">DEBUG = True</span><br><span class="line">SECRET_KEY = <span class="string">&quot;secret-key&quot;</span></span><br><span class="line">SESSION_COOKIE_NAME = <span class="string">&quot;open-falcon&quot;</span></span><br><span class="line">PERMANENT_SESSION_LIFETIME = 3600 * 24 * 30</span><br><span class="line">SITE_COOKIE = <span class="string">&quot;open-falcon-ck&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#-- query config --</span></span><br><span class="line">QUERY_ADDR = <span class="string">&quot;http://10.128.31.136:9966&quot;</span></span><br><span class="line"></span><br><span class="line">BASE_DIR = <span class="string">&quot;/root/deploy/dashboard&quot;</span></span><br><span class="line">LOG_PATH = os.path.join(BASE_DIR,<span class="string">&quot;log/&quot;</span>)</span><br><span class="line"></span><br><span class="line">try:</span><br><span class="line">    from rrd.local_config import *</span><br><span class="line">except:</span><br><span class="line">    pass</span><br></pre></td></tr></table></figure>
<h4 id="部署uic用户管理模块"><a href="#部署uic用户管理模块" class="headerlink" title="部署uic用户管理模块"></a>部署uic用户管理模块</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#配置</span></span><br><span class="line">cp cfg.example.json cfg.json</span><br><span class="line">vim cfg.json</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;log&quot;</span>: <span class="string">&quot;debug&quot;</span>,</span><br><span class="line">    <span class="string">&quot;company&quot;</span>: <span class="string">&quot;MI&quot;</span>,</span><br><span class="line">    <span class="string">&quot;http&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;enabled&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&quot;listen&quot;</span>: <span class="string">&quot;0.0.0.0:1234&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;cache&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;enabled&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&quot;redis&quot;</span>: <span class="string">&quot;127.0.0.1:6379&quot;</span>,</span><br><span class="line">        <span class="string">&quot;idle&quot;</span>: 10,</span><br><span class="line">        <span class="string">&quot;max&quot;</span>: 1000,</span><br><span class="line">        <span class="string">&quot;timeout&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;conn&quot;</span>: 10000,</span><br><span class="line">            <span class="string">&quot;read&quot;</span>: 5000,</span><br><span class="line">            <span class="string">&quot;write&quot;</span>: 5000</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;salt&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;canRegister&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;ldap&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;enabled&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;addr&quot;</span>: <span class="string">&quot;ldap.example.com:389&quot;</span>,</span><br><span class="line">        <span class="string">&quot;baseDN&quot;</span>: <span class="string">&quot;dc=example,dc=com&quot;</span>,</span><br><span class="line">        <span class="string">&quot;bindDN&quot;</span>: <span class="string">&quot;cn=mananger,dc=example,dc=com&quot;</span>,</span><br><span class="line">        <span class="string">&quot;bindPasswd&quot;</span>: <span class="string">&quot;12345678&quot;</span>,</span><br><span class="line">        <span class="string">&quot;userField&quot;</span>: <span class="string">&quot;uid&quot;</span>,</span><br><span class="line">        <span class="string">&quot;attributes&quot;</span>: [<span class="string">&quot;sn&quot;</span>,<span class="string">&quot;mail&quot;</span>,<span class="string">&quot;telephoneNumber&quot;</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;uic&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;addr&quot;</span>: <span class="string">&quot;root:password@tcp(falcon-mysql:3306)/uic?charset=utf8&amp;loc=Asia%2FChongqing&quot;</span>,</span><br><span class="line">        <span class="string">&quot;idle&quot;</span>: 10,</span><br><span class="line">        <span class="string">&quot;max&quot;</span>: 100</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;shortcut&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;falconPortal&quot;</span>: <span class="string">&quot;http://10.128.31.136:5050/&quot;</span>,</span><br><span class="line">        <span class="string">&quot;falconDashboard&quot;</span>: <span class="string">&quot;http://10.128.31.136:7070/&quot;</span>,</span><br><span class="line">        <span class="string">&quot;falconAlarm&quot;</span>: <span class="string">&quot;http://10.128.31.136:9912/&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="部署portal报警策略模块"><a href="#部署portal报警策略模块" class="headerlink" title="部署portal报警策略模块"></a>部署portal报警策略模块</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#初始化</span></span><br><span class="line">virtualenv ./env</span><br><span class="line">./env/bin/pip install -r pip_requirements.txt</span><br><span class="line"><span class="comment">#配置</span></span><br><span class="line">vim rrd/config.py</span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line">__author__ = <span class="string">&#x27;Ulric Qin&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -- app config --</span></span><br><span class="line">DEBUG = True</span><br><span class="line"></span><br><span class="line"><span class="comment"># -- db config --</span></span><br><span class="line">DB_HOST = <span class="string">&quot;falcon-mysql&quot;</span></span><br><span class="line">DB_PORT = 3306</span><br><span class="line">DB_USER = <span class="string">&quot;root&quot;</span></span><br><span class="line">DB_PASS = <span class="string">&quot;password&quot;</span></span><br><span class="line">DB_NAME = <span class="string">&quot;falcon_portal&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -- cookie config --</span></span><br><span class="line">SECRET_KEY = <span class="string">&quot;4e.5tyg8-u9ioj&quot;</span></span><br><span class="line">SESSION_COOKIE_NAME = <span class="string">&quot;falcon-portal&quot;</span></span><br><span class="line">PERMANENT_SESSION_LIFETIME = 3600 * 24 * 30</span><br><span class="line"></span><br><span class="line">UIC_ADDRESS = &#123;</span><br><span class="line">    <span class="string">&#x27;internal&#x27;</span>: <span class="string">&#x27;http://10.128.31.136:1234&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;external&#x27;</span>: <span class="string">&#x27;http://10.128.31.136:1234&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">UIC_TOKEN = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">MAINTAINERS = [<span class="string">&#x27;root&#x27;</span>]</span><br><span class="line">CONTACT = <span class="string">&#x27;CDXXJCPT@gome.cn&#x27;</span></span><br><span class="line"></span><br><span class="line">COMMUNITY = True</span><br><span class="line"></span><br><span class="line">try:</span><br><span class="line">    from frame.local_config import *</span><br><span class="line">except Exception, e:</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;[warning] %s&quot;</span> % e</span><br></pre></td></tr></table></figure>
<h4 id="部署alarm报警处理模块"><a href="#部署alarm报警处理模块" class="headerlink" title="部署alarm报警处理模块"></a>部署alarm报警处理模块</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#配置</span></span><br><span class="line">cp cfg.example.json cfg.json</span><br><span class="line">vim cfg.json</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;debug&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;uicToken&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;http&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;enabled&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&quot;listen&quot;</span>: <span class="string">&quot;0.0.0.0:9912&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;queue&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;sms&quot;</span>: <span class="string">&quot;/sms&quot;</span>,</span><br><span class="line">        <span class="string">&quot;mail&quot;</span>: <span class="string">&quot;/mail&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;redis&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;addr&quot;</span>: <span class="string">&quot;falcon-redis:6379&quot;</span>,</span><br><span class="line">        <span class="string">&quot;maxIdle&quot;</span>: 5,</span><br><span class="line">        <span class="string">&quot;highQueues&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;event:p0&quot;</span>,</span><br><span class="line">            <span class="string">&quot;event:p1&quot;</span>,</span><br><span class="line">            <span class="string">&quot;event:p2&quot;</span>,</span><br><span class="line">            <span class="string">&quot;event:p3&quot;</span>,</span><br><span class="line">            <span class="string">&quot;event:p4&quot;</span>,</span><br><span class="line">            <span class="string">&quot;event:p5&quot;</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&quot;lowQueues&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;event:p6&quot;</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&quot;userSmsQueue&quot;</span>: <span class="string">&quot;/queue/user/sms&quot;</span>,</span><br><span class="line">        <span class="string">&quot;userMailQueue&quot;</span>: <span class="string">&quot;/queue/user/mail&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;api&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;portal&quot;</span>: <span class="string">&quot;http://10.128.31.136:5050&quot;</span>,</span><br><span class="line">        <span class="string">&quot;uic&quot;</span>: <span class="string">&quot;http://10.128.31.136:1234&quot;</span>,</span><br><span class="line">        <span class="string">&quot;links&quot;</span>: <span class="string">&quot;http://10.128.31.136:5090&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="部署sender报警发送模块"><a href="#部署sender报警发送模块" class="headerlink" title="部署sender报警发送模块"></a>部署sender报警发送模块</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#配置</span></span><br><span class="line">cp cfg.example.json cfg.json</span><br><span class="line">vim cfg.json</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;debug&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;http&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;enabled&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&quot;listen&quot;</span>: <span class="string">&quot;0.0.0.0:6066&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;redis&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;addr&quot;</span>: <span class="string">&quot;falcon-redis:6379&quot;</span>,</span><br><span class="line">        <span class="string">&quot;maxIdle&quot;</span>: 5</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;queue&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;sms&quot;</span>: <span class="string">&quot;/sms&quot;</span>,</span><br><span class="line">        <span class="string">&quot;mail&quot;</span>: <span class="string">&quot;/mail&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;worker&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;sms&quot;</span>: 10,</span><br><span class="line">        <span class="string">&quot;mail&quot;</span>: 50</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;api&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;sms&quot;</span>: <span class="string">&quot;http://10.128.31.138:8000/sms&quot;</span>,</span><br><span class="line">        <span class="string">&quot;mail&quot;</span>: <span class="string">&quot;http://10.128.31.138:9000/mail&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="部署task定时任务模块"><a href="#部署task定时任务模块" class="headerlink" title="部署task定时任务模块"></a>部署task定时任务模块</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#配置</span></span><br><span class="line">cp cfg.example.json cfg.json</span><br><span class="line">vim cfg.json</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;debug&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="string">&quot;http&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;enable&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&quot;listen&quot;</span>: <span class="string">&quot;0.0.0.0:8002&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;index&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;enable&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&quot;dsn&quot;</span>: <span class="string">&quot;root:password@tcp(falcon-mysql:3306)/graph?loc=Local&amp;parseTime=true&quot;</span>,</span><br><span class="line">        <span class="string">&quot;maxIdle&quot;</span>: 4,</span><br><span class="line">        <span class="string">&quot;autoDelete&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;cluster&quot;</span>:&#123;</span><br><span class="line">            <span class="string">&quot;falcon-graph:6071&quot;</span> : <span class="string">&quot;0 0 0 ? * 0-5&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;collector&quot;</span> : &#123;</span><br><span class="line">        <span class="string">&quot;enable&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;destUrl&quot;</span> : <span class="string">&quot;http://127.0.0.1:1988/v1/push&quot;</span>,</span><br><span class="line">        <span class="string">&quot;srcUrlFmt&quot;</span> : <span class="string">&quot;http://%s/statistics/all&quot;</span>,</span><br><span class="line">        <span class="string">&quot;cluster&quot;</span> : [</span><br><span class="line">            <span class="string">&quot;transfer,test.hostname:6060&quot;</span>,</span><br><span class="line">            <span class="string">&quot;graph,test.hostname:6071&quot;</span>,</span><br><span class="line">            <span class="string">&quot;task,test.hostname:8001&quot;</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="部署agent监控采集模块"><a href="#部署agent监控采集模块" class="headerlink" title="部署agent监控采集模块"></a>部署agent监控采集模块</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#配置</span></span><br><span class="line">cp cfg.example.json cfg.json</span><br><span class="line">vim cfg.json</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;debug&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;hostname&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;ip&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;plugin&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;enabled&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;dir&quot;</span>: <span class="string">&quot;./plugin&quot;</span>,</span><br><span class="line">        <span class="string">&quot;git&quot;</span>: <span class="string">&quot;https://github.com/open-falcon/plugin.git&quot;</span>,</span><br><span class="line">        <span class="string">&quot;logs&quot;</span>: <span class="string">&quot;./logs&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;heartbeat&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;enabled&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&quot;addr&quot;</span>: <span class="string">&quot;10.128.31.136:6030&quot;</span>,</span><br><span class="line">        <span class="string">&quot;interval&quot;</span>: 60,</span><br><span class="line">        <span class="string">&quot;timeout&quot;</span>: 1000</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;transfer&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;enabled&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&quot;addrs&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;10.128.31.136:8433&quot;</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&quot;interval&quot;</span>: 60,</span><br><span class="line">        <span class="string">&quot;timeout&quot;</span>: 1000</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;http&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;enabled&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&quot;listen&quot;</span>: <span class="string">&quot;:1988&quot;</span>,</span><br><span class="line">        <span class="string">&quot;backdoor&quot;</span>: <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;collector&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;ifacePrefix&quot;</span>: [<span class="string">&quot;eth&quot;</span>, <span class="string">&quot;ens&quot;</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;ignore&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;cpu.busy&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&quot;df.bytes.free&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&quot;df.bytes.total&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&quot;df.bytes.used&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&quot;df.bytes.used.percent&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&quot;df.inodes.total&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&quot;df.inodes.free&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&quot;df.inodes.used&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&quot;df.inodes.used.percent&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&quot;mem.memtotal&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&quot;mem.memused&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&quot;mem.memused.percent&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&quot;mem.memfree&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&quot;mem.swaptotal&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&quot;mem.swapused&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&quot;mem.swapfree&quot;</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>配置网络相关的collector选项，使用ifconfig查看系统网卡命名。collector选项采集网卡名称前缀。如是配置多节点则做后启动agent。</p>
</blockquote>
<h3 id="多节点模块部署"><a href="#多节点模块部署" class="headerlink" title="多节点模块部署"></a>多节点模块部署</h3><blockquote>
<p>将open-falcon模块部署falconpoc02服务器</p>
</blockquote>
<p>内部模块相互访问使用host名称，方便于维护。falconpoc02配置 /etc/hosts;添加</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">10.128.31.138	falcon-mysql</span><br><span class="line">10.128.31.138	falcon-redis</span><br><span class="line">10.128.31.136	falcon-hbs</span><br><span class="line">10.128.31.137	falcon-hbs2</span><br><span class="line">10.128.31.136	falcon-graph</span><br><span class="line">10.128.31.137	falcon-graph2</span><br><span class="line">10.128.31.136   falcon-judge</span><br><span class="line">10.128.31.137	falcon-judge2</span><br></pre></td></tr></table></figure>
<h4 id="部署heartbeat心跳模块-1"><a href="#部署heartbeat心跳模块-1" class="headerlink" title="部署heartbeat心跳模块"></a>部署heartbeat心跳模块</h4><blockquote>
<p>模块部署的打包、上传不会做介绍说明，官方文档上已经写明。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#配置</span></span><br><span class="line">cp cfg.example.json cfg.json</span><br><span class="line">vim cfg.json</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;debug&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;database&quot;</span>: <span class="string">&quot;root:password@tcp(falcon-mysql:3306)/falcon_portal?loc=Local&amp;parseTime=true&quot;</span>,</span><br><span class="line">    <span class="string">&quot;hosts&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;maxIdle&quot;</span>: 100,</span><br><span class="line">    <span class="string">&quot;listen&quot;</span>: <span class="string">&quot;:6030&quot;</span>,</span><br><span class="line">    <span class="string">&quot;trustable&quot;</span>: [<span class="string">&quot;&quot;</span>],</span><br><span class="line">    <span class="string">&quot;http&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;enabled&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&quot;listen&quot;</span>: <span class="string">&quot;0.0.0.0:6031&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="部署judge报警判断模块-1"><a href="#部署judge报警判断模块-1" class="headerlink" title="部署judge报警判断模块"></a>部署judge报警判断模块</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#配置</span></span><br><span class="line">cp cfg.example.json cfg.json</span><br><span class="line">vim cfg.json</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;debug&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;debugHost&quot;</span>: <span class="string">&quot;nil&quot;</span>,</span><br><span class="line">    <span class="string">&quot;remain&quot;</span>: 11, </span><br><span class="line">    <span class="string">&quot;http&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;enabled&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&quot;listen&quot;</span>: <span class="string">&quot;0.0.0.0:6081&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;rpc&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;enabled&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&quot;listen&quot;</span>: <span class="string">&quot;0.0.0.0:6080&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;hbs&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;servers&quot;</span>: [<span class="string">&quot;falcon-hbs:6030&quot;</span>, <span class="string">&quot;falcon-hbs2:6030&quot;</span>],</span><br><span class="line">        <span class="string">&quot;timeout&quot;</span>: 300,</span><br><span class="line">        <span class="string">&quot;interval&quot;</span>: 60</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;alarm&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;enabled&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&quot;minInterval&quot;</span>: 300,</span><br><span class="line">        <span class="string">&quot;queuePattern&quot;</span>: <span class="string">&quot;event:p%v&quot;</span>,</span><br><span class="line">        <span class="string">&quot;redis&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;dsn&quot;</span>: <span class="string">&quot;falcon-redis:6379&quot;</span>,</span><br><span class="line">            <span class="string">&quot;maxIdle&quot;</span>: 5,</span><br><span class="line">            <span class="string">&quot;connTimeout&quot;</span>: 5000,</span><br><span class="line">            <span class="string">&quot;readTimeout&quot;</span>: 5000,</span><br><span class="line">            <span class="string">&quot;writeTimeout&quot;</span>: 5000</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#falcon01也需要修改</span></span><br></pre></td></tr></table></figure>
<h4 id="部署graph存储绘图模块-1"><a href="#部署graph存储绘图模块-1" class="headerlink" title="部署graph存储绘图模块"></a>部署graph存储绘图模块</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#配置</span></span><br><span class="line">cp cfg.example.json cfg.json</span><br><span class="line">mkdir -p /root/data/6070</span><br><span class="line">vim cfg.json</span><br><span class="line">&#123;</span><br><span class="line">        <span class="string">&quot;debug&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;http&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;enabled&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="string">&quot;listen&quot;</span>: <span class="string">&quot;0.0.0.0:6071&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;rpc&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;enabled&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="string">&quot;listen&quot;</span>: <span class="string">&quot;0.0.0.0:6070&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;rrd&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;storage&quot;</span>: <span class="string">&quot;/root/data/6070&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;db&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;dsn&quot;</span>: <span class="string">&quot;root:password@tcp(falcon-mysql:3306)/graph?loc=Local&amp;parseTime=true&quot;</span>,</span><br><span class="line">                <span class="string">&quot;maxIdle&quot;</span>: 4</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;callTimeout&quot;</span>: 5000,</span><br><span class="line">        <span class="string">&quot;migrate&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;enabled&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="string">&quot;concurrency&quot;</span>: 2,</span><br><span class="line">                <span class="string">&quot;replicas&quot;</span>: 500,</span><br><span class="line">                <span class="string">&quot;cluster&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;graph-00&quot;</span> : <span class="string">&quot;falcon-graph:6070&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="部署transfer数据转发模块-1"><a href="#部署transfer数据转发模块-1" class="headerlink" title="部署transfer数据转发模块"></a>部署transfer数据转发模块</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#配置</span></span><br><span class="line">cp cfg.example.json cfg.json</span><br><span class="line">vim cfg.json</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;debug&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;minStep&quot;</span>: 30,</span><br><span class="line">    <span class="string">&quot;http&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;enabled&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&quot;listen&quot;</span>: <span class="string">&quot;0.0.0.0:6060&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;rpc&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;enabled&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&quot;listen&quot;</span>: <span class="string">&quot;0.0.0.0:8433&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;socket&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;enabled&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&quot;listen&quot;</span>: <span class="string">&quot;0.0.0.0:4444&quot;</span>,</span><br><span class="line">        <span class="string">&quot;timeout&quot;</span>: 3600</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;judge&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;enabled&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&quot;batch&quot;</span>: 200,</span><br><span class="line">        <span class="string">&quot;connTimeout&quot;</span>: 1000,</span><br><span class="line">        <span class="string">&quot;callTimeout&quot;</span>: 5000,</span><br><span class="line">        <span class="string">&quot;maxConns&quot;</span>: 32,</span><br><span class="line">        <span class="string">&quot;maxIdle&quot;</span>: 32,</span><br><span class="line">        <span class="string">&quot;replicas&quot;</span>: 500,</span><br><span class="line">        <span class="string">&quot;cluster&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;judge-00&quot;</span> : <span class="string">&quot;falcon-judge:6080&quot;</span>,</span><br><span class="line">            <span class="string">&quot;judge-01&quot;</span> : <span class="string">&quot;falcon-judge2:6080&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;graph&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;enabled&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&quot;batch&quot;</span>: 200,</span><br><span class="line">        <span class="string">&quot;connTimeout&quot;</span>: 1000,</span><br><span class="line">        <span class="string">&quot;callTimeout&quot;</span>: 5000,</span><br><span class="line">        <span class="string">&quot;maxConns&quot;</span>: 32,</span><br><span class="line">        <span class="string">&quot;maxIdle&quot;</span>: 32,</span><br><span class="line">        <span class="string">&quot;replicas&quot;</span>: 500,</span><br><span class="line">        <span class="string">&quot;cluster&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;graph-00&quot;</span> : <span class="string">&quot;falcon-graph:6070&quot;</span>,</span><br><span class="line">            <span class="string">&quot;graph-01&quot;</span> : <span class="string">&quot;falcon-graph2:6070&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;tsdb&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;enabled&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;batch&quot;</span>: 200,</span><br><span class="line">        <span class="string">&quot;connTimeout&quot;</span>: 1000,</span><br><span class="line">        <span class="string">&quot;callTimeout&quot;</span>: 5000,</span><br><span class="line">        <span class="string">&quot;maxConns&quot;</span>: 32,</span><br><span class="line">        <span class="string">&quot;maxIdle&quot;</span>: 32,</span><br><span class="line">        <span class="string">&quot;retry&quot;</span>: 3,</span><br><span class="line">        <span class="string">&quot;address&quot;</span>: <span class="string">&quot;127.0.0.1:8088&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#falcon01也需要修改</span></span><br></pre></td></tr></table></figure>
<h4 id="部署query绘图查询模块-1"><a href="#部署query绘图查询模块-1" class="headerlink" title="部署query绘图查询模块"></a>部署query绘图查询模块</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#配置</span></span><br><span class="line">cp cfg.example.json cfg.json</span><br><span class="line">vim cfg.json</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;debug&quot;</span>: <span class="string">&quot;false&quot;</span>,</span><br><span class="line">    <span class="string">&quot;http&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;enabled&quot;</span>:  <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&quot;listen&quot;</span>:   <span class="string">&quot;0.0.0.0:9966&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;graph&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;connTimeout&quot;</span>: 1000,</span><br><span class="line">        <span class="string">&quot;callTimeout&quot;</span>: 5000,</span><br><span class="line">        <span class="string">&quot;maxConns&quot;</span>: 32,</span><br><span class="line">        <span class="string">&quot;maxIdle&quot;</span>: 32,</span><br><span class="line">        <span class="string">&quot;replicas&quot;</span>: 500,</span><br><span class="line">        <span class="string">&quot;cluster&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;graph-00&quot;</span>: <span class="string">&quot;falcon-graph:6070&quot;</span>,</span><br><span class="line">            <span class="string">&quot;graph-01&quot;</span>: <span class="string">&quot;falcon-graph2:6070&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;api&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;query&quot;</span>: <span class="string">&quot;http://10.128.31.137:9966&quot;</span>,</span><br><span class="line">        <span class="string">&quot;dashboard&quot;</span>: <span class="string">&quot;http://10.128.31.137:8081&quot;</span>,</span><br><span class="line">        <span class="string">&quot;max&quot;</span>: 500</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="部署dashboard用户查询模块-1"><a href="#部署dashboard用户查询模块-1" class="headerlink" title="部署dashboard用户查询模块"></a>部署dashboard用户查询模块</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#初始化</span></span><br><span class="line">virtualenv ./env</span><br><span class="line">./env/bin/pip install -r pip_requirements.txt</span><br><span class="line"><span class="comment">#配置</span></span><br><span class="line">vim rrd/config.py</span><br><span class="line"><span class="comment">#-*-coding:utf8-*-</span></span><br><span class="line">import os</span><br><span class="line"></span><br><span class="line"><span class="comment">#-- dashboard db config --</span></span><br><span class="line">DASHBOARD_DB_HOST = <span class="string">&quot;falcon-mysql&quot;</span></span><br><span class="line">DASHBOARD_DB_PORT = 3306</span><br><span class="line">DASHBOARD_DB_USER = <span class="string">&quot;root&quot;</span></span><br><span class="line">DASHBOARD_DB_PASSWD = <span class="string">&quot;password&quot;</span></span><br><span class="line">DASHBOARD_DB_NAME = <span class="string">&quot;dashboard&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#-- graph db config --</span></span><br><span class="line">GRAPH_DB_HOST = <span class="string">&quot;falcon-mysql&quot;</span></span><br><span class="line">GRAPH_DB_PORT = 3306</span><br><span class="line">GRAPH_DB_USER = <span class="string">&quot;root&quot;</span></span><br><span class="line">GRAPH_DB_PASSWD = <span class="string">&quot;password&quot;</span></span><br><span class="line">GRAPH_DB_NAME = <span class="string">&quot;graph&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#-- app config --</span></span><br><span class="line">DEBUG = True</span><br><span class="line">SECRET_KEY = <span class="string">&quot;secret-key&quot;</span></span><br><span class="line">SESSION_COOKIE_NAME = <span class="string">&quot;open-falcon&quot;</span></span><br><span class="line">PERMANENT_SESSION_LIFETIME = 3600 * 24 * 30</span><br><span class="line">SITE_COOKIE = <span class="string">&quot;open-falcon-ck&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#-- query config --</span></span><br><span class="line">QUERY_ADDR = <span class="string">&quot;http://10.128.31.137:9966&quot;</span></span><br><span class="line"></span><br><span class="line">BASE_DIR = <span class="string">&quot;/root/deploy/dashboard&quot;</span></span><br><span class="line">LOG_PATH = os.path.join(BASE_DIR,<span class="string">&quot;log/&quot;</span>)</span><br><span class="line"></span><br><span class="line">try:</span><br><span class="line">    from rrd.local_config import *</span><br><span class="line">except:</span><br><span class="line">    pass</span><br></pre></td></tr></table></figure>
<h4 id="部署uic用户管理模块-1"><a href="#部署uic用户管理模块-1" class="headerlink" title="部署uic用户管理模块"></a>部署uic用户管理模块</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#配置</span></span><br><span class="line">cp cfg.example.json cfg.json</span><br><span class="line">vim cfg.json</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;log&quot;</span>: <span class="string">&quot;debug&quot;</span>,</span><br><span class="line">    <span class="string">&quot;company&quot;</span>: <span class="string">&quot;MI&quot;</span>,</span><br><span class="line">    <span class="string">&quot;http&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;enabled&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&quot;listen&quot;</span>: <span class="string">&quot;0.0.0.0:1234&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;cache&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;enabled&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&quot;redis&quot;</span>: <span class="string">&quot;falcon:6379&quot;</span>,</span><br><span class="line">        <span class="string">&quot;idle&quot;</span>: 10,</span><br><span class="line">        <span class="string">&quot;max&quot;</span>: 1000,</span><br><span class="line">        <span class="string">&quot;timeout&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;conn&quot;</span>: 10000,</span><br><span class="line">            <span class="string">&quot;read&quot;</span>: 5000,</span><br><span class="line">            <span class="string">&quot;write&quot;</span>: 5000</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;salt&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;canRegister&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;ldap&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;enabled&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;addr&quot;</span>: <span class="string">&quot;ldap.example.com:389&quot;</span>,</span><br><span class="line">        <span class="string">&quot;baseDN&quot;</span>: <span class="string">&quot;dc=example,dc=com&quot;</span>,</span><br><span class="line">        <span class="string">&quot;bindDN&quot;</span>: <span class="string">&quot;cn=mananger,dc=example,dc=com&quot;</span>,</span><br><span class="line">        <span class="string">&quot;bindPasswd&quot;</span>: <span class="string">&quot;12345678&quot;</span>,</span><br><span class="line">        <span class="string">&quot;userField&quot;</span>: <span class="string">&quot;uid&quot;</span>,</span><br><span class="line">        <span class="string">&quot;attributes&quot;</span>: [<span class="string">&quot;sn&quot;</span>,<span class="string">&quot;mail&quot;</span>,<span class="string">&quot;telephoneNumber&quot;</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;uic&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;addr&quot;</span>: <span class="string">&quot;root:password@tcp(falcon-mysql:3306)/uic?charset=utf8&amp;loc=Asia%2FChongqing&quot;</span>,</span><br><span class="line">        <span class="string">&quot;idle&quot;</span>: 10,</span><br><span class="line">        <span class="string">&quot;max&quot;</span>: 100</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;shortcut&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;falconPortal&quot;</span>: <span class="string">&quot;http://10.128.31.137:5050/&quot;</span>,</span><br><span class="line">        <span class="string">&quot;falconDashboard&quot;</span>: <span class="string">&quot;http://10.128.31.137:7070/&quot;</span>,</span><br><span class="line">        <span class="string">&quot;falconAlarm&quot;</span>: <span class="string">&quot;http://10.128.31.136:9912/&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#所有uic(fe)节点的salt配置要相同。</span></span><br></pre></td></tr></table></figure>
<h4 id="部署portal报警策略模块-1"><a href="#部署portal报警策略模块-1" class="headerlink" title="部署portal报警策略模块"></a>部署portal报警策略模块</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#初始化</span></span><br><span class="line">virtualenv ./env</span><br><span class="line">./env/bin/pip install -r pip_requirements.txt</span><br><span class="line"><span class="comment">#配置</span></span><br><span class="line">vim rrd/config.py</span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line">__author__ = <span class="string">&#x27;Ulric Qin&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -- app config --</span></span><br><span class="line">DEBUG = True</span><br><span class="line"></span><br><span class="line"><span class="comment"># -- db config --</span></span><br><span class="line">DB_HOST = <span class="string">&quot;falcon-mysql&quot;</span></span><br><span class="line">DB_PORT = 3306</span><br><span class="line">DB_USER = <span class="string">&quot;root&quot;</span></span><br><span class="line">DB_PASS = <span class="string">&quot;password&quot;</span></span><br><span class="line">DB_NAME = <span class="string">&quot;falcon_portal&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -- cookie config --</span></span><br><span class="line">SECRET_KEY = <span class="string">&quot;4e.5tyg8-u9ioj&quot;</span></span><br><span class="line">SESSION_COOKIE_NAME = <span class="string">&quot;falcon-portal&quot;</span></span><br><span class="line">PERMANENT_SESSION_LIFETIME = 3600 * 24 * 30</span><br><span class="line"></span><br><span class="line">UIC_ADDRESS = &#123;</span><br><span class="line">    <span class="string">&#x27;internal&#x27;</span>: <span class="string">&#x27;http://10.128.31.137:1234&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;external&#x27;</span>: <span class="string">&#x27;http://10.128.31.137:1234&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">UIC_TOKEN = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">MAINTAINERS = [<span class="string">&#x27;root&#x27;</span>]</span><br><span class="line">CONTACT = <span class="string">&#x27;CDXXJCPT@gome.cn&#x27;</span></span><br><span class="line"></span><br><span class="line">COMMUNITY = True</span><br><span class="line"></span><br><span class="line">try:</span><br><span class="line">    from frame.local_config import *</span><br><span class="line">except Exception, e:</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;[warning] %s&quot;</span> % e</span><br></pre></td></tr></table></figure>
<h4 id="部署agent监控采集模块-1"><a href="#部署agent监控采集模块-1" class="headerlink" title="部署agent监控采集模块"></a>部署agent监控采集模块</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#配置</span></span><br><span class="line">cp cfg.example.json cfg.json</span><br><span class="line">vim cfg.json</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;debug&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;hostname&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;ip&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;plugin&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;enabled&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;dir&quot;</span>: <span class="string">&quot;./plugin&quot;</span>,</span><br><span class="line">        <span class="string">&quot;git&quot;</span>: <span class="string">&quot;https://github.com/open-falcon/plugin.git&quot;</span>,</span><br><span class="line">        <span class="string">&quot;logs&quot;</span>: <span class="string">&quot;./logs&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;heartbeat&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;enabled&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&quot;addr&quot;</span>: <span class="string">&quot;10.128.31.137:6030&quot;</span>,</span><br><span class="line">        <span class="string">&quot;interval&quot;</span>: 60,</span><br><span class="line">        <span class="string">&quot;timeout&quot;</span>: 1000</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;transfer&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;enabled&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&quot;addrs&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;10.128.31.136:8433&quot;</span>,</span><br><span class="line">            <span class="string">&quot;10.128.31.137:8433&quot;</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&quot;interval&quot;</span>: 60,</span><br><span class="line">        <span class="string">&quot;timeout&quot;</span>: 1000</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;http&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;enabled&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&quot;listen&quot;</span>: <span class="string">&quot;:1988&quot;</span>,</span><br><span class="line">        <span class="string">&quot;backdoor&quot;</span>: <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;collector&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;ifacePrefix&quot;</span>: [<span class="string">&quot;eth&quot;</span>, <span class="string">&quot;ens&quot;</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;ignore&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;cpu.busy&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&quot;df.bytes.free&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&quot;df.bytes.total&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&quot;df.bytes.used&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&quot;df.bytes.used.percent&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&quot;df.inodes.total&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&quot;df.inodes.free&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&quot;df.inodes.used&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&quot;df.inodes.used.percent&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&quot;mem.memtotal&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&quot;mem.memused&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&quot;mem.memused.percent&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&quot;mem.memfree&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&quot;mem.swaptotal&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&quot;mem.swapused&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&quot;mem.swapfree&quot;</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="用户接口"><a href="#用户接口" class="headerlink" title="用户接口"></a>用户接口</h3><table>
<thead>
<tr>
<th align="center">描述</th>
<th align="center">访问接口</th>
<th align="center">功能</th>
<th align="center">备注</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>dashborad</strong></td>
<td align="center"><a href="http://10.128.31.136:8081/">http://10.128.31.136:8081/</a></td>
<td align="center">监控主机数据查询</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"><strong>uic</strong></td>
<td align="center"><a href="http://10.128.31.136:1234/">http://10.128.31.136:1234/</a></td>
<td align="center">用户组管理</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"><strong>portal</strong></td>
<td align="center"><a href="http://10.128.31.136:5050/">http://10.128.31.136:5050/</a></td>
<td align="center">监控策略配置</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"><strong>dashborad</strong></td>
<td align="center"><a href="http://10.128.31.137:8081/">http://10.128.31.137:8081/</a></td>
<td align="center">监控主机数据查询</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"><strong>uic</strong></td>
<td align="center"><a href="http://10.128.31.137:1234/">http://10.128.31.137:1234/</a></td>
<td align="center">用户组管理</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"><strong>portal</strong></td>
<td align="center"><a href="http://10.128.31.137:5050/">http://10.128.31.137:5050/</a></td>
<td align="center">监控策略配置</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"><strong>alarm</strong></td>
<td align="center"><a href="http://10.128.31.136:9912/">http://10.128.31.136:9912/</a></td>
<td align="center">报警查询</td>
<td align="center"></td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>open-falcon</category>
      </categories>
      <tags>
        <tag>golang</tag>
        <tag>监控</tag>
        <tag>linux</tag>
        <tag>分布式</tag>
        <tag>open-falcon</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>基于Redis Cluster的分布式缓存算法篇（四）</title>
    <url>/redis/redis-cache-algorithm-20170207.html</url>
    <content><![CDATA[<p>说明下这里的算法指的是内存淘汰算法。redis作为应用级缓存使用，在内存超过限制时，按照配置的策略，淘汰掉相应的kv，使得内存可以继续留有足够的空间保存新的数据。</p>
<a id="more"></a>

<h3 id="算法介绍"><a href="#算法介绍" class="headerlink" title="算法介绍"></a>算法介绍</h3><p>redis 提供 6种数据淘汰策略：</p>
<ul>
<li>noeviction : 默认，不淘汰</li>
<li>volatile-lru：从已设置过期时间的数据集（server.db[i].expires）中挑选最近最少使用的数据淘汰</li>
<li>volatile-ttl：从已设置过期时间的数据集（server.db[i].expires）中挑选将要过期的数据淘汰</li>
<li>volatile-random：从已设置过期时间的数据集（server.db[i].expires）中任意选择数据淘汰</li>
<li>allkeys-lru：从数据集（server.db[i].dict）中挑选最近最少使用的数据淘汰</li>
<li>allkeys-random：从数据集（server.db[i].dict）中任意选择数据淘汰</li>
</ul>
<p>以上6中淘汰策略已经能够满足大多数应用场景，如何选择淘汰策略？根据实际业务情况进行选择。</p>
<h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><p>其缓存管理功能，由redis.c文件中的freeMemoryIfNeeded函数实现。如果maxmemory被设置，则在每次进行命令执行之前，该函数均被调用，用以判断是否有足够内存可用，释放内存或返回错误。如果没有找到足够多的内存，程序主逻辑将会阻止设置了REDIS_COM_DENYOOM flag的命令执行，对其返回command not allowed when used memory &gt; ‘maxmemory’的错误消息。源码如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">freeMemoryIfNeeded</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">size_t</span> mem_used, mem_tofree, mem_freed;</span><br><span class="line">    <span class="keyword">int</span> slaves = listLength(server.slaves);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Remove the size of slaves output buffers and AOF buffer from the</span></span><br><span class="line"><span class="comment">     * count of used memory. */</span></span><br><span class="line">    <span class="comment">// 计算占用内存大小时，并不计算slave output buffer和aof buffer，因此maxmemory应该比实际内存小，为这两个buffer留足空间。</span></span><br><span class="line">    mem_used = zmalloc_used_memory();</span><br><span class="line">    <span class="keyword">if</span> (slaves) &#123;</span><br><span class="line">        listIter li;</span><br><span class="line">        listNode *ln;</span><br><span class="line"></span><br><span class="line">        listRewind(server.slaves,&amp;li);</span><br><span class="line">        <span class="keyword">while</span>((ln = listNext(&amp;li))) &#123;</span><br><span class="line">            redisClient *slave = listNodeValue(ln);</span><br><span class="line">            <span class="keyword">unsigned</span> <span class="keyword">long</span> obuf_bytes = getClientOutputBufferMemoryUsage(slave);</span><br><span class="line">            <span class="keyword">if</span> (obuf_bytes &gt; mem_used)</span><br><span class="line">                mem_used = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                mem_used -= obuf_bytes;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (server.appendonly) &#123;</span><br><span class="line">        mem_used -= sdslen(server.aofbuf);</span><br><span class="line">        mem_used -= sdslen(server.bgrewritebuf);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Check if we are over the memory limit. */</span></span><br><span class="line">    <span class="keyword">if</span> (mem_used &lt;= server.maxmemory) <span class="keyword">return</span> REDIS_OK;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (server.maxmemory_policy == REDIS_MAXMEMORY_NO_EVICTION)</span><br><span class="line">        <span class="keyword">return</span> REDIS_ERR; <span class="comment">/* We need to free memory, but policy forbids. */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Compute how much memory we need to free. */</span></span><br><span class="line">    mem_tofree = mem_used - server.maxmemory;</span><br><span class="line">    mem_freed = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (mem_freed &lt; mem_tofree) &#123;</span><br><span class="line">        <span class="keyword">int</span> j, k, keys_freed = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; server.dbnum; j++) &#123;</span><br><span class="line">            <span class="keyword">long</span> bestval = <span class="number">0</span>; <span class="comment">/* just to prevent warning */</span></span><br><span class="line">            sds bestkey = <span class="literal">NULL</span>;</span><br><span class="line">            <span class="class"><span class="keyword">struct</span> <span class="title">dictEntry</span> *<span class="title">de</span>;</span></span><br><span class="line">            redisDb *db = server.db+j;</span><br><span class="line">            dict *dict;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (server.maxmemory_policy == REDIS_MAXMEMORY_ALLKEYS_LRU ||</span><br><span class="line">                server.maxmemory_policy == REDIS_MAXMEMORY_ALLKEYS_RANDOM)</span><br><span class="line">            &#123;</span><br><span class="line">                dict = server.db[j].dict;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                dict = server.db[j].expires;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (dictSize(dict) == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* volatile-random and allkeys-random policy */</span></span><br><span class="line">            <span class="keyword">if</span> (server.maxmemory_policy == REDIS_MAXMEMORY_ALLKEYS_RANDOM ||</span><br><span class="line">                server.maxmemory_policy == REDIS_MAXMEMORY_VOLATILE_RANDOM)</span><br><span class="line">            &#123;</span><br><span class="line">                de = dictGetRandomKey(dict);</span><br><span class="line">                bestkey = dictGetEntryKey(de);</span><br><span class="line">            &#125;<span class="comment">//如果是random delete,则从dict中随机选一个key</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">/* volatile-lru and allkeys-lru policy */</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (server.maxmemory_policy == REDIS_MAXMEMORY_ALLKEYS_LRU ||</span><br><span class="line">                server.maxmemory_policy == REDIS_MAXMEMORY_VOLATILE_LRU)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (k = <span class="number">0</span>; k &lt; server.maxmemory_samples; k++) &#123;</span><br><span class="line">                    sds thiskey;</span><br><span class="line">                    <span class="keyword">long</span> thisval;</span><br><span class="line">                    robj *o;</span><br><span class="line"></span><br><span class="line">                    de = dictGetRandomKey(dict);</span><br><span class="line">                    thiskey = dictGetEntryKey(de);</span><br><span class="line">                    <span class="comment">/* When policy is volatile-lru we need an additonal lookup</span></span><br><span class="line"><span class="comment">                     * to locate the real key, as dict is set to db-&gt;expires. */</span></span><br><span class="line">                    <span class="keyword">if</span> (server.maxmemory_policy == REDIS_MAXMEMORY_VOLATILE_LRU)</span><br><span class="line">                        de = dictFind(db-&gt;dict, thiskey); <span class="comment">//因为dict-&gt;expires维护的数据结构里并没有记录该key的最后访问时间</span></span><br><span class="line">                    o = dictGetEntryVal(de);</span><br><span class="line">                    thisval = estimateObjectIdleTime(o);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">/* Higher idle time is better candidate for deletion */</span></span><br><span class="line">                    <span class="keyword">if</span> (bestkey == <span class="literal">NULL</span> || thisval &gt; bestval) &#123;</span><br><span class="line">                        bestkey = thiskey;</span><br><span class="line">                        bestval = thisval;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;<span class="comment">//为了减少运算量,redis的lru算法和expire淘汰算法一样，都是非最优解，lru算法是在相应的dict中，选择maxmemory_samples(默认设置是3)份key，挑选其中lru的，进行淘汰</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* volatile-ttl */</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (server.maxmemory_policy == REDIS_MAXMEMORY_VOLATILE_TTL) &#123;</span><br><span class="line">                <span class="keyword">for</span> (k = <span class="number">0</span>; k &lt; server.maxmemory_samples; k++) &#123;</span><br><span class="line">                    sds thiskey;</span><br><span class="line">                    <span class="keyword">long</span> thisval;</span><br><span class="line"></span><br><span class="line">                    de = dictGetRandomKey(dict);</span><br><span class="line">                    thiskey = dictGetEntryKey(de);</span><br><span class="line">                    thisval = (<span class="keyword">long</span>) dictGetEntryVal(de);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">/* Expire sooner (minor expire unix timestamp) is better</span></span><br><span class="line"><span class="comment">                     * candidate for deletion */</span></span><br><span class="line">                    <span class="keyword">if</span> (bestkey == <span class="literal">NULL</span> || thisval &lt; bestval) &#123;</span><br><span class="line">                        bestkey = thiskey;</span><br><span class="line">                        bestval = thisval;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;<span class="comment">//注意ttl实现和上边一样，都是挑选出maxmemory_samples份进行挑选</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* Finally remove the selected key. */</span></span><br><span class="line">            <span class="keyword">if</span> (bestkey) &#123;</span><br><span class="line">                <span class="keyword">long</span> <span class="keyword">long</span> delta;</span><br><span class="line"></span><br><span class="line">                robj *keyobj = createStringObject(bestkey,sdslen(bestkey));</span><br><span class="line">                propagateExpire(db,keyobj); <span class="comment">//将del命令扩散给slaves</span></span><br><span class="line">                <span class="comment">/* We compute the amount of memory freed by dbDelete() alone.</span></span><br><span class="line"><span class="comment">                 * It is possible that actually the memory needed to propagate</span></span><br><span class="line"><span class="comment">                 * the DEL in AOF and replication link is greater than the one</span></span><br><span class="line"><span class="comment">                 * we are freeing removing the key, but we can&#x27;t account for</span></span><br><span class="line"><span class="comment">                 * that otherwise we would never exit the loop.</span></span><br><span class="line"><span class="comment">                 *</span></span><br><span class="line"><span class="comment">                 * AOF and Output buffer memory will be freed eventually so</span></span><br><span class="line"><span class="comment">                 * we only care about memory used by the key space. */</span></span><br><span class="line">                delta = (<span class="keyword">long</span> <span class="keyword">long</span>) zmalloc_used_memory();</span><br><span class="line">                dbDelete(db,keyobj);</span><br><span class="line">                delta -= (<span class="keyword">long</span> <span class="keyword">long</span>) zmalloc_used_memory();</span><br><span class="line">                mem_freed += delta;</span><br><span class="line">                server.stat_evictedkeys++;</span><br><span class="line">                decrRefCount(keyobj);</span><br><span class="line">                keys_freed++;</span><br><span class="line"></span><br><span class="line">                <span class="comment">/* When the memory to free starts to be big enough, we may</span></span><br><span class="line"><span class="comment">                 * start spending so much time here that is impossible to</span></span><br><span class="line"><span class="comment">                 * deliver data to the slaves fast enough, so we force the</span></span><br><span class="line"><span class="comment">                 * transmission here inside the loop. */</span></span><br><span class="line">                <span class="keyword">if</span> (slaves) flushSlavesOutputBuffers();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="comment">//在所有的db中遍历一遍，然后判断删除的key释放的空间是否足够</span></span><br><span class="line">        <span class="keyword">if</span> (!keys_freed) <span class="keyword">return</span> REDIS_ERR; <span class="comment">/* nothing to free... */</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> REDIS_OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="算法源码解析"><a href="#算法源码解析" class="headerlink" title="算法源码解析"></a>算法源码解析</h4><p>淘汰算法redis.h的相关定义</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* The actual Redis Object */</span>  </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> REDIS_LRU_BITS 24  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> REDIS_LRU_CLOCK_MAX ((1<span class="meta-string">&lt;&lt;REDIS_LRU_BITS)-1) /* Max value of obj-&gt;lru */  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> REDIS_LRU_CLOCK_RESOLUTION 1000 <span class="comment">/* LRU clock resolution in ms */</span>  </span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">redisObject</span> &#123;</span>  </span><br><span class="line">    <span class="keyword">unsigned</span> type:<span class="number">4</span>; <span class="comment">//存放的对象类型</span></span><br><span class="line">    <span class="keyword">unsigned</span> encoding:<span class="number">4</span>; <span class="comment">//内容编码</span></span><br><span class="line">    <span class="comment">//与server.lruclock的时间差值</span></span><br><span class="line">    <span class="keyword">unsigned</span> lru:REDIS_LRU_BITS; <span class="comment">/* lru time (relative to server.lruclock) */</span>  </span><br><span class="line">    <span class="keyword">int</span> refcount; <span class="comment">//引用计数算法使用的引用计数器</span></span><br><span class="line">    <span class="keyword">void</span> *ptr;  <span class="comment">//数据指针</span></span><br><span class="line">&#125; robj;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/* Macro used to obtain the current LRU clock. </span></span><br><span class="line"><span class="comment"> * If the current resolution is lower than the frequency we refresh the </span></span><br><span class="line"><span class="comment"> * LRU clock (as it should be in production servers) we return the </span></span><br><span class="line"><span class="comment"> * precomputed value, otherwise we need to resort to a function call. */</span>  </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LRU_CLOCK() ((1000/server.hz &lt;= REDIS_LRU_CLOCK_RESOLUTION) ? server.lruclock : getLRUClock()) </span></span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">getLRUClock</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">return</span> (mstime()/REDIS_LRU_CLOCK_RESOLUTION) &amp; REDIS_LRU_CLOCK_MAX;  </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> lru:REDIS_LRU_BITS; <span class="comment">/* lru time (relative to server.lruclock) */</span>  </span><br></pre></td></tr></table></figure>
<p>以最简单的all-keys-lru淘汰策略为例，该策略随机选出16个，通过过期时间对pool内存数据进行淘汰。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* volatile-lru and allkeys-lru policy */</span>  </span><br><span class="line">          <span class="keyword">else</span> <span class="keyword">if</span> (server.maxmemory_policy == REDIS_MAXMEMORY_ALLKEYS_LRU ||  </span><br><span class="line">              server.maxmemory_policy == REDIS_MAXMEMORY_VOLATILE_LRU)  </span><br><span class="line">          &#123;  </span><br><span class="line">              struct evictionPoolEntry *pool = db-&gt;eviction_pool;  </span><br><span class="line">  </span><br><span class="line">              <span class="keyword">while</span>(bestkey == <span class="literal">NULL</span>) &#123;  </span><br><span class="line">                  evictionPoolPopulate(dict, db-&gt;dict, db-&gt;eviction_pool);  </span><br><span class="line">                  <span class="comment">/* Go backward from best to worst element to evict. */</span>  </span><br><span class="line">                  <span class="keyword">for</span> (k = REDIS_EVICTION_POOL_SIZE<span class="number">-1</span>; k &gt;= <span class="number">0</span>; k--) &#123;  </span><br><span class="line">                      <span class="keyword">if</span> (pool[k].key == <span class="literal">NULL</span>) <span class="keyword">continue</span>;  </span><br><span class="line">                      de = dictFind(dict,pool[k].key);  </span><br><span class="line">  </span><br><span class="line">                      <span class="comment">/* Remove the entry from the pool. */</span>  </span><br><span class="line">                      sdsfree(pool[k].key);  </span><br><span class="line">                      <span class="comment">/* Shift all elements on its right to left. */</span>  </span><br><span class="line">                      memmove(pool+k,pool+k+<span class="number">1</span>,  </span><br><span class="line">                          <span class="keyword">sizeof</span>(pool[<span class="number">0</span>])*(REDIS_EVICTION_POOL_SIZE-k<span class="number">-1</span>));  </span><br><span class="line">                      <span class="comment">/* Clear the element on the right which is empty </span></span><br><span class="line"><span class="comment">                       * since we shifted one position to the left.  */</span>  </span><br><span class="line">                      pool[REDIS_EVICTION_POOL_SIZE<span class="number">-1</span>].key = <span class="literal">NULL</span>;  </span><br><span class="line">                      pool[REDIS_EVICTION_POOL_SIZE<span class="number">-1</span>].idle = <span class="number">0</span>;  </span><br><span class="line">  </span><br><span class="line">                      <span class="comment">/* If the key exists, is our pick. Otherwise it is </span></span><br><span class="line"><span class="comment">                       * a ghost and we need to try the next element. */</span>  </span><br><span class="line">                      <span class="keyword">if</span> (de) &#123;  </span><br><span class="line">                          bestkey = dictGetKey(de);  </span><br><span class="line">                          <span class="keyword">break</span>;  </span><br><span class="line">                      &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">                          <span class="comment">/* Ghost... */</span>  </span><br><span class="line">                          <span class="keyword">continue</span>;  </span><br><span class="line">                      &#125;  </span><br><span class="line">                  &#125;  </span><br><span class="line">              &#125;  </span><br><span class="line">          &#125;  </span><br></pre></td></tr></table></figure>
<p>通过lru淘汰返回lru时间，最后与当前lru比较</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Given an object returns the min number of milliseconds the object was never </span></span><br><span class="line"><span class="comment"> * requested, using an approximated LRU algorithm. */</span>  </span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="title">estimateObjectIdleTime</span><span class="params">(robj *o)</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> lruclock = LRU_CLOCK();  </span><br><span class="line">    <span class="keyword">if</span> (lruclock &gt;= o-&gt;lru) &#123;  </span><br><span class="line">        <span class="keyword">return</span> (lruclock - o-&gt;lru) * REDIS_LRU_CLOCK_RESOLUTION;  </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">        <span class="keyword">return</span> (lruclock + (REDIS_LRU_CLOCK_MAX - o-&gt;lru)) *  </span><br><span class="line">                    REDIS_LRU_CLOCK_RESOLUTION;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
<h3 id="测试验证"><a href="#测试验证" class="headerlink" title="测试验证"></a>测试验证</h3><p>要将redis最终应用到生产环境中，稳定性、可靠性测试更为重要，下面将对淘汰算法相关进行测试。对于性能的测试另有文章，请关注之后的性能篇。</p>
<h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><p>在<a href="redis/redis-cache-deploy-20170125.html">基于Redis Cluster的分布式缓存部署篇（三）</a>中设置maxmemory为100M，保证服务不会在高并发情况下宕机。最后设置maxmemory-policy要测试的淘汰策略。</p>
<h4 id="用例代码"><a href="#用例代码" class="headerlink" title="用例代码"></a>用例代码</h4><p>java编写的测试程序，没有讲究代码结构，请见谅。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jcache;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jcache.clients.jcachecluster.base.JCacheClient;</span><br><span class="line"><span class="keyword">import</span> jcache.clients.jcachecluster.common.PropertiesConst;</span><br><span class="line"><span class="keyword">import</span> jcache.clients.jcachecluster.factory.CacheFactorySingle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.BrokenBarrierException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CyclicBarrier;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicLong;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JcacheClusterTPS</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String HostAndPort =</span><br><span class="line">                    <span class="string">&quot;10.128.31.104:7000;&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;10.128.31.104:7001;&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;10.128.31.105:7000;&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;10.128.31.105:7001;&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;10.128.31.109:7000;&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;10.128.31.109:7001&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> JCacheClient cluster = getCluster();</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> nThreads = args.length &gt;= <span class="number">1</span> ? Integer.parseInt(args[<span class="number">0</span>]) : <span class="number">8</span>;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> sendNumOnceTime = args.length &gt;= <span class="number">2</span> ? Integer.parseInt(args[<span class="number">1</span>]) : <span class="number">100</span>;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> keySize = args.length &gt;= <span class="number">3</span> ? Integer.parseInt(args[<span class="number">2</span>]) : <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> messageSize = args.length &gt;= <span class="number">4</span> ? Integer.parseInt(args[<span class="number">3</span>]) : <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> times = args.length &gt;= <span class="number">5</span> ? Integer.parseInt(args[<span class="number">4</span>]) : <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> setOrGet = args.length &gt;= <span class="number">6</span> ? Integer.parseInt(args[<span class="number">5</span>]) : <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">final</span> String keyParam = args.length &gt;= <span class="number">7</span> ? args[<span class="number">6</span>] : <span class="string">&quot;0&quot;</span>;</span><br><span class="line">        <span class="keyword">final</span> AtomicLong atomicSuccessNums = <span class="keyword">new</span> AtomicLong(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">final</span> List&lt;Long&gt; tpsList = <span class="keyword">new</span> ArrayList&lt;Long&gt;();</span><br><span class="line">        <span class="keyword">final</span> String msg = buildMessage(messageSize);</span><br><span class="line">        <span class="keyword">final</span> List&lt;String&gt; keys = getKeys(keySize, nThreads * sendNumOnceTime, times);</span><br><span class="line">        doRun(cluster, tpsList, atomicSuccessNums, nThreads, times, sendNumOnceTime, keys, msg, keySize, messageSize, setOrGet, keyParam);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> JCacheClient <span class="title">getCluster</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">        properties.put(PropertiesConst.Keys.HOST_AND_PORT, HostAndPort);</span><br><span class="line">        properties.put(PropertiesConst.Keys.AUTH_KEY, <span class="string">&quot;13F455A8E9DC2BBEBE1BD906C82B3C0A1&quot;</span>);</span><br><span class="line">        properties.put(PropertiesConst.Keys.NAMESPACE, <span class="string">&quot;weidian-1&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> CacheFactorySingle.createJCacheClient(properties);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">doRun</span><span class="params">(<span class="keyword">final</span> JCacheClient cluster,</span></span></span><br><span class="line"><span class="function"><span class="params">                              <span class="keyword">final</span> List&lt;Long&gt; tpsList, <span class="keyword">final</span> AtomicLong atomicSuccessNums,</span></span></span><br><span class="line"><span class="function"><span class="params">                              <span class="keyword">final</span> <span class="keyword">int</span> nThreads, <span class="keyword">final</span> <span class="keyword">int</span> times, <span class="keyword">final</span> <span class="keyword">int</span> sendNumOnceTime,</span></span></span><br><span class="line"><span class="function"><span class="params">                              <span class="keyword">final</span> List&lt;String&gt; keys, <span class="keyword">final</span> String msg, <span class="keyword">final</span> <span class="keyword">int</span> keySize, <span class="keyword">final</span> <span class="keyword">int</span> messageSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                              <span class="keyword">final</span> <span class="keyword">int</span> setOrGet, <span class="keyword">final</span> String keyParam)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> AtomicLong atomicFailNum = <span class="keyword">new</span> AtomicLong(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> time = <span class="number">0</span>; time &lt; times; time++) &#123;</span><br><span class="line">            <span class="keyword">final</span> Object object = <span class="keyword">new</span> Object();</span><br><span class="line">            <span class="keyword">synchronized</span> (object) &#123;</span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">int</span> t = time + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">final</span> ExecutorService exec = Executors.newCachedThreadPool();</span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">long</span> startCurrentTimeMillis = System.currentTimeMillis();</span><br><span class="line">                <span class="keyword">final</span> CyclicBarrier barrier = <span class="keyword">new</span> CyclicBarrier(nThreads, <span class="keyword">new</span> Runnable() &#123; <span class="comment">// 设置几个线程为一组,当这一组的几个线程都执行完成后,然后执行住线程的</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                        <span class="keyword">synchronized</span> (object) &#123;</span><br><span class="line">                            <span class="keyword">long</span> endCurrentTimeMillis = System.currentTimeMillis();</span><br><span class="line">                            <span class="keyword">long</span> sendNums = nThreads * sendNumOnceTime;</span><br><span class="line">                            <span class="keyword">long</span> escapedTimeMillis = endCurrentTimeMillis - startCurrentTimeMillis;</span><br><span class="line">                            <span class="keyword">long</span> tps = sendNums * <span class="number">1000</span> / escapedTimeMillis;</span><br><span class="line">                            String type = <span class="string">&quot;set&quot;</span>;</span><br><span class="line">                            <span class="keyword">if</span> (setOrGet != <span class="number">0</span>) &#123;</span><br><span class="line">                                type = <span class="string">&quot;get&quot;</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            tpsList.add(tps);</span><br><span class="line">                            System.out.printf(<span class="string">&quot;第 %d 次, 发送完成, 用时 : %d ms, &quot;</span> + <span class="string">&quot;线程大小 : %d , &quot;</span> + <span class="string">&quot;key大小 : %d , &quot;</span> + <span class="string">&quot;msg大小 : %d , &quot;</span> + <span class="string">&quot;发送数量 : %d , &quot;</span> + <span class="string">&quot;成功数量 : %d , &quot;</span> + <span class="string">&quot;失败数量 : %d , &quot;</span> + <span class="string">&quot;统计方式 : %s , &quot;</span> + <span class="string">&quot;TPS : %d !!!&quot;</span>,</span><br><span class="line">                                    t, escapedTimeMillis, nThreads, keySize, messageSize, sendNums, atomicSuccessNums.intValue(), atomicFailNum.intValue(), type, tps);</span><br><span class="line">                            exec.shutdown();</span><br><span class="line">                            object.notify();</span><br><span class="line">                            System.out.println();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nThreads; i++) &#123;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">final</span> String finalI = <span class="string">&quot;i&quot;</span> + i;</span><br><span class="line">                    exec.execute(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                            <span class="keyword">try</span> &#123;</span><br><span class="line">                                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; sendNumOnceTime; j++) &#123;</span><br><span class="line">                                    <span class="keyword">if</span> (setOrGet == <span class="number">0</span>) &#123;</span><br><span class="line">                                        String key = <span class="string">&quot;ke&quot;</span> + keyParam + finalI + <span class="string">&quot;j&quot;</span> + j;</span><br><span class="line">                                        <span class="keyword">try</span> &#123;</span><br><span class="line">                                            String resp = cluster.set(key, msg);</span><br><span class="line">                                            <span class="keyword">if</span> (!<span class="string">&quot;OK&quot;</span>.equals(resp)) &#123;</span><br><span class="line">                                                atomicFailNum.incrementAndGet();</span><br><span class="line">                                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                                atomicSuccessNums.incrementAndGet();</span><br><span class="line">                                            &#125;</span><br><span class="line">                                        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                                            atomicFailNum.incrementAndGet();</span><br><span class="line">                                        &#125;</span><br><span class="line">                                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                        cluster.get(keys.get(atomicSuccessNums.intValue()));</span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125;</span><br><span class="line">                                barrier.await();</span><br><span class="line">                            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                                <span class="keyword">try</span> &#123;</span><br><span class="line">                                    barrier.await();</span><br><span class="line">                                &#125; <span class="keyword">catch</span> (InterruptedException e1) &#123;</span><br><span class="line">                                    e1.printStackTrace();</span><br><span class="line">                                &#125; <span class="keyword">catch</span> (BrokenBarrierException e1) &#123;</span><br><span class="line">                                    e1.printStackTrace();</span><br><span class="line">                                &#125;</span><br><span class="line">                                e.printStackTrace();</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    object.wait();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (Long tps : tpsList) &#123;</span><br><span class="line">            sum += tps;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.printf(<span class="string">&quot;全部发送完成, 平均TPS : %d !!!&quot;</span>, sum / tpsList.size());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">buildMessage</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> messageSize)</span> </span>&#123;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; messageSize; i += <span class="number">8</span>) &#123;</span><br><span class="line">            sb.append(<span class="string">&quot;hello baby&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">getKeys</span><span class="params">(<span class="keyword">int</span> keySize, <span class="keyword">int</span> keys, <span class="keyword">int</span> times)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;正在生成Key&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;</span>);</span><br><span class="line">        List&lt;String&gt; keysList = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"><span class="comment">//        for (int i = 0; i &lt; keys * times; i++) &#123;</span></span><br><span class="line"><span class="comment">//            keysList.add(getUId(keySize, i));</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        System.out.println(<span class="string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;生成成功Key&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> keysList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">getUId</span><span class="params">(<span class="keyword">int</span> keySize, <span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">&quot;%0&quot;</span> + keySize + <span class="string">&quot;d&quot;</span>, i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">getUUId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> UUID.randomUUID().toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>用例执行命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -cp jedis-2.9.0.jar:commons-pool2-2.3.jar: RedisClusterDataCorrect 100 10000 10 10 1 0</span><br></pre></td></tr></table></figure>
<p>用例参数说明</p>
<ul>
<li>第一个参数是线程数量</li>
<li>第二个参数是每个线程执行操作次数</li>
<li>第三个参数是key的大小（字节）</li>
<li>第四个参数是val的大小（字节）</li>
<li>第五个参数是运行次数</li>
<li>第六个参数是操作类型，0标示set，1标示get</li>
</ul>
<h4 id="noeviction策略"><a href="#noeviction策略" class="headerlink" title="noeviction策略"></a>noeviction策略</h4><h5 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h5><p>每条数据1K，运行200M的数据，也就是测试204800条数据的读取和写入。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java  -cp  jedis-2.9.0.jar:commons-pool2-2.3.jar: RedisClusterStrategy  1024  204800</span><br></pre></td></tr></table></figure>
<h5 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h5><p>当集群的运行内存超过最大使用内存后，测试程序抛异常。noeviction策略不淘汰数据。<br><img src="http://wx4.sinaimg.cn/mw690/0065glrAgy1fchux395v3j30qb03tjro.jpg" alt="Alt text" title="测试"></p>
<p>查看redis的key数量<br><img src="http://wx4.sinaimg.cn/mw690/0065glrAgy1fchv60ew4kj30g105c74g.jpg" alt="Alt text" title="key数量"></p>
<h4 id="allkeys-lru策略"><a href="#allkeys-lru策略" class="headerlink" title="allkeys-lru策略"></a>allkeys-lru策略</h4><h5 id="测试用例-1"><a href="#测试用例-1" class="headerlink" title="测试用例"></a>测试用例</h5><p>每条数据1K，运行200M的数据，也就是测试204800条数据的读取和写入。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java  -cp  jedis-2.9.0.jar:commons-pool2-2.3.jar: RedisClusterStrategy  1024  204800</span><br></pre></td></tr></table></figure>
<h5 id="测试结果-1"><a href="#测试结果-1" class="headerlink" title="测试结果"></a>测试结果</h5><p>内存占用到达最大值后会置换之前的数据，所有测试数据能全部跑完</p>
<p>查看redis的key数量<br><img src="http://wx3.sinaimg.cn/mw690/0065glrAgy1fchv612pu4j30g90563yl.jpg" alt="Alt text" title="key数量"></p>
<h4 id="volatile-lru策略"><a href="#volatile-lru策略" class="headerlink" title="volatile-lru策略"></a>volatile-lru策略</h4><h5 id="测试用例-2"><a href="#测试用例-2" class="headerlink" title="测试用例"></a>测试用例</h5><p>每条数据1K，运行200M的数据，也就是测试204800条数据的读取和写入。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java  -cp  jedis-2.9.0.jar:commons-pool2-2.3.jar: RedisClusterStrategy  1024  204800</span><br></pre></td></tr></table></figure>
<h5 id="测试结果-2"><a href="#测试结果-2" class="headerlink" title="测试结果"></a>测试结果</h5><ul>
<li>内存占用到达最大值后，如果没有设置过期的数据仍在添加,程序会抛出异常。<br><img src="http://wx4.sinaimg.cn/mw690/0065glrAgy1fchux395v3j30qb03tjro.jpg" alt="Alt text" title="测试"></li>
<li>调整测试用例，前100条不设置过期时间，后面全部设置过期时间，程序能正常跑完。</li>
</ul>
<p>查看redis的key数量<br><img src="http://wx2.sinaimg.cn/mw690/0065glrAgy1fchv6122b5j30g605fwel.jpg" alt="Alt text" title="key数量"></p>
<h4 id="allkeys-random策略"><a href="#allkeys-random策略" class="headerlink" title="allkeys-random策略"></a>allkeys-random策略</h4><h5 id="测试用例-3"><a href="#测试用例-3" class="headerlink" title="测试用例"></a>测试用例</h5><p>每条数据1K，运行200M的数据，也就是测试204800条数据的读取和写入。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java  -cp  jedis-2.9.0.jar:commons-pool2-2.3.jar: RedisClusterStrategy  1024  204800</span><br></pre></td></tr></table></figure>
<h5 id="测试结果-3"><a href="#测试结果-3" class="headerlink" title="测试结果"></a>测试结果</h5><p>内存占用到达最大值后会置换之前的数据，所有测试数据能全部跑完</p>
<p>查看redis的key数量<br><img src="http://wx1.sinaimg.cn/mw690/0065glrAgy1fchv61welsj30gc05aglt.jpg" alt="Alt text" title="key数量"></p>
<h4 id="volatile-random策略"><a href="#volatile-random策略" class="headerlink" title="volatile-random策略"></a>volatile-random策略</h4><h5 id="测试用例-4"><a href="#测试用例-4" class="headerlink" title="测试用例"></a>测试用例</h5><p>每条数据1K，运行200M的数据，也就是测试204800条数据的读取和写入。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java  -cp  jedis-2.9.0.jar:commons-pool2-2.3.jar: RedisClusterStrategy  1024  204800</span><br></pre></td></tr></table></figure>
<h5 id="测试结果-4"><a href="#测试结果-4" class="headerlink" title="测试结果"></a>测试结果</h5><ul>
<li>内存占用到达最大值后，如果没有设置过期的数据仍在添加,程序会抛出异常。<br><img src="http://wx4.sinaimg.cn/mw690/0065glrAgy1fchux395v3j30qb03tjro.jpg" alt="Alt text" title="测试"></li>
<li>调整测试用例，前100条不设置过期时间，后面全部设置过期时间，程序能正常跑完。</li>
</ul>
<p>查看redis的key数量<br><img src="http://wx4.sinaimg.cn/mw690/0065glrAgy1fchv6229vtj30gp058t8w.jpg" alt="Alt text" title="key数量"></p>
<h4 id="volatile-ttl策略"><a href="#volatile-ttl策略" class="headerlink" title="volatile-ttl策略"></a>volatile-ttl策略</h4><h5 id="测试用例-5"><a href="#测试用例-5" class="headerlink" title="测试用例"></a>测试用例</h5><p>每条数据1K，运行200M的数据，也就是测试204800条数据的读取和写入。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java  -cp  jedis-2.9.0.jar:commons-pool2-2.3.jar: RedisClusterStrategy  1024  204800</span><br></pre></td></tr></table></figure>
<h5 id="测试结果-5"><a href="#测试结果-5" class="headerlink" title="测试结果"></a>测试结果</h5><p>调整测试用例过期时间设置从3600秒开始逐渐增加。内存占用到达最大值后会先移除最近过期的数据，所以程序能全部跑完。</p>
<p>查看redis的key数量<br><img src="http://wx4.sinaimg.cn/mw690/0065glrAgy1fchv62ug9xj30ga05bjrl.jpg" alt="Alt text" title="key数量"></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul>
<li>启用内存策略之前，需要设置maxmeory配置项，即节点的最大内存使用值。</li>
<li>考虑到持久化数据的缓存场景，选择自己的淘汰策略，一般情况建议设置为noeviction策略。</li>
<li>根据使用场景，适当调低rewrite-percentage百分比，降低内存此时的最小内存值，以防止在进行rewrite时，使用大量内存导致进程挂死问题。</li>
</ul>
]]></content>
      <categories>
        <category>redis</category>
      </categories>
      <tags>
        <tag>分布式</tag>
        <tag>redis</tag>
        <tag>cluster</tag>
        <tag>cache</tag>
        <tag>缓存</tag>
      </tags>
  </entry>
  <entry>
    <title>OpenStack 安装手册</title>
    <url>/openstack/openstack-install-20161018.html</url>
    <content><![CDATA[<p>Openstack作为业界著名的开源ISSA，我在这单机部署所有模块。</p>
<a id="more"></a>

<h3 id="安装要求"><a href="#安装要求" class="headerlink" title="安装要求"></a>安装要求</h3><ul>
<li>Centos7 mini</li>
<li>vmware workstation</li>
<li>内存 4G+</li>
</ul>
<h3 id="Centos7安装"><a href="#Centos7安装" class="headerlink" title="Centos7安装"></a>Centos7安装</h3><p>vmware安装Centos7 mini版本，安装步骤就不在赘述了。下载<a href="http://ftp.yz.yamagata-u.ac.jp/pub/linux/centos/7/isos/x86_64/CentOS-7-x86_64-Minimal-1511.iso">Centos7 mini</a></p>
<h3 id="Centos7环境准备"><a href="#Centos7环境准备" class="headerlink" title="Centos7环境准备"></a>Centos7环境准备</h3><ol>
<li><p><strong>更新Yum下载源</strong></p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup</span><br><span class="line">curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class="line">yum makecache</span><br></pre></td></tr></table></figure>
<p> 使用国内Yum源加快下载速度</p>
</li>
<li><p><strong>更新Centos</strong></p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum update</span><br></pre></td></tr></table></figure></li>
<li><p><strong>使用代理</strong></p>
<p> 编辑<code>vi ~/.bashrc</code></p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">setproxy</span></span>() &#123;</span><br><span class="line">    <span class="built_in">export</span> &#123;http,https,ftp&#125;_proxy=<span class="string">&quot;http://192.168.29.1:16808&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">unsetproxy</span></span>() &#123;</span><br><span class="line">    <span class="built_in">unset</span> &#123;http,https,ftp&#125;_proxy</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>为了加快下载国外源使用VPN（没有vpn可以不配置，192.168.206.1:16808是我的代理程序与端口）。在终端中输入<code>setproxy</code>使用代理</p>
</li>
<li><p><strong>安装网络工具</strong></p>
<p> 命令 <code>yum install net-tools</code></p>
</li>
<li><p><strong>关闭防火墙</strong></p>
<p> 命令 <code>systemctl disable firewalld.service</code></p>
</li>
<li><p><strong>关闭Selinux</strong></p>
<p> 修改<code>/etc/selinux/config</code>文件中设置<code>SELINUX=disabled</code>，然后重启服务器。</p>
</li>
<li><p><strong>重启系统</strong></p>
<p> 命令 <code>reboot</code></p>
</li>
<li><p><strong>拍摄快照</strong></p>
<p> 给安装好的Centos7系统拍摄快照，准备OpenStack的安装。拍摄快照方便后续安装出错可回退。选择<code>虚拟机</code> &gt; <code>快照</code> &gt; <code>拍摄快照</code> 如图：<br> <img src="http://ww4.sinaimg.cn/mw690/0065glrAgw1f9dj74nnzvj30bs07vgm9.jpg" alt="Alt text" title="OpenStack Snapshot"></p>
</li>
</ol>
<h3 id="OpenStack环境"><a href="#OpenStack环境" class="headerlink" title="OpenStack环境"></a>OpenStack环境</h3><p>Centos7环境准备完毕，接下来准备安装OpenStack环境。    </p>
<h4 id="网络环境配置"><a href="#网络环境配置" class="headerlink" title="网络环境配置"></a>网络环境配置</h4><p>安装openstack需要两张网卡</p>
<ul>
<li>管理内部网络(management interface)</li>
<li>提供internet网络(provider interface)</li>
</ul>
<p><img src="http://ww1.sinaimg.cn/mw690/0065glrAgw1f9dj7653r9j30j90fracp.jpg" alt="Alt text" title="OpenStack network"></p>
<p>如图需要vmware添加网卡。</p>
<ol>
<li><p>vmware配置添加网卡，选择<code>虚拟机</code> &gt; <code>设置</code> &gt; <code>添加</code> 如图：</p>
<p> <img src="http://ww3.sinaimg.cn/mw690/0065glrAgw1f9dj76nc9yj30kf0ig77d.jpg" alt="Alt text" title="OpenStack network 2"></p>
</li>
<li><p>查看网络</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ifconifg</span></span><br><span class="line">eno16777736: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.206.131  netmask 255.255.255.0  broadcast 192.168.206.255</span><br><span class="line">        inet6 fe80::20c:29ff:fe1f:3222  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 00:0c:29:1f:32:22  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 566  bytes 54421 (53.1 KiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 372  bytes 42227 (41.2 KiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line">eno33554984: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet6 fe80::20c:29ff:fe1f:322c  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 00:0c:29:1f:32:2c  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 10  bytes 1308 (1.2 KiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line">lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</span><br><span class="line">        inet 127.0.0.1  netmask 255.0.0.0</span><br><span class="line">        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;</span><br><span class="line">        loop  txqueuelen 0  (Local Loopback)</span><br><span class="line">        RX packets 4  bytes 340 (340.0 B)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 4  bytes 340 (340.0 B)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br></pre></td></tr></table></figure>
<p>eno33554984是新添加网络设备。其中eno16777736是外网网卡，eno33554984是内网管理网卡。</p>
</li>
<li><p>网卡配置eno33554984</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cp /etc/sysconfig/network-scripts/ifcfg-eno16777736 /etc/sysconfig/network-scripts/ifcfg-eno33554984</span></span><br><span class="line"><span class="comment"># vi /etc/sysconfig/network-scripts/ifcfg-eno33554984</span></span><br><span class="line">...</span><br><span class="line">NAME=eno33554984</span><br><span class="line">DEVICE=eno33554984</span><br></pre></td></tr></table></figure></li>
<li><p>配置内部网络</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vi /etc/sysconfig/network-scripts/ifcfg-eno33554984</span></span><br><span class="line">...</span><br><span class="line">IPADDR=192.168.70.2</span><br><span class="line">NETMASK=255.255.255.0</span><br><span class="line">NM_CONTROLLED=no</span><br><span class="line">ONBOOT=yes</span><br></pre></td></tr></table></figure>
<p>注:192.168.70.2在vmware only-host网段相同，确保与主主机在192.168.70.0/24网段连通性。 </p>
</li>
<li><p>配置外部网络</p>
<p> 编辑<code>/etc/sysconfig/network-scripts/ifcfg-eno16777736</code>, <code>HWADDR</code> <code>UUID</code>值不修改</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">DEVICE=eno16777736</span><br><span class="line">TYPE=Ethernet</span><br><span class="line">ONBOOT=<span class="string">&quot;yes&quot;</span></span><br><span class="line">BOOTPROTO=<span class="string">&quot;dhcp&quot;</span></span><br></pre></td></tr></table></figure></li>
<li><p>配置主机名</p>
<p> 编辑<code>/etc/hostname</code>修改主机名为<code>controller</code>, 编辑<code>/etc/hosts</code>(单机部署) 如下:</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># controller</span></span><br><span class="line">192.168.70.2      controller</span><br><span class="line"><span class="comment"># compute1</span></span><br><span class="line">192.168.70.2      compute1</span><br><span class="line"><span class="comment"># block1</span></span><br><span class="line">192.168.70.2      block1</span><br><span class="line"><span class="comment"># object1</span></span><br><span class="line">192.168.70.2      object1</span><br><span class="line"><span class="comment"># object2</span></span><br><span class="line">192.168.70.2      object2</span><br></pre></td></tr></table></figure></li>
</ol>
<p><strong><code>注意:</code></strong> 某些发行版在/etc/hosts文件中添加了一个无关的条目，将实际的主机名解析为另一个环回IP地址（例如127.0.1.1）。 您必须注释掉或删除此条目以防止名称解析问题。 不要删除127.0.0.1条目</p>
<ol start="7">
<li><p>设置DNS服务器 <code>vi /etc/resolv.conf</code> 添加 <code>nameserver 114.114.114.114</code></p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Generated by NetworkManager</span></span><br><span class="line">search localdomain</span><br><span class="line">nameserver 192.168.29.2</span><br><span class="line">nameserver 114.114.114.114</span><br></pre></td></tr></table></figure></li>
<li><p>重启激活配置 <code>reboot</code></p>
</li>
<li><p>验证网络连通性</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ping -c 4 www.baidu.com </span></span><br><span class="line">PING www.a.shifen.com (180.97.33.107) 56(84) bytes of data.</span><br><span class="line">64 bytes from 180.97.33.107: icmp_seq=1 ttl=128 time=39.5 ms</span><br><span class="line">64 bytes from 180.97.33.107: icmp_seq=2 ttl=128 time=37.8 ms</span><br><span class="line">64 bytes from 180.97.33.107: icmp_seq=3 ttl=128 time=39.5 ms</span><br><span class="line">64 bytes from 180.97.33.107: icmp_seq=4 ttl=128 time=39.6 ms</span><br><span class="line">--- www.a.shifen.com ping statistics ---</span><br><span class="line">4 packets transmitted, 4 received, 0% packet loss, time 3006ms</span><br><span class="line">rtt min/avg/max/mdev = 37.885/39.154/39.666/0.734 ms</span><br></pre></td></tr></table></figure>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ping -c 4 controller</span></span><br><span class="line">PING controller (192.168.70.2) 56(84) bytes of data</span><br><span class="line">64 bytes from controller (192.168.70.2): icmp_seq=1 ttl=64 time=0.037 ms</span><br><span class="line">64 bytes from controller (192.168.70.2): icmp_seq=2 ttl=64 time=0.045 ms</span><br><span class="line">64 bytes from controller (192.168.70.2): icmp_seq=3 ttl=64 time=0.026 ms</span><br><span class="line">64 bytes from controller (192.168.70.2): icmp_seq=4 ttl=64 time=0.037 ms</span><br><span class="line">--- controller ping statistics ---</span><br><span class="line">4 packets transmitted, 4 received, 0% packet loss, time 2999ms</span><br><span class="line">rtt min/avg/max/mdev = 0.026/0.036/0.045/0.008 ms</span><br></pre></td></tr></table></figure>
<h4 id="安装Network-Time-Protocol-NTP"><a href="#安装Network-Time-Protocol-NTP" class="headerlink" title="安装Network Time Protocol (NTP)"></a>安装Network Time Protocol (NTP)</h4></li>
<li><p>安装包</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># yum install chrony</span></span><br></pre></td></tr></table></figure></li>
<li><p>编辑 <code>/etc/chrony.conf</code> 添加修改删除ntp服务器:</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server NTP_SERVER iburst</span><br></pre></td></tr></table></figure>
<p>NTP_SERVER替换为ntp服务器域名或ip，如果没有自己的NTP服务器使用默认。这里vmware安装不用配置ntp。如果添加其他节点则需要</p>
</li>
<li><p>编辑 <code>/etc/chrony.conf</code> 添加ntp客户端网段（单一节点可以不使用）:</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">allow 192.168.70/24</span><br></pre></td></tr></table></figure></li>
<li><p>开机启动与启动ntp</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># systemctl enable chronyd.service</span></span><br><span class="line"><span class="comment"># systemctl start chronyd.service</span></span><br></pre></td></tr></table></figure></li>
<li><p>验证安装的ntp</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># chronyc sources</span></span><br><span class="line">210 Number of sources = 3</span><br><span class="line">MS Name/IP address         Stratum Poll Reach LastRx Last sample</span><br><span class="line">===============================================================================</span><br><span class="line">^* news.neu.edu.cn               2   6   377    49   +804us[ +545us] +/-   38ms</span><br><span class="line">^+ time6.aliyun.com              2   6   337    49   -676us[ -676us] +/-   38ms</span><br><span class="line">^+ 202.118.1.130                 2   6   377    50  -5469us[-5727us] +/-   44ms</span><br></pre></td></tr></table></figure>
<h4 id="OpenStack安装源"><a href="#OpenStack安装源" class="headerlink" title="OpenStack安装源"></a>OpenStack安装源</h4></li>
<li><p>CentOS系统中需要额外提供rpm的openstack安装源</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># yum install centos-release-openstack-newton</span></span><br></pre></td></tr></table></figure></li>
<li><p>CentOS系统中需要额外提供rdo的openstack安装源</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># yum install https://rdoproject.org/repos/rdo-release.rpm</span></span><br></pre></td></tr></table></figure>
<p>如果yum下载不了，请手动下载后放置 <code>/etc/yum.repos.d/</code></p>
</li>
<li><p>更新系统</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># yum upgrade</span></span><br></pre></td></tr></table></figure></li>
<li><p>安装OpenStack Client </p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># yum install python-openstackclient</span></span><br></pre></td></tr></table></figure></li>
<li><p>安装OpenStack Selinux</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># yum install openstack-selinux</span></span><br></pre></td></tr></table></figure>
<h4 id="安装Mysql"><a href="#安装Mysql" class="headerlink" title="安装Mysql"></a>安装Mysql</h4></li>
<li><p>安装mysql</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># yum install mariadb mariadb-server python2-PyMySQL</span></span><br></pre></td></tr></table></figure></li>
<li><p>创建和编辑 <code>/etc/my.cnf.d/openstack.cnf</code></p>
<p> 创建 <code>[mysqld]</code> 设置 <code>bind-address</code> 为 控制节点(controller node)management IP地址</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">bind-address = 192.168.70.2</span><br><span class="line">default-storage-engine = innodb</span><br><span class="line">innodb_file_per_table</span><br><span class="line">max_connections = 4096</span><br><span class="line">collation-server = utf8_general_ci</span><br><span class="line">character-set-server = utf8</span><br></pre></td></tr></table></figure></li>
<li><p>开机启动和启动mysql</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># systemctl enable mariadb.service</span></span><br><span class="line"><span class="comment"># systemctl start mariadb.service</span></span><br></pre></td></tr></table></figure></li>
<li><p>设置mysql安全脚本</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mysql_secure_installation</span></span><br></pre></td></tr></table></figure>
<p>设置root密码为123456，为了方便后续所有密度都设置为123456。</p>
</li>
</ol>
<h4 id="安装消息队列"><a href="#安装消息队列" class="headerlink" title="安装消息队列"></a>安装消息队列</h4><ol>
<li><p>安装rabbitmq</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># yum install rabbitmq-server</span></span><br></pre></td></tr></table></figure></li>
<li><p>开机启动和启动rabbitmq</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># systemctl enable rabbitmq-server.service</span></span><br><span class="line"><span class="comment"># systemctl start rabbitmq-server.service</span></span><br></pre></td></tr></table></figure></li>
<li><p>添加 <code>openstack</code> 用户</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># rabbitmqctl add_user openstack 123456</span></span><br><span class="line">Creating user <span class="string">&quot;openstack&quot;</span> ...</span><br></pre></td></tr></table></figure>
<p><code>123456</code>是rabbitmq密码(RABBIT_PASS)。</p>
</li>
<li><p>配置rabbitmq权限</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># rabbitmqctl set_permissions openstack &quot;.*&quot; &quot;.*&quot; &quot;.*&quot;</span></span><br><span class="line">Setting permissions <span class="keyword">for</span> user <span class="string">&quot;openstack&quot;</span> <span class="keyword">in</span> vhost <span class="string">&quot;/&quot;</span> ...</span><br></pre></td></tr></table></figure>
<h4 id="安装memcache"><a href="#安装memcache" class="headerlink" title="安装memcache"></a>安装memcache</h4></li>
<li><p>安装memcache包</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># yum install memcached python-memcached</span></span><br></pre></td></tr></table></figure></li>
<li><p>开机启动和启动memcache</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># systemctl enable memcached.service</span></span><br><span class="line"><span class="comment"># systemctl start memcached.service</span></span><br></pre></td></tr></table></figure>
<p>到此openstack安装环境准备就绪，接下来就是安装OpenStack组件了。</p>
</li>
</ol>
<h3 id="身份认证组件-keystone"><a href="#身份认证组件-keystone" class="headerlink" title="身份认证组件 - keystone"></a>身份认证组件 - keystone</h3><p>Keystone套件作為OpenStack中的身份驗證服務(Identity Service)，Keystone執行了以下兩個功能：</p>
<ul>
<li>認證與授權。</li>
<li>提供可用服務的 API 服務端點目錄資訊。<br>當安裝OpenStack Identity Service套件後，必須將OpenStack的每個服務註冊到Keystone。這樣身份驗證服務才可以認證已經安裝的OpenStack服務套件，並且得知服務在網絡上的位置。Identity Service 提供了 Role-based 的管理概念，並提供傳統的 UserName/Password 及 Token 的認證方式</li>
</ul>
<p>想要了解OpenStack的身份驗證套件以前，須先理解以下概念：</p>
<p><strong>User</strong></p>
<p>使用OpenStack雲端服務的人、系統、服務，在Keystone會以一個數字表示。身份驗證服務會驗證那些產生呼叫的使用者傳來的請求，使用者登入後會被賦予token來存取資源，使用者可以直接被分配到特定的 Tenant 與Behave，如果這些是被包含在Tenant中的。<br>Credentials</p>
<p>使用者身份的確認資料，諸如：使用者名稱、密碼、API金鑰，或者是一個有身份的服務提供授權token。</p>
<p><strong>Authentication</strong></p>
<p>確認使用者身份的流程，OpenStack身份驗證服務會確認傳送過來的請求，即驗證由使用者提供的憑證。<br>這些憑證通常是使用者名稱、密碼、API金鑰等。當使用者憑證被驗證過後，OpenStack身份驗證服務會給該使用者一個token，透過該token即可請求OpenStack其他服務。</p>
<p><strong>Token</strong></p>
<p>一個以字母與數字混合的字串，用來讓使用者存取OpenStack的API與資源，token可以隨時清除，且本身就有一定時間限制。<br>在近幾版本中，OpenStack身份驗證服務支援了基於token的驗證，這也表示未來會支持更多協定，主要目的是集成服務，且不希望成為一個完整的身份驗證儲存與管理解決方案。</p>
<p><strong>Tenant</strong></p>
<p>用來分組或隔離資訊的容器，tenant會分組或者隔離身份對象。根據不同的服務操作者，tenant可以映射到一個客戶(customer)、帳號(account)、組織(organization)或者專案(Project)。</p>
<p><strong>Service</strong></p>
<p>一個OpenStack的服務，如運算（nova），物件儲存（swift），或映像檔服務（glance）。它提供了一個或多個Endpoint，使用者可以訪問的資源和執行操作。</p>
<p><strong>Endpoint</strong></p>
<p>當一個使用者存取服務時，所有可存取的網路網址，通常是一個URL網址。如果使用者是為板模的擴展而使用，一個Endpoint是可以被建立的，用來表示板模是所有可用的跨Region的可消費服務。</p>
<p><strong>Role</strong></p>
<p>一個定義使用者權限和特權，可賦予其執行某些特定的操作。管理者可以根據不同的 role 給定不同的權限，再將 role 指定給 user，每個 user 可以同時被指定為多個 role 藉以授予系統存取權限<br>在身份驗證服務中，一個token會帶有使用者訊息，其包含了角色列表。服務在被呼叫時，會看使用者是什麼角色，而這個角色賦予的權限能夠操作哪些資源。</p>
<p><strong>Keystone Client</strong></p>
<p>OpenStack 身份驗證服務API提供了一套指令介面。例如，使用者可以執行keystone service-create與keystone endpoint-create指令，在OpenStack中註冊服務。<br>下面示意圖展示了OpenStack身份驗證的流程： </p>
<p><img src="http://ww2.sinaimg.cn/mw690/0065glrAgw1f9dj77gjy2j30t90kp41v.jpg" alt="Alt text" title="OpenStack keystone"></p>
<p>了解概念后，我们开始安装keystone。</p>
<h4 id="创建数据库及数据结构"><a href="#创建数据库及数据结构" class="headerlink" title="创建数据库及数据结构"></a>创建数据库及数据结构</h4><ol>
<li><p>登录数据库</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mysql -u root -p123456</span></span><br></pre></td></tr></table></figure></li>
<li><p>创建keystone数据库</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; CREATE DATABASE keystone;</span><br></pre></td></tr></table></figure></li>
<li><p>数据库权限</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; GRANT ALL PRIVILEGES ON keystone.* TO <span class="string">&#x27;keystone&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> \</span><br><span class="line">  IDENTIFIED BY <span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line">mysql&gt; GRANT ALL PRIVILEGES ON keystone.* TO <span class="string">&#x27;keystone&#x27;</span>@<span class="string">&#x27;%&#x27;</span> \</span><br><span class="line">  IDENTIFIED BY <span class="string">&#x27;123456&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p> <code>123456</code>是密码(KEYSTONE_DBPASS)。</p>
</li>
</ol>
<h4 id="安装配置keystone"><a href="#安装配置keystone" class="headerlink" title="安装配置keystone"></a>安装配置keystone</h4><ol>
<li><p>安装包</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># yum install openstack-keystone httpd mod_wsgi</span></span><br></pre></td></tr></table></figure></li>
<li><p>编辑 <code>/etc/keystone/keystone.conf</code> 如下:</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[database]</span><br><span class="line">...</span><br><span class="line">connection = mysql+pymysql://keystone:123456@controller/keystone</span><br><span class="line"></span><br><span class="line">[token]</span><br><span class="line">...</span><br><span class="line">provider = fernet</span><br></pre></td></tr></table></figure>
<p> <code>123456</code>是密码(KEYSTONE_DBPASS)。</p>
</li>
<li><p>填充数据</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">su -s /bin/sh -c <span class="string">&quot;keystone-manage db_sync&quot;</span> keystone</span><br></pre></td></tr></table></figure></li>
<li><p>初始化Fernet</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># keystone-manage fernet_setup --keystone-user keystone --keystone-group keystone</span></span><br><span class="line"><span class="comment"># keystone-manage credential_setup --keystone-user keystone --keystone-group keystone</span></span><br></pre></td></tr></table></figure></li>
<li><p>启动身份服务</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">keystone-manage bootstrap --bootstrap-password 123456 \</span><br><span class="line">  --bootstrap-admin-url http://controller:35357/v3/ \</span><br><span class="line">  --bootstrap-internal-url http://controller:35357/v3/ \</span><br><span class="line">  --bootstrap-public-url http://controller:5000/v3/ \</span><br><span class="line">  --bootstrap-region-id RegionOne</span><br></pre></td></tr></table></figure>
<p> <code>123456</code>是密码(ADMIN_PASS)。</p>
</li>
</ol>
<h4 id="配置Apache-HTTP"><a href="#配置Apache-HTTP" class="headerlink" title="配置Apache HTTP"></a>配置Apache HTTP</h4><ol>
<li><p>编辑 <code>/etc/httpd/conf/httpd.conf</code> 配置ServerName项:</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ServerName controller</span><br></pre></td></tr></table></figure></li>
<li><p>创建链接文件 <code>/usr/share/keystone/wsgi-keystone.conf</code>:</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ln -s /usr/share/keystone/wsgi-keystone.conf /etc/httpd/conf.d/</span><br></pre></td></tr></table></figure>
<h4 id="keystone命令"><a href="#keystone命令" class="headerlink" title="keystone命令"></a>keystone命令</h4></li>
<li><p>开机启动及启动Apache HTTP服务 </p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># systemctl enable httpd.service</span></span><br><span class="line"><span class="comment"># systemctl start httpd.service</span></span><br></pre></td></tr></table></figure></li>
<li><p>查看占用端口 </p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># netstat -ntlp</span></span><br><span class="line">Active Internet connections (only servers)</span><br><span class="line">Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    </span><br><span class="line">tcp        0      0 192.168.70.2:3306       0.0.0.0:*               LISTEN      2700/mysqld         </span><br><span class="line">tcp        0      0 0.0.0.0:11211           0.0.0.0:*               LISTEN      3957/memcached      </span><br><span class="line">tcp        0      0 0.0.0.0:4369            0.0.0.0:*               LISTEN      1/systemd           </span><br><span class="line">tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      1097/sshd           </span><br><span class="line">tcp        0      0 127.0.0.1:25            0.0.0.0:*               LISTEN      1423/master         </span><br><span class="line">tcp        0      0 0.0.0.0:25672           0.0.0.0:*               LISTEN      2917/beam           </span><br><span class="line">tcp6       0      0 :::11211                :::*                    LISTEN      3957/memcached      </span><br><span class="line">tcp6       0      0 :::80                   :::*                    LISTEN      26461/httpd         </span><br><span class="line">tcp6       0      0 :::22                   :::*                    LISTEN      1097/sshd           </span><br><span class="line">tcp6       0      0 ::1:25                  :::*                    LISTEN      1423/master         </span><br><span class="line">tcp6       0      0 :::35357                :::*                    LISTEN      26461/httpd         </span><br><span class="line">tcp6       0      0 :::5000                 :::*                    LISTEN      26461/httpd         </span><br><span class="line">tcp6       0      0 :::5672                 :::*                    LISTEN      2917/beam</span><br></pre></td></tr></table></figure>
<p> <code>35357</code> <code>5000</code> 端口</p>
</li>
<li><p>配置administrative账号环境变量 </p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># export OS_USERNAME=admin</span></span><br><span class="line"><span class="comment"># export OS_PASSWORD=123456</span></span><br><span class="line"><span class="comment"># export OS_PROJECT_NAME=admin</span></span><br><span class="line"><span class="comment"># export OS_USER_DOMAIN_NAME=default</span></span><br><span class="line"><span class="comment"># export OS_PROJECT_DOMAIN_NAME=default</span></span><br><span class="line"><span class="comment"># export OS_AUTH_URL=http://controller:35357/v3</span></span><br><span class="line"><span class="comment"># export OS_IDENTITY_API_VERSION=3</span></span><br></pre></td></tr></table></figure>
<p> <code>123456</code>是密码(ADMIN_PASS)。</p>
</li>
</ol>
<h4 id="keystone用户"><a href="#keystone用户" class="headerlink" title="keystone用户"></a>keystone用户</h4><ol>
<li><p>创建service项目:</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># openstack project create --domain default \</span></span><br><span class="line">  --description <span class="string">&quot;Service Project&quot;</span> service</span><br><span class="line">+-------------+----------------------------------+</span><br><span class="line">| Field       | Value                            |</span><br><span class="line">+-------------+----------------------------------+</span><br><span class="line">| description | Service Project                  |</span><br><span class="line">| domain_id   | default                          |</span><br><span class="line">| enabled     | True                             |</span><br><span class="line">| id          | b6e39648297f496d8bd351f91c5dbc01 |</span><br><span class="line">| is_domain   | False                            |</span><br><span class="line">| name        | service                          |</span><br><span class="line">| parent_id   | default                          |</span><br><span class="line">+-------------+----------------------------------+</span><br></pre></td></tr></table></figure></li>
<li><p>创建demo项目:</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"> openstack project create --domain default \</span><br><span class="line">  --description <span class="string">&quot;Demo Project&quot;</span> demo</span><br><span class="line">+-------------+----------------------------------+</span><br><span class="line">| Field       | Value                            |</span><br><span class="line">+-------------+----------------------------------+</span><br><span class="line">| description | Demo Project                     |</span><br><span class="line">| domain_id   | default                          |</span><br><span class="line">| enabled     | True                             |</span><br><span class="line">| id          | acada8b2e88943aaa094dc0617ffd266 |</span><br><span class="line">| is_domain   | False                            |</span><br><span class="line">| name        | demo                             |</span><br><span class="line">| parent_id   | default                          |</span><br><span class="line">+-------------+----------------------------------+</span><br></pre></td></tr></table></figure></li>
<li><p>创建demo用户:</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># openstack user create --domain default \</span></span><br><span class="line">  --password-prompt demo</span><br><span class="line">User Password:</span><br><span class="line">Repeat User Password:</span><br><span class="line">+---------------------+----------------------------------+</span><br><span class="line">| Field               | Value                            |</span><br><span class="line">+---------------------+----------------------------------+</span><br><span class="line">| domain_id           | default                          |</span><br><span class="line">| enabled             | True                             |</span><br><span class="line">| id                  | 53c9811a2a7940a1a2d89d641c1f7b2a |</span><br><span class="line">| name                | demo                             |</span><br><span class="line">| password_expires_at | None                             |</span><br><span class="line">+---------------------+----------------------------------+</span><br></pre></td></tr></table></figure></li>
<li><p>创建用户角色:</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># openstack role create user</span></span><br><span class="line">+-----------+----------------------------------+</span><br><span class="line">| Field     | Value                            |</span><br><span class="line">+-----------+----------------------------------+</span><br><span class="line">| domain_id | None                             |</span><br><span class="line">| id        | 5e2f64124ff54868b63fdf042671dbfa |</span><br><span class="line">| name      | user                             |</span><br><span class="line">+-----------+----------------------------------+</span><br></pre></td></tr></table></figure></li>
<li><p>添加用户角色到demo项目和demo用户:</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># openstack role add --project demo --user demo user</span></span><br></pre></td></tr></table></figure>
<h4 id="验证keystone"><a href="#验证keystone" class="headerlink" title="验证keystone"></a>验证keystone</h4></li>
<li><p>安全性考虑，禁止临时认证token:</p>
<p> 编辑 <code>/etc/keystone/keystone-paste.ini</code> 文件从 <code>[pipeline:public_api]</code> <code>[pipeline:admin_api]</code> <code>[pipeline:api_v3]</code> 中删除 <code>admin_token_auth</code> 选项 </p>
</li>
<li><p>Unset OS_URL 环境变量:</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># unset OS_URL</span></span><br></pre></td></tr></table></figure></li>
<li><p>请求一个admin用户认证token:</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># openstack --os-auth-url http://controller:35357/v3 \</span></span><br><span class="line">  --os-project-domain-name default --os-user-domain-name default \</span><br><span class="line">  --os-project-name admin --os-username admin token issue</span><br><span class="line">Password:</span><br><span class="line">+------------+-----------------------------------------------------------------+</span><br><span class="line">| Field      | Value                                                           |</span><br><span class="line">+------------+-----------------------------------------------------------------+</span><br><span class="line">| expires    | 2016-02-12T20:14:07.056119Z                                     |</span><br><span class="line">| id         | gAAAAABWvi7_B8kKQD9wdXac8MoZiQldmjEO643d-e_j-XXq9AmIegIbA7UHGPv |</span><br><span class="line">|            | atnN21qtOMjCFWX7BReJEQnVOAj3nclRQgAYRsfSU_MrsuWb4EDtnjU7HEpoBb4 |</span><br><span class="line">|            | o6ozsA_NmFWEpLeKy0uNn_WeKbAhYygrsmQGA49dclHVnz-OMVLiyM9ws       |</span><br><span class="line">| project_id | 343d245e850143a096806dfaefa9afdc                                |</span><br><span class="line">| user_id    | ac3377633149401296f6c0d92d79dc16                                |</span><br><span class="line">+------------+-----------------------------------------------------------------+</span><br></pre></td></tr></table></figure></li>
<li><p>请求一个demo用户认证token:</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># openstack --os-auth-url http://controller:5000/v3 \</span></span><br><span class="line">  --os-project-domain-name default --os-user-domain-name default \</span><br><span class="line">  --os-project-name demo --os-username demo token issue</span><br><span class="line">Password:</span><br><span class="line">+------------+-----------------------------------------------------------------+</span><br><span class="line">| Field      | Value                                                           |</span><br><span class="line">+------------+-----------------------------------------------------------------+</span><br><span class="line">| expires    | 2016-02-12T20:15:39.014479Z                                     |</span><br><span class="line">| id         | gAAAAABWvi9bsh7vkiby5BpCCnc-JkbGhm9wH3fabS_cY7uabOubesi-Me6IGWW |</span><br><span class="line">|            | yQqNegDDZ5jw7grI26vvgy1J5nCVwZ_zFRqPiz_qhbq29mgbQLglbkq6FQvzBRQ |</span><br><span class="line">|            | JcOzq3uwhzNxszJWmzGC7rJE_H0A_a3UFhqv8M4zMRYSbS2YF0MyFmp_U       |</span><br><span class="line">| project_id | ed0b60bf607743088218b0a533d5943f                                |</span><br><span class="line">| user_id    | 58126687cbcc4888bfa9ab73a2256f27                                |</span><br><span class="line">+------------+-----------------------------------------------------------------+</span><br></pre></td></tr></table></figure>
<h4 id="创建OpenStack-client环境脚本"><a href="#创建OpenStack-client环境脚本" class="headerlink" title="创建OpenStack client环境脚本"></a>创建OpenStack client环境脚本</h4></li>
<li><p>编辑 <code>admin-openrc</code> 文件内容如下:</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> OS_PROJECT_DOMAIN_NAME=default</span><br><span class="line"><span class="built_in">export</span> OS_USER_DOMAIN_NAME=default</span><br><span class="line"><span class="built_in">export</span> OS_PROJECT_NAME=admin</span><br><span class="line"><span class="built_in">export</span> OS_USERNAME=admin</span><br><span class="line"><span class="built_in">export</span> OS_PASSWORD=123456</span><br><span class="line"><span class="built_in">export</span> OS_AUTH_URL=http://controller:35357/v3</span><br><span class="line"><span class="built_in">export</span> OS_IDENTITY_API_VERSION=3</span><br><span class="line"><span class="built_in">export</span> OS_IMAGE_API_VERSION=2</span><br></pre></td></tr></table></figure>
<p> <code>123456</code>是密码(ADMIN_PASS)。</p>
</li>
<li><p>编辑 <code>demo-openrc</code> 文件内容如下:</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> OS_PROJECT_DOMAIN_NAME=default</span><br><span class="line"><span class="built_in">export</span> OS_USER_DOMAIN_NAME=default</span><br><span class="line"><span class="built_in">export</span> OS_PROJECT_NAME=demo</span><br><span class="line"><span class="built_in">export</span> OS_USERNAME=demo</span><br><span class="line"><span class="built_in">export</span> OS_PASSWORD=123456</span><br><span class="line"><span class="built_in">export</span> OS_AUTH_URL=http://controller:5000/v3</span><br><span class="line"><span class="built_in">export</span> OS_IDENTITY_API_VERSION=3</span><br><span class="line"><span class="built_in">export</span> OS_IMAGE_API_VERSION=2</span><br></pre></td></tr></table></figure>
<p> <code>123456</code>是密码(DEMO_PASS)。</p>
</li>
<li><p>脚本使用，使用<code>admin</code>用户环境:</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># . admin-openrc</span></span><br></pre></td></tr></table></figure></li>
<li><p>请求认证token:</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># openstack token issue</span></span><br><span class="line">+------------+-----------------------------------------------------------------+</span><br><span class="line">| Field      | Value                                                           |</span><br><span class="line">+------------+-----------------------------------------------------------------+</span><br><span class="line">| expires    | 2016-02-12T20:44:35.659723Z                                     |</span><br><span class="line">| id         | gAAAAABWvjYj-Zjfg8WXFaQnUd1DMYTBVrKw4h3fIagi5NoEmh21U72SrRv2trl |</span><br><span class="line">|            | JWFYhLi2_uPR31Igf6A8mH2Rw9kv_bxNo1jbLNPLGzW_u5FC7InFqx0yYtTwa1e |</span><br><span class="line">|            | eq2b0f6-18KZyQhs7F3teAta143kJEWuNEYET-y7u29y0be1_64KYkM7E       |</span><br><span class="line">| project_id | 343d245e850143a096806dfaefa9afdc                                |</span><br><span class="line">| user_id    | ac3377633149401296f6c0d92d79dc16                                |</span><br><span class="line">+------------+-----------------------------------------------------------------+</span><br></pre></td></tr></table></figure>
<h3 id="Glance-镜像组件"><a href="#Glance-镜像组件" class="headerlink" title="Glance 镜像组件"></a>Glance 镜像组件</h3></li>
</ol>
<p>Glance作為OpenStack的Image service，提供使用者可以去尋找、註冊、取得虛擬機的Image。並提供了一個REST API，使你能夠查詢虛擬機Image的metadata與取得實際的Image。你可以透過Image service儲存在不同的地點所提供虛擬機Image，從簡單的檔案系統到像是物件儲存系統的OpenStack Object Storage（Swift）。除了可以讓使用者新增 image 之外，也可以從正在運作的 server 上取得 snapshop 來作為 image 的備份或者是其他虛擬磁碟的 image。<br>OpenStack的映像檔服務(Image service)包含了以下幾個元件：</p>
<ul>
<li>glance-api：接受來至其他服務的API呼叫，諸如Image尋找、取得、儲存。</li>
<li>glance-registry：儲存、處理以及取得Image的metadata，metadata（包含諸如檔案大小、類型等資訊）。</li>
<li>Database：存放Images的metadata資訊，使用者可以根據個人喜好選擇資料庫，大多數選擇MySQL或SQLite。</li>
<li>Image的Storage Repository：支援多種類型的Repository，可以從一般檔案系統、Object Storage（Swift）、RADOS Block device、HTTP、Amazon S3等。但要注意，其中一些Repository只支援讀取。</li>
</ul>
<p><img src="http://ww1.sinaimg.cn/mw690/0065glrAgw1f9dj78a447j30ue0okgok.jpg" alt="Alt text" title="OpenStack Glance"></p>
<p>從Openstack架構圖，可以看到Glance的定位：</p>
<ul>
<li>可以將 image 存於 Swift 中。</li>
<li>提供 image 給 Nova 作為執行 VM 之用。</li>
<li>使用者可以透過 Horizon 呼叫 Glance API 來管理 image。</li>
<li>在使用 Glance API 之前，都需要通過 Keystone 的認證。</li>
</ul>
<p><img src="http://ww3.sinaimg.cn/mw690/0065glrAgw1f9dj78ua8fj30eh0eh76l.jpg" alt="Alt text" title="OpenStack Glance"></p>
<h4 id="创建数据库及数据结构-1"><a href="#创建数据库及数据结构-1" class="headerlink" title="创建数据库及数据结构"></a>创建数据库及数据结构</h4><ol>
<li><p>登录数据库</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mysql -u root -p123456</span></span><br></pre></td></tr></table></figure></li>
<li><p>创建keystone数据库</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; CREATE DATABASE glance;</span><br></pre></td></tr></table></figure></li>
<li><p>数据库权限</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; GRANT ALL PRIVILEGES ON glance.* TO <span class="string">&#x27;glance&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> \</span><br><span class="line">  IDENTIFIED BY <span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line">mysql&gt; GRANT ALL PRIVILEGES ON glance.* TO <span class="string">&#x27;glance&#x27;</span>@<span class="string">&#x27;%&#x27;</span> \</span><br><span class="line">  IDENTIFIED BY <span class="string">&#x27;123456&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p> <code>123456</code>是密码(GLANCE_DBPASS)。</p>
</li>
<li><p>获取 <code>admin</code> 命令行证书权限 </p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># . admin-openrc</span></span><br></pre></td></tr></table></figure></li>
<li><p>创建glance用户</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># openstack user create --domain default --password-prompt glance</span></span><br><span class="line">User Password:</span><br><span class="line">Repeat User Password:</span><br><span class="line">+---------------------+----------------------------------+</span><br><span class="line">| Field               | Value                            |</span><br><span class="line">+---------------------+----------------------------------+</span><br><span class="line">| domain_id           | default                          |</span><br><span class="line">| enabled             | True                             |</span><br><span class="line">| id                  | bf72dd3d5806479ab175be3b630bda0d |</span><br><span class="line">| name                | glance                           |</span><br><span class="line">| password_expires_at | None                             |</span><br><span class="line">+---------------------+----------------------------------+</span><br></pre></td></tr></table></figure></li>
<li><p>用户glance添加角色</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># openstack role add --project service --user glance admin</span></span><br></pre></td></tr></table></figure></li>
<li><p>添加glance服务</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># openstack service create --name glance \</span></span><br><span class="line">  --description <span class="string">&quot;OpenStack Image&quot;</span> image</span><br><span class="line">+-------------+----------------------------------+</span><br><span class="line">| Field       | Value                            |</span><br><span class="line">+-------------+----------------------------------+</span><br><span class="line">| description | OpenStack Image                  |</span><br><span class="line">| enabled     | True                             |</span><br><span class="line">| id          | 385dcc7f756a4dd8801063dcc4f75a35 |</span><br><span class="line">| name        | glance                           |</span><br><span class="line">| <span class="built_in">type</span>        | image                            |</span><br><span class="line">+-------------+----------------------------------+</span><br></pre></td></tr></table></figure></li>
<li><p>创建镜像服务API点:</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># openstack endpoint create --region RegionOne \</span></span><br><span class="line">  image public http://controller:9292</span><br><span class="line">+--------------+----------------------------------+</span><br><span class="line">| Field        | Value                            |</span><br><span class="line">+--------------+----------------------------------+</span><br><span class="line">| enabled      | True                             |</span><br><span class="line">| id           | bd89aaca7ab34c2fa5e3ab96b42b69af |</span><br><span class="line">| interface    | public                           |</span><br><span class="line">| region       | RegionOne                        |</span><br><span class="line">| region_id    | RegionOne                        |</span><br><span class="line">| service_id   | 385dcc7f756a4dd8801063dcc4f75a35 |</span><br><span class="line">| service_name | glance                           |</span><br><span class="line">| service_type | image                            |</span><br><span class="line">| url          | http://controller:9292           |</span><br><span class="line">+--------------+----------------------------------+</span><br></pre></td></tr></table></figure>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># openstack endpoint create --region RegionOne \</span></span><br><span class="line">  image internal http://controller:9292</span><br><span class="line">+--------------+----------------------------------+</span><br><span class="line">| Field        | Value                            |</span><br><span class="line">+--------------+----------------------------------+</span><br><span class="line">| enabled      | True                             |</span><br><span class="line">| id           | 65af6f8c900242f9bb4a9c8dec9b4ba0 |</span><br><span class="line">| interface    | internal                         |</span><br><span class="line">| region       | RegionOne                        |</span><br><span class="line">| region_id    | RegionOne                        |</span><br><span class="line">| service_id   | 385dcc7f756a4dd8801063dcc4f75a35 |</span><br><span class="line">| service_name | glance                           |</span><br><span class="line">| service_type | image                            |</span><br><span class="line">| url          | http://controller:9292           |</span><br><span class="line">+--------------+----------------------------------+</span><br></pre></td></tr></table></figure>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># openstack endpoint create --region RegionOne \</span></span><br><span class="line">  image admin http://controller:9292</span><br><span class="line">+--------------+----------------------------------+</span><br><span class="line">| Field        | Value                            |</span><br><span class="line">+--------------+----------------------------------+</span><br><span class="line">| enabled      | True                             |</span><br><span class="line">| id           | bde313f29d4745cd87da35e63608fce7 |</span><br><span class="line">| interface    | admin                            |</span><br><span class="line">| region       | RegionOne                        |</span><br><span class="line">| region_id    | RegionOne                        |</span><br><span class="line">| service_id   | 385dcc7f756a4dd8801063dcc4f75a35 |</span><br><span class="line">| service_name | glance                           |</span><br><span class="line">| service_type | image                            |</span><br><span class="line">| url          | http://controller:9292           |</span><br><span class="line">+--------------+----------------------------------+</span><br></pre></td></tr></table></figure>
<h4 id="安装配置Glance"><a href="#安装配置Glance" class="headerlink" title="安装配置Glance"></a>安装配置Glance</h4></li>
<li><p>安装包:</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># yum install openstack-glance</span></span><br></pre></td></tr></table></figure></li>
<li><p>编辑 <code>/etc/glance/glance-api.conf</code> 文件内容:</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[database]</span><br><span class="line">...</span><br><span class="line">connection = mysql+pymysql://glance:123456@controller/glance</span><br><span class="line"></span><br><span class="line">[keystone_authtoken]</span><br><span class="line">...</span><br><span class="line">auth_uri = http://controller:5000</span><br><span class="line">auth_url = http://controller:35357</span><br><span class="line">memcached_servers = controller:11211</span><br><span class="line">auth_type = password</span><br><span class="line">project_domain_name = default</span><br><span class="line">user_domain_name = default</span><br><span class="line">project_name = service</span><br><span class="line">username = glance</span><br><span class="line">password = 123456</span><br><span class="line"></span><br><span class="line">[paste_deploy]</span><br><span class="line">...</span><br><span class="line">flavor = keystone</span><br><span class="line"></span><br><span class="line">[glance_store]</span><br><span class="line">...</span><br><span class="line">stores = file,http</span><br><span class="line">default_store = file</span><br><span class="line">filesystem_store_datadir = /var/lib/glance/images/</span><br></pre></td></tr></table></figure>
<p> <code>123456</code>是密码(GLANCE_DBPASS)。</p>
</li>
<li><p>编辑 <code>/etc/glance/glance-registry.conf</code> 文件内容:</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[database]</span><br><span class="line">...</span><br><span class="line">connection = mysql+pymysql://glance:123456@controller/glance</span><br><span class="line"></span><br><span class="line">[keystone_authtoken]</span><br><span class="line">...</span><br><span class="line">auth_uri = http://controller:5000</span><br><span class="line">auth_url = http://controller:35357</span><br><span class="line">memcached_servers = controller:11211</span><br><span class="line">auth_type = password</span><br><span class="line">project_domain_name = default</span><br><span class="line">user_domain_name = default</span><br><span class="line">project_name = service</span><br><span class="line">username = glance</span><br><span class="line">password = 123456</span><br><span class="line"></span><br><span class="line">[paste_deploy]</span><br><span class="line">...</span><br><span class="line">flavor = keystone</span><br></pre></td></tr></table></figure>
<p> <code>123456</code>是密码(GLANCE_DBPASS)。</p>
</li>
<li><p>填充数据</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># su -s /bin/sh -c &quot;glance-manage db_sync&quot; glance</span></span><br></pre></td></tr></table></figure>
<p>终端打印过时信息</p>
</li>
<li><p>开机启动及启动glance </p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># systemctl enable openstack-glance-api.service \</span></span><br><span class="line">  openstack-glance-registry.service</span><br><span class="line"><span class="comment"># systemctl start openstack-glance-api.service \</span></span><br><span class="line">  openstack-glance-registry.service</span><br></pre></td></tr></table></figure>
<h4 id="校验glance"><a href="#校验glance" class="headerlink" title="校验glance"></a>校验glance</h4></li>
<li><p>获取 <code>admin</code> 命令行证书权限 </p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># . admin-openrc</span></span><br></pre></td></tr></table></figure></li>
<li><p>下载cirros镜像:</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># yum install wget</span></span><br><span class="line"><span class="comment"># wget http://download.cirros-cloud.net/0.3.4/cirros-0.3.4-x86_64-disk.img</span></span><br></pre></td></tr></table></figure></li>
<li><p>上传QCOW2格式镜像文件:</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># openstack image create &quot;cirros&quot; \</span></span><br><span class="line">  --file cirros-0.3.4-x86_64-disk.img \</span><br><span class="line">  --disk-format qcow2 --container-format bare \</span><br><span class="line">  --public</span><br><span class="line">+------------------+------------------------------------------------------+</span><br><span class="line">| Field            | Value                                                |</span><br><span class="line">+------------------+------------------------------------------------------+</span><br><span class="line">| checksum         | 133eae9fb1c98f45894a4e60d8736619                     |</span><br><span class="line">| container_format | bare                                                 |</span><br><span class="line">| created_at       | 2015-03-26T16:52:10Z                                 |</span><br><span class="line">| disk_format      | qcow2                                                |</span><br><span class="line">| file             | /v2/images/cc5c6982-4910-471e-b864-1098015901b5/file |</span><br><span class="line">| id               | cc5c6982-4910-471e-b864-1098015901b5                 |</span><br><span class="line">| min_disk         | 0                                                    |</span><br><span class="line">| min_ram          | 0                                                    |</span><br><span class="line">| name             | cirros                                               |</span><br><span class="line">| owner            | ae7a98326b9c455588edd2656d723b9d                     |</span><br><span class="line">| protected        | False                                                |</span><br><span class="line">| schema           | /v2/schemas/image                                    |</span><br><span class="line">| size             | 13200896                                             |</span><br><span class="line">| status           | active                                               |</span><br><span class="line">| tags             |                                                      |</span><br><span class="line">| updated_at       | 2015-03-26T16:52:10Z                                 |</span><br><span class="line">| virtual_size     | None                                                 |</span><br><span class="line">| visibility       | public                                               |</span><br><span class="line">+------------------+------------------------------------------------------+</span><br></pre></td></tr></table></figure></li>
<li><p>查看镜像:</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># openstack image list</span></span><br><span class="line">+--------------------------------------+--------+--------+</span><br><span class="line">| ID                                   | Name   | Status |</span><br><span class="line">+--------------------------------------+--------+--------+</span><br><span class="line">| 38047887-61a7-41ea-9b49-27987d5e8bb9 | cirros | active |</span><br><span class="line">+--------------------------------------+--------+--------+</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>openstack</category>
      </categories>
      <tags>
        <tag>centos7</tag>
        <tag>虚拟化</tag>
        <tag>openstack</tag>
        <tag>云计算</tag>
        <tag>newton</tag>
      </tags>
  </entry>
  <entry>
    <title>（转）Raft 一致性算法论文译文</title>
    <url>/%E7%AC%94%E8%AE%B0/raft_algorithm-20170425.html</url>
    <content><![CDATA[<p>本篇博客为著名的 RAFT 一致性算法论文的中文翻译，论文名为<a href="https://ramcloud.atlassian.net/wiki/download/attachments/6586375/raft.pdf">《In search of an Understandable Consensus Algorithm (Extended Version)》</a>(寻找一种易于理解的一致性算法)。</p>
<p>Raft 是一种用来管理日志复制的一致性算法。它和 Paxos 的性能和功能是一样的，但是它和 Paxos 的结构不一样；这使得 Raft 更容易理解并且更易于建立实际的系统。为了提高理解性，Raft 将一致性算法分为了几个部分，例如领导选取（leader selection），日志复制（log replication）和安全性（safety），同时它使用了更强的一致性来减少了必须需要考虑的状态。从用户学习的结果来看，Raft 比 Paxos 更容易学会。Raft 还包括了一种新的机制来使得动态改变集群成员，它使用重叠大多数（overlapping majorities）来保证安全。</p>
<a id="more"></a>

<h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>一致性算法允许一组机器像一个整体一样工作，即使其中的一些机器出了错误也能正常工作。正因为此，他们扮演着建立大规模可靠的软件系统的关键角色。在过去的十年中 Paxos 一直都主导着有关一致性算法的讨论：大多数一致性算法的实现都基于它或者受它影响，并且 Paxos 也成为了教学生关于一致性知识的主要工具。</p>
<p>不幸的是，尽管在降低它的复杂性方面做了许多努力，Paxos 依旧很难理解。并且，Paxos 需要经过复杂的修改才能应用于实际中。这些导致了系统构构建者和学生都十分头疼。</p>
<p>在被 Paxos 折磨之后，我们开始寻找一种在系统构建和教学上更好的新的一致性算法。我们的首要目标是让它易于理解：我们能不能定义一种面向实际系统的一致性算法并且比 Paxos 更容易学习呢？并且，我们希望这种算法能凭直觉就能明白，这对于一个系统构建者来说是十分必要的。对于一个算法，不仅仅是让它工作起来很重要，知道它是如何工作的更重要。</p>
<p>我们工作的结果是一种新的一致性算法，叫做 Raft。在设计 Raft 的过程中我们应用了许多专门的技巧来提升理解性，包括算法分解（分为领导选取（leader selection），日志复制（log replication）和安全性（safety））和减少状态（state space reduction）（相对于 Paxos，Raft 减少了非确定性的程度和服务器互相不一致的方式）。在两所学校的43个学生的研究中发现，Raft 比 Paxos 要更容易理解：在学习了两种算法之后，其中的33个学生回答 Raft 的问题要比回答 Paxos 的问题要好。</p>
<p>Raft 算法和现在一些已经有的算法在一些地方很相似（主要是 <a href="http://www.pmg.csail.mit.edu/papers/vr.pdf">Oki 和 Liskov 的 Viewstamped Replication</a>。但是 Raft 有几个新的特性：</p>
<ul>
<li>强领导者（Strong Leader）：Raft 使用一种比其他算法更强的领导形式。例如，日志条目只从领导者发送向其他服务器。这样就简化了对日志复制的管理，使得 Raft 更易于理解。</li>
<li>领导选取（Leader Selection）：Raft 使用随机定时器来选取领导者。这种方式仅仅是在所有算法都需要实现的心跳机制上增加了一点变化，它使得在解决冲突时更简单和快速。</li>
<li>成员变化（Membership Change）：Raft 为了调整集群中成员关系使用了新的联合一致性（joint consensus）的方法，这种方法中大多数不同配置的机器在转换关系的时候会交迭（overlap）。这使得在配置改变的时候，集群能够继续操作。</li>
</ul>
<p>我们认为，Raft 在教学方面和实际实现方面比 Paxos 和其他算法更出众。它比其他算法更简单、更容易理解；它能满足一个实际系统的需求；它拥有许多开源的实现并且被许多公司所使用；它的安全特性已经被证明；并且它的效率和其他算法相比也具有竞争力。</p>
<p>这篇论文剩下的部分会讲如下内容：复制状态机（replicated state machine）问题（第2节），讨论 Paxos 的优缺点（第3节），讨论我们用的为了达到提升理解性的方法（第4节），陈述 Raft 一致性算法（第5~8节），评价 Raft 算法（第9节），对相关工作的讨论（第10节）。</p>
<h3 id="复制状态机（Replicated-State-Machine）"><a href="#复制状态机（Replicated-State-Machine）" class="headerlink" title="复制状态机（Replicated State Machine）"></a>复制状态机（Replicated State Machine）</h3><p>一致性算法是在复制状态机的背景下提出来的。在这个方法中，在一组服务器的状态机产生同样的状态的副本因此即使有一些服务器崩溃了这组服务器也还能继续执行。复制状态机在分布式系统中被用于解决许多有关容错的问题。例如，GFS，HDFS还有 RAMCloud 这些大规模的系统都是用一个单独的集群领导者，使用一个单独的复制状态机来进行领导选取和存储配置信息来应对领导者的崩溃。使用复制状态机的例子有 Chubby 和 ZooKeeper。</p>
<p><img src="http://wx4.sinaimg.cn/mw690/0065glrAgy1ffuf551fuxj30gt08vdh4.jpg" alt="Alt text" title="图-1"><br>复制状态机的架构。一致性算法管理来自客户端状态命令的复制日志。状态机处理的日志中的命令的顺序都是一致的，因此会得到相同的执行结果。</p>
<p>如图-1所示，复制状态机是通过复制日志来实现的。每一台服务器保存着一份日志，日志中包含一系列的命令，状态机会按顺序执行这些命令。因为每一台计算机的状态机都是确定的，所以每个状态机的状态都是相同的，执行的命令是相同的，最后的执行结果也就是一样的了。</p>
<p>如何保证复制日志一致就是一致性算法的工作了。在一台服务器上，一致性模块接受客户端的命令并且把命令加入到它的日志中。它和其他服务器上的一致性模块进行通信来确保每一个日志最终包含相同序列的请求，即使有一些服务器宕机了。一旦这些命令被正确的复制了，每一个服务器的状态机都会按同样的顺序去执行它们，然后将结果返回给客户端。最终，这些服务器看起来就像一台可靠的状态机。</p>
<p>应用于实际系统的一致性算法一般有以下特性：</p>
<ul>
<li>确保安全性（从来不会返回一个错误的结果），即使在所有的非拜占庭（Non-Byzantine）情况下，包括网络延迟、分区、丢包、冗余和乱序的情况下。</li>
<li>高可用性，只要集群中的大部分机器都能运行，可以互相通信并且可以和客户端通信，这个集群就可用。因此，一般来说，一个拥有 5 台机器的集群可以容忍其中的 2 台的失败（fail）。服务器停止工作了我们就认为它失败（fail）了，没准一会当它们拥有稳定的存储时就能从中恢复过来，重新加入到集群中。</li>
<li>不依赖时序保证一致性，时钟错误和极端情况下的消息延迟在最坏的情况下才会引起可用性问题。</li>
<li>通常情况下，一条命令能够尽可能快的在大多数节点对一轮远程调用作出相应时完成，一少部分慢的机器不会影响系统的整体性能。</li>
</ul>
<h3 id="Paxos-算法的不足"><a href="#Paxos-算法的不足" class="headerlink" title="Paxos 算法的不足"></a>Paxos 算法的不足</h3><p>在过去的10年中，Leslie Lamport 的 Paxos 算法几乎已经成为了一致性算法的代名词：它是授课中最常见的算法，同时也是许多一致性算法实现的起点。Paxos 首先定义了一个能够达成单一决策一致的协议，例如一个单一复制日志条目（single replicated log entry）。我们把这个子集叫做单一决策 Paxos（single-decree Paxos）。之后 Paxos通过组合多个这种协议来完成一系列的决策，例如一个日志（multi-Paxos）。Paxos 确保安全性和活跃性（liveness），并且它支持集群成员的变更。它的正确性已经被证明，通常情况下也很高效。</p>
<p>不幸的是，Paxos 有两个致命的缺点。第一个是 Paxos 太难以理解。它的完整的解释晦涩难懂；很少有人能完全理解，只有少数人成功的读懂了它。并且大家做了许多努力来用一些简单的术语来描述它。尽管这些解释都关注于单一决策子集问题，但仍具有挑战性。在 NSDI 2012 会议上的一次非正式调查显示，我们发现大家对 Paxos 都感到不满意，其中甚至包括一些有经验的研究员。我们自己也曾深陷其中，我们在读过几篇简化它的文章并且设计了我们自己的算法之后才完全理解了 Paxos，而整个过程花费了将近一年的时间。</p>
<p>我们假定 Paxos 的晦涩来源于它将单决策子集作为它的基础。单决策（Single-decree）Paxos 是晦涩且微妙的：它被划分为两个没有简单直观解释的阶段，并且难以独立理解。正因为如此，它不能很直观的让我们知道为什么单一决策协议能够工作。为多决策 Paxos 设计的规则又添加了额外的复杂性和精巧性。我们相信多决策问题能够分解为其它更直观的方式。</p>
<p>Paxos 的第二个缺点是它难以在实际环境中实现。其中一个原因是，对于多决策 Paxos （multi-Paxos） ，大家还没有一个一致同意的算法。Lamport 的描述大部分都是有关于单决策 Paxos （single-decree Paxos）；他仅仅描述了实现多决策的可能的方法，缺少许多细节。有许多实现 Paxos 和优化 Paxos 的尝试，但是他们都和 Lamport 的描述有些出入。例如，Chubby 实现的是一个类似 Paxos 的算法，但是在许多情况下的细节没有公开。</p>
<p>另外，Paxos 的结构也是不容易在一个实际系统中进行实现的，这是单决策问题分解带来的又一个问题。例如，从许多日志条目中选出条目然后把它们融合到一个序列化的日志中并没有带来什么好处，它仅仅增加了复杂性。围绕着日志来设计一个系统是更简单、更高效的：新日志按照严格的顺序添加到日志中去。另一个问题是，Paxos 使用对等的点对点的实现作为它的核心（尽管它最终提出了一种弱领导者的形式来优化性能）。这种方法在只有一个决策被制定的情况下才显得有效，但是很少有现实中的系统使用它。如果要做许多的决策，选择一个领导人，由领带人来协调是更简单有效的方法。</p>
<p>因此，在实际的系统应用中和 Paxos 算法都相差很大。所有开始于 Paxos 的实现都会遇到很多问题，然后由此衍生出了许多与 Paxos 有很大不同的架构。这是既费时又容易出错的，并且理解 Paxos 的难度又非常大。Paxos 算法在它正确性的理论证明上是很好的，但是在实现上的价值就远远不足了。来自 Chubby 的实现的一条评论就能够说明：</p>
<blockquote>
<p>Paxos 算法的描述与实际实现之间存在巨大的鸿沟…最终的系统往往建立在一个没有被证明的算法之上。</p>
</blockquote>
<p>正因为存在这些问题，我们认为 Paxos 不仅对于系统的构建者来说不友好，同时也不利于教学。鉴于一致性算法对于大规模软件系统的重要性，我们决定试着来设计一种另外的比 Paxos 更好的一致性算法。Raft 就是这样的一个算法。</p>
<h3 id="易于理解的设计"><a href="#易于理解的设计" class="headerlink" title="易于理解的设计"></a>易于理解的设计</h3><p>设计 Raft 的目标有如下几个：</p>
<ul>
<li>它必须提供一个完整的、实际的基础来进行系统构建，为的是减少开发者的工作；</li>
<li>它必须在所有情况下都能保证安全可用；</li>
<li>它对于常规操作必须高效；</li>
<li>最重要的目标是：易于理解，它必须使得大多数人能够很容易的理解；</li>
<li>另外，它必须能让开发者有一个直观的认识，这样才能使系统构建者们去对它进行扩展。</li>
</ul>
<p>在设计 Raft 的过程中，我们不得不在许多种方法中做出选择。当面临这种情况时，我们通常会权衡可理解性：每种方法的可理解性是如何的？（例如，它的状态空间有多复杂？它是不是有很细微的含义？）它的可读性如何？读者能不能轻易地理解这个方法和它的含义？</p>
<p>我们意识到对这种可理解性的分析具有高度的主观性；尽管如此，我们使用了两种适用的方式。第一种是众所周知的问题分解：我们尽可能将问题分解成为若干个可解决的、可被理解的小问题。例如，在 Raft 中，我们把问题分解成为了<code>领导选取（leader election）</code>、<code>日志复制（log replication）</code>、<code>安全（safety）</code>和<code>成员变化（membership changes）</code>。</p>
<p>我们采用的第二个方法是通过减少需要考虑的状态的数量将状态空间简化，这能够使得整个系统更加一致并且尽可能消除不确定性。特别地，日志之间不允许出现空洞，并且 Raft 限制了限制了日志不一致的可能性。尽管在大多数情况下，我们都都在试图消除不确定性，但是有时候有些情况下，不确定性使得算法更易理解。尤其是，随机化方法使得不确定性增加，但是它减少了状态空间。我们使用随机化来简化了 Raft 中的领导选取算法。</p>
<h3 id="Raft-一致性算法"><a href="#Raft-一致性算法" class="headerlink" title="Raft 一致性算法"></a>Raft 一致性算法</h3><p>Raft 是一种用来管理第 2 章中提到的复制日志的算法。表-2 为了方便参考是一个算法的总结版本，表-3 列举了算法中的关键性质；表格中的这些元素将会在这一章剩下的部分中分别进行讨论。</p>
<p><strong>状态</strong>：</p>
<p>在所有服务器上持久存在的：（在响应远程过程调用 RPC 之前稳定存储的）</p>
<table>
<thead>
<tr>
<th align="center">名称</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">currentTerm</td>
<td align="left">服务器最后知道的任期号（从0开始递增）</td>
</tr>
<tr>
<td align="center">votedFor</td>
<td align="left">在当前任期内收到选票的候选人 id（如果没有就为 null）</td>
</tr>
<tr>
<td align="center">log[]</td>
<td align="left">日志条目；每个条目包含状态机的要执行命令和从领导人处收到时的任期号</td>
</tr>
</tbody></table>
<p>在所有服务器上不稳定存在的：</p>
<table>
<thead>
<tr>
<th align="center">名称</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">commitIndex</td>
<td align="left">已知的被提交的最大日志条目的索引值（从0开始递增）</td>
</tr>
<tr>
<td align="center">lastApplied</td>
<td align="left">被状态机执行的最大日志条目的索引值（从0开始递增）</td>
</tr>
</tbody></table>
<p>在领导人服务器上不稳定存在的：（在选举之后初始化的）</p>
<table>
<thead>
<tr>
<th align="center">名称</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">nextIndex[]</td>
<td align="left">对于每一个服务器，记录需要发给它的下一个日志条目的索引（初始化为领导人上一条日志的索引值+1）</td>
</tr>
<tr>
<td align="center">matchIndex[]</td>
<td align="left">对于每一个服务器，记录已经复制到该服务器的日志的最高索引值（从0开始递增）</td>
</tr>
</tbody></table>
<p><strong>附加日志远程过程调用 （AppendEntries RPC）</strong></p>
<p>由领导人来调用复制日志（5.3节）；也会用作heartbeat</p>
<table>
<thead>
<tr>
<th align="center">参数</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">term</td>
<td align="left">领导人的任期号</td>
</tr>
<tr>
<td align="center">leaderId</td>
<td align="left">领导人的 id，为了其他服务器能重定向到客户端</td>
</tr>
<tr>
<td align="center">prevLogIndex</td>
<td align="left">最新日志之前的日志的索引值</td>
</tr>
<tr>
<td align="center">prevLogTerm</td>
<td align="left">最新日志之前的日志的领导人任期号</td>
</tr>
<tr>
<td align="center">entries[]</td>
<td align="left">将要存储的日志条目（表示 heartbeat 时为空，有时会为了效率发送超过一条）</td>
</tr>
<tr>
<td align="center">leaderCommit</td>
<td align="left">领导人提交的日志条目索引值</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="center">返回值</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">term</td>
<td align="left">当前的任期号，用于领导人更新自己的任期号</td>
</tr>
<tr>
<td align="center">success</td>
<td align="left">如果其它服务器包含能够匹配上 prevLogIndex 和 prevLogTerm 的日志时为真</td>
</tr>
</tbody></table>
<p><strong>接受者需要实现</strong>：</p>
<ol>
<li>如果 term &lt; currentTerm返回 false（5.1节）</li>
<li>如果在prevLogIndex处的日志的任期号与prevLogTerm不匹配时，返回 false（5.3节）</li>
<li>如果一条已经存在的日志与新的冲突（index 相同但是任期号 term 不同），则删除已经存在的日志和它之后所有的日志（5.3节）</li>
<li>添加任何在已有的日志中不存在的条目</li>
<li>如果leaderCommit &gt; commitIndex，将commitIndex设置为leaderCommit和最新日志条目索引号中较小的一个</li>
</ol>
<p><strong>投票请求 RPC（RequestVote RPC）</strong></p>
<p>由候选人发起收集选票（5.2节）</p>
<table>
<thead>
<tr>
<th align="center">参数</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">term</td>
<td align="left">候选人的任期号</td>
</tr>
<tr>
<td align="center">candidateId</td>
<td align="left">请求投票的候选人 id</td>
</tr>
<tr>
<td align="center">lastLogIndex</td>
<td align="left">候选人最新日志条目的索引值</td>
</tr>
<tr>
<td align="center">lastLogTerm</td>
<td align="left">候选人最新日志条目对应的任期号</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="center">返回值</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">term</td>
<td align="left">目前的任期号，用于候选人更新自己</td>
</tr>
<tr>
<td align="center">voteGranted</td>
<td align="left">如果候选人收到选票为 true</td>
</tr>
</tbody></table>
<p><strong>接受者需要实现</strong>：</p>
<ol>
<li>如果term &lt; currentTerm返回 false（5.1节）</li>
<li>如果votedFor为空或者与candidateId相同，并且候选人的日志和自己的日志一样新，则给该候选人投票（5.2节 和 5.4节）</li>
</ol>
<p><strong>服务器需要遵守的规则</strong>：</p>
<p>所有服务器：</p>
<ul>
<li>如果commitIndex &gt; lastApplied，lastApplied自增，将log[lastApplied]应用到状态机（5.3节）</li>
<li>如果 RPC 的请求或者响应中包含一个 term T 大于 currentTerm，则currentTerm赋值为 T，并切换状态为追随者（Follower）（5.1节）</li>
</ul>
<p>追随者（followers）: 5.2节</p>
<ul>
<li>响应来自候选人和领导人的 RPC</li>
<li>如果在超过选取领导人时间之前没有收到来自当前领导人的AppendEntries RPC或者没有收到候选人的投票请求，则自己转换状态为候选人</li>
</ul>
<p>候选人：5.2节</p>
<ul>
<li>转变为选举人之后开始选举：<ul>
<li>currentTerm自增</li>
<li>给自己投票</li>
<li>重置选举计时器</li>
<li>向其他服务器发送RequestVote RPC</li>
</ul>
</li>
<li>如果收到了来自大多数服务器的投票：成为领导人</li>
<li>如果收到了来自新领导人的AppendEntries RPC（heartbeat）：转换状态为追随者</li>
<li>如果选举超时：开始新一轮的选举</li>
</ul>
<p>领导人：</p>
<ul>
<li>一旦成为领导人：向其他所有服务器发送空的AppendEntries RPC（heartbeat）;在空闲时间重复发送以防止选举超时（5.2节）</li>
<li>如果收到来自客户端的请求：向本地日志增加条目，在该条目应用到状态机后响应客户端（5.3节）</li>
<li>对于一个追随者来说，如果上一次收到的日志索引大于将要收到的日志索引（nextIndex）：通过AppendEntries RPC将 nextIndex 之后的所有日志条目发送出去</li>
<li>如果发送成功：将该追随者的 nextIndex和matchIndex更新</li>
<li>如果由于日志不一致导致AppendEntries RPC失败：nextIndex递减并且重新发送（5.3节）</li>
<li>如果存在一个满足N &gt; commitIndex和matchIndex[i] &gt;= N并且log[N].term == currentTerm的 N，则将commitIndex赋值为 N</li>
</ul>
<table>
<thead>
<tr>
<th align="center">性质</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">选举安全原则（Election Safety）</td>
<td align="left">一个任期（term）内最多允许有一个领导人被选上（5.2节）</td>
</tr>
<tr>
<td align="center">领导人只增加原则（Leader Append-Only）</td>
<td align="left">领导人永远不会覆盖或者删除自己的日志，它只会增加条目</td>
</tr>
<tr>
<td align="center">日志匹配原则（Log Matching）</td>
<td align="left">如果两个日志在相同的索引位置上的日志条目的任期号相同，那么我们就认为这个日志从头到这个索引位置之间的条目完全相同（5.3 节）</td>
</tr>
<tr>
<td align="center">领导人完全原则（Leader Completeness)</td>
<td align="left">如果一个日志条目在一个给定任期内被提交，那么这个条目一定会出现在所有任期号更大的领导人中</td>
</tr>
<tr>
<td align="center">状态机安全原则（State Machine Safety）</td>
<td align="left">如果一个服务器已经将给定索引位置的日志条目应用到状态机中，则所有其他服务器不会在该索引位置应用不同的条目（5.4.3节）</td>
</tr>
</tbody></table>
<p>Raft 通过首先选出一个领导人来实现一致性，然后给予领导人完全管理复制日志（replicated log）的责任。领导人接收来自客户端的日志条目，并把它们复制到其他的服务器上，领带人还要告诉服务器们什么时候将日志条目应用到它们的状态机是安全的。通过选出领导人能够简化复制日志的管理工作。例如，领导人能够决定将新的日志条目放到哪，而并不需要和其他的服务器商议，数据流被简化成从领导人流向其他服务器。如果领导人宕机或者和其他服务器失去连接，就可以选取下一个领导人。</p>
<p>通过选出领导人，Raft 将一致性问题分解成为三个相对独立的子问题：</p>
<ul>
<li><code>领导人选取（Leader election）</code>： 在一个领导人宕机之后必须要选取一个新的领导人（5.2节）</li>
<li><code>日志复制（Log replication）</code>： 领导人必须从客户端接收日志然后复制到集群中的其他服务器，并且强制要求其他服务器的日志保持和自己相同</li>
<li><code>安全性（Safety）</code>： Raft 的关键的安全特性是 表-3 中提到的状态机安全原则（State Machine Safety）:如果一个服务器已经将给定索引位置的日志条目应用到状态机中，则所有其他服务器不会在该索引位置应用不同的条目。5.4节阐述了 Raft 是如何保证这条原则的，解决方案涉及到一个对于选举机制另外的限制，这一部分会在 5.2节 中说明。</li>
</ul>
<p>在说明了一致性算法之后，本章会讨论有关可用性（availability）的问题和系统中时序（timing）的问题。</p>
<h4 id="Raft-基础"><a href="#Raft-基础" class="headerlink" title="Raft 基础"></a>Raft 基础</h4><p>一个 Raft 集群包括若干服务器；对于一个典型的 5 服务器集群，该集群能够容忍 2 台机器不能正常工作，而整个系统保持正常。在任意的时间，每一个服务器一定会处于以下三种状态中的一个：领导人、候选人、追随者。在正常情况下，只有一个服务器是领导人，剩下的服务器是追随者。追随者们是被动的：他们不会发送任何请求，只是响应来自领导人和候选人的请求。领导人来处理所有来自客户端的请求（如果一个客户端与追随者进行通信，追随者会将信息发送给领导人）。候选人是用来选取一个新的领导人的，这一部分会在 5.2节 进行阐释。图-4 阐述了这些状态，和它们之间的转换；它们的转换会在下边进行讨论。</p>
<p><img src="http://wx2.sinaimg.cn/mw690/0065glrAgy1ffuf59ioqdj30hn07x0tq.jpg" alt="Alt text" title="图-4"><br>图-4：服务器的状态。追随者只响应其他服务器的请求。如果追随者没有收到任何消息，它会成为一个候选人并且开始一次选举。收到大多数服务器投票的候选人会成为新的领导人。领导人在它们宕机之前会一直保持领导人的状态。</p>
<p><img src="http://wx1.sinaimg.cn/mw690/0065glrAgy1ffuf5ctkekj30ef05o0t3.jpg" alt="Alt text" title="图-5"><br>图-5：时间被分为一个个的任期（term），每一个任期的开始都是领导人选举。在成功选举之后，一个领导人会在任期内管理整个集群。如果选举失败，该任期就会因为没有领带人而结束。这个转变会在不同的时间的不同服务器上观察到。</p>
<p>如图-5 所示，Raft 算法将时间划分成为任意不同长度的任期（term）。任期用连续的数字进行表示。每一个任期的开始都是一次选举（election），就像 5.2节 所描述的那样，一个或多个候选人会试图成为领导人。如果一个候选人赢得了选举，它就会在该任期的剩余时间担任领导人。在某些情况下，选票会被瓜分，有可能没有选出领导人，那么，将会开始另一个任期，并且立刻开始下一次选举。Raft 算法保证在给定的一个任期最少要有一个领导人。</p>
<p>不同的服务器可能会在任期内观察到多次不同的状态转换，在某些情况下，一台服务器可能看不到一次选举或者一个完整的任期。任期在 Raft 中充当逻辑时钟的角色，并且它们允许服务器检测过期的信息，比如过时的领导人。每一台服务器都存储着一个当前任期的数字，这个数字会单调的增加。当服务器之间进行通信时，会互相交换当前任期号；如果一台服务器的当前任期号比其它服务器的小，则更新为较大的任期号。如果一个候选人或者领导人意识到它的任期号过时了，它会立刻转换为追随者状态。如果一台服务器收到的请求的任期号是过时的，那么它会拒绝此次请求。</p>
<p>Raft 中的服务器通过远程过程调用（RPC）来通信，基本的 Raft 一致性算法仅需要 2 种 RPC。RequestVote RPC 是候选人在选举过程中触发的（5.2节），AppendEntries RPC 是领导人触发的，为的是复制日志条目和提供一种心跳（heartbeat）机制（5.3节）。第7章加入了第三种 RPC 来在各个服务器之间传输快照（snapshot）。如果服务器没有及时收到 RPC 的响应，它们会重试，并且它们能够并行的发出 RPC 来获得最好的性能。</p>
<h4 id="领导人选取"><a href="#领导人选取" class="headerlink" title="领导人选取"></a>领导人选取</h4><p>Raft 使用一种心跳机制（heartbeat）来触发领导人的选取。当服务器启动时，它们会初始化为追随者。一太服务器会一直保持追随者的状态只要它们能够收到来自领导人或者候选人的有效 RPC。领导人会向所有追随者周期性发送心跳（heartbeat，不带有任何日志条目的 AppendEntries RPC）来保证它们的领导人地位。如果一个追随者在一个周期内没有收到心跳信息，就叫做选举超时（election timeout）,然后它就会假定没有可用的领导人并且开始一次选举来选出一个新的领导人。</p>
<p>为了开始选举，一个追随者会自增它的当前任期并且转换状态为候选人。然后，它会给自己投票并且给集群中的其他服务器发送 RequestVote RPC。一个候选人会一直处于该状态，直到下列三种情形之一发生：</p>
<p>它赢得了选举；</p>
<ul>
<li>另一台服务器赢得了选举；</li>
<li>一段时间后没有任何一台服务器赢得了选举</li>
<li>这些情形会在下面的章节中分别讨论。</li>
</ul>
<p>一个候选人如果在一个任期内收到了来自集群中大多数服务器的投票就会赢得选举。在一个任期内，一台服务器最多能给一个候选人投票，按照先到先服务原则（first-come-first-served）（注意：在 5.4节 针对投票添加了一个额外的限制）。大多数原则使得在一个任期内最多有一个候选人能赢得选举（表-3 中提到的选举安全原则）。一旦有一个候选人赢得了选举，它就会成为领导人。然后它会像其他服务器发送心跳信息来建立自己的领导地位并且组织新的选举。</p>
<p>当一个候选人等待别人的选票时，它有可能会收到来自其他服务器发来的声明其为领导人的 AppendEntries RPC。如果这个领导人的任期（包含在它的 RPC 中）比当前候选人的当前任期要大，则候选人认为该领导人合法，并且转换自己的状态为追随者。如果在这个 RPC 中的任期小于候选人的当前任期，则候选人会拒绝此次 RPC， 继续保持候选人状态。</p>
<p>第三种情形是一个候选人既没有赢得选举也没有输掉选举：如果许多追随者在同一时刻都成为了候选人，选票会被分散，可能没有候选人能获得大多数的选票。当这种情形发生时，每一个候选人都会超时，并且通过自增任期号和发起另一轮 RequestVote RPC 来开始新的选举。然而，如果没有其它手段来分配选票的话，这种情形可能会无限的重复下去。</p>
<p>Raft 使用随机的选举超时时间来确保第三种情形很少发生，并且能够快速解决。为了防止在一开始是选票就被瓜分，选举超时时间是在一个固定的间隔内随机选出来的（例如，150~300ms）。这种机制使得在大多数情况下只有一个服务器会率先超时，它会在其它服务器超时之前赢得选举并且向其它服务器发送心跳信息。同样的机制被用于选票一开始被瓜分的情况下。每一个候选人在开始一次选举的时候会重置一个随机的选举超时时间，在超时进行下一次选举之前一直等待。这能够减小在新的选举中一开始选票就被瓜分的可能性。9.3节 展示了这种方法能够快速的选出一个领导人。</p>
<p>选举是一个理解性引导我们设计替代算法的一个例子。最开始时，我们计划使用一种排名系统：给每一个候选人分配一个唯一的排名，用于在竞争的候选人之中选择领导人。如果一个候选人发现了另一个比它排名高的候选人，那么它会回到追随者的状态，这样排名高的候选人会很容易地赢得选举。但是我们发现这种方法在可用性方面有一点问题（一个低排名的服务器在高排名的服务器宕机后，需要等待超时才能再次成为候选人，但是如果它这么做的太快，它能重置选举领带人的过程）。我们对这个算法做了多次调整，但是每次调整后都会出现一些新的问题。最终我们认为随机重试的方法是更明确并且更易于理解的。</p>
<h4 id="日志复制"><a href="#日志复制" class="headerlink" title="日志复制"></a>日志复制</h4><p>一旦选出了领导人，它就开始接收客户端的请求。每一个客户端请求都包含一条需要被复制状态机（replicated state machine）执行的命令。领导人把这条命令作为新的日志条目加入到它的日志中去，然后并行的向其他服务器发起 AppendEntries RPC ，要求其它服务器复制这个条目。当这个条目被安全的复制之后（下面的部分会详细阐述），领导人会将这个条目应用到它的状态机中并且会向客户端返回执行结果。如果追随者崩溃了或者运行缓慢或者是网络丢包了，领导人会无限的重试 AppendEntries RPC（甚至在它向客户端响应之后）知道所有的追随者最终存储了所有的日志条目。</p>
<p><img src="http://wx2.sinaimg.cn/mw690/0065glrAgy1ffuf5h1x1yj30hl0d7mz7.jpg" alt="Alt text" title="图-6"><br>图-6：日志由有序编号的日志条目组成。每个日志条目包含它被创建时的任期号（每个方块中的数字），并且包含用于状态机执行的命令。如果一个条目能够被状态机安全执行，就被认为可以提交了。<br>日志就像 图-6 所示那样组织的。每个日志条目存储着一条被状态机执行的命令和当这条日志条目被领导人接收时的任期号。日志条目中的任期号用来检测在不同服务器上日志的不一致性，并且能确保 图-3 中的一些特性。每个日志条目也包含一个整数索引来表示它在日志中的位置。</p>
<p>领导人决定什么时候将日志条目应用到状态机是安全的；这种条目被称为可被提交（commited）。Raft 保证可被提交（commited）的日志条目是持久化的并且最终会被所有可用的状态机执行。一旦被领导人创建的条目已经复制到了大多数的服务器上，这个条目就称为可被提交的（例如，图-6中的7号条目）。领导人日志中之前的条目都是可被提交的（commited），包括由之前的领导人创建的条目。5.4节将会讨论当领导人更替之后这条规则的应用问题的细节，并且也讨论了这种提交方式是安全的。领导人跟踪记录它所知道的被提交条目的最大索引值，并且这个索引值会包含在之后的 AppendEntries RPC 中（包括心跳 heartbeat 中），为的是让其他服务器都知道这条条目已经提交。一旦一个追随者知道了一个日志条目已经被提交，它会将该条目应用至本地的状态机（按照日志顺序）。</p>
<p>我们设计了 Raft 日志机制来保证不同服务器上日志的一致性。这样做不仅简化了系统的行为使得它更可预测，并且也是保证安全性不可或缺的一部分。Raft 保证以下特性，并且也保证了 表-3 中的日志匹配原则（Log Matching Property）:</p>
<ul>
<li>如果在不同日志中的两个条目有着相同的索引和任期号，则它们所存储的命令是相同的。</li>
<li>如果在不同日志中的两个条目有着相同的索引和任期号，则它们之间的所有条目都是完全一样的。</li>
</ul>
<p>第一条特性源于领导人在一个任期里在给定的一个日志索引位置最多创建一条日志条目，同时该条目在日志中的位置也从来不会改变。第二条特性源于 AppendEntries 的一个简单的一致性检查。当发送一个 AppendEntries RPC 时，领导人会把新日志条目紧接着之前的条目的索引位置和任期号都包含在里面。如果追随者没有在它的日志中找到相同索引和任期号的日志，它就会拒绝新的日志条目。这个一致性检查就像一个归纳步骤：一开始空的日志的状态一定是满足日志匹配原则的，一致性检查保证了当日志添加时的日志匹配原则。因此，只要 AppendEntries 返回成功的时候，领导人就知道追随者们的日志和它的是一致的了。</p>
<p><img src="http://wx2.sinaimg.cn/mw690/0065glrAgy1ffuf5kf7pfj30gf0bamz4.jpg" alt="Alt text" title="图-7"><br>图-7：当最上边的领导人掌权之后，追随者日志可能有以下情况（a~f）。一个格子表示一个日志条目；格子中的数字是它的任期。一个追随者可能会丢失一些条目（a, b）；可能多出来一些未提交的条目（c, d）；或者两种情况都有（e, f）。例如，场景 f 在如下情况下就会发生：如果一台服务器在任期2时是领导人并且往它的日志中添加了一些条目，然后在将它们提交之前就宕机了，之后它很快重启了，成为了任期3的领导人，又往它的日志中添加了一些条目，然后在任期2和任期3中的条目提交之前它又宕机了并且几个任期内都一直处于宕机状态。</p>
<p>在一般情况下，领导人和追随者们的日志保持一致，因此 AppendEntries 一致性检查通常不会失败。然而，领导人的崩溃会导致日志不一致（旧的领导人可能没有完全复制完日志中的所有条目）。这些不一致会导致一系列领导人和追随者崩溃。图-7 阐述了一些追随者可能和新的领导人日志不同的情况。一个追随者可能会丢失掉领导人上的一些条目，也有可能包含一些领导人没有的条目，也有可能两者都会发生。丢失的或者多出来的条目可能会持续多个任期。</p>
<p>在 Raft 算法中，领导人通过强制追随者们复制它的日志来处理日志的不一致。这就意味着，在追随者上的冲突日志会被领导者的日志覆盖。5.4节会说明当添加了一个额外的限制之后这是安全的。</p>
<p>为了使得追随者的日志同自己的一致，领导人需要找到追随者同它的日志一致的地方，然后删除追随者在该位置之后的条目，然后将自己在该位置之后的条目发送给追随者。这些操作都在 AppendEntries RPC 进行一致性检查时完成。领导人给每一个追随者维护了一个nextIndex，它表示领导人将要发送给该追随者的下一条日志条目的索引。当一个领导人开始掌权时，它会将nextIndex初始化为它的最新的日志条目索引数+1（图-7 中的 11）。如果一个追随者的日志和领导者的不一致，AppendEntries 一致性检查会在下一次 AppendEntries RPC 时返回失败。在失败之后，领导人会将nextIndex递减然后重试 AppendEntries RPC。最终nextIndex会达到一个领导人和追随者日志一致的地方。这时，AppendEntries 会返回成功，追随者中冲突的日志条目都被移除了，并且添加所缺少的上了领导人的日志条目。一旦 AppendEntries 返回成功，追随者和领导人的日志就一致了，这样的状态会保持到该任期结束。</p>
<p>如果需要的话，算法还可以进行优化来减少 AppendEntries RPC 失败的次数。例如，当拒绝了一个 AppendEntries 请求，追随者可以记录下冲突日志条目的任期号和自己存储那个任期的最早的索引。通过这些信息，领导人能够直接递减nextIndex跨过那个任期内所有的冲突条目；这样的话，一个冲突的任期需要一次 AppendEntries RPC，而不是每一个冲突条目需要一次 AppendEntries RPC。在实践中，我们怀疑这种优化是否是必要的，因为AppendEntries 一致性检查很少失败并且也不太可能出现大量的日志条目不一致的情况。</p>
<p>通过这种机制，一个领导人在掌权时不需要采取另外特殊的方式来恢复日志的一致性。它只需要使用一些常规的操作，通过响应 AppendEntries 一致性检查的失败能使得日志自动的趋于一致。一个领导人从来不会覆盖或者删除自己的日志（表-3 中的领导人只增加原则）。</p>
<p>这个日志复制机制展示了在第2章中阐述的所希望的一致性特性：Raft 能够接受，复制并且应用新的日志条目只要大部分的服务器是正常的。在通常情况下，一条新的日志条目可以在一轮 RPC 内完成在集群的大多数服务器上的复制；并且一个速度很慢的追随者并不会影响整体的性能。</p>
<h4 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h4><p>之前的章节中讨论了 Raft 算法是如何进行领导选取和复制日志的。然而，到目前为止这个机制还不能保证每一个状态机能按照相同的顺序执行同样的指令。例如，当领导人提交了若干日志条目的同时一个追随者可能宕机了，之后它又被选为了领导人然后用新的日志条目覆盖掉了旧的那些，最后，不同的状态机可能执行不同的命令序列。</p>
<p>这一节通过在领带人选取部分加入了一个限制来完善了 Raft 算法。这个限制能够保证对于固定的任期，任何的领导人都拥有之前任期提交的全部日志条目（表-3 中的领导人完全原则）。有了这一限制，日志提交的规则就更清晰了。最后，我们提出了对于领导人完全原则的简单证明并且展示了它是如何修正复制状态机的行为的。</p>
<h5 id="选举限制"><a href="#选举限制" class="headerlink" title="选举限制"></a>选举限制</h5><p>在所有的以领导人为基础的一致性算法中，领导人最终必须要存储全部已经提交的日志条目。在一些一致性算法中，例如：Viewstamped Replication，即使一开始没有包含全部已提交的条目也可以被选为领导人。这些算法都有一些另外的机制来保证找到丢失的条目并将它们传输给新的领导人，这个过程要么在选举过程中完成，要么在选举之后立即开始。不幸的是，这种方式大大增加了复杂性。Raft 使用了一种更简单的方式来保证在新的领导人开始选举的时候在之前任期的所有已提交的日志条目都会出现在上边，而不需要将这些条目传送给领导人。这就意味着日志条目只有一个流向：从领导人流向追随者。领导人永远不会覆盖已经存在的日志条目。</p>
<p>Raft 使用投票的方式来阻止没有包含全部日志条目的服务器赢得选举。一个候选人为了赢得选举必须要和集群中的大多数进行通信，这就意味着每一条已经提交的日志条目最少在其中一台服务器上出现。如果候选人的日志至少和大多数服务器上的日志一样新（up-to-date，这个概念会在下边有详细介绍），那么它一定包含有全部的已经提交的日志条目。RequestVote RPC 实现了这个限制：这个 RPC（远程过程调用）包括候选人的日志信息，如果它自己的日志比候选人的日志要新，那么它会拒绝候选人的投票请求。</p>
<p>Raft 通过比较日志中最后一个条目的索引和任期号来决定两个日志哪一个更新。如果两个日志的任期号不同，任期号大的更新；如果任期号相同，更长的日志更新。</p>
<h5 id="提交之前任期的日志条目"><a href="#提交之前任期的日志条目" class="headerlink" title="提交之前任期的日志条目"></a>提交之前任期的日志条目</h5><p><img src="http://wx1.sinaimg.cn/mw690/0065glrAgy1ffuf6yhbarj30ih08o3zy.jpg" alt="Alt text" title="图-8"><br>图-8：如图的时间序列说明了为什么领导人不能通过之前任期的日志条目判断它的提交状态。（a）中的 S1 是领导人并且部分复制了索引2上的日志条目。（b）中 S1 崩溃了；S5 通过 S3，S4 和自己的选票赢得了选举，并且在索引2上接收了另一条日志条目。（c）中 S5 崩溃了，S1 重启了，通过 S2，S3 和自己的选票赢得了选举，并且继续索引2处的复制，这时任期2的日志条目已经在大部分服务器上完成了复制，但是还并没有提交。如果在（d）时刻 S1 崩溃了，S5 会通过 S2，S3，S4 的选票成为领导人，然后用它自己在任期3的日志条目覆盖掉其他服务器的日志条目。然而，如果在崩溃之前，S1 在它的当前任期在大多数服务器上复制了一条日志条目，就像在（e）中那样，那么这条条目就会被提交（S5就不会赢得选举）。在这时，之前的日志条目就会正常被提交。<br>正如 5.3节 中描述的那样，只要一个日志条目被存在了在多数的服务器上，领导人就知道当前任期就可以提交该条目了。如果领导人在提交之前就崩溃了，之后的领导人会试着继续完成对日志的复制。然而，领导人并不能断定存储在大多数服务器上的日志条目一定在之前的任期中被提交了。<br>图-8 说明了一种情况，一条存储在了大多数服务器上的日志条目仍然被新上任的领导人覆盖了。</p>
<p>为了消除 图-8 中描述的问题，Raft 从来不会通过计算复制的数目来提交之前人气的日志条目。只有领导人当前任期的日志条目才能通过计算数目来进行提交。一旦当前任期的日志条目以这种方式被提交，那么由于日志匹配原则（Log Matching Property），之前的日志条目也都会被间接的提交。在某些情况下，领导人可以安全的知道一个老的日志条目是否已经被提交（例如，通过观察该条目是否存储到所有服务器上），但是 Raft 为了简化问题使用了一种更加保守的方法。</p>
<p>因为当领导人从之前任期复制日志条目时日志条目保留了它们最开始的任期号，所以这使得 Raft 在提交规则中增加了额外的复杂性。在其他的一致性算法中，如果一个新的领导人要从之前的任期中复制日志条目，它必须要使用当前的新任期号。Raft 的方法使得判断日志更加容易，因为它们全程都保持着同样的任期号。另外，和其它的一致性算法相比，Raft 算法中的新领导人会发送更少的之前任期的日志条目（其他算法必须要发送冗余的日志条目并且在它们被提交之前来重新排序）。</p>
<h5 id="安全性论证"><a href="#安全性论证" class="headerlink" title="安全性论证"></a>安全性论证</h5><p><img src="http://wx3.sinaimg.cn/mw690/0065glrAgy1ffuf71tcy4j30d3075wf9.jpg" alt="Alt text" title="图-9"><br>图-9：如果 S1（任期 T 的领导人）在它的任期提交了一条日志条目，并且 S5 在之后的任期 U 成为了领导人，那么最少会有一台服务器（S3）接收了这条日志条目并且会给 S5 投票。</p>
<p>给出了完整的 Raft 算法，现在我们能够更精确的论证领导人完全原则（Leader Completeness)（这基于 9.2节 提出的安全性证明）。我们假定领导人完全原则是不成立的，然后推导出矛盾。假定任期 T 的领导人 leaderT在它的任期提交了一个日志条目，但是这条日志条目并没有存储在之后的任期中的领导人上。我们设大于 T 的最小的任期 U 的领导人（leaderU） 没有存储这条日志条目。</p>
<ol>
<li>在 leaderU 选举时一定没有那条被提交的日志条目（领导人从来不会删除或者覆盖日志条目）。</li>
<li>leaderT 复制了这个条目到集群的大多数的服务器上。因此，只是有一台服务器（投票者）即接收了来自 leaderT 的日志条目并且给 leaderU 投票，就像 图-9 中所示那样。这个投票者是产生矛盾的关键。</li>
<li>投票者必须在给 leaderU 投票之前接收来自 leaderT 的日志条目；否则它会拒绝来自 leaderT 的 AppendEntries 请求（它的当前任期会比 T 要大）。</li>
<li>投票者会在它给 leaderU 投票时存储那个条目，因为任何中间的领导人都保有该条目（基于假设），领导人从来不会移除这个条目，并且追随者也只会在和领导人冲突时才会移除日志条目。</li>
<li>投票者给 leaderU 投票了，所以 leaderU 的日志必须和投票者的一样新。这就导致了一个矛盾。</li>
<li>首先，如果投票者和 leaderU 最后一条日志条目的任期号相同，那么 leaderU 的日志一定和投票者的一样长，因此它的日志包含全部投票者的日志条目。这是矛盾的，因为在假设中投票者和 leaderU 包含的已提交条目是不同的。</li>
<li>除此之外， leaderU 的最后一条日志的任期号一定比投票者的大。另外，它也比 T 要大，因为投票者的最后一条日志条目的任期号最小也要是 T（它包含了所有任期 T 提交的日志条目）。创建 leaderU 最后一条日志条目的上一任领导人必须包含已经提交的日志条目（基于假设）。那么，根据日志匹配原则（Log Matching），leaderU 也一定包含那条提交的日志条目，这也是矛盾的。</li>
<li>这时就完成了矛盾推导。因此，所有比任期 T 大的领导人一定包含所有在任期 T 提交的日志条目。</li>
<li>日志匹配原则（Log Matching）保证了未来的领导人也会包含被间接提交的日志条目，就像 图-8 中（d）时刻索引为2的条目。</li>
</ol>
<p>通过给出了 领导人完全原则（Leader Completeness)，我们能够证明 表-3 中的状态机安全原则（State Machine Safety），状态机安全原则（State Machine Safety）讲的是如果一台服务器将给定索引上的日志条目应用到了它自己的状态机上，其它服务器的同一索引位置不可能应用的是其它条目。在一个服务器应用一条日志条目到它自己的状态机中时，它的日志必须和领导人的日志在该条目和之前的条目上相同，并且已经被提交。现在我们来考虑在任何一个服务器应用一个指定索引位置的日志的最小任期；日志完全特性（Log Completeness Property）保证拥有更高任期号的领导人会存储相同的日志条目，所以之后的任期里应用某个索引位置的日志条目也会是相同的值。因此，状态机安全特性是成立的。</p>
<p>最后，Raft 算法需要服务器按照日志中索引位置顺序应用日志条目。和状态机安全特性结合起来看，这就意味着所有的服务器会应用相同的日志序列集到自己的状态机中，并且是按照相同的顺序。</p>
<h4 id="追随者和候选人崩溃"><a href="#追随者和候选人崩溃" class="headerlink" title="追随者和候选人崩溃"></a>追随者和候选人崩溃</h4><p>截止到目前，我们只讨论了领导人崩溃的问题。追随者和候选人崩溃的问题解决起来要比领导人崩溃要简单得多，这两者崩溃的处理方式是一样的。如果一个追随者或者候选人崩溃了，那么之后的发送给它的 RequestVote RPC 和 AppendEntries RPC 会失败。Raft 通过无限的重试来处理这些失败；如果崩溃的服务器重启了，RPC 就会成功完成。如果一个服务器在收到了 RPC 之后但是在响应之前崩溃了，那么它会在重启之后再次收到同一个 RPC。因为 Raft 中的 RPC 都是幂等的，因此不会有什么问题。例如，如果一个追随者收到了一个已经包含在它的日志中的 AppendEntries 请求，它会忽视这个新的请求。</p>
<h4 id="时序和可用性"><a href="#时序和可用性" class="headerlink" title="时序和可用性"></a>时序和可用性</h4><p>我们对于 Raft 的要求之一就是安全性不依赖于时序（timing）：系统不能仅仅因为一些事件发生的比预想的快一些或慢一些就产生错误。然而，可用性（系统可以及时响应客户端的特性）不可避免的要依赖时序。例如，如果消息交换在服务器崩溃时花费更多的时间，候选人不会等待太长的时间来赢得选举；没有一个稳定的领导人，Raft 将无法工作。</p>
<p>领导人选取是 Raft 中对时序要求最关键的地方。Raft 会选出并且保持一个稳定的领导人只有系统满足下列时序要求（timing requirement）：</p>
<p><code>broadcastTime &lt;&lt; electionTimeout &lt;&lt; MTBF</code></p>
<p>在这个不等式中，broadcastTime指的是一台服务器并行的向集群中的其他服务器发送 RPC 并且收到它们的响应的平均时间；electionTimeout指的就是在 5.2节 描述的选举超时时间；MTBF指的是单个服务器发生故障的间隔时间的平均数。broadcastTime应该比electionTimeout小一个数量级，为的是使领导人能够持续发送心跳信息（heartbeat）来阻止追随者们开始选举；根据已经给出的随机化选举超时时间方法，这个不等式也使得瓜分选票的情况变成不可能。electionTimeout也要比MTBF小几个数量级，为的是使得系统稳定运行。当领导人崩溃时，整个大约会在electionTimeout的时间内不可用；我们希望这种情况仅占全部时间的很小的一部分。</p>
<p>broadcastTime和MTBF是由系统决定的性质，但是electionTimeout是我们必须做出选择的。Raft 的 RPC 需要接收方将信息持久化的保存到稳定存储中去，所以广播时间大约是 0.5 毫秒到 20 毫秒，这取决于存储的技术。因此，electionTimeout一般在 10ms 到 500ms 之间。大多数的服务器的MTBF都在几个月甚至更长，很容易满足这个时序需求。</p>
<h3 id="集群成员变化"><a href="#集群成员变化" class="headerlink" title="集群成员变化"></a>集群成员变化</h3><p>截止到目前，我们都假定集群的配置（加入到一致性算法的服务器集合）是固定的。在实际中，我们会经常更改配置，例如，替换掉那些崩溃的机器或者更改复制级别。虽然通过关闭整个集群，升级配置文件，然后重启整个集群也可以解决这个问题，但是这回导致在更改配置的过程中，整个集群不可用。另外，如果存在需要手工操作，那么就会有操作失误的风险。为了避免这些问题，我们决定采用自动改变配置并且把这部分加入到了 Raft 一致性算法中。</p>
<p>为了让配置修改机制能够安全，那么在转换的过程中在任何时间点两个领导人不能再同一个任期被同时选为领导人。不幸的是，服务器集群从旧的配置直接升级到新的配置的任何方法都是不安全的，一次性自动的转换所有服务器是不可能的，所以集群可以在转换的过程中划分成两个单独的组（如 图-10 所示）。</p>
<p><img src="http://wx3.sinaimg.cn/mw690/0065glrAgy1ffuf74xy9vj30f00a3mxw.jpg" alt="Alt text" title="图-10"><br>图-10：从一个配置切换到另一个配置是不安全的因为不同的服务器会在不同的时间点进行切换。在这个例子中，集群数量从三台转换成五台。不幸的是，在一个时间点有两个服务器能被选举成为领导人，一个是在使用旧的配置的机器中（Cold）选出的领导人，另一个领导人是通过新的配置（Cnew）选出来的。</p>
<p>为了保证安全性，集群配置的调整必须使用两阶段（two-phase）方法。有许多种实现两阶段方法的实现。例如，一些系统在第一个阶段先把旧的配置设为无效使得它无法处理客户端请求，然后在第二阶段启用新的配置。在 Raft 中，集群先切换到一个过渡配置，我们称其为共同一致（joint consensus）；一旦共同一致被提交了，然后系统再切换到新的配置。共同一致是旧的配置和新的配置的组合：</p>
<ul>
<li>日志条目被复制给集群中新、老配置的所有服务器。</li>
<li>新、老配置的服务器都能成为领导人。</li>
<li>需要分别在两种配置上获得大多数的支持才能达成一致（针对选举和提交）</li>
</ul>
<p>共同一致允许独立的服务器在不影响安全性的前提下，在不同的时间进行配置转换过程。此外，共同一致可以让集群在配置转换的过程中依然能够响应服务器请求。</p>
<p><img src="http://wx3.sinaimg.cn/mw690/0065glrAgy1ffuf781rfkj30gq088aas.jpg" alt="Alt text" title="图-11"><br>图-11：集群配置变更的时间线。虚线表示的是已经被创建但是还没提交的配置条目，实线表示的是最新提交的配置条目。领导人首先在它的日志中创建 Cold,new配置条目并且将它提交到Cold,new（使用旧配置的大部分服务器和使用新配置的大部分服务器）。然后创建它创建Cnew配置条目并且将它提交到使用新配置的大部分机器上。这样就不存在Cold和Cnew能够分别同时做出决定的时刻。</p>
<p>集群配置在复制日志中用特殊的日志条目来存储和通信；图-11 展示了配置变更的过程。当一个领导人接收到一个改变配置 Cold 为 Cnew 的请求，它会为了共同一致以前面描述的日志条目和副本的形式将配置存储起来（图中的 Cold,new）。一旦一个服务器将新的配置日志条目增加到它的日志中，它就会用这个配置来做出未来所有的决定（服务器总是使用最新的配置，无论它是否已经被提交）。这意味着领导人要使用 Cold,new 的规则来决定日志条目 Cold,new 什么时候需要被提交。如果领导人崩溃了，被选出来的新领导人可能是使用 Cold 配置也可能是 Cold,new 配置，这取决于赢得选举的候选人是否已经接收到了 Cold,new 配置。在任何情况下， Cnew 配置在这一时期都不会单方面的做出决定。</p>
<p>一旦 Cold,new 被提交，那么无论是 Cold 还是 Cnew，在没有经过他人批准的情况下都不可能做出决定，并且领导人完全特性（Leader Completeness Property）保证了只有拥有 Cold,new 日志条目的服务器才有可能被选举为领导人。这个时候，领导人创建一条关于 Cnew 配置的日志条目并复制给集群就是安全的了。另外，每个服务器在收到新的配置的时候就会立即生效。当新的配置在 Cnew 的规则下被提交，旧的配置就变得无关紧要，同时不使用新的配置的服务器就可以被关闭了。如 图-11，Cold 和 Cnew 没有任何机会同时做出单方面的决定；这就保证了安全性。</p>
<p>针对重新配置提出了三个问题。第一个问题是一开始的时候新的服务器可能没有任何日志条目。如果它们在这个状态下加入到集群中，那么它们需要一段时间来更新追赶，在这个阶段它们还不能提交新的日志条目。为了避免这种可用性的间隔时间，Raft 在配置更新的时候使用了一种额外的阶段，在这个阶段，新的服务器以没有投票权的身份加入到集群中来（领导人复制日志给他们，但是不把它们考虑到大多数中）。一旦新的服务器追赶上了集群中的其它机器，重新配置可以像上面描述的一样处理。</p>
<p>第二个问题是，集群的领导人可能不是新配置的一员。在这种情况下，领导人就会在提交了 Cnew 日志之后退位（回到跟随者状态）。这意味着有这样的一段时间，领导人管理着集群，但是不包括自己；它复制日志但是不把它自己看作是大多数之一。当 Cnew 被提交时，会发生领导人过渡，因为这时是新的配置可以独立工作的最早的时间点（总是能够在 Cnew 配置下选出新的领导人）。在此之前，可能只能从 Cold 中选出领导人。</p>
<p>第三个问题是，移除不在 Cnew 中的服务器可能会扰乱集群。这些服务器将不会再接收到心跳（heartbeat），所以当选举超时时，它们就会进行新的选举过程。它们会发送带有新的任期号的 RequestVote RPC，这样会导致当前的领导人回退成跟随者状态。新的领导人最终会被选出来，但是被移除的服务器将会再次超时，然后这个过程会再次重复，导致整体可用性大幅降低。</p>
<p>为了避免这个问题，当服务器确认当前领导人存在时，服务器会忽略 RequestVote RPC。特别的，当服务器在当前最小选举超时时间内收到一个 RequestVote RPC，它不会更新当前的任期号或者投出选票。这不会影响正常的选举，每个服务器在开始一次选举之前，至少等待一个最小选举超时时间。然而，这有利于避免被移除的服务器扰乱：如果领导人能够发送心跳给集群，那么它就不会被更大的任期号废除。</p>
<h3 id="日志压缩"><a href="#日志压缩" class="headerlink" title="日志压缩"></a>日志压缩</h3><p>Raft 产生的日志在持续的正常操作中不断增长，但是在实际的系统中，它不会无限的增长下去。随着日志的不断增长，它会占据越来越多的空间并且花费更多的时间重置。如果没有一个机制使得它能够废弃在日志中不断累积的过时的信息就会引起可用性问题。</p>
<p>快照（snapshot）是最简单的压缩方式。在快照中，全部的当前系统状态都被写入到快照中，存储到持久化的存储中，然后在那个时刻之前的全部日志都可以被丢弃。在 Chubby 和 ZooKeeper 中都使用了快照技术，这一章的剩下的部分会介绍 Raft 中使用的快照技术。</p>
<p>增量压缩（incremental approaches）的方法，例如日志清理（log cleaning）或者日志结构合并树（log-structured merge trees），都是可行的。这些方法每次只对一小部分数据进行操作，这样就分散了压缩的负载压力。首先，他们先选择一个已经积累的大量已经被删除或者被覆盖对象的区域，然后重写那个区域还活跃的对象，之后释放那个区域。和简单操作整个数据集合的快照相比，需要增加复杂的机制来实现。状态机可以使用和快照相同的接口来实现 LSM tree ，但是日志清除方法就需要修改 Raft 了。</p>
<p><img src="http://wx1.sinaimg.cn/mw690/0065glrAgy1ffuf7bia1bj30g70aeabe.jpg" alt="Alt text" title="图-12"><br>图-12：一个服务器用新的快照替换了从 1 到 5 的条目，快照值存储了当前的状态。快照中包含了最后的索引位置和任期号。<br>图-12 展示了 Raft 中快照的基础思想。每个服务器独立的创建快照，只包括已经被提交的日志。主要的工作包括将状态机的状态写入到快照中。Raft 也将一些少量的元数据包含到快照中：最后被包含的索引（last included index）指的是被快照取代的最后的条目在日志中的索引值（状态机最后应用的日志），最后被包含的任期（last included term）指的是该条目的任期号。保留这些数据是为了支持快照前的第一个条目的附加日志请求时的一致性检查，因为这个条目需要最后的索引值和任期号。为了支持集群成员更新（第 6 章），快照中也将最后的一次配置作为最后一个条目存下来。一旦服务器完成一次快照，他就可以删除最后索引位置之前的所有日志和快照了。</p>
<p>尽管通常服务器都是独立的创建快照，但是领导人必须偶尔的发送快照给一些落后的跟随者。这通常发生在当领导人已经丢弃了下一条需要发送给跟随者的日志条目的时候。幸运的是这种情况不是常规操作：一个与领导人保持同步的跟随者通常都会有这个条目。然而一个运行非常缓慢的跟随者或者新加入集群的服务器（第 6 章）将不会有这个条目。这时让这个跟随者更新到最新的状态的方式就是通过网络把快照发送给它们。</p>
<ul>
<li>安装快照 RPC（InstallSnapshot RPC）</li>
</ul>
<p>在领导人发送快照给跟随者时使用调用。领导人总是按顺序发送。</p>
<table>
<thead>
<tr>
<th align="center">参数</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">term</td>
<td align="left">领导人的任期</td>
</tr>
<tr>
<td align="center">leaderId</td>
<td align="left">为了追随者能重定向到客户端</td>
</tr>
<tr>
<td align="center">lastIncludedIndex</td>
<td align="left">快照中包含的最后日志条目的索引值</td>
</tr>
<tr>
<td align="center">offset</td>
<td align="left">分块在快照中的偏移量</td>
</tr>
<tr>
<td align="center">data[]</td>
<td align="left">快照块的原始数据</td>
</tr>
<tr>
<td align="center">done</td>
<td align="left">如果是最后一块数据则为真</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="center">返回值</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">term</td>
<td align="left">currentTerm，用于领导人更新自己</td>
</tr>
</tbody></table>
<p><strong>接受者需要实现</strong>：</p>
<ul>
<li>如果term &lt; currentTerm立刻回复</li>
<li>如果是第一个分块（offset 为 0）则创建新的快照</li>
<li>在指定的偏移量写入数据</li>
<li>如果 done为 false，则回复并继续等待之后的数据</li>
<li>保存快照文件，丢弃所有存在的或者部分有着更小索引号的快照</li>
<li>如果现存的日志拥有相同的最后任期号和索引值，则后面的数据继续保留并且回复</li>
<li>丢弃全部日志</li>
<li>能够使用快照来恢复状态机（并且装载快照中的集群配置）</li>
</ul>
<p>在这种情况下领导人使用一种叫做安装快照（InstallSnapshot）的新的 RPC 来发送快照给太落后的跟随者；见 表-13。当跟随者通过这种 RPC 接收到快照时，它必须自己决定对于已经存在的日志该如何处理。通常快照会包含没有在接收者日志中存在的信息。在这种情况下，跟随者直接丢弃它所有的日志；这些会被快照所取代，但是可能会和没有提交的日志产生冲突。如果接收到的快照是自己日志的前面部分（由于网络重传或者错误），那么被快照包含的条目将会被全部删除，但是快照之后的条目必须是正确的和并且被保留下来。</p>
<p>这种快照的方式背离了 Raft 的强领导人原则（strong leader principle），因为跟随者可以在不知道领导人情况下创建快照。但是我们认为这种背离是值得的。领导人的存在，是为了解决在达成一致性的时候的冲突，但是在创建快照的时候，一致性已经达成，这时不存在冲突了，所以没有领导人也是可以的。数据依然是从领导人传给跟随者，只是跟随者可以重新组织它们的数据了。</p>
<p>我们考虑过一种替代的基于领导人的快照方案，即只有领导人创建快照，然后发送给所有的跟随者。但是这样做有两个缺点。第一，发送快照会浪费网络带宽并且延缓了快照处理的时间。每个跟随者都已经拥有了所有产生快照需要的信息，而且很显然，自己从本地的状态中创建快照比通过网络接收别人发来的要经济。第二，领导人的实现会更加复杂。例如，领导人需要发送快照的同时并行的将新的日志条目发送给跟随者，这样才不会阻塞新的客户端请求。</p>
<p>还有两个问题影响了快照的性能。首先，服务器必须决定什么时候应该创建快照。如果快照创建的过于频繁，那么就会浪费大量的磁盘带宽和其他资源；如果创建快照频率太低，它就要承受耗尽存储容量的风险，同时也增加了从日志重建的时间。一个简单的策略就是当日志大小达到一个固定大小的时候就创建一次快照。如果这个阈值设置的显著大于期望的快照的大小，那么快照对磁盘压力的影响就会很小了。</p>
<p>第二个影响性能的问题就是写入快照需要花费显著的一段时间，并且我们还不希望影响到正常操作。解决方案是通过写时复制（copy-on-write）的技术，这样新的更新就可以被接收而不影响到快照。例如，具有函数式数据结构的状态机天然支持这样的功能。另外，操作系统的写时复制技术的支持（如 Linux 上的 fork）可以被用来创建完整的状态机的内存快照（我们的实现就是这样的）。</p>
<h3 id="客户端交互"><a href="#客户端交互" class="headerlink" title="客户端交互"></a>客户端交互</h3><p>这一节将介绍客户端是如何和 Raft 进行交互的，包括客户端是如何发现领导人的和 Raft 是如何支持线性化语义（linearizable semantics）的。这些问题对于所有基于一致性的系统都存在，并且 Raft 的解决方案和其他的也差不多。</p>
<p>Raft 中的客户端将所有请求发送给领导人。当客户端启动的时候，它会随机挑选一个服务器进行通信。如果客户端第一次挑选的服务器不是领导人，那么那个服务器会拒绝客户端的请求并且提供它最近接收到的领导人的信息（附加条目请求包含了领导人的网络地址）。如果领导人已经崩溃了，那么客户端的请求就会超时；客户端之后会再次重试随机挑选服务器的过程。</p>
<p>我们 Raft 的目标是要实现线性化语义（linearizable semantics）（每一次操作立即执行，在它调用和收到回复之间只执行一次）。但是，如上述所说，Raft 是可以多次执行同一条命令的：例如，如果领导人在提交了这条日志之后，但是在响应客户端之前崩溃了，那么客户端会和新的领导人重试这条指令，导致这条命令就被再次执行了。解决方案就是客户端对于每一条指令都赋予一个唯一的序列号。然后，状态机跟踪每条指令最新的序列号和相应的响应。如果接收到一条指令，它的序列号已经被执行了，那么就立即返回结果，而不重新执行指令。</p>
<p>只读（read-only）的操作可以直接处理而不需要记录日志。但是，在不增加任何限制的情况下，这么做可能会冒着返回过期数据(stale data)的风险，因为领导人响应客户端请求时可能已经被新的领导人作废了，但是它还不知道。线性化的读操作必须不能返回过期数据，Raft 需要使用两个额外的措施在不使用日志的情况下保证这一点。首先，领导人必须有关于被提交日志的最新信息。领导人完全原则（Leader Completeness Property）保证了领导人一定拥有所有已经被提交的日志条目，但是在它任期开始的时候，它可能不知道哪些是已经被提交的。为了知道这些信息，它需要在它的任期里提交一条日志条目。Raft 中通过领导人在任期开始的时候提交一个空白的没有任何操作的日志条目到日志中去来进行实现。第二，领导人在处理只读的请求之前必须检查自己是否已经被废除了（如果一个更新的领导人被选举出来，它自己的信息就已经过期了）。Raft 中通过让领导人在响应只读请求之前，先和集群中的大多数节点交换一次心跳（heartbeat）信息来处理这个问题。另外，领导人可以依赖心跳机制来实现一种租约的机制，但是这种方法依赖时序来保证安全性（它假设时间误差是有界的）。</p>
<h3 id="实现和评价"><a href="#实现和评价" class="headerlink" title="实现和评价"></a>实现和评价</h3><p>我们已经为 RAMCloud 实现了 Raft 算法作为存储配置信息的复制状态机的一部分，并且帮助 RAMCloud 协调故障转移。这个 Raft 实现包含大约 2000 行 C++ 代码，其中不包括测试、注释和空行。这些代码是开源的。同时也有大约 25 个其他独立的第三方的基于这篇论文草稿的开源实现，针对不同的开发场景。同时，很多公司已经部署了基于 Raft 的系统。</p>
<p>这一章会从三个方面来评估 Raft 算法：可理解性、正确性和性能。</p>
<h3 id="相关工作"><a href="#相关工作" class="headerlink" title="相关工作"></a>相关工作</h3><p>已经有很多关于一致性算法的工作被发表出来，其中很多都可以归到下面的类别中：</p>
<ul>
<li>Lamport 关于 Paxos 的原始描述，和尝试描述的更清晰的论文。</li>
<li>关于 Paxos 的更详尽的描述，补充遗漏的细节并修改算法，使得可以提供更加容易的实现基础。</li>
<li>实现一致性算法的系统，例如 Chubby，ZooKeeper 和 Spanner。对于 Chubby 和 Spanner 的算法并没有公开发表其技术细节，尽管他们都声称是基于 Paxos 的。ZooKeeper 的算法细节已经发表，但是和 Paxos 有着很大的差别。</li>
<li>Paxos 可以应用的性能优化。</li>
<li>Oki 和 Liskov 的 Viewstamped Replication（VR），一种和 Paxos 差不多的替代算法。原始的算法描述和分布式传输协议耦合在了一起，但是核心的一致性算法在最近的更新里被分离了出来。VR 使用了一种基于领导人的方法，和 Raft 有很多相似之处。</li>
</ul>
<p>Raft 和 Paxos 最大的不同之处就在于 Raft 的强领导特性：Raft 使用领导人选举作为一致性协议里必不可少的部分，并且将尽可能多的功能集中到了领导人身上。这样就可以使得算法更加容易理解。例如，在 Paxos 中，领导人选举和基本的一致性协议是正交的：领导人选举仅仅是性能优化的手段，而且不是一致性所必须要求的。但是，这样就增加了多余的机制：Paxos 同时包含了针对基本一致性要求的两阶段提交协议和针对领导人选举的独立的机制。相比较而言，Raft 就直接将领导人选举纳入到一致性算法中，并作为两阶段一致性的第一步。这样就减少了很多机制。</p>
<p>像 Raft 一样，VR 和 ZooKeeper 也是基于领导人的，因此他们也拥有一些 Raft 的优点。但是，Raft 比 VR 和 ZooKeeper 拥有更少的机制因为 Raft 尽可能的减少了非领导人的功能。例如，Raft 中日志条目都遵循着从领导人发送给其他人这一个方向：附加条目 RPC 是向外发送的。在 VR 中，日志条目的流动是双向的（领导人可以在选举过程中接收日志）；这就导致了额外的机制和复杂性。根据 ZooKeeper 公开的资料看，它的日志条目也是双向传输的，但是它的实现更像 Raft。</p>
<p>和上述我们提及的其他基于一致性的日志复制算法中，Raft 的消息类型更少。例如，我们数了一下 VR 和 ZooKeeper 使用的用来基本一致性需要和成员改变的消息数（排除了日志压缩和客户端交互，因为这些都比较独立且和算法关系不大）。VR 和 ZooKeeper 都分别定义了 10 中不同的消息类型，相对的，Raft 只有 4 中消息类型（两种 RPC 请求和对应的响应）。Raft 的消息都稍微比其他算法的要信息量大，但是都很简单。另外，VR 和 ZooKeeper 都在领导人改变时传输了整个日志；所以为了能够实践中使用，额外的消息类型就很必要了。</p>
<p>Raft 的强领导人模型简化了整个算法，但是同时也排斥了一些性能优化的方法。例如，平等主义 Paxos （EPaxos）在某些没有领导人的情况下可以达到很高的性能。平等主义 Paxos 充分发挥了在状态机指令中的交换性。任何服务器都可以在一轮通信下就提交指令，除非其他指令同时被提出了。然而，如果指令都是并发的被提出，并且互相之间不通信沟通，那么 EPaxos 就需要额外的一轮通信。因为任何服务器都可以提交指令，所以 EPaxos 在服务器之间的负载均衡做的很好，并且很容易在 WAN 网络环境下获得很低的延迟。但是，他在 Paxos 上增加了非常明显的复杂性。</p>
<p>一些集群成员变换的方法已经被提出或者在其他的工作中被实现，包括 Lamport 的原始的讨论，VR 和 SMART。我们选择使用共同一致（joint consensus）的方法因为它对一致性协议的其他部分影响很小，这样我们只需要很少的一些机制就可以实现成员变换。Raft 没有采用 Lamport 的基于 α 的方法是因为它假设在没有领导人的情况下也可以达到一致性。和 VR 和 SMART 相比较，Raft 的重新配置算法可以在不限制正常请求处理的情况下进行；相比较而言，VR 需要停止所有的处理过程，SMART 引入了一个和 α 类似的方法，限制了请求处理的数量。和 VR、SMART 比较而言，Raft 的方法同时需要更少的额外机制来实现。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>算法的设计通常会把正确性，效率或者简洁作为主要的目标。尽管这些都是很有意义的目标，但是我们相信，可理解性也是一样的重要。在开发者把算法应用到实际的系统中之前，这些目标没有一个会被实现，这些都会必然的偏离发表时的形式。除非开发人员对这个算法有着很深的理解并且有着直观的感觉，否则将会对他们而言很难在实现的时候保持原有期望的特性。</p>
<p>在这篇论文中，我们尝试解决分布式一致性问题，但是一个广为接受但是十分令人费解的算法 Paxos 已经困扰了无数学生和开发者很多年了。我们创造了一种新的算法 Raft，显而易见的比 Paxos 要容易理解。我们同时也相信，Raft 也可以为实际的实现提供坚实的基础。把可理解性作为设计的目标改变了我们设计 Raft 的方式；这个过程是我们发现我们最终很少有技术上的重复，例如问题分解和简化状态空间。这些技术不仅提升了 Raft 的可理解性，同时也使我们坚信其正确性。</p>
<p>本文的版权归作者 罗远航 所有，采用 Attribution-NonCommercial 3.0 License。任何人可以进行转载、分享，但不可在未经允许的情况下用于商业用途；转载请注明出处。感谢配合！</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>分布式</tag>
        <tag>raft</tag>
        <tag>算法</tag>
      </tags>
  </entry>
</search>

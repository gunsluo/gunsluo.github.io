<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jerrylou&#39;s Notes</title>
  
  <subtitle>labor for reward</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.jerrylou.me/"/>
  <updated>2018-05-26T16:33:03.789Z</updated>
  <id>http://www.jerrylou.me/</id>
  
  <author>
    <name>luoji</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Jitsi开源Web视频会议安装</title>
    <link href="http://www.jerrylou.me/jitsi/jitsi-install-20180426.html"/>
    <id>http://www.jerrylou.me/jitsi/jitsi-install-20180426.html</id>
    <published>2018-04-26T12:57:00.000Z</published>
    <updated>2018-05-26T16:33:03.789Z</updated>
    
    <content type="html"><![CDATA[<p>Jitsi是安全、简单和可伸缩的视频会议，您可以作为一个独立的应用程序或嵌入到您的web应用程序中。它是基于Prosody之上实现的，按照官方文档安装会出现一些问题，经过一些实验成功安装，并记录下安装步骤。</p><a id="more"></a><h3 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h3><ul><li>Env: ubuntu 18.04</li><li>User: root</li></ul><h3 id="安装Prosody"><a href="#安装Prosody" class="headerlink" title="安装Prosody"></a>安装Prosody</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> deb http://packages.prosody.im/debian $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list</span><br><span class="line">wget https://prosody.im/files/prosody-debian-packages.key -O- | sudo apt-key add -</span><br><span class="line">apt-get update</span><br><span class="line">apt-get install prosody</span><br></pre></td></tr></table></figure><p>配置<code>/etc/prosody/conf.d/meet.demo.com.cfg.lua</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">-- Plugins path gets uncommented during jitsi-meet-tokens package install - that<span class="string">'s where token plugin is located</span></span><br><span class="line"><span class="string">--plugin_paths = &#123; "/usr/share/jitsi-meet/prosody-plugins/" &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">VirtualHost "meet.demo.com"</span></span><br><span class="line"><span class="string">    authentication = "anonymous"</span></span><br><span class="line"><span class="string">    ssl = &#123;</span></span><br><span class="line"><span class="string">        key = "/var/lib/prosody/meet.demo.com.key";</span></span><br><span class="line"><span class="string">        certificate = "/var/lib/prosody/meet.demo.com.crt";</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    modules_enabled = &#123;</span></span><br><span class="line"><span class="string">        "bosh";</span></span><br><span class="line"><span class="string">        "pubsub";</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    c2s_require_encryption = false</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">VirtualHost "auth.meet.demo.com"</span></span><br><span class="line"><span class="string">    ssl = &#123;</span></span><br><span class="line"><span class="string">        key = "/var/lib/prosody/auth.meet.demo.com.key";</span></span><br><span class="line"><span class="string">        certificate = "/var/lib/prosody/auth.meet.demo.com.crt";</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    authentication = "internal_plain"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">admins = &#123; "focus@auth.meet.demo.com" &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Component "conference.meet.demo.com" "muc"</span></span><br><span class="line"><span class="string">Component "jitsi-videobridge.meet.demo.com"</span></span><br><span class="line"><span class="string">    component_secret = "password1"</span></span><br><span class="line"><span class="string">Component "focus.meet.demo.com"</span></span><br><span class="line"><span class="string">    component_secret = "password2"</span></span><br></pre></td></tr></table></figure><p>证书生成</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">prosodyctl cert generate meet.demo.com</span><br><span class="line">prosodyctl cert generate auth.meet.demo.com</span><br><span class="line">output: /var/lib/prosody/</span><br><span class="line"></span><br><span class="line">ln -sf /var/lib/prosody/auth.meet.demo.com.crt /usr/<span class="built_in">local</span>/share/ca-certificates/auth.meet.demo.com.crt</span><br><span class="line">update-ca-certificates -f</span><br></pre></td></tr></table></figure><p>注册用户</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">prosodyctl register focus auth.meet.demo.com password3</span><br></pre></td></tr></table></figure><p>重启服务<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">prosodyctl restart</span><br></pre></td></tr></table></figure></p><h3 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install nginx</span><br></pre></td></tr></table></figure><p>配置<code>/etc/nginx/sites-enabled/meet.demo.com</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name meet.demo.com;</span><br><span class="line">    <span class="built_in">return</span> 301 https://<span class="variable">$host</span><span class="variable">$request_uri</span>;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    listen 443 ssl;</span><br><span class="line">    server_name meet.demo.com;</span><br><span class="line"></span><br><span class="line">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">    ssl_prefer_server_ciphers on;</span><br><span class="line">    ssl_ciphers <span class="string">"EECDH+ECDSA+AESGCM:EECDH+aRSA+AESGCM:EECDH+ECDSA+SHA256:EECDH+aRSA+SHA256:EECDH+ECDSA+SHA384:EECDH+ECDSA+SHA256:EECDH+aRSA+SHA384:EDH+aRSA+AESGCM:EDH+aRSA+SHA256:EDH+aRSA:EECDH:!aNULL:!eNULL:!MEDIUM:!LOW:!3DES:!MD5:!EXP:!PSK:!SRP:!DSS:!RC4:!SEED"</span>;</span><br><span class="line"></span><br><span class="line">    ssl_certificate /var/lib/prosody/meet.demo.com.crt;</span><br><span class="line">    ssl_certificate_key /var/lib/prosody/meet.demo.com.key;</span><br><span class="line"></span><br><span class="line">    root /var/www/jitsi-meet;</span><br><span class="line">    index index.html index.htm;</span><br><span class="line">    <span class="comment"># error_page 404 /static/404.html;</span></span><br><span class="line"></span><br><span class="line">    location ~ ^/([a-zA-Z0-9=\?]+)$ &#123;</span><br><span class="line">        rewrite ^/(.*)$ / <span class="built_in">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        ssi on;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># BOSH</span></span><br><span class="line">    location /http-bind &#123;</span><br><span class="line">        proxy_pass      http://localhost:5280/http-bind;</span><br><span class="line">        proxy_set_header X-Forwarded-For <span class="variable">$remote_addr</span>;</span><br><span class="line">        proxy_set_header Host <span class="variable">$http_host</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重启服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nginx -t</span><br><span class="line"></span><br><span class="line">systemctl restart nginx</span><br></pre></td></tr></table></figure><h3 id="安装Jitsi-Videobridge"><a href="#安装Jitsi-Videobridge" class="headerlink" title="安装Jitsi Videobridge"></a>安装Jitsi Videobridge</h3><p>下载jdk1.8(jdk-8u171-linux-x64.tar.gz)，<strong>不能使用openjdk和default-jre</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /usr/share/jdk</span><br><span class="line"><span class="built_in">cd</span> /usr/share/jdk</span><br><span class="line">tar zxvf jdk-8u171-linux-x64.tar.gz</span><br><span class="line"></span><br><span class="line">vi ~/.bashrc</span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/share/jdk/jdk1.8.0_171</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"></span><br><span class="line">java -version</span><br></pre></td></tr></table></figure></p><p>下载Jitsi Videobridge</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /root/jitsi</span><br><span class="line"><span class="built_in">cd</span> /root/jitsi</span><br><span class="line">wget https://download.jitsi.org/jitsi-videobridge/linux/jitsi-videobridge-linux-x64-1055.zip</span><br><span class="line">unzip jitsi-videobridge-linux-x64-1055.zip</span><br><span class="line">mv jitsi-videobridge-linux-x64-1055 videobridge</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> videobridge</span><br></pre></td></tr></table></figure><p>配置Jitsi Videobridge</p><p>添加启动脚本<code>start.sh</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> JAVA_SYS_PROPS=<span class="string">"-Dnet.java.sip.communicator.SC_HOME_DIR_LOCATION=/etc/jitsi -Dnet.java.sip.communicator.SC_HOME_DIR_NAME=videobridge -Dnet.java.sip.communicator.SC_LOG_DIR_LOCATION=/var/log/jitsi/videobridge -Djava.util.logging.config.file=/etc/jitsi/videobridge/logging.properties -Dlog4j.configurationFile=/etc/jitsi/videobridge/log4j2.xml"</span></span><br><span class="line"></span><br><span class="line">./jvb.sh --host=localhost --domain=meet.demo.com --port=5347 --secret=password1 &amp;</span><br><span class="line"></span><br><span class="line"><span class="built_in">unset</span> JAVA_SYS_PROPS</span><br><span class="line"></span><br><span class="line">chmod +x start.sh</span><br></pre></td></tr></table></figure><p>配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /etc/jitsi/videobridge</span><br><span class="line"><span class="built_in">cd</span> /etc/jitsi/videobridge</span><br></pre></td></tr></table></figure><p>添加logging.properties 到 /etc/jitsi/videobridge<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">handlers= java.util.logging.FileHandler</span><br><span class="line"><span class="comment">#handlers= java.util.logging.ConsoleHandler</span></span><br><span class="line"><span class="comment">#handlers= java.util.logging.ConsoleHandler, com.agafua.syslog.SyslogHandler</span></span><br><span class="line"></span><br><span class="line">java.util.logging.ConsoleHandler.level = ALL</span><br><span class="line">java.util.logging.ConsoleHandler.formatter = net.java.sip.communicator.util.ScLogFormatter</span><br><span class="line"></span><br><span class="line">net.java.sip.communicator.util.ScLogFormatter.programname=JVB</span><br><span class="line"></span><br><span class="line">.level=INFO</span><br><span class="line"></span><br><span class="line">org.jitsi.videobridge.xmpp.ComponentImpl.level=FINE</span><br><span class="line"></span><br><span class="line"><span class="comment"># All of the INFO level logs from MediaStreamImpl are unnecessary in the context of jitsi-videobridge.</span></span><br><span class="line">org.jitsi.impl.neomedia.MediaStreamImpl.level=WARNING</span><br><span class="line"></span><br><span class="line"><span class="comment"># Syslog(uncomment handler to use)</span></span><br><span class="line">com.agafua.syslog.SyslogHandler.transport = udp</span><br><span class="line">com.agafua.syslog.SyslogHandler.facility = local0</span><br><span class="line">com.agafua.syslog.SyslogHandler.port = 514</span><br><span class="line">com.agafua.syslog.SyslogHandler.hostname = localhost</span><br><span class="line">com.agafua.syslog.SyslogHandler.formatter = net.java.sip.communicator.util.ScLogFormatter</span><br><span class="line">com.agafua.syslog.SyslogHandler.escapeNewlines = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># to disable double timestamps in syslog uncomment next line</span></span><br><span class="line"><span class="comment">#net.java.sip.communicator.util.ScLogFormatter.disableTimestamp=true</span></span><br><span class="line"></span><br><span class="line">java.util.logging.FileHandler.level = ALL</span><br><span class="line">java.util.logging.FileHandler.formatter = java.util.logging.SimpleFormatter</span><br><span class="line">java.util.logging.FileHandler.limit=1024000</span><br><span class="line">java.util.logging.FileHandler.count=10</span><br><span class="line">java.util.logging.FileHandler.pattern=/var/<span class="built_in">log</span>/jitsi/videobridge/jvb%u.log</span><br><span class="line">java.util.logging.FileHandler.append=<span class="literal">true</span></span><br></pre></td></tr></table></figure></p><p>添加 log4j2.xml 到 /etc/jitsi/videobridge</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;Configuration&gt;</span><br><span class="line">    &lt;Properties&gt;</span><br><span class="line">        &lt;Property name=<span class="string">"log-path"</span>&gt;/var/<span class="built_in">log</span>/jitsi/videobridge&lt;/Property&gt;</span><br><span class="line">&lt;/Properties&gt;</span><br><span class="line">    &lt;Appenders&gt;</span><br><span class="line">        &lt;RollingFile name=<span class="string">"RollingFile"</span> fileName=<span class="string">"<span class="variable">$&#123;log-path&#125;</span>/cs.log"</span></span><br><span class="line">                 filePattern=<span class="string">"<span class="variable">$&#123;log-path&#125;</span>/$<span class="variable">$&#123;date:yyyy-MM&#125;</span>/cs-%d&#123;MM-dd-yyyy&#125;-%i.log.gz"</span>&gt;</span><br><span class="line">&lt;PatternLayout pattern=<span class="string">"%d %-5p (%F:%L) - %m%n"</span>/&gt;</span><br><span class="line">      &lt;Policies&gt;</span><br><span class="line">        &lt;TimeBasedTriggeringPolicy /&gt;</span><br><span class="line">        &lt;SizeBasedTriggeringPolicy size=<span class="string">"250 MB"</span>/&gt;</span><br><span class="line">      &lt;/Policies&gt;</span><br><span class="line">    &lt;/RollingFile&gt;</span><br><span class="line">    &lt;!--</span><br><span class="line">    &lt;Console name=<span class="string">"STDOUT"</span> target=<span class="string">"SYSTEM_OUT"</span>&gt;</span><br><span class="line">      &lt;PatternLayout pattern=<span class="string">"%d %-5p (%F:%L) - %m%n"</span>/&gt;</span><br><span class="line">    &lt;/Console&gt;</span><br><span class="line">     --&gt;</span><br><span class="line">    &lt;/Appenders&gt;</span><br><span class="line">    &lt;Loggers&gt;</span><br><span class="line">    &lt;!--&lt;Logger name=<span class="string">"org.apache.log4j.xml"</span> level=<span class="string">"debug"</span>/&gt;--&gt;</span><br><span class="line">    &lt;Logger name=<span class="string">"org.apache.log4j.xml"</span> level=<span class="string">"info"</span>/&gt;</span><br><span class="line">        &lt;Root level=<span class="string">"info"</span>&gt;</span><br><span class="line">            &lt;AppenderRef ref=<span class="string">"RollingFile"</span>/&gt;</span><br><span class="line">           &lt;!--  &lt;AppenderRef ref=<span class="string">"STDOUT"</span>/&gt;  --&gt;</span><br><span class="line">        &lt;/Root&gt;</span><br><span class="line">    &lt;/Loggers&gt;</span><br><span class="line">&lt;/Configuration&gt;</span><br></pre></td></tr></table></figure><p>添加 sip-communicator.properties 到 /etc/jitsi/videobridge<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">org.jitsi.impl.neomedia.transform.srtp.SRTPCryptoContext.checkReplay=<span class="literal">false</span></span><br></pre></td></tr></table></figure></p><p>启动服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /var/<span class="built_in">log</span>/jitsi/videobridge</span><br><span class="line"><span class="built_in">cd</span> /root/jitsi/videobridge</span><br><span class="line">./start.sh</span><br></pre></td></tr></table></figure><h3 id="安装Jitsi-Jicofo"><a href="#安装Jitsi-Jicofo" class="headerlink" title="安装Jitsi Jicofo"></a>安装Jitsi Jicofo</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">apt-get install  maven</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /root/jitsi</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/jitsi/jicofo.git</span><br><span class="line"><span class="built_in">cd</span> jicofo</span><br><span class="line">mvn package -DskipTests -Dassembly.skipAssembly=<span class="literal">false</span></span><br><span class="line">unzip target/jicofo-linux-x64-1.1-SNAPSHOT.zip</span><br></pre></td></tr></table></figure><p>配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /etc/jitsi/jicofo</span><br><span class="line"><span class="built_in">cd</span> /etc/jitsi/jicofo</span><br></pre></td></tr></table></figure><p>添加 logging.properties 到 /etc/jitsi/jicofo</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">handlers= java.util.logging.FileHandler</span><br><span class="line"><span class="comment">#handlers= java.util.logging.ConsoleHandler</span></span><br><span class="line"><span class="comment">#handlers= java.util.logging.ConsoleHandler, com.agafua.syslog.SyslogHandler</span></span><br><span class="line"></span><br><span class="line">java.util.logging.ConsoleHandler.level = ALL</span><br><span class="line">java.util.logging.ConsoleHandler.formatter = net.java.sip.communicator.util.ScLogFormatter</span><br><span class="line"></span><br><span class="line">net.java.sip.communicator.util.ScLogFormatter.programname=Jicofo</span><br><span class="line"></span><br><span class="line">.level=INFO</span><br><span class="line">net.sf.level=SEVERE</span><br><span class="line">net.java.sip.communicator.plugin.reconnectplugin.level=FINE</span><br><span class="line">org.ice4j.level=SEVERE</span><br><span class="line">org.jitsi.impl.neomedia.level=SEVERE</span><br><span class="line"></span><br><span class="line"><span class="comment"># Do not worry about missing strings</span></span><br><span class="line">net.java.sip.communicator.service.resources.AbstractResourcesService.level=SEVERE</span><br><span class="line"></span><br><span class="line"><span class="comment">#net.java.sip.communicator.service.protocol.level=ALL</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Enable debug packets logging</span></span><br><span class="line"><span class="comment">#org.jitsi.impl.protocol.xmpp.level=FINE</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Syslog(uncomment handler to use)</span></span><br><span class="line">com.agafua.syslog.SyslogHandler.transport = udp</span><br><span class="line">com.agafua.syslog.SyslogHandler.facility = local0</span><br><span class="line">com.agafua.syslog.SyslogHandler.port = 514</span><br><span class="line">com.agafua.syslog.SyslogHandler.hostname = localhost</span><br><span class="line">com.agafua.syslog.SyslogHandler.formatter = net.java.sip.communicator.util.ScLogFormatter</span><br><span class="line">com.agafua.syslog.SyslogHandler.escapeNewlines = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># to disable double timestamps in syslog uncomment next line</span></span><br><span class="line"><span class="comment">#net.java.sip.communicator.util.ScLogFormatter.disableTimestamp=true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># uncomment to see how Jicofo talks to the JVB</span></span><br><span class="line"><span class="comment">#org.jitsi.impl.protocol.xmpp.colibri.level=ALL</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">java.util.logging.FileHandler.level = ALL</span><br><span class="line">java.util.logging.FileHandler.formatter = java.util.logging.SimpleFormatter</span><br><span class="line">java.util.logging.FileHandler.limit=1024000</span><br><span class="line">java.util.logging.FileHandler.count=10</span><br><span class="line">java.util.logging.FileHandler.pattern=/var/<span class="built_in">log</span>/jitsi/jicofo/jicofo%u.log</span><br><span class="line">java.util.logging.FileHandler.append=<span class="literal">true</span></span><br></pre></td></tr></table></figure><p>添加 log4j2.xml 到 /etc/jitsi/jicofo</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;Configuration&gt;</span><br><span class="line">    &lt;Properties&gt;</span><br><span class="line">        &lt;Property name=<span class="string">"log-path"</span>&gt;/var/<span class="built_in">log</span>/jitsi/jicofo&lt;/Property&gt;</span><br><span class="line">&lt;/Properties&gt;</span><br><span class="line">    &lt;Appenders&gt;</span><br><span class="line">        &lt;RollingFile name=<span class="string">"RollingFile"</span> fileName=<span class="string">"<span class="variable">$&#123;log-path&#125;</span>/cs.log"</span></span><br><span class="line">                 filePattern=<span class="string">"<span class="variable">$&#123;log-path&#125;</span>/$<span class="variable">$&#123;date:yyyy-MM&#125;</span>/cs-%d&#123;MM-dd-yyyy&#125;-%i.log.gz"</span>&gt;</span><br><span class="line">&lt;PatternLayout pattern=<span class="string">"%d %-5p (%F:%L) - %m%n"</span>/&gt;</span><br><span class="line">      &lt;Policies&gt;</span><br><span class="line">        &lt;TimeBasedTriggeringPolicy /&gt;</span><br><span class="line">        &lt;SizeBasedTriggeringPolicy size=<span class="string">"250 MB"</span>/&gt;</span><br><span class="line">      &lt;/Policies&gt;</span><br><span class="line">    &lt;/RollingFile&gt;</span><br><span class="line">    &lt;!--</span><br><span class="line">    &lt;Console name=<span class="string">"STDOUT"</span> target=<span class="string">"SYSTEM_OUT"</span>&gt;</span><br><span class="line">      &lt;PatternLayout pattern=<span class="string">"%d %-5p (%F:%L) - %m%n"</span>/&gt;</span><br><span class="line">    &lt;/Console&gt;</span><br><span class="line">     --&gt;</span><br><span class="line">    &lt;/Appenders&gt;</span><br><span class="line">    &lt;Loggers&gt;</span><br><span class="line">    &lt;!--&lt;Logger name=<span class="string">"org.apache.log4j.xml"</span> level=<span class="string">"debug"</span>/&gt;--&gt;</span><br><span class="line">    &lt;Logger name=<span class="string">"org.apache.log4j.xml"</span> level=<span class="string">"info"</span>/&gt;</span><br><span class="line">        &lt;Root level=<span class="string">"info"</span>&gt;</span><br><span class="line">            &lt;AppenderRef ref=<span class="string">"RollingFile"</span>/&gt;</span><br><span class="line">           &lt;!--  &lt;AppenderRef ref=<span class="string">"STDOUT"</span>/&gt;  --&gt;</span><br><span class="line">        &lt;/Root&gt;</span><br><span class="line">    &lt;/Loggers&gt;</span><br><span class="line">&lt;/Configuration&gt;</span><br></pre></td></tr></table></figure><p>添加 sip-communicator.properties 到 /etc/jitsi/jicofo (empty file)</p><p>启动脚本<br>cd /root/jitsi/jicofo</p><p>添加 start.sh 到 /root/jitsi/jicofo</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># mvn package -DskipTests -Dassembly.skipAssembly=false</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> JAVA_SYS_PROPS=<span class="string">"-Dnet.java.sip.communicator.SC_HOME_DIR_LOCATION=/etc/jitsi -Dnet.java.sip.communicator.SC_HOME_DIR_NAME=jicofo -Dnet.java.sip.communicator.SC_LOG_DIR_LOCATION=/var/log/jitsi/jicofo -Djava.util.logging.config.file=/etc/jitsi/jicofo/logging.properties -Dlog4j.configurationFile=/etc/jitsi/jicofo/log4j2.xml"</span></span><br><span class="line"></span><br><span class="line">./jicofo-linux-x64-1.1-SNAPSHOT/jicofo.sh --host=localhost --domain=meet.demo.com --secret=password2 --user_domain=auth.meet.demo.com --user_name=focus --user_password=password3 &amp;</span><br><span class="line"></span><br><span class="line"><span class="built_in">unset</span> JAVA_SYS_PROPS</span><br></pre></td></tr></table></figure><p>启动服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">chmod +x start.sh</span><br><span class="line"></span><br><span class="line">mkdir -p /var/<span class="built_in">log</span>/jitsi/jicofo/</span><br><span class="line">./start.sh</span><br></pre></td></tr></table></figure><h3 id="安装Jitsi-Meet"><a href="#安装Jitsi-Meet" class="headerlink" title="安装Jitsi Meet"></a>安装Jitsi Meet</h3><p>编译</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /root/jitsi</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/jitsi/jitsi-meet.git</span><br><span class="line"></span><br><span class="line">npm install</span><br><span class="line"></span><br><span class="line">make</span><br></pre></td></tr></table></figure><p>配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cp -fr jitsi-meet /var/www/</span><br><span class="line"><span class="built_in">cd</span> /var/www/jitsi-meet</span><br></pre></td></tr></table></figure><p>修改config.js<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">var config = &#123;</span><br><span class="line">    hosts: &#123;</span><br><span class="line">        domain: <span class="string">'meet.demo.com'</span>,</span><br><span class="line">        muc: <span class="string">'conference.meet.demo.com'</span>,</span><br><span class="line">        bridge: <span class="string">'jitsi-videobridge.meet.demo.com'</span>,</span><br><span class="line">        focus: <span class="string">'focus.meet.demo.com'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    useNicks: <span class="literal">false</span>,</span><br><span class="line">    bosh: <span class="string">'//meet.demo.com/http-bind'</span>, // FIXME: use xep-0156 <span class="keyword">for</span> that</span><br><span class="line">    //chromeExtensionId: <span class="string">'diibjkoicjeejcmhdnailmkgecihlobk'</span>, // Id of desktop streamer Chrome extension</span><br><span class="line">    //minChromeExtVersion: <span class="string">'0.1'</span> // Required version of Chrome extension</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">check /etc/nginx/sites-enabled/meet.demo.com root</span><br><span class="line">root /var/www/jitsi-meet;</span><br></pre></td></tr></table></figure></p><p>重启服务<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart nginx</span><br></pre></td></tr></table></figure></p><p>浏览器中输入：<a href="https://meet.demo.com/" target="_blank" rel="noopener">https://meet.demo.com/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Jitsi是安全、简单和可伸缩的视频会议，您可以作为一个独立的应用程序或嵌入到您的web应用程序中。它是基于Prosody之上实现的，按照官方文档安装会出现一些问题，经过一些实验成功安装，并记录下安装步骤。&lt;/p&gt;
    
    </summary>
    
      <category term="jitsi" scheme="http://www.jerrylou.me/categories/jitsi/"/>
    
    
      <category term="linux" scheme="http://www.jerrylou.me/tags/linux/"/>
    
      <category term="jitsi" scheme="http://www.jerrylou.me/tags/jitsi/"/>
    
      <category term="meet" scheme="http://www.jerrylou.me/tags/meet/"/>
    
      <category term="video" scheme="http://www.jerrylou.me/tags/video/"/>
    
      <category term="conferences" scheme="http://www.jerrylou.me/tags/conferences/"/>
    
      <category term="web" scheme="http://www.jerrylou.me/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>黑苹果hackintosh 安装macos high sierra系统</title>
    <link href="http://www.jerrylou.me/%E7%94%B5%E8%84%91%E7%A1%AC%E4%BB%B6/hackintosh-to-high-sierra-20180212.html"/>
    <id>http://www.jerrylou.me/电脑硬件/hackintosh-to-high-sierra-20180212.html</id>
    <published>2018-02-12T12:50:34.000Z</published>
    <updated>2018-05-26T11:07:53.172Z</updated>
    
    <content type="html"><![CDATA[<p>macos high sierra更新一段时间了，以前的hackintosh系统已经很久没有更新了，趁过年更新下系统。系统硬件参考：<a href="/电脑硬件/hackintosh-window-install-20130429.html">&lt;&lt;安装Mac Window10 双系统，为发烧而生&gt;&gt;</a></p><a id="more"></a><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><ul><li>mac电脑</li><li>下载Install macOS High Sierra</li><li>16G U盘</li><li>下载uniBeast、MultiBeast、clover configurator软件</li><li>下载显卡驱动WebDriver-387.10.10.10.25.156(根据自己的显卡)</li></ul><p><img src="https://static.oschina.net/uploads/space/2018/0213/122106_defq_3724856.png" alt="Alt text"></p><h3 id="启动盘"><a href="#启动盘" class="headerlink" title="启动盘"></a>启动盘</h3><p>格式化U盘<br><img src="https://static.oschina.net/uploads/space/2018/0213/115111_17aS_3724856.png" alt="Alt text" title="format usb"></p><p>双击UniBeast并安装<br><img src="https://static.oschina.net/uploads/space/2018/0213/115255_ZexK_3724856.png" alt="Alt text"><br><img src="https://static.oschina.net/uploads/space/2018/0213/115317_EgnB_3724856.png" alt="Alt text"><br><img src="https://static.oschina.net/uploads/space/2018/0213/115334_m6Pu_3724856.png" alt="Alt text"><br><img src="https://static.oschina.net/uploads/space/2018/0213/115431_JH70_3724856.png" alt="Alt text"><br><img src="https://static.oschina.net/uploads/space/2018/0213/115414_p3Dy_3724856.png" alt="Alt text"><br><img src="https://static.oschina.net/uploads/space/2018/0213/115450_kB3n_3724856.png" alt="Alt text"><br><img src="https://static.oschina.net/uploads/space/2018/0213/115505_2OKd_3724856.png" alt="Alt text"><br><img src="https://static.oschina.net/uploads/space/2018/0213/115525_uikz_3724856.png" alt="Alt text"></p><p>将下载的软件拷贝到U盘<br><img src="https://static.oschina.net/uploads/space/2018/0213/115537_S3XO_3724856.png" alt="Alt text"><br><img src="https://static.oschina.net/uploads/space/2018/0213/115631_EFbs_3724856.png" alt="Alt text"></p><p>将U盘插入你的PC。</p><h3 id="Bios设置"><a href="#Bios设置" class="headerlink" title="Bios设置"></a>Bios设置</h3><ul><li>cpu支持VT-d，禁用它。</li><li>支持CFG-Lock，禁用它。</li><li>支持Secure Boot Mode，禁用它。</li><li>支持IO Serial Port，禁用它。</li><li>Set OS 类型 Other OS</li><li>Set XHCI Handoff 选项为Enable。</li><li>设置第一启动为U盘 （或者重启按F12选择启动项）</li></ul><p>保存并退出</p><h3 id="安装macOS"><a href="#安装macOS" class="headerlink" title="安装macOS"></a>安装macOS</h3><p>选择Boot OS X Install from Install macOS high Sierra<br><img src="https://static.oschina.net/uploads/space/2018/0213/121635_V7HG_3724856.png" alt="Alt text"><br>进入安装mac 系统，这里就不截图了，安装过程中可能会重启几次。</p><h3 id="系统补丁"><a href="#系统补丁" class="headerlink" title="系统补丁"></a>系统补丁</h3><p>使用MultiBeast安装补丁<br><img src="https://static.oschina.net/uploads/space/2018/0213/121655_R931_3724856.png" alt="Alt text"><br><img src="https://static.oschina.net/uploads/space/2018/0213/121711_R8X3_3724856.png" alt="Alt text"><br><img src="https://static.oschina.net/uploads/space/2018/0213/121727_H49N_3724856.png" alt="Alt text"><br><img src="https://static.oschina.net/uploads/space/2018/0213/121742_kjKG_3724856.png" alt="Alt text"><br><img src="https://static.oschina.net/uploads/space/2018/0213/121801_gtoK_3724856.png" alt="Alt text"><br><img src="https://static.oschina.net/uploads/space/2018/0213/121817_wkkb_3724856.png" alt="Alt text"><br><img src="https://static.oschina.net/uploads/space/2018/0213/121831_ghKL_3724856.png" alt="Alt text"></p><h3 id="显卡驱动"><a href="#显卡驱动" class="headerlink" title="显卡驱动"></a>显卡驱动</h3><p><img src="https://static.oschina.net/uploads/space/2018/0213/121846_p6JB_3724856.png" alt="Alt text"><br><img src="https://static.oschina.net/uploads/space/2018/0213/121917_AGvM_3724856.png" alt="Alt text"><br><img src="https://static.oschina.net/uploads/space/2018/0213/121932_w8JX_3724856.png" alt="Alt text"></p><h3 id="修复声卡"><a href="#修复声卡" class="headerlink" title="修复声卡"></a>修复声卡</h3><p>参看：<a href="https://hackintosher.com/guides/get-hackintosh-audio-working/" target="_blank" rel="noopener">https://hackintosher.com/guides/get-hackintosh-audio-working/</a></p><p>打开终端: <code>diskutil list</code> <code>diskutil mount /dev/disk0s1</code><br><img src="https://static.oschina.net/uploads/space/2018/0213/121948_lQLH_3724856.png" alt="Alt text"></p><p>拷贝kext到EFI-&gt;kexts-&gt;other目录下<br><img src="https://static.oschina.net/uploads/space/2018/0213/122006_IJJ4_3724856.png" alt="Alt text"></p><p>使用clover configurator配置<br><img src="https://static.oschina.net/uploads/space/2018/0213/122021_sxke_3724856.png" alt="Alt text"><br><img src="https://static.oschina.net/uploads/space/2018/0213/122038_U79e_3724856.png" alt="Alt text"></p><p>关闭clover configurator，保存config.plist. 然后重启电脑。ok，你可以听音乐了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;macos high sierra更新一段时间了，以前的hackintosh系统已经很久没有更新了，趁过年更新下系统。系统硬件参考：&lt;a href=&quot;/电脑硬件/hackintosh-window-install-20130429.html&quot;&gt;&amp;lt;&amp;lt;安装Mac Window10 双系统，为发烧而生&amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="电脑硬件" scheme="http://www.jerrylou.me/categories/%E7%94%B5%E8%84%91%E7%A1%AC%E4%BB%B6/"/>
    
    
      <category term="mac" scheme="http://www.jerrylou.me/tags/mac/"/>
    
      <category term="high sierra" scheme="http://www.jerrylou.me/tags/high-sierra/"/>
    
      <category term="hackintosh" scheme="http://www.jerrylou.me/tags/hackintosh/"/>
    
      <category term="黑苹果" scheme="http://www.jerrylou.me/tags/%E9%BB%91%E8%8B%B9%E6%9E%9C/"/>
    
      <category term="安装" scheme="http://www.jerrylou.me/tags/%E5%AE%89%E8%A3%85/"/>
    
      <category term="UEFI" scheme="http://www.jerrylou.me/tags/UEFI/"/>
    
  </entry>
  
  <entry>
    <title>GraphQL查询语言实践-实现BoltMQ的Console</title>
    <link href="http://www.jerrylou.me/graphql/graphql-golang-fulfill-20180206.html"/>
    <id>http://www.jerrylou.me/graphql/graphql-golang-fulfill-20180206.html</id>
    <published>2018-02-06T06:46:36.000Z</published>
    <updated>2018-05-26T11:07:53.172Z</updated>
    
    <content type="html"><![CDATA[<p>上篇文章<a href="graphql/graphql-golang-20180123.html">《GraphQL查询语言学习笔记》</a>学习了GraphQL的语法和介绍Golang的库。最近再使用Golang编写一款分布式消息队列<a href="https://github.com/boltmq/boltmq" target="_blank" rel="noopener">BoltMQ</a>，我将GraphQL用到BoltMQ的web管理UI上，这样更进一步了解GraphQL。</p><a id="more"></a><h3 id="GraphQL-设计篇"><a href="#GraphQL-设计篇" class="headerlink" title="GraphQL 设计篇"></a>GraphQL 设计篇</h3><p>有了将GraphQL应用到BoltMQ的web UI上的需求，那如何来做呢。我总结了下：</p><ol><li>业务梳理</li><li>GraphQL API设计</li><li>GraphQL Schema设计</li><li>GraphQL 第三方库的选择</li><li>GraphQL 客户端与服务端的实现</li></ol><h3 id="GraphQL-API设计"><a href="#GraphQL-API设计" class="headerlink" title="GraphQL API设计"></a>GraphQL API设计</h3><p>API的设计比较重要，需要开发人员充分理解业务，在业务的基础抽象有查询Graph。例如<a href="git@github.com:boltmq/console.git">console</a>是olotMQ的集群管理UI。需求：</p><ul><li>管理多个BoltMQ集群</li><li>查询集群的节点信息</li><li>查询集群的统计信息</li><li>查询集群的topic信息</li><li>查询集群的消息信息</li><li>查询集群的订阅组信息</li><li>查询集群的消费进度</li><li>查询集群的在线消费进程<br>意思列举了几个功能点，首先将集群这个概念抽象出来，用户在选定集群的情况下才会做下面的查询操作，所有集群就可以作为第一层，然后再往下梳理。graphql就是将业务抽象成图（树）的形式的。</li></ul><p>以下是对console的查询操作的API设计，当然你需要理解BoltMQ的一些知识。你可查看<a href="https://github.com/boltmq/boltmq" target="_blank" rel="noopener">BoltMQ</a>了解。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line">query clusters(<span class="variable">$name</span>: String, <span class="variable">$like</span>: String, <span class="variable">$group</span>: String, <span class="variable">$msgId</span>: String!) &#123;</span><br><span class="line">  clusters(name: <span class="variable">$name</span>) &#123;</span><br><span class="line">    name</span><br><span class="line">    stats &#123;</span><br><span class="line">      producerNums</span><br><span class="line">      consumerNums</span><br><span class="line">      brokerNums</span><br><span class="line">      namesrvNums</span><br><span class="line">      topicNums</span><br><span class="line">      outTotalTodayNums</span><br><span class="line">      outTotalYestNums</span><br><span class="line">      inTotalTodayNums</span><br><span class="line">      inTotalYestNums</span><br><span class="line">    &#125;</span><br><span class="line">    nodes &#123;</span><br><span class="line">      namesrvAddrs</span><br><span class="line">      brokerNodes &#123;</span><br><span class="line">        role</span><br><span class="line">        addr</span><br><span class="line">        version</span><br><span class="line">        desc</span><br><span class="line">        outTps</span><br><span class="line">        inTps</span><br><span class="line">        outTotalTodayNums</span><br><span class="line">        outTotalYestNums</span><br><span class="line">        inTotalTodayNums</span><br><span class="line">        inTotalYestNums</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    topics(like: <span class="variable">$like</span>) &#123;</span><br><span class="line">      topic</span><br><span class="line">      <span class="built_in">type</span></span><br><span class="line">      isSystem</span><br><span class="line">      store &#123;</span><br><span class="line">        brokerName</span><br><span class="line">        queueId</span><br><span class="line">        maxOffset</span><br><span class="line">        minOffset</span><br><span class="line">        lastUpdateTime</span><br><span class="line">      &#125;</span><br><span class="line">      route &#123;</span><br><span class="line">        queues &#123;</span><br><span class="line">          brokerName</span><br><span class="line">          writeQueueNums</span><br><span class="line">          readQueueNums</span><br><span class="line">          perm</span><br><span class="line">          sysFlag</span><br><span class="line">        &#125;</span><br><span class="line">        brokers &#123;</span><br><span class="line">          brokerName</span><br><span class="line">          brokerAddrs &#123;</span><br><span class="line">            brokerId</span><br><span class="line">            addr</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      groups</span><br><span class="line">      consumeConn &#123;</span><br><span class="line">        describe</span><br><span class="line">        conns &#123;</span><br><span class="line">          consumeGroup</span><br><span class="line">          clientId</span><br><span class="line">          clientAddr</span><br><span class="line">          language</span><br><span class="line">          version</span><br><span class="line">          consumeTps</span><br><span class="line">          consumeFromWhere</span><br><span class="line">          consumeType</span><br><span class="line">          diff</span><br><span class="line">          messageModel</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      consumeProgress(group: <span class="variable">$group</span>) &#123;</span><br><span class="line">        consumeGroup</span><br><span class="line">        tps</span><br><span class="line">        diff</span><br><span class="line">        total</span><br><span class="line">        progress &#123;</span><br><span class="line">          brokerOffset</span><br><span class="line">          consumeOffset</span><br><span class="line">          diff</span><br><span class="line">          brokerName</span><br><span class="line">          queueId</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  msg(msgId: <span class="variable">$msgId</span>) &#123;</span><br><span class="line">    info &#123;</span><br><span class="line">      msgId</span><br><span class="line">      topic</span><br><span class="line">      flag</span><br><span class="line">      body</span><br><span class="line">      queueId</span><br><span class="line">      storeSize</span><br><span class="line">      queueOffset</span><br><span class="line">      sysFlag</span><br><span class="line">      bornTimestamp</span><br><span class="line">      bornHost</span><br><span class="line">      storeTimestamp</span><br><span class="line">      storeHost</span><br><span class="line">      commitLogOffset</span><br><span class="line">      bodyCRC</span><br><span class="line">      reconsumeTimes</span><br><span class="line">      preparedTransactionOffset</span><br><span class="line">      properties &#123;</span><br><span class="line">        key</span><br><span class="line">        val</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    tracks &#123;</span><br><span class="line">      code</span><br><span class="line">      <span class="built_in">type</span></span><br><span class="line">      consumeGroup</span><br><span class="line">      desc</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="GraphQL-Schema-设计"><a href="#GraphQL-Schema-设计" class="headerlink" title="GraphQL Schema 设计"></a>GraphQL Schema 设计</h3><p>结合GraphQL API设计类型系统Schema，这里的设计偏后端一些，和API是相辅相成的。在API基础上再次确定返回值的类型以及结构的优化。当然API和Schema的设计可以同时做，也可以分开进行。</p><p>console的类型系统<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># boltmq contole graphql schema</span></span><br><span class="line">schema &#123;</span><br><span class="line">    query: Query</span><br><span class="line">    mutation: Mutation</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># The query type, represents all of the entry points into our object graph</span></span><br><span class="line"><span class="built_in">type</span> Query &#123;</span><br><span class="line">    clusters(name: String): [Cluster]!</span><br><span class="line">    msg(name: String, msgId: String!): Message</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># A Cluster from the boltmq server</span></span><br><span class="line"><span class="built_in">type</span> Cluster &#123;</span><br><span class="line">    <span class="comment"># The name of cluster</span></span><br><span class="line">    name: String!</span><br><span class="line">    <span class="comment"># The stats info of cluster</span></span><br><span class="line">    stats: ClusterStats!</span><br><span class="line">    <span class="comment"># The node info of cluster</span></span><br><span class="line">    nodes: ClusterNode!</span><br><span class="line">    <span class="comment"># The topics of cluster</span></span><br><span class="line">    topics(like: String): [Topic]!</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># A ClusterStats info of boltmq cluster</span></span><br><span class="line"><span class="built_in">type</span> ClusterStats &#123;</span><br><span class="line">    <span class="comment"># The producer nums of cluster</span></span><br><span class="line">    producerNums: Int!</span><br><span class="line">    <span class="comment"># The consumer nums of cluster</span></span><br><span class="line">    consumerNums: Int!</span><br><span class="line">    <span class="comment"># The broker nums of cluster</span></span><br><span class="line">    brokerNums: Int!</span><br><span class="line">    <span class="comment"># The name server nums of cluster</span></span><br><span class="line">    namesrvNums: Int!</span><br><span class="line">    <span class="comment"># The topic nums of cluster</span></span><br><span class="line">    topicNums: Int!</span><br><span class="line">    <span class="comment"># The cluster consumer msg total number today</span></span><br><span class="line">    outTotalTodayNums: Int!</span><br><span class="line">    <span class="comment"># The cluster consumer msg total number yest</span></span><br><span class="line">    outTotalYestNums: Int!</span><br><span class="line">    <span class="comment"># The cluster producer msg total number yest</span></span><br><span class="line">    inTotalTodayNums: Int!</span><br><span class="line">    <span class="comment"># The cluster producer msg total number today</span></span><br><span class="line">    inTotalYestNums: Int!</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># A Cluster node info of boltmq cluster</span></span><br><span class="line"><span class="built_in">type</span> ClusterNode &#123;</span><br><span class="line">    <span class="comment"># The namesrv addr list fo cluster</span></span><br><span class="line">    namesrvAddrs: [String!]!</span><br><span class="line">    <span class="comment"># The broker node list fo cluster</span></span><br><span class="line">    brokerNodes: [BrokerNode]!</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># A Boker node info of boltmq cluster</span></span><br><span class="line"><span class="built_in">type</span> BrokerNode &#123;</span><br><span class="line">    <span class="comment"># The borker role</span></span><br><span class="line">    role: Int!</span><br><span class="line">    <span class="comment"># The borker addr</span></span><br><span class="line">    addr: String!</span><br><span class="line">    <span class="comment"># The borker server version</span></span><br><span class="line">    version: String!</span><br><span class="line">    <span class="comment"># The borker server describe</span></span><br><span class="line">    desc: String!</span><br><span class="line">    <span class="comment"># The borker server current out tps</span></span><br><span class="line">    outTps: Float!</span><br><span class="line">    <span class="comment"># The borker server current in tps</span></span><br><span class="line">    inTps: Float!</span><br><span class="line">    <span class="comment"># The cluster consumer msg total number today</span></span><br><span class="line">    outTotalTodayNums: Int!</span><br><span class="line">    <span class="comment"># The cluster consumer msg total number yest</span></span><br><span class="line">    outTotalYestNums: Int!</span><br><span class="line">    <span class="comment"># The cluster producer msg total number yest</span></span><br><span class="line">    inTotalTodayNums: Int!</span><br><span class="line">    <span class="comment"># The cluster producer msg total number today</span></span><br><span class="line">    inTotalYestNums: Int!</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># A topic info of boltmq cluster</span></span><br><span class="line"><span class="built_in">type</span> Topic &#123;</span><br><span class="line">    <span class="comment"># The topic name</span></span><br><span class="line">    topic: String!</span><br><span class="line">    <span class="comment"># The topic type</span></span><br><span class="line">    <span class="built_in">type</span>: Int!</span><br><span class="line">    <span class="comment"># The topic type</span></span><br><span class="line">    isSystem: Boolean!</span><br><span class="line">    <span class="comment"># The topic store</span></span><br><span class="line">    store: TopicStore!</span><br><span class="line">    <span class="comment"># The topic route</span></span><br><span class="line">    route: TopicRoute!</span><br><span class="line">    <span class="comment"># The consume group</span></span><br><span class="line">    groups: [String!]!</span><br><span class="line">    <span class="comment"># The consume connection</span></span><br><span class="line">    consumeConn: ConsumeConn!</span><br><span class="line">    consumeProgress(group: String): [ConsumeProgress]!</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># topic type</span></span><br><span class="line">enum TopicType &#123;</span><br><span class="line">    <span class="comment"># normal topic</span></span><br><span class="line">    NORMAL_TOPIC</span><br><span class="line">    <span class="comment"># retry topic</span></span><br><span class="line">    RETRY_TOPIC</span><br><span class="line">    <span class="comment"># deadline queue topic</span></span><br><span class="line">    DLQ_TOPIC</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># A topic stroe info of boltmq cluster</span></span><br><span class="line"><span class="built_in">type</span> TopicStore &#123;</span><br><span class="line">    <span class="comment"># The broker name</span></span><br><span class="line">    brokerName: String!</span><br><span class="line">    <span class="comment"># The queue id</span></span><br><span class="line">    queueId: Int!</span><br><span class="line">    <span class="comment"># The max offset</span></span><br><span class="line">    maxOffset: Int!</span><br><span class="line">    <span class="comment"># The min offset</span></span><br><span class="line">    minOffset: Int!</span><br><span class="line">    <span class="comment"># The last update time</span></span><br><span class="line">    lastUpdateTime: String!</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># A topic route info of boltmq cluster</span></span><br><span class="line"><span class="built_in">type</span> TopicRoute &#123;</span><br><span class="line">    <span class="comment"># The route data of queue</span></span><br><span class="line">    queues: [QueueData]!</span><br><span class="line">    <span class="comment"># The route data of broker</span></span><br><span class="line">    brokers: [BrokerData]!</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># A queue route data of topic</span></span><br><span class="line"><span class="built_in">type</span> QueueData &#123;</span><br><span class="line">    <span class="comment"># The broker name</span></span><br><span class="line">    brokerName: String!</span><br><span class="line">    <span class="comment"># The write queue nums</span></span><br><span class="line">    writeQueueNums: Int!</span><br><span class="line">    <span class="comment"># The read queue nums</span></span><br><span class="line">    readQueueNums: Int!</span><br><span class="line">    <span class="comment"># The permissions of topic on broker</span></span><br><span class="line">    perm: Int!</span><br><span class="line">    <span class="comment"># The permissions of topic on broker</span></span><br><span class="line">    sysFlag: Int!</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># A broker route data of topic</span></span><br><span class="line"><span class="built_in">type</span> BrokerData &#123;</span><br><span class="line">    <span class="comment"># The broker name</span></span><br><span class="line">    brokerName: String!</span><br><span class="line">    <span class="comment"># The broker addrs</span></span><br><span class="line">    brokerAddrs: [BrokerAddr]!</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># A broker addr of topic route</span></span><br><span class="line"><span class="built_in">type</span> BrokerAddr &#123;</span><br><span class="line">    <span class="comment"># The broker id</span></span><br><span class="line">    brokerId: Int!</span><br><span class="line">    <span class="comment"># The broker addr</span></span><br><span class="line">    addr: String!</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># consume connection</span></span><br><span class="line"><span class="built_in">type</span> ConsumeConn &#123;</span><br><span class="line">    <span class="comment"># The describe</span></span><br><span class="line">    describe: String!</span><br><span class="line">    <span class="comment"># The connection</span></span><br><span class="line">    conns: [Connection]!</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># connection info</span></span><br><span class="line"><span class="built_in">type</span> Connection &#123;</span><br><span class="line">    <span class="comment"># The consume group name</span></span><br><span class="line">    consumeGroup: String!</span><br><span class="line">    <span class="comment"># The client id</span></span><br><span class="line">    clientId: String!</span><br><span class="line">    <span class="comment"># The client addr</span></span><br><span class="line">    clientAddr: String!</span><br><span class="line">    <span class="comment"># The language</span></span><br><span class="line">    language: String!</span><br><span class="line">    <span class="comment"># The version</span></span><br><span class="line">    version: String!</span><br><span class="line">    <span class="comment"># The consume tps</span></span><br><span class="line">    consumeTps: Float!</span><br><span class="line">    <span class="comment"># The consume from where</span></span><br><span class="line">    consumeFromWhere: String!</span><br><span class="line">    <span class="comment"># The consume type</span></span><br><span class="line">    consumeType: Int!</span><br><span class="line">    <span class="comment"># The message diff total</span></span><br><span class="line">    diff: Int!</span><br><span class="line">    <span class="comment"># The message model</span></span><br><span class="line">    messageModel: Int!</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># consume type</span></span><br><span class="line">enum ConsumeType &#123;</span><br><span class="line">    <span class="comment"># actively consume</span></span><br><span class="line">    CONSUME_ACTIVELY</span><br><span class="line">    <span class="comment"># passively consume</span></span><br><span class="line">    CONSUME_PASSIVELY</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># message model</span></span><br><span class="line">enum MessageModel &#123;</span><br><span class="line">    <span class="comment"># broadcasting</span></span><br><span class="line">    BROADCASTING </span><br><span class="line">    <span class="comment"># clustering</span></span><br><span class="line">    CLUSTERING</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># consume progress</span></span><br><span class="line"><span class="built_in">type</span> ConsumeProgress &#123;</span><br><span class="line">    <span class="comment"># The consume group name</span></span><br><span class="line">    consumeGroup: String!</span><br><span class="line">    <span class="comment"># The consume tps</span></span><br><span class="line">    tps: Float!</span><br><span class="line">    <span class="comment"># The consume diff</span></span><br><span class="line">    diff: Int!</span><br><span class="line">    <span class="comment"># The total</span></span><br><span class="line">    total: Int!</span><br><span class="line">    <span class="comment"># The progress data list</span></span><br><span class="line">    progress: [ConsumeProgressData]!</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># consume progress data</span></span><br><span class="line"><span class="built_in">type</span> ConsumeProgressData &#123;</span><br><span class="line">    <span class="comment"># The broker offset</span></span><br><span class="line">    brokerOffset: Int!</span><br><span class="line">    <span class="comment"># The broker offset</span></span><br><span class="line">    consumeOffset: Int!</span><br><span class="line">    <span class="comment"># The consume diff</span></span><br><span class="line">    diff: Int!</span><br><span class="line">    <span class="comment"># The broker name</span></span><br><span class="line">    brokerName: String!</span><br><span class="line">    <span class="comment"># The queue id</span></span><br><span class="line">    queueId: Int!</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># message</span></span><br><span class="line"><span class="built_in">type</span> Message &#123;</span><br><span class="line">    <span class="comment"># The message base info</span></span><br><span class="line">    info: MessageInfo!</span><br><span class="line">    <span class="comment"># The message track list</span></span><br><span class="line">    tracks: [MessageTrack]!</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># message info</span></span><br><span class="line"><span class="built_in">type</span> MessageInfo &#123;</span><br><span class="line">    <span class="comment"># The message id</span></span><br><span class="line">    msgId: String!</span><br><span class="line">    <span class="comment"># The topic name</span></span><br><span class="line">    topic: String!</span><br><span class="line">    <span class="comment"># The message flag</span></span><br><span class="line">    flag: Int!</span><br><span class="line">    <span class="comment"># The message body</span></span><br><span class="line">    body: String!</span><br><span class="line">    <span class="comment"># The queue id</span></span><br><span class="line">    queueId: Int!</span><br><span class="line">    <span class="comment"># The store size</span></span><br><span class="line">    storeSize: Int!</span><br><span class="line">    <span class="comment"># The queue offset</span></span><br><span class="line">    queueOffset: Int!</span><br><span class="line">    <span class="comment"># The message sys flag</span></span><br><span class="line">    sysFlag: Int!</span><br><span class="line">    <span class="comment"># The born timestamp</span></span><br><span class="line">    bornTimestamp: String!</span><br><span class="line">    <span class="comment"># The born host </span></span><br><span class="line">    bornHost: String!</span><br><span class="line">    <span class="comment"># The store timestamp</span></span><br><span class="line">    storeTimestamp: String!</span><br><span class="line">    <span class="comment"># The store host </span></span><br><span class="line">    storeHost: String!</span><br><span class="line">    <span class="comment"># The commitlog offset</span></span><br><span class="line">    commitLogOffset: Int!</span><br><span class="line">    <span class="comment"># The message body crc</span></span><br><span class="line">    bodyCRC: Int!</span><br><span class="line">    <span class="comment"># The reconsume times</span></span><br><span class="line">    reconsumeTimes: Int!</span><br><span class="line">    <span class="comment"># The reconsume times</span></span><br><span class="line">    preparedTransactionOffset: Int!</span><br><span class="line">    <span class="comment"># The properties</span></span><br><span class="line">    properties: [Property!]!</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># property, replace map</span></span><br><span class="line"><span class="built_in">type</span> Property &#123;</span><br><span class="line">    key: String!</span><br><span class="line">    val: String!</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># message track</span></span><br><span class="line"><span class="built_in">type</span> MessageTrack &#123;</span><br><span class="line">    <span class="comment"># The track code, 0: success, non-0: failed</span></span><br><span class="line">    code: Int!</span><br><span class="line">    <span class="comment"># track type</span></span><br><span class="line">    <span class="built_in">type</span>: Int!</span><br><span class="line">    <span class="comment"># consume group name</span></span><br><span class="line">    consumeGroup: String!</span><br><span class="line">    <span class="comment"># error describe</span></span><br><span class="line">    desc: String!</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># track type</span></span><br><span class="line">enum TrackType &#123;</span><br><span class="line">    <span class="comment"># subscribed and consumed</span></span><br><span class="line">    SUBSCRIBEDANDCONSUMED</span><br><span class="line">    <span class="comment"># subscribed but filterd</span></span><br><span class="line">    SUBSCRIBEDBUTFILTERD</span><br><span class="line">    <span class="comment"># subscribed but pull</span></span><br><span class="line">    SUBSCRIBEDBUTPULL</span><br><span class="line">    <span class="comment"># subscribed and not consume yet</span></span><br><span class="line">    SUBSCRIBEDBUTNOTCONSUMEYET</span><br><span class="line">    <span class="comment"># unknow exeption</span></span><br><span class="line">    UNKNOWEXEPTION</span><br><span class="line">    <span class="comment"># not subscribed and not consumed</span></span><br><span class="line">    NOTSUBSCRIBEDANDNOTCONSUMED</span><br><span class="line">    <span class="comment"># consume groupId not online</span></span><br><span class="line">    CONSUMEGROUPIDNOTONLINE</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># The mutation type, represents all updates we can make to our data</span></span><br><span class="line"><span class="built_in">type</span> Mutation &#123;</span><br><span class="line">    create2UpdateTopic(name: String!, topic: TopicInput!): TopicResponse</span><br><span class="line">    deleteTopic(name: String!, topic: String!): TopicResponse</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># The input object sent when cluster is creating a new topic</span></span><br><span class="line">input TopicInput &#123;</span><br><span class="line">    <span class="comment"># topic</span></span><br><span class="line">    topic: String!</span><br><span class="line">    <span class="comment"># The read queue nums, optional</span></span><br><span class="line">    readQueueNums: Int!</span><br><span class="line">    <span class="comment"># The write queue nums, optional</span></span><br><span class="line">    writeQueueNums: Int!</span><br><span class="line">    <span class="comment"># The order topic, optional</span></span><br><span class="line">    order: Boolean! </span><br><span class="line">    <span class="comment"># The unit topic, optional</span></span><br><span class="line">    unit: Boolean!</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Represents a topic for a cluster</span></span><br><span class="line">interface Response &#123;</span><br><span class="line">    code: Int!</span><br><span class="line">    desc: String!</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">type</span> TopicResponse implements Response &#123;</span><br><span class="line">    code: Int!</span><br><span class="line">    desc: String!</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="GraphQL-代码实现"><a href="#GraphQL-代码实现" class="headerlink" title="GraphQL 代码实现"></a>GraphQL 代码实现</h3><p>console使用的<code>neelance/graphql-go</code>库，<a href="https://github.com/boltmq/console/tree/master/admin" target="_blank" rel="noopener">代码查看</a>。使用的缺点和注意事项：</p><ul><li>neelance使用反射实现</li><li>graphql类型匹配严格，并缺少对于的int,int64等基础类型。</li><li>接口的实现不优雅，我提了<a href="https://github.com/neelance/graphql-go/issues/159" target="_blank" rel="noopener">issue</a>，等待改进。</li><li>context无法向下传递</li></ul><p><strong>封装统一认证</strong></p><p>请求header中取得jwtToken进行验证。<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> userClaims <span class="keyword">struct</span> &#123;</span><br><span class="line">    user</span><br><span class="line">    jwt.StandardClaims</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> authenticator <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(auth *authenticator)</span> <span class="title">Chain</span><span class="params">(w http.ResponseWriter, r *http.Request, ctx *Context)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    <span class="comment">// extract jwt</span></span><br><span class="line">    jwtToken := r.Header.Get(<span class="string">"Authorization"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// parse tokentoken</span></span><br><span class="line">    token, err := jwt.ParseWithClaims(jwtToken, &amp;userClaims&#123;&#125;, <span class="function"><span class="keyword">func</span><span class="params">(token *jwt.Token)</span> <span class="params">(<span class="keyword">interface</span>&#123;&#125;, error)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> _, ok := token.Method.(*jwt.SigningMethodHMAC); !ok &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">"Unexpected signing method"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> jwtSecret, <span class="literal">nil</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        http.Error(w, <span class="string">"not authorized"</span>, http.StatusUnauthorized)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    claims, ok := token.Claims.(*userClaims)</span><br><span class="line">    <span class="keyword">if</span> !ok || !token.Valid &#123;</span><br><span class="line">        http.Error(w, <span class="string">"not authorized"</span>, http.StatusUnauthorized)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ctx.ctx = context.WithValue(r.Context(), userAuthKey, claims.user)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>登录后生成token并返回。<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> loginHandler <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h *loginHandler)</span> <span class="title">ServeHTTP</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">    decoder := json.NewDecoder(r.Body)</span><br><span class="line">    userParam := <span class="keyword">struct</span> &#123;</span><br><span class="line">        Username <span class="keyword">string</span> <span class="string">`json:"username"`</span></span><br><span class="line">        Password <span class="keyword">string</span> <span class="string">`json:"password"`</span></span><br><span class="line">    &#125;&#123;&#125;</span><br><span class="line"></span><br><span class="line">    err := decoder.Decode(&amp;userParam)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        http.Error(w, err.Error(), http.StatusInternalServerError)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">defer</span> r.Body.Close()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> userParam.Username != <span class="string">"admin"</span> || userParam.Password != <span class="string">"admin"</span> &#123;</span><br><span class="line">        http.Error(w, <span class="string">"invalid login"</span>, http.StatusUnauthorized)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//generate token</span></span><br><span class="line">    expire := time.Now().Add(time.Hour * <span class="number">1</span>).Unix()</span><br><span class="line">    <span class="comment">// Create the Claims</span></span><br><span class="line">    claims := userClaims&#123;</span><br><span class="line">        user: user&#123;</span><br><span class="line">            UserID:   <span class="number">1</span>,</span><br><span class="line">            UserName: userParam.Username,</span><br><span class="line">            IsAdmin:  <span class="literal">true</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        StandardClaims: jwt.StandardClaims&#123;</span><br><span class="line">            ExpiresAt: expire,</span><br><span class="line">            Issuer:    <span class="string">"login"</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    token := jwt.NewWithClaims(jwt.SigningMethodHS256, claims)</span><br><span class="line">    signedToken, _ := token.SignedString(jwtSecret)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//output token</span></span><br><span class="line">    tokenResponse := <span class="keyword">struct</span> &#123;</span><br><span class="line">        Token <span class="keyword">string</span> <span class="string">`json:"token"`</span></span><br><span class="line">    &#125;&#123;signedToken&#125;</span><br><span class="line">    json.NewEncoder(w).Encode(tokenResponse)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>GraphQL接口接入认证<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">srv.mux.Handle(pattern, join(&amp;relay.Handler&#123;Schema: schema&#125;, &amp;authenticator&#123;&#125;))</span><br></pre></td></tr></table></figure></p><p>登录接入<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">srv.mux.Handle(pattern, &amp;loginHandler&#123;&#125;)</span><br></pre></td></tr></table></figure></p><p>以上4点就完成认证功能，详细代码查看<a href="https://github.com/boltmq/console/tree/master/admin/server" target="_blank" rel="noopener">console-server</a></p><p>还需功能</p><ul><li>dataloader</li></ul><p>对比<a href="https://github.com/graphql-go/graphql" target="_blank" rel="noopener">graphql-go</a>库，graphql-go更佳灵活，当抽象程度差一些。根据自己情况自行选择。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上篇文章&lt;a href=&quot;graphql/graphql-golang-20180123.html&quot;&gt;《GraphQL查询语言学习笔记》&lt;/a&gt;学习了GraphQL的语法和介绍Golang的库。最近再使用Golang编写一款分布式消息队列&lt;a href=&quot;https://github.com/boltmq/boltmq&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;BoltMQ&lt;/a&gt;，我将GraphQL用到BoltMQ的web管理UI上，这样更进一步了解GraphQL。&lt;/p&gt;
    
    </summary>
    
      <category term="graphql" scheme="http://www.jerrylou.me/categories/graphql/"/>
    
    
      <category term="golang" scheme="http://www.jerrylou.me/tags/golang/"/>
    
      <category term="graphql" scheme="http://www.jerrylou.me/tags/graphql/"/>
    
      <category term="graphiql" scheme="http://www.jerrylou.me/tags/graphiql/"/>
    
  </entry>
  
  <entry>
    <title>OpenStack O版 安装部署及问题解决</title>
    <link href="http://www.jerrylou.me/openstack/opentstack-o-deploy-20180131.html"/>
    <id>http://www.jerrylou.me/openstack/opentstack-o-deploy-20180131.html</id>
    <published>2018-01-31T02:30:26.000Z</published>
    <updated>2018-05-26T11:07:53.177Z</updated>
    
    <content type="html"><![CDATA[<p>OpenStack项目是由Rackspace和NASA（美国国家航空航天局）共同发起的。它是一个开源软件，它提供了一个部署云的平台。为虚拟计算或存储服务的公有/私有云，提供可扩展的、灵活的云计算。是一个旨在为公共及私有云的建设与管理提供软件的开源项目。OpenStack目前版本Pike并在持续更新中，本文选用Ocata版本进行部署，并记录部署过程中遇到的问题。</p><a id="more"></a><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><p><strong>操作系统</strong><br>Centos7.2.1151 mini(国内mirrors没有，<a href="http://vault.centos.org/7.2.1511/isos/x86_64/" target="_blank" rel="noopener">官方下载</a>)</p><p><strong>服务节点</strong><br>本文使用三个节点部署stand-one方式，按照官方文档进行部署，高可用部署之后文章会跟进。</p><ul><li>controller节点</li><li>computer节点</li><li>block storage节点</li></ul><p><strong>网络说明</strong> </p><ul><li>Manage network 管理网络，OpenStack各个模块之间的交互，连接数据库，连接Message Queue都是通过这个网络来进行。</li><li>Private network 私有网络，虚拟机之间的数据传输通过这个网络来进行，虚拟机要连接虚拟路由都是通过这个网络来进行。</li><li>External network 外部网络，无论是用户调用OpenStack的API，还是创建出来的虚拟机要访问外网，或者外网要ssh到虚拟机，都用这个网络。</li></ul><p>OpenStack将三个网络进行隔离，一方面是安全，在虚拟机里面，干扰的都仅仅是Private Network，都不可能访问到我的数据库。一方面是流量分离，Manage Network的流量不是很大的，而且一般都会比较优雅的使用，而Prviate Network和External Network就需要有流量控制策略。</p><table><thead><tr><th style="text-align:center">节点</th><th style="text-align:left">Manage network</th><th style="text-align:center">Private network</th><th style="text-align:center">External network</th></tr></thead><tbody><tr><td style="text-align:center">controller</td><td style="text-align:left">10.50.1.11</td><td style="text-align:center">10.50.1.11</td><td style="text-align:center">10.112.1.116</td></tr><tr><td style="text-align:center">computer</td><td style="text-align:left">10.50.1.10</td><td style="text-align:center">10.50.1.11</td><td style="text-align:center">10.112.1.117(临时)</td></tr><tr><td style="text-align:center">block storage</td><td style="text-align:left">10.50.1.12</td><td style="text-align:center">10.50.1.12</td><td style="text-align:center">10.112.1.118(临时)</td></tr></tbody></table><p>注意：非高可用环境采用Manage Private同网方式，computer和block storage节点的External network的外网用于安装环境的。</p><p><strong>配置节点别名</strong> </p><p>修改/etc/hostname的主机名称，修改每个节点的<strong>/etc/hosts</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">10.50.1.11 controller</span><br><span class="line">10.50.1.10 computer</span><br><span class="line">10.50.1.12 blokstorage</span><br></pre></td></tr></table></figure></p><p><strong>Yum下载源</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup</span><br><span class="line">curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class="line">yum makecache</span><br></pre></td></tr></table></figure><h3 id="安装流程"><a href="#安装流程" class="headerlink" title="安装流程"></a>安装流程</h3><p>请参看<a href="https://docs.openstack.org/ocata/install-guide-rdo/common/conventions.html" target="_blank" rel="noopener">官方Ocata版本安装向导</a>进行安装。请一步一步进行安装，官方文档已经非常详尽了，这里就不在重复写了，我会我部署过程中的问题中列举出来并记录。</p><h3 id="安装问题及解决方案"><a href="#安装问题及解决方案" class="headerlink" title="安装问题及解决方案"></a>安装问题及解决方案</h3><p><strong>编码unknown locale: UTF-8</strong><br>在进行同步数据库命令时，有时会出现<code>unknown locale: UTF-8</code>错误并同步失败。终端中输入以下命令后再执行同步命令即可:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> LC_ALL=en_US.UTF-8</span><br><span class="line"><span class="built_in">export</span> LANG=en_US.UTF-8</span><br></pre></td></tr></table></figure></p><p><strong>连接不上rabbitmq的问题</strong><br>其它节点连接不上rabbitmq并提示<strong>127.0.0.1:5672</strong>(/var/log/下的日志)，文档中已经明确配置了<strong>transport_url = rabbit://openstack:RABBIT_PASS@controller</strong>，这里的rabbitmq的主机是controller而不是127.0.0.1。问题在于配置中还有rabbit_host参数指定，配置<strong>rabbit_host=controller</strong>重启服务即可。</p><p><strong>chrony时间同步问题</strong><br>参看各个节点的时区是否一致，可使用<code>timedatectl</code>命令进行查看与修改。如果chrony没有能同步时间，请使用命令修改系统时间后再<code>systemctl restart chrony</code>。如果时间没有同步，会导致controller检查block storage的cinder-volume服务一直为down状态。controller节点使用命令<strong>openstack volume service list</strong>查看。</p><p>设置时区<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">timedatectl <span class="built_in">set</span>-timezone Asia/Shanghai</span><br></pre></td></tr></table></figure></p><p><strong>重启机器后无法访问web的问题</strong><br>重启后mysql、rabbitmq服务可能没有启动，需要检查并启动。启动后先需要重启http和memcached.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl start mariadb.service</span><br><span class="line">systemctl start rabbitmq-server.service</span><br><span class="line">systemctl restart httpd.service memcached.service</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;OpenStack项目是由Rackspace和NASA（美国国家航空航天局）共同发起的。它是一个开源软件，它提供了一个部署云的平台。为虚拟计算或存储服务的公有/私有云，提供可扩展的、灵活的云计算。是一个旨在为公共及私有云的建设与管理提供软件的开源项目。OpenStack目前版本Pike并在持续更新中，本文选用Ocata版本进行部署，并记录部署过程中遇到的问题。&lt;/p&gt;
    
    </summary>
    
      <category term="openstack" scheme="http://www.jerrylou.me/categories/openstack/"/>
    
    
      <category term="虚拟化" scheme="http://www.jerrylou.me/tags/%E8%99%9A%E6%8B%9F%E5%8C%96/"/>
    
      <category term="openstack" scheme="http://www.jerrylou.me/tags/openstack/"/>
    
      <category term="云计算" scheme="http://www.jerrylou.me/tags/%E4%BA%91%E8%AE%A1%E7%AE%97/"/>
    
      <category term="centos7.2" scheme="http://www.jerrylou.me/tags/centos7-2/"/>
    
      <category term="ocata" scheme="http://www.jerrylou.me/tags/ocata/"/>
    
  </entry>
  
  <entry>
    <title>GraphQL查询语言学习笔记</title>
    <link href="http://www.jerrylou.me/graphql/graphql-golang-20180123.html"/>
    <id>http://www.jerrylou.me/graphql/graphql-golang-20180123.html</id>
    <published>2018-01-23T06:51:36.000Z</published>
    <updated>2018-05-26T11:07:53.172Z</updated>
    
    <content type="html"><![CDATA[<p>RSETful API接口想必大家都比较熟悉，GraphQL设计用于替代RESTful API接口，但目前不是所有情况都使用替代，他们各有优势。<br>GraphQL 是一个用于 API 的查询语言，是一个使用基于类型系统来执行查询的服务端运行时（类型系统由你的数据定义）。GraphQL 并没有和任何特定数据库或者存储引擎绑定，而是依靠你现有的代码和数据支撑。</p><blockquote><p>在 2015 React 欧洲大会上，Lee Byron 介绍了 Facebook 的 GraphQL ，包含 GraphQL 背后的故事，查询语句的示例，还有核心的概念。GraphQL 非常易懂，直接看查询语句就能知道查询出来的数据是什么样的。你可以把 GraphQL 的查询语句想成是没有值，只有属性的对象，返回的结果就是对应的属性还有对应值的对象。</p></blockquote><a id="more"></a><h3 id="GraphQL-基础篇"><a href="#GraphQL-基础篇" class="headerlink" title="GraphQL 基础篇"></a>GraphQL 基础篇</h3><p>GraphQL特性是用户可以自定义查询对象字段，使用图（树）的形式表示业务对象，从而定义查询示例。Facebook定义GraphQL规范，GraphQL语法方面的知识可以参考:</p><p>英文</p><ul><li><a href="http://facebook.github.io/graphql/October2016/" target="_blank" rel="noopener">http://facebook.github.io/graphql/October2016/</a></li><li><a href="https://github.com/facebook/graphql" target="_blank" rel="noopener">https://github.com/facebook/graphql</a></li></ul><p>中文</p><ul><li><a href="http://spec.graphql.cn//#sec-Overview-" target="_blank" rel="noopener">http://spec.graphql.cn//#sec-Overview-</a></li></ul><p>官方提供了新手课程:</p><p>英文</p><ul><li><strong><a href="http://graphql.org/learn" target="_blank" rel="noopener">http://graphql.org/learn</a></strong></li><li><a href="https://www.howtographql.com/" target="_blank" rel="noopener">https://www.howtographql.com/</a></li></ul><p>中文</p><ul><li><strong><a href="http://graphql.cn/learn/" target="_blank" rel="noopener">http://graphql.cn/learn/</a></strong></li></ul><p>GraphQL包括: <strong>类型系统（Type System）</strong> <strong>类型语言（Type Language）</strong> <strong>对象类型和字段（Object Types and Fields）</strong>等查询语言的定义和专用名词。如果你还是新手，请认真阅读<a href="http://spec.graphql.cn//#sec-Overview-" target="_blank" rel="noopener">GraphQL规范</a>和<a href="**http://graphql.cn/learn/**">新手课程</a>。你已经理解了GraphQL是什么，那么可以接下来就是如何使用Golang编写GraphQL Server，如何编写schema，如何运行以及调试。</p><h3 id="GraphQL-Server"><a href="#GraphQL-Server" class="headerlink" title="GraphQL Server"></a>GraphQL Server</h3><p>首先使用golang语言实现官方示例，以了解GraphQL Server如何编写。当然GraphQL中有客户端和服务端。</p><p>客户端库：</p><ul><li><a href="https://facebook.github.io/relay/" target="_blank" rel="noopener">Relay</a> (<a href="https://github.com/facebook/relay" target="_blank" rel="noopener">github</a>)：Facebook 的框架，用于构建与 GraphQL 后端交流的 React 应用。</li><li><a href="http://apollographql.com/client/" target="_blank" rel="noopener">Apollo Client</a> (<a href="https://github.com/apollographql/apollo-client" target="_blank" rel="noopener">github</a>)：一个强大的 JavaScript GraphQL 客户端，设计用于与 React、React Native、Angular 2 或者原生 JavaScript 一同工作。</li><li><a href="https://github.com/shurcooL/graphql#readme" target="_blank" rel="noopener">graphql</a>: 一个使用 Go 编写的 GraphQL 客户端实现。</li></ul><p>服务端库：</p><ul><li><a href="https://github.com/graphql-go/graphql" target="_blank" rel="noopener">graphql-go</a>： 支持查询解析器，但不支持GraphQL SDL解析。</li><li><a href="https://github.com/graphql-go/relay" target="_blank" rel="noopener">graphql-relay-go</a>： 支持react-relay，一般配合graphql-go使用。</li><li><a href="https://github.com/neelance/graphql-go" target="_blank" rel="noopener">neelance/graphql-go</a>： 支持查询解析器和GraphQL SDL解析。(缺少自动生成定义SDL代码工具)</li></ul><p>接下来分别使用<a href="https://github.com/graphql-go/graphql" target="_blank" rel="noopener">graphql-go</a>和<a href="https://github.com/neelance/graphql-go" target="_blank" rel="noopener">neelance/graphql-go</a>来实现一些简单示例。</p><h4 id="graphql-go库实现"><a href="#graphql-go库实现" class="headerlink" title="graphql-go库实现"></a>graphql-go库实现</h4><p>graphql-go支持查询解析器，不支持GraphQL SDL解析。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"encoding/json"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/graphql-go/graphql"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> user <span class="keyword">struct</span> &#123;</span><br><span class="line">ID   <span class="keyword">string</span> <span class="string">`json:"id"`</span></span><br><span class="line">Name <span class="keyword">string</span> <span class="string">`json:"name"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> data <span class="keyword">map</span>[<span class="keyword">string</span>]user = <span class="keyword">map</span>[<span class="keyword">string</span>]user&#123;</span><br><span class="line"><span class="string">"1"</span>: user&#123;</span><br><span class="line">ID:   <span class="string">"1"</span>,</span><br><span class="line">Name: <span class="string">"Dan"</span>,</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"2"</span>: user&#123;</span><br><span class="line">ID:   <span class="string">"2"</span>,</span><br><span class="line">Name: <span class="string">"Lee"</span>,</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"3"</span>: user&#123;</span><br><span class="line">ID:   <span class="string">"3"</span>,</span><br><span class="line">Name: <span class="string">"Nick"</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//   Create User object type with fields "id" and "name" by using GraphQLObjectTypeConfig:</span></span><br><span class="line"><span class="comment">//       - Name: name of object type</span></span><br><span class="line"><span class="comment">//       - Fields: a map of fields by using GraphQLFields</span></span><br><span class="line"><span class="comment">//   Setup type of field use GraphQLFieldConfig</span></span><br><span class="line"><span class="keyword">var</span> userType = graphql.NewObject(</span><br><span class="line">graphql.ObjectConfig&#123;</span><br><span class="line">Name: <span class="string">"User"</span>,</span><br><span class="line">Fields: graphql.Fields&#123;</span><br><span class="line"><span class="string">"id"</span>: &amp;graphql.Field&#123;</span><br><span class="line">Type: graphql.String,</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"name"</span>: &amp;graphql.Field&#123;</span><br><span class="line">Type: graphql.String,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//   Create Query object type with fields "user" has type [userType] by using GraphQLObjectTypeConfig:</span></span><br><span class="line"><span class="comment">//       - Name: name of object type</span></span><br><span class="line"><span class="comment">//       - Fields: a map of fields by using GraphQLFields</span></span><br><span class="line"><span class="comment">//   Setup type of field use GraphQLFieldConfig to define:</span></span><br><span class="line"><span class="comment">//       - Type: type of field</span></span><br><span class="line"><span class="comment">//       - Args: arguments to query with current field</span></span><br><span class="line"><span class="comment">//       - Resolve: function to query data using params from [Args] and return value with current type</span></span><br><span class="line"><span class="keyword">var</span> queryType = graphql.NewObject(</span><br><span class="line">graphql.ObjectConfig&#123;</span><br><span class="line">Name: <span class="string">"Query"</span>,</span><br><span class="line">Fields: graphql.Fields&#123;</span><br><span class="line"><span class="string">"user"</span>: &amp;graphql.Field&#123;</span><br><span class="line">Type: userType,</span><br><span class="line">Args: graphql.FieldConfigArgument&#123;</span><br><span class="line"><span class="string">"id"</span>: &amp;graphql.ArgumentConfig&#123;</span><br><span class="line">Type: graphql.String,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">Resolve: <span class="function"><span class="keyword">func</span><span class="params">(p graphql.ResolveParams)</span> <span class="params">(<span class="keyword">interface</span>&#123;&#125;, error)</span></span> &#123;</span><br><span class="line">idQuery, isOK := p.Args[<span class="string">"id"</span>].(<span class="keyword">string</span>)</span><br><span class="line"><span class="keyword">if</span> isOK &#123;</span><br><span class="line"><span class="keyword">if</span> v, exist := data[idQuery]; exist &#123;</span><br><span class="line"><span class="keyword">return</span> v, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">nil</span></span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> schema, _ = graphql.NewSchema(</span><br><span class="line">graphql.SchemaConfig&#123;</span><br><span class="line">Query: queryType,</span><br><span class="line">&#125;,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">executeQuery</span><span class="params">(query <span class="keyword">string</span>, schema graphql.Schema, vars <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;)</span> \*<span class="title">graphql</span>.<span class="title">Result</span></span> &#123;</span><br><span class="line">result := graphql.Do(graphql.Params&#123;</span><br><span class="line">Schema:         schema,</span><br><span class="line">RequestString:  query,</span><br><span class="line">VariableValues: vars,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(result.Errors) &gt; <span class="number">0</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"wrong result, unexpected errors: %v"</span>, result.Errors)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">query := <span class="string">`query userinfo($uid: String = "1") &#123;</span></span><br><span class="line"><span class="string">user(id: $uid)&#123;</span></span><br><span class="line"><span class="string">id</span></span><br><span class="line"><span class="string">name</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line">vars := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;<span class="string">"uid"</span>: <span class="string">"3"</span>&#125;</span><br><span class="line">r := executeQuery(query, schema, vars)</span><br><span class="line">rJSON, _ := json.Marshal(r)</span><br><span class="line">fmt.Printf(<span class="string">"%s \n"</span>, rJSON)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面示例是查询用户信息，作为第一个示例比较适合。示例中代码<strong>schema, _ = graphql.NewSchema</strong>定义了查询schema, 使用<strong>executeQuery</strong>查询结果并打印。schema中定义了查询入口<strong>Query: queryType</strong>，queryType中的Resolve处理请求。</p><p>点击<a href="https://github.com/gunsluo/go-example/blob/master/graphql/graphql-go/main.go" target="_blank" rel="noopener">源码</a>，运行<code>go run main.go</code>查看结果。</p><p><strong>提供GraphQL Server http服务</strong></p><p>构建http服务只需简单几行代码(<a href="https://github.com/gunsluo/go-example/blob/master/graphql/graphql-go/http.go" target="_blank" rel="noopener">源码</a>)：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">http.HandleFunc(<span class="string">"/graphql"</span>, <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">result := executeQuery(r.URL.Query().Get(<span class="string">"query"</span>), schema, <span class="literal">nil</span>)</span><br><span class="line">json.NewEncoder(w).Encode(result)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"Now server is running on port 8080"</span>)</span><br><span class="line">fmt.Println(<span class="string">"Test with Get      : curl -g 'http://localhost:8080/graphql?query=&#123;user(id:\"1\")&#123;name&#125;&#125;'"</span>)</span><br><span class="line">http.ListenAndServe(<span class="string">":8080"</span>, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>终端输入<code>curl -g &#39;http://localhost:8080/graphql?query={user(id:\&quot;1\&quot;){name}}&#39;</code>查看结果吧。</p><p><strong>使用graphql-go/handler包提供http服务</strong></p><p>使用graphql-go/handler包(<a href="https://github.com/gunsluo/go-example/blob/master/graphql/graphql-go/handle.go" target="_blank" rel="noopener">源码</a>)：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">h := handler.New(&amp;handler.Config&#123;</span><br><span class="line">Schema:   &amp;schema,</span><br><span class="line">Pretty:   <span class="literal">true</span>,</span><br><span class="line">GraphiQL: <span class="literal">true</span>,</span><br><span class="line">&#125;)</span><br><span class="line">http.Handle(<span class="string">"/graphql"</span>, h)</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"Now server is running on port 8080"</span>)</span><br><span class="line">fmt.Println(<span class="string">"Test with Get      : curl -g 'http://localhost:8080/graphql?query=&#123;user(id:\"1\")&#123;name&#125;&#125;'"</span>)</span><br><span class="line">http.ListenAndServe(<span class="string">":8080"</span>, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>使用<code>graphql-go/handler</code>包后不需要executeQuery函数，并提供了额外的配置项。</p><h4 id="neelance-graphql-go库实现"><a href="#neelance-graphql-go库实现" class="headerlink" title="neelance/graphql-go库实现"></a>neelance/graphql-go库实现</h4><p>neelance/graphql-go支持查询解析器和GraphQL SDL解析。这里使用官方的starwars作为示例,查看<a href="http://graphql.cn/learn/queries/" target="_blank" rel="noopener">starwars示例</a></p><p>实现服务端按下面步骤实现</p><ol><li>编写GraphQL SDL <a href="https://github.com/gunsluo/go-example/blob/master/graphql/neelance/starwars/starwars.go" target="_blank" rel="noopener">源码</a></li><li>编写GraphQL SDL实现 <a href="https://github.com/gunsluo/go-example/blob/master/graphql/neelance/starwars/starwars.go" target="_blank" rel="noopener">源码</a></li><li>编写GraphQL Server实现 <a href="https://github.com/gunsluo/go-example/blob/master/graphql/neelance/main.go" target="_blank" rel="noopener">源码</a></li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> schema *graphql.Schema</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">schema = graphql.MustParseSchema(starwars.Schema, &amp;starwars.Resolver&#123;&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">http.Handle(<span class="string">"/"</span>, http.HandlerFunc(<span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">w.Write(page)</span><br><span class="line">&#125;))</span><br><span class="line"></span><br><span class="line">http.Handle(<span class="string">"/query"</span>, &amp;relay.Handler&#123;Schema: schema&#125;)</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"Now server is running on port 8080."</span>)</span><br><span class="line">fmt.Println(<span class="string">"Test with Get      : http://localhost:8080"</span>)</span><br><span class="line">log.Fatal(http.ListenAndServe(<span class="string">":8080"</span>, <span class="literal">nil</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>init()</strong>函数中初始化schema，<strong>main()</strong>中监听8080端口出来请求并响应。starwars包下的schema定义和逻辑实现可查看<a href="https://github.com/gunsluo/go-example/blob/master/graphql/neelance/starwars/starwars.go" target="_blank" rel="noopener">源码</a>。</p><h4 id="graphql-go-tools工具"><a href="#graphql-go-tools工具" class="headerlink" title="graphql-go-tools工具"></a>graphql-go-tools工具</h4><p>neelance的实现需要两部分schema的定义与Reolver的实现。graphql-go-tools包是我自己写的将定义的schema自动生成Reolver代码模板。目前只实现了将graphql文件转换为schema string，后续整理后持续实现。<br>示例代码：<a href="https://github.com/gunsluo/graphql-go-tools/tree/master/example" target="_blank" rel="noopener">graphql-go-tools</a></p><h4 id="Dataloader缓存"><a href="#Dataloader缓存" class="headerlink" title="Dataloader缓存"></a>Dataloader缓存</h4><p>dataloader是用于缓存数据的包，GraphQL是支持多层嵌套结构的（图关系，树结构），缓存数据可以减少请求次数提高性能。</p><ul><li><a href="https://github.com/nicksrandall/dataloader" target="_blank" rel="noopener">dataloader</a></li></ul><h3 id="GraphQL工具"><a href="#GraphQL工具" class="headerlink" title="GraphQL工具"></a>GraphQL工具</h3><p>chrome extension</p><ul><li>GraphQL Network</li><li>Apollo Client Developer Tools</li><li>ChromeiQL</li></ul><p>mac tools</p><ul><li>GraphQL Ide</li><li>GraphQL PalyGround</li><li>GraphiQL</li></ul><p>推荐使用GraphQL Ide，它有类似postman的collection功能，方便保存请求接口。也可以在程序debug模式中启用内置GraphiQL。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;RSETful API接口想必大家都比较熟悉，GraphQL设计用于替代RESTful API接口，但目前不是所有情况都使用替代，他们各有优势。&lt;br&gt;GraphQL 是一个用于 API 的查询语言，是一个使用基于类型系统来执行查询的服务端运行时（类型系统由你的数据定义）。GraphQL 并没有和任何特定数据库或者存储引擎绑定，而是依靠你现有的代码和数据支撑。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在 2015 React 欧洲大会上，Lee Byron 介绍了 Facebook 的 GraphQL ，包含 GraphQL 背后的故事，查询语句的示例，还有核心的概念。GraphQL 非常易懂，直接看查询语句就能知道查询出来的数据是什么样的。你可以把 GraphQL 的查询语句想成是没有值，只有属性的对象，返回的结果就是对应的属性还有对应值的对象。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="graphql" scheme="http://www.jerrylou.me/categories/graphql/"/>
    
    
      <category term="golang" scheme="http://www.jerrylou.me/tags/golang/"/>
    
      <category term="graphql" scheme="http://www.jerrylou.me/tags/graphql/"/>
    
      <category term="graphiql" scheme="http://www.jerrylou.me/tags/graphiql/"/>
    
  </entry>
  
  <entry>
    <title>Cassandra数据库Golang Driver</title>
    <link href="http://www.jerrylou.me/nosql/cassandra-golang-driver-20171219.html"/>
    <id>http://www.jerrylou.me/nosql/cassandra-golang-driver-20171219.html</id>
    <published>2017-12-19T09:56:27.000Z</published>
    <updated>2018-05-26T11:07:53.166Z</updated>
    
    <content type="html"><![CDATA[<p>搭建cassandra集群后，项目使用Golang语言对cassandra进行操作。需要Golang Driver，有<a href="https://github.com/gocql/gocql" target="_blank" rel="noopener">gocql</a>，gocql只提供了curd的操作方法，但不支持创建、删除keyspace。查询后有两种方法可以实现：</p><ul><li>gocql + gocqltable，纯Golang实现，gocql持续更新中。</li><li><a href="https://github.com/mstump/golang-driver" target="_blank" rel="noopener">golang-driver</a>，需要<a href="https://github.com/datastax/cpp-driver" target="_blank" rel="noopener">C/C++ driver</a>支持。</li></ul><p>考虑后使用第一方法<br><a id="more"></a></p><p>下载代码包<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">go</span> get -u github.com/gocql/gocql</span><br><span class="line"><span class="keyword">go</span> get -u github.com/kristoiv/gocqltable</span><br></pre></td></tr></table></figure></p><p>代码示例<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/gocql/gocql"</span></span><br><span class="line"><span class="string">"github.com/kristoiv/gocqltable"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Generic initialization of gocql</span></span><br><span class="line">c := gocql.NewCluster(<span class="string">"10.112.68.186"</span>, <span class="string">"10.112.68.192"</span>)</span><br><span class="line">s, err := c.CreateSession()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(<span class="string">"Unable to open up a session with the Cassandra database (err="</span> + err.Error() + <span class="string">")"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Tell gocqltable to use this session object as the default for new objects</span></span><br><span class="line">gocqltable.SetDefaultSession(s)</span><br><span class="line">fmt.Println(<span class="string">"Gocql session setup complete"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Now we're ready to create our first keyspace. We start by getting a keyspace object</span></span><br><span class="line">keyspace := gocqltable.NewKeyspace(<span class="string">"gocqltable_test"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Now lets create that in the database using the simple strategy and durable writes (true)</span></span><br><span class="line">err = keyspace.Create(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;</span><br><span class="line"><span class="string">"class"</span>:              <span class="string">"SimpleStrategy"</span>,</span><br><span class="line"><span class="string">"replication_factor"</span>: <span class="number">1</span>,</span><br><span class="line">&#125;, <span class="literal">true</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123; <span class="comment">// If something went wrong we print the error and quit.</span></span><br><span class="line">log.Fatalln(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">"Keyspace created"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Now that we have a very own keyspace to play with, lets create our first table.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// First we need a Row-object to base the table on. It will later be passed to the table wrapper</span></span><br><span class="line"><span class="comment">// to be used for returning row-objects as the answer to fetch requests.</span></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">Email    <span class="keyword">string</span> <span class="comment">// Our primary key</span></span><br><span class="line">Password <span class="keyword">string</span></span><br><span class="line">Active   <span class="keyword">bool</span></span><br><span class="line">Created  time.Time</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Let's define and instantiate a table object for our user table</span></span><br><span class="line">userTable := <span class="keyword">struct</span> &#123;</span><br><span class="line">gocqltable.Table</span><br><span class="line">&#125;&#123;</span><br><span class="line">keyspace.NewTable(</span><br><span class="line"><span class="string">"users"</span>,           <span class="comment">// The table name</span></span><br><span class="line">[]<span class="keyword">string</span>&#123;<span class="string">"email"</span>&#125;, <span class="comment">// Row keys</span></span><br><span class="line"><span class="literal">nil</span>,               <span class="comment">// Range keys</span></span><br><span class="line">User&#123;&#125;,            <span class="comment">// We pass an instance of the user struct that will be used as a type template during fetches.</span></span><br><span class="line">),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Lets create this table in our cassandra database</span></span><br><span class="line">err = userTable.Create()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">""</span>)</span><br><span class="line">fmt.Println(<span class="string">"Table created: users"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Now that we have a keyspace with a table in it: lets make a few rows! Notice that this is the base example, it uses CQL (not ORM)</span></span><br><span class="line"><span class="comment">// for database interactions such as INSERT/SELECT/UPDATE/DELETE.</span></span><br><span class="line">err = userTable.Query(<span class="string">"INSERT INTO gocqltable_test.users (email, password, active, created) VALUES (?, ?, ?, ?)"</span>, <span class="string">"1@example.com"</span>, <span class="string">"123456"</span>, <span class="literal">true</span>, time.Now().UTC()).Exec()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">"User inserted: 1@example.com"</span>)</span><br><span class="line"></span><br><span class="line">err = userTable.Query(<span class="string">"INSERT INTO gocqltable_test.users (email, password, active, created) VALUES (?, ?, ?, ?)"</span>, <span class="string">"2@example.com"</span>, <span class="string">"123456"</span>, <span class="literal">true</span>, time.Now().UTC()).Exec()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">"User inserted: 2@example.com"</span>)</span><br><span class="line"></span><br><span class="line">err = userTable.Query(<span class="string">"INSERT INTO gocqltable_test.users (email, password, active, created) VALUES (?, ?, ?, ?)"</span>, <span class="string">"3@example.com"</span>, <span class="string">"123456"</span>, <span class="literal">true</span>, time.Now().UTC()).Exec()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">"User inserted: 3@example.com"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// With our database filled up with users, lets query it and print out the results.</span></span><br><span class="line">iter := userTable.Query(<span class="string">"SELECT * FROM gocqltable_test.users"</span>).Fetch()</span><br><span class="line">fmt.Println(<span class="string">""</span>)</span><br><span class="line">fmt.Println(<span class="string">"Fetched all from users:"</span>)</span><br><span class="line"><span class="keyword">for</span> row := <span class="keyword">range</span> iter.Range() &#123;</span><br><span class="line">user := row.(*User)        <span class="comment">// Our row variable is a pointer to "interface&#123;&#125;", and here we type assert it to a pointer to "User"</span></span><br><span class="line">fmt.Println(<span class="string">"User:"</span>, user) <span class="comment">// Let's just print that</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err := iter.Close(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// You can also fetch a single row, obviously</span></span><br><span class="line">row, err := userTable.Query(<span class="string">`SELECT * FROM gocqltable_test.users WHERE email = ? LIMIT 1`</span>, <span class="string">"2@example.com"</span>).FetchRow()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(err)</span><br><span class="line">&#125;</span><br><span class="line">user := row.(*User)</span><br><span class="line">fmt.Println(<span class="string">""</span>)</span><br><span class="line">fmt.Println(<span class="string">"Fetched single row by email: "</span>, user)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Lets clean up after ourselves by dropping the keyspace.</span></span><br><span class="line">keyspace.Drop()</span><br><span class="line">fmt.Println(<span class="string">""</span>)</span><br><span class="line">fmt.Println(<span class="string">"Keyspace dropped"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;搭建cassandra集群后，项目使用Golang语言对cassandra进行操作。需要Golang Driver，有&lt;a href=&quot;https://github.com/gocql/gocql&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;gocql&lt;/a&gt;，gocql只提供了curd的操作方法，但不支持创建、删除keyspace。查询后有两种方法可以实现：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;gocql + gocqltable，纯Golang实现，gocql持续更新中。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/mstump/golang-driver&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;golang-driver&lt;/a&gt;，需要&lt;a href=&quot;https://github.com/datastax/cpp-driver&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;C/C++ driver&lt;/a&gt;支持。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;考虑后使用第一方法&lt;br&gt;
    
    </summary>
    
      <category term="nosql" scheme="http://www.jerrylou.me/categories/nosql/"/>
    
    
      <category term="golang" scheme="http://www.jerrylou.me/tags/golang/"/>
    
      <category term="cassandra" scheme="http://www.jerrylou.me/tags/cassandra/"/>
    
      <category term="nosql" scheme="http://www.jerrylou.me/tags/nosql/"/>
    
      <category term="driver" scheme="http://www.jerrylou.me/tags/driver/"/>
    
  </entry>
  
  <entry>
    <title>NoSQL数据库Cassandra运维工具nodetool连接远程节点</title>
    <link href="http://www.jerrylou.me/nosql/cassandra-nodetool-20171214.html"/>
    <id>http://www.jerrylou.me/nosql/cassandra-nodetool-20171214.html</id>
    <published>2017-12-14T12:25:12.000Z</published>
    <updated>2018-05-26T11:07:53.166Z</updated>
    
    <content type="html"><![CDATA[<p>cassandra集群安装成功后使用nodetool命令连接本机节点正常，连接其他节点报错：<code>connectexception &#39;connection refused (connection refused)&#39;</code>，查看nodetool连接的<code>7199</code>端口，监听<code>0.0.0.0</code>。<br>那为什么会连接不上呢？原因在于：cassandra启动是有两种模式，local和remote模式。可以在<code>conf/cassandra-env.sh</code>中查看和修改。</p><a id="more"></a><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>cassandra默认使用local模式，配置如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [ <span class="string">"x<span class="variable">$LOCAL_JMX</span>"</span> = <span class="string">"x"</span> ]; <span class="keyword">then</span></span><br><span class="line">    LOCAL_JMX=yes</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Specifies the default port over which Cassandra will be available for</span></span><br><span class="line"><span class="comment"># JMX connections.</span></span><br><span class="line"><span class="comment"># For security reasons, you should not expose this port to the internet.  Firewall it if needed.</span></span><br><span class="line">JMX_PORT=<span class="string">"7199"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$LOCAL_JMX</span>"</span> = <span class="string">"yes"</span> ]; <span class="keyword">then</span></span><br><span class="line">  JVM_OPTS=<span class="string">"<span class="variable">$JVM_OPTS</span> -Dcassandra.jmx.local.port=<span class="variable">$JMX_PORT</span>"</span></span><br><span class="line">  JVM_OPTS=<span class="string">"<span class="variable">$JVM_OPTS</span> -Dcom.sun.management.jmxremote.authenticate=false"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  JVM_OPTS=<span class="string">"<span class="variable">$JVM_OPTS</span> -Dcassandra.jmx.remote.port=<span class="variable">$JMX_PORT</span>"</span></span><br><span class="line">  <span class="comment"># if ssl is enabled the same port cannot be used for both jmx and rmi so either</span></span><br><span class="line">  <span class="comment"># pick another value for this property or comment out to use a random port (though see CASSANDRA-7087 for origins)</span></span><br><span class="line">  JVM_OPTS=<span class="string">"<span class="variable">$JVM_OPTS</span> -Dcom.sun.management.jmxremote.rmi.port=<span class="variable">$JMX_PORT</span>"</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># turn on JMX authentication. See below for further options</span></span><br><span class="line">  JVM_OPTS=<span class="string">"<span class="variable">$JVM_OPTS</span> -Dcom.sun.management.jmxremote.authenticate=true"</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># jmx ssl options</span></span><br><span class="line">  <span class="comment">#JVM_OPTS="$JVM_OPTS -Dcom.sun.management.jmxremote.ssl=true"</span></span><br><span class="line">  <span class="comment">#JVM_OPTS="$JVM_OPTS -Dcom.sun.management.jmxremote.ssl.need.client.auth=true"</span></span><br><span class="line">  <span class="comment">#JVM_OPTS="$JVM_OPTS -Dcom.sun.management.jmxremote.ssl.enabled.protocols=&lt;enabled-protocols&gt;"</span></span><br><span class="line">  <span class="comment">#JVM_OPTS="$JVM_OPTS -Dcom.sun.management.jmxremote.ssl.enabled.cipher.suites=&lt;enabled-cipher-suites&gt;"</span></span><br><span class="line">  <span class="comment">#JVM_OPTS="$JVM_OPTS -Djavax.net.ssl.keyStore=/path/to/keystore"</span></span><br><span class="line">  <span class="comment">#JVM_OPTS="$JVM_OPTS -Djavax.net.ssl.keyStorePassword=&lt;keystore-password&gt;"</span></span><br><span class="line">  <span class="comment">#JVM_OPTS="$JVM_OPTS -Djavax.net.ssl.trustStore=/path/to/truststore"</span></span><br><span class="line">  <span class="comment">#JVM_OPTS="$JVM_OPTS -Djavax.net.ssl.trustStorePassword=&lt;truststore-password&gt;"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure></p><p>如果想使用remote模式，添加<code>LOCAL_JMX=false</code>和修改<code>-Dcom.sun.management.jmxremote.authenticate=false</code>，当然你可以开启加密方式。配置如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">LOCAL_JMX=<span class="literal">false</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"x<span class="variable">$LOCAL_JMX</span>"</span> = <span class="string">"x"</span> ]; <span class="keyword">then</span></span><br><span class="line">    LOCAL_JMX=yes</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Specifies the default port over which Cassandra will be available for</span></span><br><span class="line"><span class="comment"># JMX connections.</span></span><br><span class="line"><span class="comment"># For security reasons, you should not expose this port to the internet.  Firewall it if needed.</span></span><br><span class="line">JMX_PORT=<span class="string">"7199"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$LOCAL_JMX</span>"</span> = <span class="string">"yes"</span> ]; <span class="keyword">then</span></span><br><span class="line">  JVM_OPTS=<span class="string">"<span class="variable">$JVM_OPTS</span> -Dcassandra.jmx.local.port=<span class="variable">$JMX_PORT</span>"</span></span><br><span class="line">  JVM_OPTS=<span class="string">"<span class="variable">$JVM_OPTS</span> -Dcom.sun.management.jmxremote.authenticate=false"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  JVM_OPTS=<span class="string">"<span class="variable">$JVM_OPTS</span> -Dcassandra.jmx.remote.port=<span class="variable">$JMX_PORT</span>"</span></span><br><span class="line">  <span class="comment"># if ssl is enabled the same port cannot be used for both jmx and rmi so either</span></span><br><span class="line">  <span class="comment"># pick another value for this property or comment out to use a random port (though see CASSANDRA-7087 for origins)</span></span><br><span class="line">  JVM_OPTS=<span class="string">"<span class="variable">$JVM_OPTS</span> -Dcom.sun.management.jmxremote.rmi.port=<span class="variable">$JMX_PORT</span>"</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># turn on JMX authentication. See below for further options</span></span><br><span class="line">  JVM_OPTS=<span class="string">"<span class="variable">$JVM_OPTS</span> -Dcom.sun.management.jmxremote.authenticate=false"</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># jmx ssl options</span></span><br><span class="line">  <span class="comment">#JVM_OPTS="$JVM_OPTS -Dcom.sun.management.jmxremote.ssl=true"</span></span><br><span class="line">  <span class="comment">#JVM_OPTS="$JVM_OPTS -Dcom.sun.management.jmxremote.ssl.need.client.auth=true"</span></span><br><span class="line">  <span class="comment">#JVM_OPTS="$JVM_OPTS -Dcom.sun.management.jmxremote.ssl.enabled.protocols=&lt;enabled-protocols&gt;"</span></span><br><span class="line">  <span class="comment">#JVM_OPTS="$JVM_OPTS -Dcom.sun.management.jmxremote.ssl.enabled.cipher.suites=&lt;enabled-cipher-suites&gt;"</span></span><br><span class="line">  <span class="comment">#JVM_OPTS="$JVM_OPTS -Djavax.net.ssl.keyStore=/path/to/keystore"</span></span><br><span class="line">  <span class="comment">#JVM_OPTS="$JVM_OPTS -Djavax.net.ssl.keyStorePassword=&lt;keystore-password&gt;"</span></span><br><span class="line">  <span class="comment">#JVM_OPTS="$JVM_OPTS -Djavax.net.ssl.trustStore=/path/to/truststore"</span></span><br><span class="line">  <span class="comment">#JVM_OPTS="$JVM_OPTS -Djavax.net.ssl.trustStorePassword=&lt;truststore-password&gt;"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure></p><p>修改配置后，重启节点。一切ok</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;cassandra集群安装成功后使用nodetool命令连接本机节点正常，连接其他节点报错：&lt;code&gt;connectexception &amp;#39;connection refused (connection refused)&amp;#39;&lt;/code&gt;，查看nodetool连接的&lt;code&gt;7199&lt;/code&gt;端口，监听&lt;code&gt;0.0.0.0&lt;/code&gt;。&lt;br&gt;那为什么会连接不上呢？原因在于：cassandra启动是有两种模式，local和remote模式。可以在&lt;code&gt;conf/cassandra-env.sh&lt;/code&gt;中查看和修改。&lt;/p&gt;
    
    </summary>
    
      <category term="nosql" scheme="http://www.jerrylou.me/categories/nosql/"/>
    
    
      <category term="cassandra" scheme="http://www.jerrylou.me/tags/cassandra/"/>
    
      <category term="nosql" scheme="http://www.jerrylou.me/tags/nosql/"/>
    
      <category term="nodetool" scheme="http://www.jerrylou.me/tags/nodetool/"/>
    
  </entry>
  
  <entry>
    <title>NoSQL数据库Cassandra监控MX4J</title>
    <link href="http://www.jerrylou.me/nosql/cassandra-mx4j-20171213.html"/>
    <id>http://www.jerrylou.me/nosql/cassandra-mx4j-20171213.html</id>
    <published>2017-12-13T14:25:12.000Z</published>
    <updated>2018-05-26T11:07:53.166Z</updated>
    
    <content type="html"><![CDATA[<p>cassandra监控有许多方案，DataStax的Opscenter是比较耗的监控解决方案。可惜Opscenter6.0版本后已经不在支持开源cassandra版本。Opscenter5.x版本支持到cassandra2.1。最好可以使用cassandra自身支持的MX4J进行监控。</p><a id="more"></a><h3 id="下载MX4J"><a href="#下载MX4J" class="headerlink" title="下载MX4J"></a>下载MX4J</h3><p>下载页面：<a href="http://mx4j.sourceforge.net/" target="_blank" rel="noopener">http://mx4j.sourceforge.net/</a></p><p>解压后将mx4j-tools.jar拷贝到cassandra的安装目录的lib文件夹下<br><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">unzip mx4j-<span class="number">3.0</span>.<span class="number">2</span>.zip</span><br><span class="line">cp mx4j-<span class="number">3.0</span>.<span class="number">2</span>/<span class="class"><span class="keyword">lib</span>/<span class="title">mx4j</span>-<span class="title">tools</span>.<span class="title">jar</span> <span class="title">apache</span>-<span class="title">cassandra</span>-3.11.1/<span class="title">lib</span>/</span></span><br></pre></td></tr></table></figure></p><h3 id="配置mx4j"><a href="#配置mx4j" class="headerlink" title="配置mx4j"></a>配置mx4j</h3><p>编辑<code>vim conf/cassandra-env.sh</code>，去除以下注释的配置项<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MX4J_ADDRESS=<span class="string">"-Dmx4jaddress=10.112.68.186"</span></span><br><span class="line">MX4J_PORT=<span class="string">"-Dmx4jport=8081"</span></span><br></pre></td></tr></table></figure></p><p>然后重启cassandra<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/cassandra</span><br></pre></td></tr></table></figure></p><h3 id="登录mx4j"><a href="#登录mx4j" class="headerlink" title="登录mx4j"></a>登录mx4j</h3><p>浏览器中输入：<a href="http://10.112.68.186:8081" target="_blank" rel="noopener">http://10.112.68.186:8081</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;cassandra监控有许多方案，DataStax的Opscenter是比较耗的监控解决方案。可惜Opscenter6.0版本后已经不在支持开源cassandra版本。Opscenter5.x版本支持到cassandra2.1。最好可以使用cassandra自身支持的MX4J进行监控。&lt;/p&gt;
    
    </summary>
    
      <category term="nosql" scheme="http://www.jerrylou.me/categories/nosql/"/>
    
    
      <category term="监控" scheme="http://www.jerrylou.me/tags/%E7%9B%91%E6%8E%A7/"/>
    
      <category term="cassandra" scheme="http://www.jerrylou.me/tags/cassandra/"/>
    
      <category term="nosql" scheme="http://www.jerrylou.me/tags/nosql/"/>
    
      <category term="monitor" scheme="http://www.jerrylou.me/tags/monitor/"/>
    
  </entry>
  
  <entry>
    <title>NoSQL数据库Cassandra监控</title>
    <link href="http://www.jerrylou.me/nosql/cassandra-monitor-20171206.html"/>
    <id>http://www.jerrylou.me/nosql/cassandra-monitor-20171206.html</id>
    <published>2017-12-06T15:25:12.000Z</published>
    <updated>2018-05-26T11:07:53.166Z</updated>
    
    <content type="html"><![CDATA[<p>使用packetbeat、elasticsearch、logstash、kibana为cassandra搭建监控系统。</p><a id="more"></a><h3 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h3><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">groupadd <span class="keyword">add</span> <span class="built_in">es</span></span><br><span class="line">useradd -g <span class="built_in">es</span> <span class="built_in">es</span></span><br><span class="line">passwd <span class="built_in">es</span></span><br></pre></td></tr></table></figure><h3 id="ES安装"><a href="#ES安装" class="headerlink" title="ES安装"></a>ES安装</h3><p>下载<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-6.0.0.zip</span><br><span class="line">unzip elasticsearch-6.0.0.zip</span><br><span class="line">./bin/elasticsearch-plugin install x-pack</span><br></pre></td></tr></table></figure></p><p>修改配置<code>vim config/elasticsearch.yml</code>(未使用集群)<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">network.host: 0.0.0.0</span><br></pre></td></tr></table></figure></p><p>设置内置用户密码(需要启动)<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">bin/x-pack/setup-passwords interactive</span><br><span class="line">elastic：elastic</span><br><span class="line">kibana：kibana</span><br><span class="line">logstash_system：logstash_system</span><br></pre></td></tr></table></figure></p><p>生成随机密码，建议生产环境使用<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/x-pack/setup-passwords auto</span><br></pre></td></tr></table></figure></p><p>启动：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/elasticsearch -d</span><br></pre></td></tr></table></figure></p><p>验证<br>浏览器中<a href="http://10.112.68.192:9200/，输入用户名密码(elastic：elastic)登录，检查es安装是否成功。" target="_blank" rel="noopener">http://10.112.68.192:9200/，输入用户名密码(elastic：elastic)登录，检查es安装是否成功。</a></p><h3 id="kibana安装"><a href="#kibana安装" class="headerlink" title="kibana安装"></a>kibana安装</h3><p>下载<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://artifacts.elastic.co/downloads/kibana/kibana-6.0.0-linux-x86_64.tar.gz</span><br><span class="line">tar zxvf kibana-6.0.0-linux-x86_64.tar.gz</span><br><span class="line">bin/kibana-plugin install x-pack</span><br></pre></td></tr></table></figure></p><p>配置<code>vim config/kibana.yml</code><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">server.port: 5601</span><br><span class="line">server.host: <span class="string">"10.112.68.192"</span></span><br><span class="line">server.name: <span class="string">"es-kibana"</span></span><br><span class="line">elasticsearch.url: <span class="string">"http://localhost:9200"</span></span><br><span class="line">ibana.index: <span class="string">".kibana"</span></span><br><span class="line">elasticsearch.username: <span class="string">"elastic"</span></span><br><span class="line">elasticsearch.password: <span class="string">"elastic"</span></span><br></pre></td></tr></table></figure></p><p>启动<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup ./bin/kibana &amp;</span><br></pre></td></tr></table></figure></p><p>浏览器中输入<a href="http://10.112.68.192:5601/" target="_blank" rel="noopener">http://10.112.68.192:5601/</a> 输入用户名密码登录(kibana：kibana，kibana权限不够请使用elastic用户设置)，检查kibana安装是否成功。</p><h3 id="Packetbeat安装"><a href="#Packetbeat安装" class="headerlink" title="Packetbeat安装"></a>Packetbeat安装</h3><p>Packetbeat 是 Elastic 开源的网络流量实时监控工具，目前支持了一些流行的应用软件，如MongoDB、Redis、MySQL、Cassandra等。</p><p>下载<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://artifacts.elastic.co/downloads/beats/packetbeat/packetbeat-6.0.0-linux-x86_64.tar.gz</span><br><span class="line">sudo yum install libpcap</span><br></pre></td></tr></table></figure></p><p>配置<code>vim packetbeat.yml</code>(其他数据收集关掉，只开启cassandra)<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">packetbeat.interfaces.device: any</span><br><span class="line">- <span class="built_in">type</span>: cassandra</span><br><span class="line">  ports: [9042]</span><br><span class="line">setup.dashboards.enabled: <span class="literal">true</span></span><br><span class="line">setup.kibana:</span><br><span class="line">  host: <span class="string">"10.112.68.192:5601"</span></span><br><span class="line">  username: <span class="string">"kibana"</span></span><br><span class="line">  password: <span class="string">"kibana"</span></span><br><span class="line">output.elasticsearch:</span><br><span class="line">  <span class="comment"># Array of hosts to connect to.</span></span><br><span class="line">  hosts: [<span class="string">"10.112.68.192:9200"</span>]</span><br><span class="line">  username: <span class="string">"elastic"</span></span><br><span class="line">  password: <span class="string">"elastic"</span></span><br></pre></td></tr></table></figure></p><p>启动<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup sudo ./packetbeat -e -v &amp;</span><br></pre></td></tr></table></figure></p><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>编写JAVA测试代码：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line">package com.demo.simple;</span><br><span class="line"></span><br><span class="line">import com.datastax.driver.core.Cluster;</span><br><span class="line">import com.datastax.driver.core.ResultSet;</span><br><span class="line">import com.datastax.driver.core.Row;</span><br><span class="line">import com.datastax.driver.core.Session;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Created by luoji on 04/12/2017.</span><br><span class="line"> */</span><br><span class="line">public class CreateAndPopulateKeyspace &#123;</span><br><span class="line"></span><br><span class="line">    static String[] CONTACT_POINTS = &#123;<span class="string">"10.112.68.186"</span>,<span class="string">"10.112.68.192"</span>&#125;;</span><br><span class="line">    static int PORT = 9042;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">        CreateAndPopulateKeyspace client = new CreateAndPopulateKeyspace();</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line"></span><br><span class="line">            client.connect(CONTACT_POINTS, PORT);</span><br><span class="line">            client.createSchema();</span><br><span class="line">            client.loadData();</span><br><span class="line">            client.querySchema();</span><br><span class="line"></span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            client.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private Cluster cluster;</span><br><span class="line"></span><br><span class="line">    private Session session;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Initiates a connection to the cluster</span><br><span class="line">     * specified by the given contact point.</span><br><span class="line">     *</span><br><span class="line">     * @param contactPoints the contact points to use.</span><br><span class="line">     * @param port          the port to use.</span><br><span class="line">     */</span><br><span class="line">    public void connect(String[] contactPoints, int port) &#123;</span><br><span class="line"></span><br><span class="line">        cluster = Cluster.builder()</span><br><span class="line">                .addContactPoints(contactPoints).withPort(port)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        System.out.printf(<span class="string">"Connected to cluster: %s%n"</span>, cluster.getMetadata().getClusterName());</span><br><span class="line"></span><br><span class="line">        session = cluster.connect();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Creates the schema (keyspace) and tables</span><br><span class="line">     * <span class="keyword">for</span> this example.</span><br><span class="line">     */</span><br><span class="line">    public void <span class="function"><span class="title">createSchema</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">        session.execute(<span class="string">"CREATE KEYSPACE IF NOT EXISTS simplex WITH replication "</span> +</span><br><span class="line">                <span class="string">"= &#123;'class':'SimpleStrategy', 'replication_factor':1&#125;;"</span>);</span><br><span class="line"></span><br><span class="line">        session.execute(</span><br><span class="line">                <span class="string">"CREATE TABLE IF NOT EXISTS simplex.songs ("</span> +</span><br><span class="line">                        <span class="string">"id uuid PRIMARY KEY,"</span> +</span><br><span class="line">                        <span class="string">"title text,"</span> +</span><br><span class="line">                        <span class="string">"album text,"</span> +</span><br><span class="line">                        <span class="string">"artist text,"</span> +</span><br><span class="line">                        <span class="string">"tags set&lt;text&gt;,"</span> +</span><br><span class="line">                        <span class="string">"data blob"</span> +</span><br><span class="line">                        <span class="string">");"</span>);</span><br><span class="line"></span><br><span class="line">        session.execute(</span><br><span class="line">                <span class="string">"CREATE TABLE IF NOT EXISTS simplex.playlists ("</span> +</span><br><span class="line">                        <span class="string">"id uuid,"</span> +</span><br><span class="line">                        <span class="string">"title text,"</span> +</span><br><span class="line">                        <span class="string">"album text, "</span> +</span><br><span class="line">                        <span class="string">"artist text,"</span> +</span><br><span class="line">                        <span class="string">"song_id uuid,"</span> +</span><br><span class="line">                        <span class="string">"PRIMARY KEY (id, title, album, artist)"</span> +</span><br><span class="line">                        <span class="string">");"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Inserts data into the tables.</span><br><span class="line">     */</span><br><span class="line">    public void <span class="function"><span class="title">loadData</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">        session.execute(</span><br><span class="line">                <span class="string">"INSERT INTO simplex.songs (id, title, album, artist, tags) "</span> +</span><br><span class="line">                        <span class="string">"VALUES ("</span> +</span><br><span class="line">                        <span class="string">"756716f7-2e54-4715-9f00-91dcbea6cf50,"</span> +</span><br><span class="line">                        <span class="string">"'La Petite Tonkinoise',"</span> +</span><br><span class="line">                        <span class="string">"'Bye Bye Blackbird',"</span> +</span><br><span class="line">                        <span class="string">"'Joséphine Baker',"</span> +</span><br><span class="line">                        <span class="string">"&#123;'jazz', '2013'&#125;)"</span> +</span><br><span class="line">                        <span class="string">";"</span>);</span><br><span class="line"></span><br><span class="line">        session.execute(</span><br><span class="line">                <span class="string">"INSERT INTO simplex.playlists (id, song_id, title, album, artist) "</span> +</span><br><span class="line">                        <span class="string">"VALUES ("</span> +</span><br><span class="line">                        <span class="string">"2cc9ccb7-6221-4ccb-8387-f22b6a1b354d,"</span> +</span><br><span class="line">                        <span class="string">"756716f7-2e54-4715-9f00-91dcbea6cf50,"</span> +</span><br><span class="line">                        <span class="string">"'La Petite Tonkinoise',"</span> +</span><br><span class="line">                        <span class="string">"'Bye Bye Blackbird',"</span> +</span><br><span class="line">                        <span class="string">"'Joséphine Baker'"</span> +</span><br><span class="line">                        <span class="string">");"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Queries and displays data.</span><br><span class="line">     */</span><br><span class="line">    public void <span class="function"><span class="title">querySchema</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">        ResultSet results = session.execute(</span><br><span class="line">                <span class="string">"SELECT * FROM simplex.playlists "</span> +</span><br><span class="line">                        <span class="string">"WHERE id = 2cc9ccb7-6221-4ccb-8387-f22b6a1b354d;"</span>);</span><br><span class="line"></span><br><span class="line">        System.out.printf(<span class="string">"%-30s\t%-20s\t%-20s%n"</span>, <span class="string">"title"</span>, <span class="string">"album"</span>, <span class="string">"artist"</span>);</span><br><span class="line">        System.out.println(<span class="string">"-------------------------------+-----------------------+--------------------"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Row row : results) &#123;</span><br><span class="line"></span><br><span class="line">            System.out.printf(<span class="string">"%-30s\t%-20s\t%-20s%n"</span>,</span><br><span class="line">                    row.getString(<span class="string">"title"</span>),</span><br><span class="line">                    row.getString(<span class="string">"album"</span>),</span><br><span class="line">                    row.getString(<span class="string">"artist"</span>));</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Closes the session and the cluster.</span><br><span class="line">     */</span><br><span class="line">    public void <span class="function"><span class="title">close</span></span>() &#123;</span><br><span class="line">        <span class="keyword">if</span> (session == null) &#123;</span><br><span class="line">            <span class="built_in">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        session.close();</span><br><span class="line">        cluster.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>浏览器中查看，可以看到刚才对cassandra所做的操作。<br><img src="https://static.oschina.net/uploads/space/2017/1207/184517_Gygb_3724856.png" alt="Alt text" title="kibana"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用packetbeat、elasticsearch、logstash、kibana为cassandra搭建监控系统。&lt;/p&gt;
    
    </summary>
    
      <category term="nosql" scheme="http://www.jerrylou.me/categories/nosql/"/>
    
    
      <category term="监控" scheme="http://www.jerrylou.me/tags/%E7%9B%91%E6%8E%A7/"/>
    
      <category term="cassandra" scheme="http://www.jerrylou.me/tags/cassandra/"/>
    
      <category term="nosql" scheme="http://www.jerrylou.me/tags/nosql/"/>
    
      <category term="monitor" scheme="http://www.jerrylou.me/tags/monitor/"/>
    
  </entry>
  
  <entry>
    <title>NoSQL数据库Cassandra数据模型</title>
    <link href="http://www.jerrylou.me/nosql/cassandra-data-model-20171205.html"/>
    <id>http://www.jerrylou.me/nosql/cassandra-data-model-20171205.html</id>
    <published>2017-12-05T14:16:20.000Z</published>
    <updated>2018-05-26T11:07:53.166Z</updated>
    
    <content type="html"><![CDATA[<p>使用NoSQL存储数据和关系型数据库不一样，关系型数据库是行进行组织数据的。取而代之，应该把它想象成事一个有序的map结构。考虑它是一个map中嵌入另一个map：外部map的key为row key，内部map的key为column key，两个map的key都是有序的。</p><ul><li>区分频次大的查询和频次小的查询，有些查询可能只被查询几千次，其它可能被查询数十亿次；</li><li>还要考虑哪些查询对数据延迟是敏感的。确保你的模型优先满足查询频次大的查询和重要查询。</li><li>反范式化来提升查询性能</li></ul><a id="more"></a><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><p>是关于电子商务系统的一个功能，一个user可以喜欢多个item，同时一个item可以被多个user所喜爱，在关系型数据库中这个关系是通过many-to-many实现的。</p><p><code>用户表</code></p><table><thead><tr><th style="text-align:center">UserID</th><th style="text-align:center">Name</th><th style="text-align:center">Email</th></tr></thead><tbody><tr><td style="text-align:center">u1</td><td style="text-align:center">jerrylou</td><td style="text-align:center">jerrylou@gmail.com</td></tr><tr><td style="text-align:center">u2</td><td style="text-align:center">gunsluo</td><td style="text-align:center">gunsluo@gmail.com</td></tr></tbody></table><p><code>Item表</code></p><table><thead><tr><th style="text-align:center">ItemID</th><th style="text-align:center">Title</th><th style="text-align:center">Desc</th></tr></thead><tbody><tr><td style="text-align:center">i1</td><td style="text-align:center">mac pro</td><td style="text-align:center">mac book</td></tr><tr><td style="text-align:center">i2</td><td style="text-align:center">ipad</td><td style="text-align:center">mac tablet</td></tr></tbody></table><p><code>关系表</code></p><table><thead><tr><th style="text-align:center">ID</th><th style="text-align:center">UserID</th><th style="text-align:center">ItemID</th><th style="text-align:center">Timestamp</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">u1</td><td style="text-align:center">i1</td><td style="text-align:center">1512099720</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">u1</td><td style="text-align:center">i2</td><td style="text-align:center">1512109720</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">u2</td><td style="text-align:center">i1</td><td style="text-align:center">1512119720</td></tr></tbody></table><p>关联表查询</p><ul><li>通过user id获取user</li><li>通过item id获取item</li><li>获取指定user喜欢的所有item</li><li>查看指定item被那些user所喜爱</li></ul><p><strong>按照关系数据库模型设计数据模型</strong></p><p><code>用户表</code></p><table><tr><th style="text-align:center;" rowspan="2">Row Key(UserID)</th><td style="text-align:center;" colspan="2">Column Family</td> </tr><tr><th style="text-align:center;">Name</th> <th style="text-align:center;">Email</th></tr><tr><td style="text-align:center;">u1</td> <td style="text-align:center;">jerrylou</td> <td style="text-align:center;">jerrylou@gmail.com</td> </tr><tr><td style="text-align:center;">u2</td> <td style="text-align:center;">gunsluo</td> <td style="text-align:center;">gunsluo@gmail.com</td> </tr></table><p><code>Item表</code></p><table>     <tr>         <th style="text-align:center;" rowspan="2">Row Key(ItemID)</th>          <td style="text-align:center;" colspan="2">Column Family</td>     </tr>     <tr>         <th style="text-align:center;">Title</th>          <th style="text-align:center;">Desc</th>     </tr>     <tr>         <td style="text-align:center;">i1</td>          <td style="text-align:center;">mac pro</td>          <td style="text-align:center;">mac book</td>      </tr>     <tr>         <td style="text-align:center;">i2</td>          <td style="text-align:center;">ipad</td>          <td style="text-align:center;">mac tablet</td>      </tr> </table><p><code>关系表</code></p><table>     <tr>         <th style="text-align:center;" rowspan="2">Row Key(ID)</th>          <td style="text-align:center;" colspan="3">Column Family</td>     </tr>     <tr>         <th style="text-align:center;">UserID</th>          <th style="text-align:center;">ItemID</th>          <th style="text-align:center;">Timestamp</th>     </tr>     <tr>         <td style="text-align:center;">1</td>          <td style="text-align:center;">u1</td>          <td style="text-align:center;">i1</td>          <td style="text-align:center;">1512099720</td>      </tr>     <tr>         <td style="text-align:center;">2</td>          <td style="text-align:center;">u1</td>          <td style="text-align:center;">i2</td>          <td style="text-align:center;">1512109720</td>      </tr>     <tr>         <td style="text-align:center;">3</td>          <td style="text-align:center;">u2</td>          <td style="text-align:center;">i1</td>          <td style="text-align:center;">1512119720</td>      </tr> </table> <p>这个模型支持通过user id查询user和通过item id查询item。但无法简单查询某个user喜爱的所有item或者某个item被那些user所喜爱。</p><p><strong>范式化实体，并将它们反范式化到自定义索引</strong><br>无法查询的原因是按关系表的进行设计。实体用户表和Item表设计同上。关系表修改为：</p><p><code>User_By_Item表（CF）</code></p><table>     <tr>         <th style="text-align:center;" rowspan="2">Row Key(ItemID)</th>          <td style="text-align:center;" colspan="2">Column Family</td>     </tr>     <tr>         <th style="text-align:center;">u1</th>          <th style="text-align:center;">u2</th>     </tr>     <tr>         <td style="text-align:center;">i1</td>          <td style="text-align:center;">jerrylou</td>          <td style="text-align:center;">gunsluo</td>      </tr>     <tr>         <td style="text-align:center;">i2</td>          <td style="text-align:center;">jerrylou</td>          <td style="text-align:center;"></td>      </tr> </table> <p><code>Item_By_User表（CF）</code></p><table>     <tr>         <th style="text-align:center;" rowspan="2">Row Key(UserID)</th>          <td style="text-align:center;" colspan="2">Column Family</td>     </tr>     <tr>         <th style="text-align:center;">i1</th>          <th style="text-align:center;">i2</th>     </tr>     <tr>         <td style="text-align:center;">u1</td>          <td style="text-align:center;">mac pro</td>          <td style="text-align:center;">ipad</td>      </tr>     <tr>         <td style="text-align:center;">u2</td>          <td style="text-align:center;">mac pro</td>          <td style="text-align:center;"></td>      </tr> </table> <ul><li>通过所给item id，获取具体item信息（title, desc等等），并一同查询喜欢这个item的user name(反范式)</li><li>通过所给的user id，获取具体user信息，并一同查询user喜欢的所有item titile(反范式)</li></ul><p><strong>使用composite column</strong><br>之前忽略了timestamp，使用timestamp和userid【或ItemID】合并为一个composite column key，这样就可以按时间进行排序了。</p><p><code>User_By_Item表（CF）</code></p><table>     <tr>         <th style="text-align:center;" rowspan="2">Row Key(ItemID)</th>          <td style="text-align:center;" colspan="3">Column Family</td>     </tr>     <tr>         <th style="text-align:center;">1512099720|u1</th>          <th style="text-align:center;">1512109720|u1</th>          <th style="text-align:center;">1512119720|u2</th>     </tr>     <tr>         <td style="text-align:center;">i1</td>          <td style="text-align:center;">jerrylou</td>          <td style="text-align:center;"></td>          <td style="text-align:center;">gunsluo</td>      </tr>     <tr>         <td style="text-align:center;">i2</td>          <td style="text-align:center;"></td>          <td style="text-align:center;">gunsluo</td>          <td style="text-align:center;"></td>      </tr> </table><p><code>Item_By_User表（CF）</code></p><table>     <tr>         <th style="text-align:center;" rowspan="2">Row Key(UserID)</th>          <td style="text-align:center;" colspan="3">Column Family</td>     </tr>     <tr>         <th style="text-align:center;">1512099720|i1</th>          <th style="text-align:center;">1512109720|i2</th>          <th style="text-align:center;">1512119720|i1</th>     </tr>     <tr>         <td style="text-align:center;">u1</td>          <td style="text-align:center;">mac pro</td>          <td style="text-align:center;">ipad</td>          <td style="text-align:center;"></td>      </tr>     <tr>         <td style="text-align:center;">u2</td>          <td style="text-align:center;"></td>          <td style="text-align:center;"></td>          <td style="text-align:center;">mac pro</td>      </tr> </table><p>按照具体的查询需求设计数据模型。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用NoSQL存储数据和关系型数据库不一样，关系型数据库是行进行组织数据的。取而代之，应该把它想象成事一个有序的map结构。考虑它是一个map中嵌入另一个map：外部map的key为row key，内部map的key为column key，两个map的key都是有序的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;区分频次大的查询和频次小的查询，有些查询可能只被查询几千次，其它可能被查询数十亿次；&lt;/li&gt;
&lt;li&gt;还要考虑哪些查询对数据延迟是敏感的。确保你的模型优先满足查询频次大的查询和重要查询。&lt;/li&gt;
&lt;li&gt;反范式化来提升查询性能&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="nosql" scheme="http://www.jerrylou.me/categories/nosql/"/>
    
    
      <category term="cassandra" scheme="http://www.jerrylou.me/tags/cassandra/"/>
    
      <category term="data model" scheme="http://www.jerrylou.me/tags/data-model/"/>
    
      <category term="nosql" scheme="http://www.jerrylou.me/tags/nosql/"/>
    
  </entry>
  
  <entry>
    <title>NoSQL数据库Cassandra集群部署</title>
    <link href="http://www.jerrylou.me/nosql/cassandra-install-20171204.html"/>
    <id>http://www.jerrylou.me/nosql/cassandra-install-20171204.html</id>
    <published>2017-12-04T13:32:54.000Z</published>
    <updated>2018-05-26T11:07:53.166Z</updated>
    
    <content type="html"><![CDATA[<p>在Linux系统部署NoSQL数据库Cassandra集群。</p><a id="more"></a><h3 id="系统环境"><a href="#系统环境" class="headerlink" title="系统环境"></a>系统环境</h3><ul><li>OS ：CentOS Linux release 7.3.1611 (Core)</li><li>CPU：Intel(R) Xeon(R) CPU E5-2650 v4 @ 2.20GHz 8核</li><li>内存：16G</li><li>JDK:  1.8u151</li><li>Python: 2.7.5</li><li>Cassandra: 3.11.1</li></ul><table><thead><tr><th style="text-align:center">服务器</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">10.112.68.186</td><td style="text-align:center">节点1</td></tr><tr><td style="text-align:center">10.112.68.191</td><td style="text-align:center">节点2</td></tr><tr><td style="text-align:center">10.112.68.192</td><td style="text-align:center">节点3</td></tr></tbody></table><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><h4 id="JDK安装"><a href="#JDK安装" class="headerlink" title="JDK安装"></a>JDK安装</h4><p>下载地址: <a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="noopener">http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html</a></p><p>解压放到/usr/java/jdk1.8.0_151/目录</p><h4 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">groupadd cassandra</span><br><span class="line">useradd -g cassandra cassandra</span><br><span class="line">passwd cassandra</span><br></pre></td></tr></table></figure><p>切换用户<code>su cassandra</code>，配置环境变量<code>vim ~/.bashrc</code><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">JAVA_HOME=/usr/java/jdk1.8.0_151/</span><br><span class="line">JRE_HOME=/usr/java/jdk1.8.0_151/jre</span><br><span class="line">PATH=.:<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$JRE_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line">CLASSPATH=.:<span class="variable">$CLASSPATH</span>:<span class="variable">$JAVA_HOME</span>/lib/dt.jar:<span class="variable">$JAVA_HOME</span>/lib/tools.jar:<span class="variable">$JRE_HOME</span>/lib</span><br><span class="line"><span class="built_in">export</span> JAVA_HOME JRE_HOME PATH CLASSPATH</span><br><span class="line"></span><br><span class="line">CASSANDRA_HOME=<span class="variable">$HOME</span>/apache-cassandra-3.11.1</span><br><span class="line"><span class="built_in">export</span> CASSANDRA_HOME</span><br></pre></td></tr></table></figure></p><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget http://mirrors.shuosc.org/apache/cassandra/3.11.1/apache-cassandra-3.11.1-bin.tar.gz</span><br><span class="line">tar -xvf apache-cassandra-3.11.1-bin.tar.gz</span><br><span class="line"><span class="built_in">cd</span> apache-cassandra-3.11.1</span><br></pre></td></tr></table></figure><h4 id="配置vim-conf-cassandra-yaml"><a href="#配置vim-conf-cassandra-yaml" class="headerlink" title="配置vim conf/cassandra.yaml"></a>配置<code>vim conf/cassandra.yaml</code></h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cluster_name: <span class="string">'JCPT Test Cluster'</span></span><br><span class="line">- seeds: <span class="string">"10.112.68.186,10.112.68.192"</span></span><br><span class="line">listen_address: 10.112.68.186</span><br><span class="line">rpc_address: 10.112.68.186</span><br></pre></td></tr></table></figure><p>不同节点listen_address、rpc_address不同，cluster_name和seeds是相同的。</p><ul><li>JVM配置: conf/cassandra-env.sh（JVM_OPTS）</li><li>日志配置：conf/logback.xml</li></ul><p>建立数据和日志的存储目录（生产环境数据和日志放在不同分期）<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mkdir data</span><br><span class="line">mkdir data/data</span><br><span class="line">mkdir data/commitlog</span><br><span class="line">mkdir data/saved_caches</span><br><span class="line">mkdir data/hints</span><br><span class="line">mkdir logs</span><br></pre></td></tr></table></figure></p><h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./bin/cassandra -f (前端启动)</span><br><span class="line">./bin/cassandra</span><br></pre></td></tr></table></figure><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bin/cqlsh</span><br><span class="line">SELECT cluster_name, listen_address FROM system.local;</span><br></pre></td></tr></table></figure><p>参考：<a href="http://cassandra.apache.org/doc/latest/configuration/cassandra_config_file.html" target="_blank" rel="noopener">http://cassandra.apache.org/doc/latest/configuration/cassandra_config_file.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在Linux系统部署NoSQL数据库Cassandra集群。&lt;/p&gt;
    
    </summary>
    
      <category term="nosql" scheme="http://www.jerrylou.me/categories/nosql/"/>
    
    
      <category term="cassandra" scheme="http://www.jerrylou.me/tags/cassandra/"/>
    
      <category term="nosql" scheme="http://www.jerrylou.me/tags/nosql/"/>
    
      <category term="install" scheme="http://www.jerrylou.me/tags/install/"/>
    
  </entry>
  
  <entry>
    <title>NoSQL数据库对比</title>
    <link href="http://www.jerrylou.me/nosql/nosql-compare-20171106.html"/>
    <id>http://www.jerrylou.me/nosql/nosql-compare-20171106.html</id>
    <published>2017-11-06T13:14:50.000Z</published>
    <updated>2018-05-26T11:07:53.175Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要对主流NoSQL进行对比，从各个方面进行对比，意在不同场景下选择正确的 NoSql 数据库。本文主要对比HBase、Cassandra、MongoDB、LevelDB、DoltDB。</p><a id="more"></a><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">集群</th><th style="text-align:center">数据一致性</th><th style="text-align:center">事务</th><th style="text-align:center">扩展能力</th></tr></thead><tbody><tr><td style="text-align:center">HBase</td><td style="text-align:center">支持</td><td style="text-align:center">强一致性</td><td style="text-align:center">不支持</td><td style="text-align:center">动态扩容</td></tr><tr><td style="text-align:center">Cassandra</td><td style="text-align:center">支持</td><td style="text-align:center">可调节</td><td style="text-align:center">轻量级</td><td style="text-align:center">虚拟节点,数据迁移</td></tr><tr><td style="text-align:center">LevelDB</td><td style="text-align:center">不支持</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">BoltDB</td><td style="text-align:center">不支持</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">MongoDB</td><td style="text-align:center">Replica Set，Master-Slave</td><td style="text-align:center">强一致性</td><td style="text-align:center">支持</td><td style="text-align:center">命名扩容</td></tr></tbody></table><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">存储模型</th><th style="text-align:center">NoSQL类型</th><th style="text-align:center">语言</th><th style="text-align:center">描述</th><th style="text-align:center">公司</th></tr></thead><tbody><tr><td style="text-align:center">HBase</td><td style="text-align:center">HDFS</td><td style="text-align:center">column-oriented</td><td style="text-align:center">JAVA</td><td style="text-align:center">实时数据查询</td><td style="text-align:center">google</td></tr><tr><td style="text-align:center">Cassandra</td><td style="text-align:center">CommitLog Memtable SSTable</td><td style="text-align:center">column-oriented</td><td style="text-align:center">JAVA</td><td style="text-align:center">CQL支持</td><td style="text-align:center">facebook</td></tr><tr><td style="text-align:center">LevelDB</td><td style="text-align:center">Log Memtable SSTable</td><td style="text-align:center">key-value</td><td style="text-align:center">多写少读</td><td style="text-align:center">内嵌数据库</td><td style="text-align:center">开源</td></tr><tr><td style="text-align:center">BoltDB</td><td style="text-align:center">单文件</td><td style="text-align:center">key-value</td><td style="text-align:center">Golang</td><td style="text-align:center">内嵌数据库</td><td style="text-align:center">开源</td></tr><tr><td style="text-align:center">MongoDB</td><td style="text-align:center">文件</td><td style="text-align:center">document-oriented</td><td style="text-align:center">C/C++</td><td style="text-align:center">文档存储</td><td style="text-align:center">开源</td></tr></tbody></table><ul><li>HBase数据库在HRegionServer宕机恢复需要时间长。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要对主流NoSQL进行对比，从各个方面进行对比，意在不同场景下选择正确的 NoSql 数据库。本文主要对比HBase、Cassandra、MongoDB、LevelDB、DoltDB。&lt;/p&gt;
    
    </summary>
    
      <category term="nosql" scheme="http://www.jerrylou.me/categories/nosql/"/>
    
    
      <category term="cassandra" scheme="http://www.jerrylou.me/tags/cassandra/"/>
    
      <category term="nosql" scheme="http://www.jerrylou.me/tags/nosql/"/>
    
      <category term="hbase" scheme="http://www.jerrylou.me/tags/hbase/"/>
    
      <category term="leveldb" scheme="http://www.jerrylou.me/tags/leveldb/"/>
    
      <category term="boltdb" scheme="http://www.jerrylou.me/tags/boltdb/"/>
    
      <category term="mongodb" scheme="http://www.jerrylou.me/tags/mongodb/"/>
    
  </entry>
  
  <entry>
    <title>Centos7搭建shadowsocksrrs privoxy, 支持Chacha20加密</title>
    <link href="http://www.jerrylou.me/%E7%AC%94%E8%AE%B0/centos-shadowsocksrrs-privoxy-20170821.html"/>
    <id>http://www.jerrylou.me/笔记/centos-shadowsocksrrs-privoxy-20170821.html</id>
    <published>2017-08-21T14:55:48.000Z</published>
    <updated>2018-05-26T11:07:53.167Z</updated>
    
    <content type="html"><![CDATA[<p>shadowsocksrrs和shadowsocks-libev是shadowsocks之后的两分支。window和mac os系统上使用shadowsocks-libev的图形客户端进行翻墙，它安装和配置简单，这里就不在介绍。本文主要对linux服务器如何翻墙进行介绍，下面以Centos7为例。</p><a id="more"></a><h3 id="安装shadowsocksrrs"><a href="#安装shadowsocksrrs" class="headerlink" title="安装shadowsocksrrs"></a>安装shadowsocksrrs</h3><p>Pip 是 Python 的包管理工具，这里我们用 pip 安装 shadowsocks。</p><p>使用 <code>yum install -y pip</code> 安装，官方一个最小化的 CentOS，没有这个包，可以手动安装。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl <span class="string">"https://bootstrap.pypa.io/get-pip.py"</span> -o <span class="string">"get-pip.py"</span></span><br><span class="line">python get-pip.py</span><br></pre></td></tr></table></figure><p>安装客户端</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install --upgrade pip</span><br><span class="line">pip install shadowsocks</span><br></pre></td></tr></table></figure><p>配置客户端</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /etc/shadowsocks</span><br><span class="line">vim config.json</span><br></pre></td></tr></table></figure><p>配置如下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"server"</span>:<span class="string">"server_ip"</span>,</span><br><span class="line">    <span class="string">"server_port"</span>:4004,</span><br><span class="line">    <span class="string">"local_port"</span>:8016,</span><br><span class="line">    <span class="string">"password"</span>:<span class="string">"password"</span>,</span><br><span class="line">    <span class="string">"timeout"</span>:600,</span><br><span class="line">    <span class="string">"method"</span>:<span class="string">"aes-256-cfb"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>启动客户端</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sslocal -c /etc/shadowsocks/config.json</span><br></pre></td></tr></table></figure><p>使用systmed</p><p>新建文件<code>/etc/systemd/system/ssclient.service</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/systemd/system/ssclient.service</span><br></pre></td></tr></table></figure></p><p>文件中内容<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Shadowsocks Client</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">TimeoutStartSec=0</span><br><span class="line">ExecStart=/usr/bin/sslocal -c /etc/shadowsocks/config.json</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure></p><p>启动客户端</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start ssclient</span><br></pre></td></tr></table></figure><p>客户端状态<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status ssclient</span><br></pre></td></tr></table></figure></p><p>开启启动客户端</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> ssclient</span><br></pre></td></tr></table></figure><p>好了，shadowsocksrrs客户端安装完成，由于pip安装的客户端不支持chacha20等加密方式，要支持这些加密方式，需要下载源码。</p><h3 id="支持chacha20加密方式"><a href="#支持chacha20加密方式" class="headerlink" title="支持chacha20加密方式"></a>支持chacha20加密方式</h3><p>安装libsodium</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">wget https://download.libsodium.org/libsodium/releases/LATEST.tar.gz</span><br><span class="line">tar zxvf LATEST.tar.gz</span><br><span class="line"><span class="built_in">cd</span> libsodium-1.0.13</span><br><span class="line">./configure</span><br><span class="line">make -j8 &amp;&amp; make install</span><br><span class="line"><span class="built_in">echo</span> /usr/<span class="built_in">local</span>/lib &gt; /etc/ld.so.conf.d/usr_local_lib.conf</span><br><span class="line">ldconfig</span><br></pre></td></tr></table></figure><p>下载源码<br>由于shadowsocksrrs作者别请去喝茶，代码已经删除。自己备份了一份。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/gunsluo/shadowsocksrrs.git</span><br><span class="line"><span class="built_in">cd</span> shadowsocksrrs/shadowsocks/</span><br></pre></td></tr></table></figure><p>可以看到目录下有local.py文件，它就是客户端入口函数文件。</p><p>修改配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/shadowsocks/config.json</span><br></pre></td></tr></table></figure><p>配置如下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"dns_ipv6"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="string">"server"</span>: <span class="string">"server_ip"</span>,</span><br><span class="line">    <span class="string">"server_port"</span>: 6003,</span><br><span class="line">    <span class="string">"local_address"</span>: <span class="string">"127.0.0.1"</span>,</span><br><span class="line">    <span class="string">"local_port"</span>: 8086,</span><br><span class="line">    <span class="string">"password"</span>: <span class="string">"password"</span>,</span><br><span class="line">    <span class="string">"timeout"</span>: 600,</span><br><span class="line">    <span class="string">"method"</span>: <span class="string">"chacha20"</span>,</span><br><span class="line">    <span class="string">"protocol"</span>: <span class="string">"auth_aes128_md5"</span>,</span><br><span class="line">    <span class="string">"obfs"</span>: <span class="string">"tls1.2_ticket_auth"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>客户端加密配置必须和服务器端相同，根据自己的需求做响应修改。</p><p>启动客户端</p><p>在下载的源码目录下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python ./local.py -c /etc/shadowsocks/config.json</span><br></pre></td></tr></table></figure></p><p>编写启动脚步<code>ssclient</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">/root/shadowsocksrrs/shadowsocks/local.py -c /etc/shadowsocks/japan.json -d <span class="variable">$1</span></span><br></pre></td></tr></table></figure></p><p>mv ssclient /usr/bin/</p><p>启动客户端<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssclient start</span><br></pre></td></tr></table></figure></p><h3 id="测试安装shadowsocksrrs"><a href="#测试安装shadowsocksrrs" class="headerlink" title="测试安装shadowsocksrrs"></a>测试安装shadowsocksrrs</h3><p>测试命令：<code>curl --socks5 127.0.0.1:8086 http://httpbin.org/ip</code> 返回vpn服务器ip，说明安装成功。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"origin"</span>: <span class="string">"x.x.x.x"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="安装privoxy"><a href="#安装privoxy" class="headerlink" title="安装privoxy"></a>安装privoxy</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install privoxy</span><br></pre></td></tr></table></figure><p>编辑 <code>vim /etc/privoxy/config</code>，确保下面两项。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">listen-address  127.0.0.1:8016</span><br><span class="line">forward-socks5t   /               127.0.0.1:8086 .</span><br></pre></td></tr></table></figure><p>启动privoxy<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/sbin/privoxy --user privoxy /etc/privoxy/config</span><br></pre></td></tr></table></figure></p><h3 id="配置终端使用代理的命令"><a href="#配置终端使用代理的命令" class="headerlink" title="配置终端使用代理的命令"></a>配置终端使用代理的命令</h3><p>在<code>~/.zshrc</code> 或者<code>~/.bashrc</code>中加入：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">setproxy</span></span>() &#123;</span><br><span class="line">    <span class="built_in">export</span> &#123;http,https,ftp&#125;_proxy=<span class="string">"http://127.0.0.1:8016"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">unsetproxy</span></span>() &#123;</span><br><span class="line">    <span class="built_in">unset</span> &#123;http,https,ftp&#125;_proxy</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>重新登录终端，setproxy开始代理，unsetproxy关闭代理。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;shadowsocksrrs和shadowsocks-libev是shadowsocks之后的两分支。window和mac os系统上使用shadowsocks-libev的图形客户端进行翻墙，它安装和配置简单，这里就不在介绍。本文主要对linux服务器如何翻墙进行介绍，下面以Centos7为例。&lt;/p&gt;
    
    </summary>
    
      <category term="笔记" scheme="http://www.jerrylou.me/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="区块链" scheme="http://www.jerrylou.me/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
      <category term="shadowsocksrrs" scheme="http://www.jerrylou.me/tags/shadowsocksrrs/"/>
    
  </entry>
  
  <entry>
    <title>IM即时通讯系统业务流程</title>
    <link href="http://www.jerrylou.me/im/im-system-workflow-20170705.html"/>
    <id>http://www.jerrylou.me/im/im-system-workflow-20170705.html</id>
    <published>2017-07-05T13:10:23.000Z</published>
    <updated>2018-05-26T11:07:53.173Z</updated>
    
    <content type="html"><![CDATA[<p>上篇文件讲述了IM系统的整体架构(<a href="/im/im-system-architecture-20170628.html">查看</a>)，对细节的业务流程没有详细的说明。这篇文章主要梳理消息的流转过程，也就是用户A发送消息给客户B，消息是如何到达用户B的。主要流程有消息发送，消息推送，心跳消息</p><a id="more"></a><p>首先对上文中没提到的概念进行说明：</p><ul><li>Session 用户在一定时间的有效会话服务。</li><li>Room    用户对用户发送的消息(个人消息、群消息、讨论组消息)，其实就是一个发布订阅过程，发布者将消息发送到room，订阅者从room中取走消息，对于这样的上下文叫room，有些IM系统中将个人消息的上下文叫channel，这里我统一叫room，只不过个人消息是一个订阅者的room。</li><li>Msg Queue 未读消息队列</li><li>hearbeat 心跳服务器，之前包括在了logic中。</li><li>caller 消息推送触发者，可能是hearbeat，可能是logic。</li><li>sequence 消息序列号生成器</li></ul><h3 id="消息发送流程"><a href="#消息发送流程" class="headerlink" title="消息发送流程"></a>消息发送流程</h3><p>用户A发送消息hello给用户B为例。</p><ol><li>用户A使用终端登录客户端，用户A登录需要验证用户身份（用户权限体系，这里不多说）。登录成功服务器会返回用户唯一标识uid给客户端，同时返回用户A的好友列表（用户B当然就在这个列表中了），之后开始发送心跳消息（这个流程下面讲）</li><li>用户A使用客户端发送hello消息。客户端组装消息报文msg request，消息体包括：uid、消息内容、发送消息时间、发送设备ID、Room ID等。将msg request发送到transfer接入服务，然后等待ack响应。</li><li>tranfer接收到客户端发送的信息后，使用token(uid)去logic中得到连接描述key。</li><li>logic服务收到消息会做几件事情，A. 返回token(uid)的key(uid+roomid) B. 通知router更新用户状态(uid)，C. 通知router更新用户接入信息，uid、transferid、更新时间</li><li>tranfer接收到logic返回key，以key保存连接，带上transferid将消息分发到logic服务，等待logic服务处理。</li><li>logic服务收到消息会做几件事情，D. 排重，根据uid、消息发送时间、设备ID在缓存中查下是否存在。 </li><li>logic服务收到消息会做几件事情，E. 生成msgid，以uid + transferid + roomid取个最新的msgid，自增+1或者用snake算法得到自增的msgid。</li><li>logic服务收到消息会做几件事情，F. 保存消息 G. 响应ack ack报文: uid、Room ID、msgid。</li><li>transfer收到ack后，把ack响应返回给客户端。</li><li>客户端收到ack报文，更新本地信箱，信箱中有msgid的消息即为<strong>消息发送成功</strong>。</li></ol><p><img src="http://wx4.sinaimg.cn/mw690/0065glrAgy1fh9sy3jpibj31hy10cjvj.jpg" alt="Alt text"></p><p>到此用户A的消息就发送出去了，这好像个用户B没有上面关系呀，接下来说消息推送流程。<br><strong>注意</strong> 上面流程中没有说明Room ID是如何生成和分配的，通常是按照具体业务场景进行生成和分配，如按用户A的好友列表进行维护。</p><h3 id="消息推送流程"><a href="#消息推送流程" class="headerlink" title="消息推送流程"></a>消息推送流程</h3><p>用户B如何收到消息呢，首先用户B已经登录客户端（这里不讨论离线消息）。</p><ol><li>logic服务获取Room ID下的所有用户。(维护用户A好友列表的服务可以提供)</li><li>logic服务去router中用户是否在线，并获取在线用户的transferid。</li><li>logic服务更新transferid将消息推送到对应的tranfer。</li><li>logic服务将此消息加入到未读消息队列Msg Queue。</li><li>tranfer收到消息根据uid找到对应连接将其发送到客户端。</li><li>客户端接收到消息，将消息保存到本地信箱，按msgid排序展示给用户B。</li></ol><p><img src="http://wx3.sinaimg.cn/mw690/0065glrAgy1fh9sxyrm0oj31jg0syjub.jpg" alt="Alt text"></p><p>客户B终于收到了消息了，真的一定收到了吗？ transfer推送了消息，没有确认机制保证消息一定到达，这过程可能出现网络问题，也可能客户B异常。所以我们还需要一种机制保证客户的正确的在线状态和消息拉取确认机制。</p><h3 id="心跳消息流程"><a href="#心跳消息流程" class="headerlink" title="心跳消息流程"></a>心跳消息流程</h3><p>心跳消息是客户端登录成功后发起的，心跳时长根据不同的网络环境设置不同值。</p><ol><li>用户A使用客户端发送心跳消息。客户端组装消息报文hearbeat request，消息体包括：uid、网络类型、发送消息时间、发送设备ID、所有Room ID的最后的msgid(确保机制)。将hearbeat request发送到transfer接入服务，然后等待ack响应。</li><li>tranfer接收到客户端发送的心跳，带上transferid将消息分发到hearbeat服务，等待hearbeat服务处理。</li><li>hearbeat服务收到消息会做几件事情，A. 通知router更新用户状态(uid)，B. 通知router更新用户接入信息，uid、transferid、更新时间</li><li>hearbeat服务收到消息会做几件事情，C. Room ID在sequence查询最新的msgid D. 查询的msgid不等于上报的msgid，发送消息通知logic服务启动消息推送流程(uid、Room ID、上报的msgid)</li><li>logic服务收到消息，去未读消息队列中取所有大于上报msgid的消息，在到数据存储层取得消息的全部内容，将消息发送到transfer。</li><li>tranfer收到消息根据uid找到对应连接将其发送到客户端。</li><li>客户端接收到消息，将消息保存到本地信箱，按msgid排序展示给用户B。</li><li>hearbeat服务收到消息会做几件事情，E. 响应hearbeat ack，如果需要调整心跳时长，可以将心跳时长加入到ack响应中。</li><li>tranfer收到消息根据uid找到对应连接将其发送到客户端。</li><li>客户端接收到消息，更新自己的心跳时长。</li></ol><p>hearbeat心跳时间间隔根据不同的网络环境，心跳发送成功次数，信息发送次数等因素进行动态调整。</p><h3 id="长连接维护"><a href="#长连接维护" class="headerlink" title="长连接维护"></a>长连接维护</h3><p>长连接的TCP服务器与客户端通讯: client向server发起连接，server接受client连接，双方建立连接。Client与server完成一次读写之后，它们之间的连接并不会主动关闭，后续的读写操作会继续使用这个连接。<br>下面是用Golang编写的tcp服务端与客户端，客户端每隔一段时间发送消息到服务器，服务器响应回复。代码<code>conn, err = lis.AcceptTCP();</code>中的conn是需要维护的连接，transfer中确保uid与conn的关系，可以使用<code>map[string]*net.TCPConn</code>。</p><p>服务端代码<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"bufio"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line"><span class="string">"net"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">Debug  = <span class="literal">true</span></span><br><span class="line">maxInt = <span class="number">1</span>&lt;&lt;<span class="number">31</span> - <span class="number">1</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">InitTCP([]<span class="keyword">string</span>&#123;<span class="string">"0.0.0.0:9999"</span>&#125;)</span><br><span class="line"><span class="keyword">select</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">InitTCP</span><span class="params">(addrs []<span class="keyword">string</span>)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">bind     <span class="keyword">string</span></span><br><span class="line">listener *net.TCPListener</span><br><span class="line">addr     *net.TCPAddr</span><br><span class="line">)</span><br><span class="line"><span class="keyword">for</span> _, bind = <span class="keyword">range</span> addrs &#123;</span><br><span class="line"><span class="keyword">if</span> addr, err = net.ResolveTCPAddr(<span class="string">"tcp4"</span>, bind); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Printf(<span class="string">"net.ResolveTCPAddr(\"tcp4\", \"%s\") error(%v)"</span>, bind, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> listener, err = net.ListenTCP(<span class="string">"tcp4"</span>, addr); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Printf(<span class="string">"net.ListenTCP(\"tcp4\", \"%s\") error(%v)"</span>, bind, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> Debug &#123;</span><br><span class="line">log.Printf(<span class="string">"start tcp listen: \"%s\""</span>, bind)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> acceptTCP(listener)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">acceptTCP</span><span class="params">(lis *net.TCPListener)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">conn *net.TCPConn</span><br><span class="line">err  error</span><br><span class="line">r    <span class="keyword">int</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">if</span> conn, err = lis.AcceptTCP(); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// if listener close then return</span></span><br><span class="line">log.Printf(<span class="string">"listener.Accept(\"%s\") error(%v)"</span>, lis.Addr().String(), err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err = conn.SetKeepAlive(<span class="literal">false</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Printf(<span class="string">"conn.SetKeepAlive() error(%v)"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err = conn.SetReadBuffer(<span class="number">256</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Printf(<span class="string">"conn.SetReadBuffer() error(%v)"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err = conn.SetWriteBuffer(<span class="number">2048</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Printf(<span class="string">"conn.SetWriteBuffer() error(%v)"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">go</span> serveTCP(conn, r)</span><br><span class="line"><span class="keyword">if</span> r++; r == maxInt &#123;</span><br><span class="line">r = <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">serveTCP</span><span class="params">(conn *net.TCPConn, r <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line"><span class="comment">// ip addr</span></span><br><span class="line">lAddr = conn.LocalAddr().String()</span><br><span class="line">rAddr = conn.RemoteAddr().String()</span><br><span class="line">rbuf  = <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">1024</span>)</span><br><span class="line">)</span><br><span class="line"><span class="keyword">if</span> Debug &#123;</span><br><span class="line">log.Printf(<span class="string">"start tcp serve \"%s\" with \"%s\""</span>, lAddr, rAddr)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">reader := bufio.NewReader(conn)</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">n, err := reader.Read(rbuf)</span><br><span class="line"><span class="comment">//message, err := reader.ReadString('\n')</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">message := rbuf[<span class="number">0</span>:n]</span><br><span class="line">log.Printf(<span class="string">"read message (%s)"</span>, <span class="keyword">string</span>(message))</span><br><span class="line"></span><br><span class="line">reply := time.Now().String()</span><br><span class="line">conn.Write([]<span class="keyword">byte</span>(reply))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>客户端代码<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"bufio"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"net"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> quitSemaphore <span class="keyword">chan</span> <span class="keyword">bool</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> tcpAddr *net.TCPAddr</span><br><span class="line">tcpAddr, _ = net.ResolveTCPAddr(<span class="string">"tcp"</span>, <span class="string">"192.168.0.9:9999"</span>)</span><br><span class="line"></span><br><span class="line">conn, _ := net.DialTCP(<span class="string">"tcp"</span>, <span class="literal">nil</span>, tcpAddr)</span><br><span class="line"><span class="keyword">defer</span> conn.Close()</span><br><span class="line">fmt.Println(<span class="string">"connected!"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> onMessageRecived(conn)</span><br><span class="line"></span><br><span class="line">b := []<span class="keyword">byte</span>(<span class="string">"time"</span>)</span><br><span class="line">conn.Write(b)</span><br><span class="line"></span><br><span class="line">&lt;-quitSemaphore</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">onMessageRecived</span><span class="params">(conn *net.TCPConn)</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> rbuf = <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">1024</span>)</span><br><span class="line">reader := bufio.NewReader(conn)</span><br><span class="line">value := <span class="number">5</span></span><br><span class="line">incr := <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">n, err := reader.Read(rbuf)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">quitSemaphore &lt;- <span class="literal">true</span></span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">msg := rbuf[<span class="number">0</span>:n]</span><br><span class="line">fmt.Println(<span class="keyword">string</span>(msg))</span><br><span class="line"></span><br><span class="line">time.Sleep(time.Duration(value) * time.Second)</span><br><span class="line">conn.Write([]<span class="keyword">byte</span>(msg))</span><br><span class="line">value += incr</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>重新梳理了消息流转流程，基本清楚了消息的轮转，对Room ID的生成和分配还需进行研究。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上篇文件讲述了IM系统的整体架构(&lt;a href=&quot;/im/im-system-architecture-20170628.html&quot;&gt;查看&lt;/a&gt;)，对细节的业务流程没有详细的说明。这篇文章主要梳理消息的流转过程，也就是用户A发送消息给客户B，消息是如何到达用户B的。主要流程有消息发送，消息推送，心跳消息&lt;/p&gt;
    
    </summary>
    
      <category term="im" scheme="http://www.jerrylou.me/categories/im/"/>
    
    
      <category term="im" scheme="http://www.jerrylou.me/tags/im/"/>
    
      <category term="即时通讯" scheme="http://www.jerrylou.me/tags/%E5%8D%B3%E6%97%B6%E9%80%9A%E8%AE%AF/"/>
    
  </entry>
  
  <entry>
    <title>IM即时通讯系统架构设计</title>
    <link href="http://www.jerrylou.me/im/im-system-architecture-20170628.html"/>
    <id>http://www.jerrylou.me/im/im-system-architecture-20170628.html</id>
    <published>2017-06-28T12:24:51.000Z</published>
    <updated>2018-05-26T11:07:53.173Z</updated>
    
    <content type="html"><![CDATA[<p>即时通信（Instant Messaging，简称IM）是一种通过网络进行实时通信的系统，允许两人或多人使用网络即时的传递文字消息、文件、语音与视频交流。<br>微信、QQ基本占领的IM即时通讯系统的半个江湖，易信、钉钉、飞信、旺旺、咚咚、陌陌也各有市场。查询了相关资料后设计了这篇高并发IM通讯系统，不当之处，请指正。<strong>(最终架构图在<a href="/im/im-system-architecture-20170628.html#总结">总结</a>章节)</strong></p><a id="more"></a><p>IM不就是聊天工具么? 两个用户（Client），一个Server转发聊天内容就可以完成聊天功能。最早的聊天室就是这样设计开发的。问题在于用户量不断上涨，一台服务器无法应对成千上万的用户请求。如何接入这么多用户，做到高并发？这就是今天要解决的问题，首先应该对系统进行分层，细化功能点确定每层需要完成的功能。<br>IM系统的三层架构(不包括client)：</p><ul><li>接入层: 用户的连接接入(协议是tcp、udp、http、socketio等，是短链接、长链接。)，接受客户端发送的消息，推送消息到客户端。</li><li>逻辑层: 接收接入层接入的消息，对消息进行校验，去重，验证，过滤等业务操作，存储消息内容，本层服务是无状态的，容易扩展。</li><li>存储层: 处理逻辑层注册的消息，主要维护消息发送者客户端状态功能，保存发送者接入路由信息（也就是从哪个机器接入，最新的msgid是多少等信息）。本层服务有状态的，设计时应该关注本层的扩展性。</li></ul><p>我给这三层对应服务的命名：接入层服务叫tranfer（客户端连接管理，接受转发推送消息模块），逻辑层服务叫logic(业务逻辑模块)，存储层服务router（用户在线状态，用户接入路由信息保存等）</p><h3 id="消息轮转流程"><a href="#消息轮转流程" class="headerlink" title="消息轮转流程"></a>消息轮转流程</h3><p>我接着了解下IM系统的消息轮转流程。首先客户发送信息流程</p><ol><li>客户端连接上tranfer，发送消息到tranfer服务，这个消息请求中包括用户UID、消息内容、发送消息时间、发送设备ID等。然后等待ack响应。 </li><li>tranfer接收到客户端发送的信息后，将消息转发到logic服务。</li><li>logic为消息生成msgid(通常由uid,deviceid,发送时间hash再加上自增id得到，这样msgid就是有序的)，logic通过msgid查询消息是否已经发送进行排重，重复响应tranfer消息重复发送。</li><li>logic将消息注册到router，更新发送消息用户的在线状态，保存消息的来源（来自哪个tranfer，相当于路由表），把消息来源存储到cache/db。完成后，router给logic服务ack响应。</li><li>logic收到ack后，把ack响应给tranfer服务。</li><li>tranfer将此带msgid的响应ack返回给客户端，客户端收到ack，即可确定<strong>消息发送成功</strong>。</li></ol><p>客户端发送消息成功，接着就是另一边的客户端接收消息，也就是消息投递。这里需要说明的是客户A发送消息到客户B（群B），他们之间就建立了会话，我们叫它sessoin(有些叫channel，room【群】)。</p><ol><li>logic从router服务获取session上发送到接收者的用户列表。</li><li>logic从route服务查找出用户列表中所有在线用户的tranfer地址。</li><li>logic将消息发送到对应的tranfer地址。</li><li>tranfer收到消息并将其发送到客户端。</li><li>最终客户端接收到消息内容。</li></ol><p>客户端接收消息OK了。但是有个问题，如果用户在线却一直不发送信息，怎么判断他在线呢？所以客户端应该定时发送心跳包给tranfer，以告知transfer客户端的存在，这就是hearbeat。</p><ol><li>客户端发送hearbeat到tranfer，hearbeat包括用户UID、发送消息时间、发送设备ID外，还用户所在的所有session和在session中的最新msgid。</li><li>tranfer转发hearbeat到logic</li><li>logic到router更新发送消息用户的在线状态，保存消息的来源（来自哪个tranfer，相当于路由表）。</li><li>logic到router查询session的最新msgid，如果上报msgid不等于查询msgid，启动下发消息流程。</li><li>logic下发未读消息到客户端。</li></ol><p>hearbeat心跳时间间隔根据不同的网络环境，心跳发送成功次数，信息发送次数等因素进行动态调整。</p><p>了解了IM的消息轮转流程和分层结构，可以给出一个粗略设计图。<br><img src="http://wx4.sinaimg.cn/mw690/0065glrAgy1fh1d8v5sk5j312c0zu0wl.jpg" alt="Alt text"></p><p>图中为IM系统进行了分层，每层服务有多点（还没有负载均衡方案，当可以同时提供多点服务），对于数据存储可以使用cache/db两层模式，cache提供读取性能，db用户持久化。在推送下发消息使用消息队列，可以做到解耦、异步、高并发。<br><img src="http://wx1.sinaimg.cn/mw690/0065glrAgy1fh2u0jizcqj31ay0zmdkb.jpg" alt="Alt text"></p><h3 id="高可用"><a href="#高可用" class="headerlink" title="高可用"></a>高可用</h3><p>图中三层中的服务节点扩展为多节点，不同的客户端连接不同的节点以达到接入能力的提升。接入能力提升，但每个节点还存在着单点问题。如何解决单点问题，达到高可用?</p><p>接入层的tranfer服务是客户端的接入口，使用长链接时，服务要保持链接不中断。tranfer是无状态，但要保持本次连接状态（本次连接断开可以连接其它tranfer）。</p><ol><li>对于不分区域的接入情况，可以使用负载均衡器将用户请求分配到不同的tranfer上，如果有一台服务宕机，负载均衡器将该节点移除。这样会出现该节点所有连接会断开一次，客户端重连，再由负载均衡器分配到其他节点上。缺点是宕机会加大其他机器的负荷。（负载均衡的软实现有lvs+keepalived，nginx upstream，haproxy + pacemaker，硬负载有f5、array。根据业务情况选择实现)。</li><li>对于不分区域的接入情况，对于单点宕机时可不可以不增加其它节点负荷。答案是YES，使用transfer服务主备方案，主transfer服务宕机，备接替工作。由于这里使用tcp长连接，主节点的连接还是会中断一次，还好客户端有重连机制，重连连接会到备节点上。transfer的主备切换如何实现呢？有两种方式，第一种：使用vrrp协议 + 接口监视，第二种：使用下面会将到的monitor监控通知。 主备方案缺点很明显，有一半的备节点处于空闲状态，资源浪费严重，优点是主备方案实施相对其它要简单些。在前期（业务快速增长期）使用，暂时不考虑节约成本问题。</li><li>分区域接入场景，对于来自不同地区的用户，地区之间的网络差异明显。对于这样情况，应该按区域部署的transfer服务，不同IDC部署的transfer服务。那问题来了，客户端如何选择接入哪个(几个)transfer呢？通常增加查询transfer地址列表接口，通过客户端ip的到用户区域，返回transfer地址列表，客户端再尝试在地址列表中选择最优地址。</li></ol><p>通过以上策略就能是接入层transfer高可用，接下来分析逻辑层。接入层、逻辑层、存储层的通讯通常采用RPC。逻辑层logic服务是无状态，每个节点都可以处理来自transfer的消息。</p><ol><li>最简单的方式就是使用nginx upstream做转发达到负载的功能，logic接收nginx转发消息。需要注意的是nginx本身也需要搭建集群解决单点问题。</li><li>增加moniter服务监控transfer、logic、router的健康情况，transfer、logic、router启动会定时向monitor发送心跳hearbeat，当monitor监控到会logic有节点出现故障，则推送新logic地址列表到transfer，transfer更新本地logic地址列表。transfer使用新的logic地址发送消息。这里存在logic宕机，transfer未及时更新logic列表任然将数据发送到故障节点的问题，所以transfer必须有重试机制和重试队列，重试策略与moniter的心跳发送频率有关，具体策略也按实际策略而定。moniter从设计上是无状态，集群的，集群中每个节点都有相同配置。优点从业务角度做负载均衡，可以自定义易扩展，缺点是增加了服务的耦合性。需要强调的无论如何都需要moniter监控服务，通知transfer更新地址列表接口增加了耦合性。</li></ol><p>剩下存储层高可用问题，router服务是存储用户的在线状态，服务本身就是有状态的。</p><ol><li>logic通过一致性hash算法将消息散列到不同的router，当有节点故障时，散列该节点的新消息转发到其他节点，当老消息中处理的消息就无法处理。并且节点回复正常是，还需要做数据迁移。（可作为前期版本过度）</li><li>基于上面的问题，可以使用router主备策略，logic转发的消息同时发送到主备，当只有主工作，当主宕机后，moniter（或logic）感知到router宕机，提升备为主。同时告警节点故障，恢复节点是，从运行节点中恢复数据。优点是解决了高可用，最大的缺点是一致性hash使扩容需要迁移数据。 </li></ol><p>修改后的架构图。<br><img src="http://wx1.sinaimg.cn/mw690/0065glrAgy1fh2u1wyf8kj31ca0zs0xe.jpg" alt="Alt text"></p><h3 id="服务扩容"><a href="#服务扩容" class="headerlink" title="服务扩容"></a>服务扩容</h3><p>随着用户的增长，现有机器无法承载是就需要进行服务扩容，怎样才能快捷方便的进行服务扩容呢？能否做到auto-scaling？<br>上面讲到接入层上层使用的负载均衡器，当transfer增加节点服务时，启动新节点后，将节点信息配置到负载均衡器并加载。假如负载策略是平均分配，新接入用户就会分配到新的transfer，直到每个节点接入量平衡。当然也可以按其它策略进行分配，例如A机器配置高可以承载更多的接入量，就可以调整分配策略分配更多接入到A。</p><p>对于逻辑层而言，增加logic节点，logic注册到monitor，monitor更新本地logic地址列表，通知transfer服务logic地址已改变，最后transfer调整发送策略完成扩展。</p><p>存储层服务扩容，比较麻烦，由于之前使用了一致性hash算法，增加删除节点都需要进行数据迁移，扩展能力相对差些。一致性hash算法是根本问题所在，那我们使用逻辑层的monitor + 主备方式可以吗？monitor方式的问题是请求随机发送到router服务上，而不是用户不变时都请求同一服务，这样会大大降低cache的命中率，降低系统性能。<br>从业务场景出发，router是维护用户状态的，用户数量是有限的，是可以提前预告在线和压力的。微信架构中对于相关设计是单点容灾策略，他整个系统又按用户uid范围进行分Set，每个Set都是一个完整的、独立的子系统。分Set设计目的是为了做灾难隔离，一个Set出现故障只会影响该Set内的用户，而不会影响到其它用户。他使用仲裁节点（类似monitor）判断节点是否正常，再配合嵌入式路由表，将宕机节点请求转移到其它节点。嵌入式路由表是核心，这里就不说原理了，它就是通过维护client(我们这里的logic)与查询服务(我们这里的router)的路由信息一致，其实就是通过在每个报文中带上路由信息，在配合仲裁节点可动态修改路由表，以达到节点的增加删除切换。<br><img src="http://wx1.sinaimg.cn/mw690/0065glrAgy1fh2u5dcu45j30y70diaav.jpg" alt="Alt text"></p><p>结论：使用一致性hash算法和预估压力就能满足打部分要求，使用这种方案做好节点的数据迁移（其实不用迁移，cache重新命中就可以）。 后期可以考虑嵌入式路由表节约成本和auto-scaling.</p><h3 id="统计、监控与配置"><a href="#统计、监控与配置" class="headerlink" title="统计、监控与配置"></a>统计、监控与配置</h3><p>为了时刻知道线上服务的状态，做到提前预警，整个系统还应该有监控。其次，业务数据的统计量也很重要，知道我们下一步该业务中心，以及可能产出的瓶颈。通过这些数据，可能需要去修改服务配置、启动新服务等，配置管理与下发同样重要。</p><ol><li>监控：agent，监控服务所属服务器的状态（CPU、MEM、IO等），核心进程状态（logic、router等），通常核心进程状态监控不应用到生产环境，开启会影响性能。如有必要才开启</li><li>统计：statis，统计点数据上报，业务数据和非业务数据都可以。</li><li>配置: etcd，配置下发功能。</li></ol><h3 id="序列号生成器"><a href="#序列号生成器" class="headerlink" title="序列号生成器"></a>序列号生成器</h3><p>在消息轮转流程中提到msgid的生成，要求是msgid是线性递增的。序列号生成器需要再系统中独立存在运行。IM中通常按用户来自增长的，可以使用redis的inrc来简单实现。</p><h3 id="富文本消息"><a href="#富文本消息" class="headerlink" title="富文本消息"></a>富文本消息</h3><p>对于图片、声音、视频的消息，在IM系统中，客户端本地上传富文本到文件服务器，文件服务器返回url，客户端再将url作为普通消息发送（文本类型要标识），接收端收到消息后，再去服务器上下载。 文件服务器可以选择第三方服务，自建建议使用ceph对象存储服务。</p><h3 id="网络传输协议"><a href="#网络传输协议" class="headerlink" title="网络传输协议"></a>网络传输协议</h3><p>IM系统传输使用UDP、TCP、基于TCP的http这几种协议中的一种或几种。</p><ul><li>UDP协议实时性更好，但是如何处理安全可靠的传输并且处理不同客户端之间的消息交互是个难题；</li><li>TCP协议安全可靠的，如何保证单机服务器高并发量，如何做到灵活，扩展的架构。<br>业界选择TCP居多，建议选择TCP。</li></ul><h3 id="数据传输格式"><a href="#数据传输格式" class="headerlink" title="数据传输格式"></a>数据传输格式</h3><p>对传输的数据应该进行压缩，安全性处理。基于这些要求，选择probuffer是再合适不过了(建议)。当然json格式也是可以的选择，json没有压缩报文，但清晰明了。</p><h3 id="跨区域网络问题"><a href="#跨区域网络问题" class="headerlink" title="跨区域网络问题"></a>跨区域网络问题</h3><p>目前想到的只能走IDC机房专线。 </p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>下图是对IM系统认知的总结，总体来说我对im系统还不太了解，还需要继续研究学。<br><img src="http://wx3.sinaimg.cn/mw690/0065glrAgy1fh2ulo9hssj316y0xujvw.jpg" alt="Alt text"></p><h3 id="参考项目"><a href="#参考项目" class="headerlink" title="参考项目"></a>参考项目</h3><ul><li><a href="https://github.com/Terry-Mao/gopush-cluster" target="_blank" rel="noopener">gopush-cluster</a></li><li><a href="https://github.com/Terry-Mao/goim" target="_blank" rel="noopener">goim</a></li><li><a href="https://github.com/actorapp/actor-platform" target="_blank" rel="noopener">actor.im</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;即时通信（Instant Messaging，简称IM）是一种通过网络进行实时通信的系统，允许两人或多人使用网络即时的传递文字消息、文件、语音与视频交流。&lt;br&gt;微信、QQ基本占领的IM即时通讯系统的半个江湖，易信、钉钉、飞信、旺旺、咚咚、陌陌也各有市场。查询了相关资料后设计了这篇高并发IM通讯系统，不当之处，请指正。&lt;strong&gt;(最终架构图在&lt;a href=&quot;/im/im-system-architecture-20170628.html#总结&quot;&gt;总结&lt;/a&gt;章节)&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="im" scheme="http://www.jerrylou.me/categories/im/"/>
    
    
      <category term="im" scheme="http://www.jerrylou.me/tags/im/"/>
    
      <category term="即时通讯" scheme="http://www.jerrylou.me/tags/%E5%8D%B3%E6%97%B6%E9%80%9A%E8%AE%AF/"/>
    
  </entry>
  
  <entry>
    <title>TCP BBR拥塞控制算法，为你的网络提速！</title>
    <link href="http://www.jerrylou.me/%E7%BD%91%E7%BB%9C/tcp-bbr-20170509.html"/>
    <id>http://www.jerrylou.me/网络/tcp-bbr-20170509.html</id>
    <published>2017-05-09T14:46:14.000Z</published>
    <updated>2018-05-26T11:07:53.181Z</updated>
    
    <content type="html"><![CDATA[<p>TCP BBR是谷歌出品的TCP拥塞控制算法。BBR目的是要尽量跑满带宽，并且尽量不要有排队的情况。BBR可以起到单边加速TCP连接的效果。替代锐速再合适不过，毕竟免费。</p><p>Google提交到Linux主线并发表在ACM queue期刊上的TCP-BBR拥塞控制算法。继承了Google“先在生产环境上部署，再开源和发论文”的研究传统。TCP-BBR已经再YouTube服务器和Google跨数据中心的内部广域网(B4)上部署。由此可见出该算法的前途。</p><p>TCP-BBR的目标就是最大化利用网络上瓶颈链路的带宽。一条网络链路就像一条水管，要想最大化利用这条水管，最好的办法就是给这跟水管灌满水。</p><a id="more"></a><p>BBR解决了两个问题：</p><ol><li><p>再有一定丢包率的网络链路上充分利用带宽。非常适合高延迟，高带宽的网络链路。</p></li><li><p>降低网络链路上的buffer占用率，从而降低延迟。非常适合慢速接入网络的用户。</p></li></ol><p>项目地址:<a href="https://github.com/google/bbr" target="_blank" rel="noopener">https://github.com/google/bbr</a></p><h3 id="安装BBR"><a href="#安装BBR" class="headerlink" title="安装BBR"></a>安装BBR</h3><p>BBR是内嵌在Linux内核中的，目前Linux Kernel 4.9已加入了该算法，所以安装新版本内核开启BBR即可享用。</p><h4 id="Debian-Ubuntu"><a href="#Debian-Ubuntu" class="headerlink" title="Debian/Ubuntu"></a>Debian/Ubuntu</h4><p>下面简单讲述如何在Debian/Ubuntu 64bit系统中升级kernel开启TCP BBR拥塞控制算法。</p><p><strong>下载最新内核</strong><br>最新内核查看这里：<a href="http://kernel.ubuntu.com/~kernel-ppa/mainline/" target="_blank" rel="noopener">http://kernel.ubuntu.com/~kernel-ppa/mainline/</a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~;mkdir linux49; <span class="built_in">cd</span> linux49</span><br><span class="line">$ wget http://kernel.ubuntu.com/~kernel-ppa/mainline/v4.9/linux-headers-4.9.0-040900-generic_4.9.0-040900.201612111631_amd64.deb</span><br><span class="line">$ wget http://kernel.ubuntu.com/~kernel-ppa/mainline/v4.9/linux-image-4.9.0-040900-generic_4.9.0-040900.201612111631_amd64.deb</span><br><span class="line">$ wget http://kernel.ubuntu.com/~kernel-ppa/mainline/v4.9/linux-headers-4.9.0-040900_4.9.0-040900.201612111631_all.deb</span><br></pre></td></tr></table></figure></p><p><strong>开始安装</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ dpkg -i *.deb</span><br></pre></td></tr></table></figure><p>以上用于64位系统，其它可以自行下载Index of /~kernel-ppa/mainline/v4.9 对应版本。</p><p><strong>删除其余内核(非必需)</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ dpkg -l|grep linux-image </span><br><span class="line">$ apt-get remove linux-image-[Tab补全] <span class="comment">#删旧内核，在这里，就是把第一个删掉</span></span><br></pre></td></tr></table></figure><p><strong>更新grub系统引导文件并重启</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ update-grub</span><br></pre></td></tr></table></figure><p>重启系统并查看内核</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ reboot</span><br><span class="line">$ uname -a</span><br></pre></td></tr></table></figure><h4 id="Centos-RHEL"><a href="#Centos-RHEL" class="headerlink" title="Centos/RHEL"></a>Centos/RHEL</h4><p>通过使用ELRepo源的方式在CentOS中安装最新版kernel。</p><p><strong>CentOS 6</strong></p><p>下载内核并安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org</span><br><span class="line">$ rpm -Uvh http://www.elrepo.org/elrepo-release-6-6.el6.elrepo.noarch.rpm</span><br><span class="line">$ yum --enablerepo=elrepo-kernel install kernel-ml kernel-ml-devel -y</span><br></pre></td></tr></table></figure><p>查看内核是否安装成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rpm -qa | grep kernel</span><br></pre></td></tr></table></figure><p>更新grub系统引导文件并重启</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sed -i <span class="string">'s:default=.*:default=0:g'</span> /etc/grub.conf</span><br><span class="line">$ reboot</span><br></pre></td></tr></table></figure><p><strong>CentOS 7</strong></p><p>下载内核并安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org</span><br><span class="line">$ rpm -Uvh http://www.elrepo.org/elrepo-release-7.0-2.el7.elrepo.noarch.rpm</span><br><span class="line">$ yum --enablerepo=elrepo-kernel install kernel-ml  kernel-ml-devel -y</span><br></pre></td></tr></table></figure><p>查看内核是否安装成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rpm -qa | grep kernel</span><br></pre></td></tr></table></figure><p>更新grub系统引导文件并重启</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ egrep ^menuentry /etc/grub2.cfg | cut -f 2 -d \<span class="string">' #删除其余内核(非必需) $ grub2-set-default 0  #default 0表示第一个内核设置为默认运行, 选择最新内核就对了 $ reboot</span></span><br></pre></td></tr></table></figure><h4 id="Google-TCP-BBR一键安装脚本"><a href="#Google-TCP-BBR一键安装脚本" class="headerlink" title="Google TCP BBR一键安装脚本"></a>Google TCP BBR一键安装脚本</h4><p>适用于Centos6 32位和64位</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ wget --no-check-certificate https://github.com/52fancy/GooGle-BBR/raw/master/BBR.sh &amp;&amp; sh BBR.sh</span><br><span class="line">适用于Centos 6/7  仅适用64位）</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ wget -O- http://soft.wellphp.com/scripts/install_bbr_centos.sh | bash</span><br></pre></td></tr></table></figure><h3 id="开启BBR"><a href="#开启BBR" class="headerlink" title="开启BBR"></a>开启BBR</h3><p>安装内核后从刚安装的内核启动，然后执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">"net.core.default_qdisc=fq"</span> &gt;&gt; /etc/sysctl.conf</span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">"net.ipv4.tcp_congestion_control=bbr"</span> &gt;&gt; /etc/sysctl.conf</span><br></pre></td></tr></table></figure><p>保存生效</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sysctl -p</span><br></pre></td></tr></table></figure><p>验证是否安装成功</p><p>执行以下命令，如果结果中有bbr则证明你的内核已开启bbr。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ sysctl net.ipv4.tcp_available_congestion_control</span><br><span class="line">net.ipv4.tcp_available_congestion_control = bbr cubic reno</span><br><span class="line"></span><br><span class="line">$ lsmod | grep bbr</span><br><span class="line">tcp_bbr                20480  0</span><br></pre></td></tr></table></figure><h3 id="关闭BBR"><a href="#关闭BBR" class="headerlink" title="关闭BBR"></a>关闭BBR</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sed -i <span class="string">'/net\.core\.default_qdisc=fq/d'</span> /etc/sysctl.conf</span><br><span class="line">$ sed -i <span class="string">'/net\.ipv4\.tcp_congestion_control=bbr/d'</span> /etc/sysctl.conf</span><br><span class="line">$ sysctl -p</span><br></pre></td></tr></table></figure><p>执行完上面的代码，使用reboot重启后才能关闭bbr，重启后再用下面的查看bbr状态代码，查看是否关闭了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ lsmod | grep bbr</span><br></pre></td></tr></table></figure><p>如果结果中没有bbr, 则证明你的内核已关闭bbr</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;TCP BBR是谷歌出品的TCP拥塞控制算法。BBR目的是要尽量跑满带宽，并且尽量不要有排队的情况。BBR可以起到单边加速TCP连接的效果。替代锐速再合适不过，毕竟免费。&lt;/p&gt;
&lt;p&gt;Google提交到Linux主线并发表在ACM queue期刊上的TCP-BBR拥塞控制算法。继承了Google“先在生产环境上部署，再开源和发论文”的研究传统。TCP-BBR已经再YouTube服务器和Google跨数据中心的内部广域网(B4)上部署。由此可见出该算法的前途。&lt;/p&gt;
&lt;p&gt;TCP-BBR的目标就是最大化利用网络上瓶颈链路的带宽。一条网络链路就像一条水管，要想最大化利用这条水管，最好的办法就是给这跟水管灌满水。&lt;/p&gt;
    
    </summary>
    
      <category term="网络" scheme="http://www.jerrylou.me/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="linux" scheme="http://www.jerrylou.me/tags/linux/"/>
    
      <category term="tcp" scheme="http://www.jerrylou.me/tags/tcp/"/>
    
      <category term="bbr" scheme="http://www.jerrylou.me/tags/bbr/"/>
    
  </entry>
  
  <entry>
    <title>搭建以太坊开发环境</title>
    <link href="http://www.jerrylou.me/blockchain/ethereum-dev-env-20170505.html"/>
    <id>http://www.jerrylou.me/blockchain/ethereum-dev-env-20170505.html</id>
    <published>2017-05-05T01:51:46.000Z</published>
    <updated>2018-05-26T11:07:53.169Z</updated>
    
    <content type="html"><![CDATA[<p>以太坊（Ethereum）目标是打造成一个运行智能合约的去中心化平台（Platform for Smart Contract），平台上的应用按程序设定运行，不存在停机、审查、欺诈、第三方人为干预的可能。以太坊平台由 Golang、C++、Python 等多种编程语言实现。<br>当然，为了打造这个平台，以太坊提供了一条公开的区块链，并制定了面向智能合约的一套编程语言。智能合约开发者可以在其上使用官方提供的工具来开发支持以太坊区块链协议的应用（即所谓的 DAPP）。</p><a id="more"></a><h3 id="源码编译"><a href="#源码编译" class="headerlink" title="源码编译"></a>源码编译</h3><p>当前<a href="https://github.com/ethereum/go-ethereum" target="_blank" rel="noopener">以太坊</a>版本是1.6x，下载源码开始搭建环境吧。 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/ethereum/go-ethereum.git</span><br><span class="line">make geth</span><br></pre></td></tr></table></figure><p>编译geth在./build/bin目录下</p><p>solc编译器<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/ethereum/solidity.git</span><br><span class="line">git submodule update --init --recursive</span><br><span class="line"></span><br><span class="line">./scripts/install_deps.sh</span><br><span class="line"></span><br><span class="line">mkdir build</span><br><span class="line"><span class="built_in">cd</span> build</span><br><span class="line">cmake .. &amp;&amp; make</span><br></pre></td></tr></table></figure></p><p>编译solc在./build/solc目录下</p><h3 id="启动以太坊"><a href="#启动以太坊" class="headerlink" title="启动以太坊"></a>启动以太坊</h3><p>创建查看用户<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">geth --datadir data account new</span><br><span class="line">geth --datadir data account list</span><br></pre></td></tr></table></figure></p><p>更新解锁用户<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">geth --datadir data account update</span><br></pre></td></tr></table></figure></p><p>启动<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">geth --datadir data console</span><br></pre></td></tr></table></figure></p><h3 id="自能合约"><a href="#自能合约" class="headerlink" title="自能合约"></a>自能合约</h3><p>编写hello world示例<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">contract mortal &#123;</span><br><span class="line">    /* Define variable owner of the <span class="built_in">type</span> address*/</span><br><span class="line">    address owner;</span><br><span class="line"></span><br><span class="line">    /* this <span class="keyword">function</span> is executed at initialization and sets the owner of the contract */</span><br><span class="line">    <span class="keyword">function</span> <span class="function"><span class="title">mortal</span></span>() &#123; owner = msg.sender; &#125;</span><br><span class="line"></span><br><span class="line">    /* Function to recover the funds on the contract */</span><br><span class="line">    <span class="keyword">function</span> <span class="function"><span class="title">kill</span></span>() &#123; <span class="keyword">if</span> (msg.sender == owner) suicide(owner); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract greeter is mortal &#123;</span><br><span class="line">    /* define variable greeting of the <span class="built_in">type</span> string */</span><br><span class="line">    string greeting;</span><br><span class="line">    </span><br><span class="line">    /* this runs when the contract is executed */</span><br><span class="line">    <span class="keyword">function</span> greeter(string _greeting) public &#123;</span><br><span class="line">        greeting = _greeting;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /* main <span class="keyword">function</span> */</span><br><span class="line">    <span class="keyword">function</span> greet() constant returns (string) &#123;</span><br><span class="line">        <span class="built_in">return</span> greeting;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>编译<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">solc --optimize --combined-json abi,bin,interface helloworld.sol</span><br><span class="line"></span><br><span class="line">or </span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"var testOutput=`solc --optimize --combined-json abi,bin,interface helloworld.sol`"</span> &gt; test.js</span><br></pre></td></tr></table></figure></p><p>登录console，解锁用户。使用之前创建用户的密码<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">personal.unlockAccount(address, <span class="string">"password"</span>)</span><br></pre></td></tr></table></figure></p><p>未完待续…</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;以太坊（Ethereum）目标是打造成一个运行智能合约的去中心化平台（Platform for Smart Contract），平台上的应用按程序设定运行，不存在停机、审查、欺诈、第三方人为干预的可能。以太坊平台由 Golang、C++、Python 等多种编程语言实现。&lt;br&gt;当然，为了打造这个平台，以太坊提供了一条公开的区块链，并制定了面向智能合约的一套编程语言。智能合约开发者可以在其上使用官方提供的工具来开发支持以太坊区块链协议的应用（即所谓的 DAPP）。&lt;/p&gt;
    
    </summary>
    
      <category term="blockchain" scheme="http://www.jerrylou.me/categories/blockchain/"/>
    
    
      <category term="blockchain" scheme="http://www.jerrylou.me/tags/blockchain/"/>
    
      <category term="区块链" scheme="http://www.jerrylou.me/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
      <category term="以太坊" scheme="http://www.jerrylou.me/tags/%E4%BB%A5%E5%A4%AA%E5%9D%8A/"/>
    
  </entry>
  
  <entry>
    <title>Html中支持数学公式，MathJax</title>
    <link href="http://www.jerrylou.me/%E5%B7%A5%E5%85%B7/mathjax-intro-20170502.html"/>
    <id>http://www.jerrylou.me/工具/mathjax-intro-20170502.html</id>
    <published>2017-05-02T06:48:17.000Z</published>
    <updated>2018-05-26T11:07:53.174Z</updated>
    
    <content type="html"><![CDATA[<p>MathJax允许你在你的网页中包含公式，无论是使用LaTeX、MathML或者AsciiMath符号，这些公式都会被javascript处理为HTML、SVG或者MathML符号。</p><p>这里有三种方法获取MathJax：最简单的方法就是使用分布式网络服务中的MathJax的副本，它位于 cdn.mathjax.org ,但是你也可以下载并安装一个MathJax的副本到你的服务器,或者使用在你本地硬盘的副本（这样是不需要使用网络）。这三种方法接下来的内容中都有详细的描述。这个页面描述了最简单快捷的设置MathJax并在你的页面运行的方法，但是你也许需要阅读更多细节以帮助你为你的网页定制一些设置。</p><a id="more"></a><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>话不多说，先看下用MathJax编写的公式效果。</p><script type="text/x-mathjax-config">MathJax.Hub.Config({  tex2jax: {inlineMath: [['$','$'], ['\\(','\\)']]}});</script><script type="text/javascript" async src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-MML-AM_CHTML"></script><p>When $a \ne 0$, there are two solutions to \(ax^2 + bx + c = 0\) and they are $$x = {-b \pm \sqrt{b^2-4ac} \over 2a}.$$</p><p>接下来看下如下编写Mahtjax。</p><h3 id="编写格式"><a href="#编写格式" class="headerlink" title="编写格式"></a>编写格式</h3><p>MathJax有三种编写格式，如下：</p><ul><li>TeX和LaTeX格式</li><li>MathML格式</li><li>AsciiMath格式</li></ul><h3 id="TeX和LaTeX"><a href="#TeX和LaTeX" class="headerlink" title="TeX和LaTeX"></a>TeX和LaTeX</h3><p>编写Tex和LaTex时，需要将下面代码引入html的head或body中。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span></span><br><span class="line">  src=<span class="string">"http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"</span>&gt;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><p>配置分隔符<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/x-mathjax-config"</span>&gt;</span><br><span class="line">MathJax.Hub.Config(&#123;</span><br><span class="line">  tex2jax: &#123;<span class="attr">inlineMath</span>: [[<span class="string">'$'</span>,<span class="string">'$'</span>], [<span class="string">'\\('</span>,<span class="string">'\\)'</span>]]&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><p>默认的公式分隔符是 <code>$$...$$</code> 和 <code>\[...\]</code> ，还有 <code>\(...\)</code> 常用于段落中的公式。请特别注意， <code>\(...\)</code> 分隔符 不是 默认使用的。美元符号$常常在其他情况下使用，这会导致本文被错误的当做公式解析了。</p><p>编写Tex和LaTex公式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">When $a \ne 0$, there are two solutions to \(ax^2 + bx + c = 0\) and they are</span><br><span class="line">$$x = &#123;-b \pm \sqrt&#123;b^2-4ac&#125; \over 2a&#125;.$$</span><br></pre></td></tr></table></figure><h3 id="MathML"><a href="#MathML" class="headerlink" title="MathML"></a>MathML</h3><p>同样需要将下面代码引入html的head或body中。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span></span><br><span class="line">  src=<span class="string">"http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"</span>&gt;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><p>编写MathML公式(html)<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">When</span><br><span class="line"><span class="tag">&lt;<span class="name">math</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/1998/Math/MathML"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mi</span>&gt;</span>a<span class="tag">&lt;/<span class="name">mi</span>&gt;</span><span class="tag">&lt;<span class="name">mo</span>&gt;</span>&amp;#x2260;<span class="tag">&lt;/<span class="name">mo</span>&gt;</span><span class="tag">&lt;<span class="name">mn</span>&gt;</span>0<span class="tag">&lt;/<span class="name">mn</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">math</span>&gt;</span>,</span><br><span class="line">there are two solutions to</span><br><span class="line"><span class="tag">&lt;<span class="name">math</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/1998/Math/MathML"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mi</span>&gt;</span>a<span class="tag">&lt;/<span class="name">mi</span>&gt;</span><span class="tag">&lt;<span class="name">msup</span>&gt;</span><span class="tag">&lt;<span class="name">mi</span>&gt;</span>x<span class="tag">&lt;/<span class="name">mi</span>&gt;</span><span class="tag">&lt;<span class="name">mn</span>&gt;</span>2<span class="tag">&lt;/<span class="name">mn</span>&gt;</span><span class="tag">&lt;/<span class="name">msup</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mo</span>&gt;</span>+<span class="tag">&lt;/<span class="name">mo</span>&gt;</span> <span class="tag">&lt;<span class="name">mi</span>&gt;</span>b<span class="tag">&lt;/<span class="name">mi</span>&gt;</span><span class="tag">&lt;<span class="name">mi</span>&gt;</span>x<span class="tag">&lt;/<span class="name">mi</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mo</span>&gt;</span>+<span class="tag">&lt;/<span class="name">mo</span>&gt;</span> <span class="tag">&lt;<span class="name">mi</span>&gt;</span>c<span class="tag">&lt;/<span class="name">mi</span>&gt;</span> <span class="tag">&lt;<span class="name">mo</span>&gt;</span>=<span class="tag">&lt;/<span class="name">mo</span>&gt;</span> <span class="tag">&lt;<span class="name">mn</span>&gt;</span>0<span class="tag">&lt;/<span class="name">mn</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">math</span>&gt;</span></span><br><span class="line">and they are</span><br><span class="line"><span class="tag">&lt;<span class="name">math</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/1998/Math/MathML"</span> <span class="attr">display</span>=<span class="string">"block"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mi</span>&gt;</span>x<span class="tag">&lt;/<span class="name">mi</span>&gt;</span> <span class="tag">&lt;<span class="name">mo</span>&gt;</span>=<span class="tag">&lt;/<span class="name">mo</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mrow</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mfrac</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">mrow</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mo</span>&gt;</span>&amp;#x2212;<span class="tag">&lt;/<span class="name">mo</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mi</span>&gt;</span>b<span class="tag">&lt;/<span class="name">mi</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mo</span>&gt;</span>&amp;#x00B1;<span class="tag">&lt;/<span class="name">mo</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">msqrt</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">msup</span>&gt;</span><span class="tag">&lt;<span class="name">mi</span>&gt;</span>b<span class="tag">&lt;/<span class="name">mi</span>&gt;</span><span class="tag">&lt;<span class="name">mn</span>&gt;</span>2<span class="tag">&lt;/<span class="name">mn</span>&gt;</span><span class="tag">&lt;/<span class="name">msup</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">mo</span>&gt;</span>&amp;#x2212;<span class="tag">&lt;/<span class="name">mo</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">mn</span>&gt;</span>4<span class="tag">&lt;/<span class="name">mn</span>&gt;</span><span class="tag">&lt;<span class="name">mi</span>&gt;</span>a<span class="tag">&lt;/<span class="name">mi</span>&gt;</span><span class="tag">&lt;<span class="name">mi</span>&gt;</span>c<span class="tag">&lt;/<span class="name">mi</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">msqrt</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">mrow</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">mrow</span>&gt;</span> <span class="tag">&lt;<span class="name">mn</span>&gt;</span>2<span class="tag">&lt;/<span class="name">mn</span>&gt;</span><span class="tag">&lt;<span class="name">mi</span>&gt;</span>a<span class="tag">&lt;/<span class="name">mi</span>&gt;</span> <span class="tag">&lt;/<span class="name">mrow</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mfrac</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mrow</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mtext</span>&gt;</span>.<span class="tag">&lt;/<span class="name">mtext</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">math</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="AsciiMath"><a href="#AsciiMath" class="headerlink" title="AsciiMath"></a>AsciiMath</h3><p>需要将下面代码引入html的head或body中（与上面的引入不相同）。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span></span><br><span class="line">  src=<span class="string">"http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=AM_HTMLorMML-full"</span>&gt;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><p>编写MathML公式<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>When `a != 0`, there are two solutions to `ax^2 + bx + c = 0` and</span><br><span class="line">they are<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"text-align:center"</span>&gt;</span></span><br><span class="line">  `x = (-b +- sqrt(b^2-4ac))/(2a) .`</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>AsciiMath相对要简洁些，是MathJax2.0提出的。选择哪种方式根据实际情况而定。更多的编写方法从下面提供MathJax文档查找：</p><ul><li><a href="http://docs.mathjax.org/en/latest/start.html" target="_blank" rel="noopener">MathJax英文文档</a></li><li><a href="https://mathjax-chinese-doc.readthedocs.io/en/latest/" target="_blank" rel="noopener">MathJax中文文档</a></li><li>推荐一个网站 <a href="http://detexify.kirelabs.org/classify.html" target="_blank" rel="noopener">Detexify</a>， 可以在上面画数学符号，然后它会帮你找到符合的 <code>Tex</code> 代码。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;MathJax允许你在你的网页中包含公式，无论是使用LaTeX、MathML或者AsciiMath符号，这些公式都会被javascript处理为HTML、SVG或者MathML符号。&lt;/p&gt;
&lt;p&gt;这里有三种方法获取MathJax：最简单的方法就是使用分布式网络服务中的MathJax的副本，它位于 cdn.mathjax.org ,但是你也可以下载并安装一个MathJax的副本到你的服务器,或者使用在你本地硬盘的副本（这样是不需要使用网络）。这三种方法接下来的内容中都有详细的描述。这个页面描述了最简单快捷的设置MathJax并在你的页面运行的方法，但是你也许需要阅读更多细节以帮助你为你的网页定制一些设置。&lt;/p&gt;
    
    </summary>
    
      <category term="工具" scheme="http://www.jerrylou.me/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="mathjax" scheme="http://www.jerrylou.me/tags/mathjax/"/>
    
      <category term="html" scheme="http://www.jerrylou.me/tags/html/"/>
    
      <category term="数学公式" scheme="http://www.jerrylou.me/tags/%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>为自己安装轻量级git代码管理仓库Gogs</title>
    <link href="http://www.jerrylou.me/%E5%B7%A5%E5%85%B7/gogs-install-20170428.html"/>
    <id>http://www.jerrylou.me/工具/gogs-install-20170428.html</id>
    <published>2017-04-28T12:24:51.000Z</published>
    <updated>2018-05-26T11:07:53.169Z</updated>
    
    <content type="html"><![CDATA[<p>Gogs 的目标是打造一个最简单、最快速和最轻松的方式搭建自助 Git 服务。使用 Go 语言开发使得 Gogs 能够通过独立的二进制分发，并且支持 Go 语言支持的 所有平台，包括 Linux、Mac OS X、Windows 以及 ARM 平台。</p><a id="more"></a><h3 id="环境要求"><a href="#环境要求" class="headerlink" title="环境要求"></a>环境要求</h3><ul><li><p>操作系统：<br>ubuntu 16.04 LTS (Xenial Xerus)</p></li><li><p>数据库：<br>MySQL：版本 &gt;= 5.5.3</p></li><li><p>git（bash）：<br>服务端和客户端均需版本 &gt;= 1.7.1</p></li></ul><h3 id="源码安装"><a href="#源码安装" class="headerlink" title="源码安装"></a>源码安装</h3><ul><li><p>基本依赖<br>Go 语言：版本 &gt;= 1.5(我使用go1.8.1，Go环境设置不再赘述)</p></li><li><p>下载并编译</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载并安装依赖</span></span><br><span class="line">$ go get -u github.com/gogits/gogs</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建主程序</span></span><br><span class="line">$ <span class="built_in">cd</span> <span class="variable">$GOPATH</span>/src/github.com/gogits/gogs</span><br><span class="line">$ go build</span><br></pre></td></tr></table></figure></li></ul><h3 id="初始化数据库"><a href="#初始化数据库" class="headerlink" title="初始化数据库"></a>初始化数据库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DROP DATABASE IF EXISTS gogs;</span><br><span class="line">CREATE DATABASE IF NOT EXISTS gogs CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci;</span><br></pre></td></tr></table></figure><h3 id="配置Gogs"><a href="#配置Gogs" class="headerlink" title="配置Gogs"></a>配置Gogs</h3><p>创建目录<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p custom/conf</span><br><span class="line">cp conf/app.ini custom/conf</span><br></pre></td></tr></table></figure></p><p>修改配置 <code>vim custom/conf/app.ini</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[server]</span><br><span class="line">PROTOCOL               = http</span><br><span class="line">DOMAIN                 = yourdomain </span><br><span class="line">ROOT_URL               = http://git.yourdomain/</span><br><span class="line">HTTP_ADDR              = 0.0.0.0</span><br><span class="line">HTTP_PORT              = 3000</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[database]</span><br><span class="line">PASSWD = root</span><br></pre></td></tr></table></figure></p><p><strong>参考</strong><a href="https://gogs.io/docs/advanced/configuration_cheat_sheet" target="_blank" rel="noopener">Gogs配置</a></p><h3 id="开机启动"><a href="#开机启动" class="headerlink" title="开机启动"></a>开机启动</h3><p>修改 <code>vim scripts/systemd/gogs.service</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Gogs</span><br><span class="line">After=syslog.target</span><br><span class="line">After=network.target</span><br><span class="line">After=mariadb.service mysqld.service postgresql.service memcached.service redis.service</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line"><span class="comment"># Modify these two values and uncomment them if you have</span></span><br><span class="line"><span class="comment"># repos with lots of files and get an HTTP error 500 because</span></span><br><span class="line"><span class="comment"># of that</span></span><br><span class="line"><span class="comment">###</span></span><br><span class="line"><span class="comment">#LimitMEMLOCK=infinity</span></span><br><span class="line"><span class="comment">#LimitNOFILE=65535</span></span><br><span class="line">Type=simple</span><br><span class="line">User=git</span><br><span class="line">Group=git</span><br><span class="line">WorkingDirectory=/home/git/gogs</span><br><span class="line">ExecStart=/home/git/gogs/gogs web</span><br><span class="line">Restart=always</span><br><span class="line">Environment=USER=git HOME=/home/git</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure></p><p>根据情况修改运行用户和gogs的下载（启动目录）。</p><p>启动Gogs<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> gogs.service</span><br><span class="line"></span><br><span class="line">systemctl start gogs.service</span><br></pre></td></tr></table></figure></p><h3 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h3><p>登录<code>http://git.yourdomain/</code>，现在可以使用自己的git服务了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Gogs 的目标是打造一个最简单、最快速和最轻松的方式搭建自助 Git 服务。使用 Go 语言开发使得 Gogs 能够通过独立的二进制分发，并且支持 Go 语言支持的 所有平台，包括 Linux、Mac OS X、Windows 以及 ARM 平台。&lt;/p&gt;
    
    </summary>
    
      <category term="工具" scheme="http://www.jerrylou.me/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="git" scheme="http://www.jerrylou.me/tags/git/"/>
    
      <category term="gogs" scheme="http://www.jerrylou.me/tags/gogs/"/>
    
  </entry>
  
  <entry>
    <title>（转）Raft 一致性算法论文译文</title>
    <link href="http://www.jerrylou.me/%E7%AC%94%E8%AE%B0/raft_algorithm-20170425.html"/>
    <id>http://www.jerrylou.me/笔记/raft_algorithm-20170425.html</id>
    <published>2017-04-25T14:10:01.000Z</published>
    <updated>2018-05-26T11:07:53.177Z</updated>
    
    <content type="html"><![CDATA[<p>本篇博客为著名的 RAFT 一致性算法论文的中文翻译，论文名为<a href="https://ramcloud.atlassian.net/wiki/download/attachments/6586375/raft.pdf" target="_blank" rel="noopener">《In search of an Understandable Consensus Algorithm (Extended Version)》</a>(寻找一种易于理解的一致性算法)。</p><p>Raft 是一种用来管理日志复制的一致性算法。它和 Paxos 的性能和功能是一样的，但是它和 Paxos 的结构不一样；这使得 Raft 更容易理解并且更易于建立实际的系统。为了提高理解性，Raft 将一致性算法分为了几个部分，例如领导选取（leader selection），日志复制（log replication）和安全性（safety），同时它使用了更强的一致性来减少了必须需要考虑的状态。从用户学习的结果来看，Raft 比 Paxos 更容易学会。Raft 还包括了一种新的机制来使得动态改变集群成员，它使用重叠大多数（overlapping majorities）来保证安全。</p><a id="more"></a><h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>一致性算法允许一组机器像一个整体一样工作，即使其中的一些机器出了错误也能正常工作。正因为此，他们扮演着建立大规模可靠的软件系统的关键角色。在过去的十年中 Paxos 一直都主导着有关一致性算法的讨论：大多数一致性算法的实现都基于它或者受它影响，并且 Paxos 也成为了教学生关于一致性知识的主要工具。</p><p>不幸的是，尽管在降低它的复杂性方面做了许多努力，Paxos 依旧很难理解。并且，Paxos 需要经过复杂的修改才能应用于实际中。这些导致了系统构构建者和学生都十分头疼。</p><p>在被 Paxos 折磨之后，我们开始寻找一种在系统构建和教学上更好的新的一致性算法。我们的首要目标是让它易于理解：我们能不能定义一种面向实际系统的一致性算法并且比 Paxos 更容易学习呢？并且，我们希望这种算法能凭直觉就能明白，这对于一个系统构建者来说是十分必要的。对于一个算法，不仅仅是让它工作起来很重要，知道它是如何工作的更重要。</p><p>我们工作的结果是一种新的一致性算法，叫做 Raft。在设计 Raft 的过程中我们应用了许多专门的技巧来提升理解性，包括算法分解（分为领导选取（leader selection），日志复制（log replication）和安全性（safety））和减少状态（state space reduction）（相对于 Paxos，Raft 减少了非确定性的程度和服务器互相不一致的方式）。在两所学校的43个学生的研究中发现，Raft 比 Paxos 要更容易理解：在学习了两种算法之后，其中的33个学生回答 Raft 的问题要比回答 Paxos 的问题要好。</p><p>Raft 算法和现在一些已经有的算法在一些地方很相似（主要是 <a href="http://www.pmg.csail.mit.edu/papers/vr.pdf" target="_blank" rel="noopener">Oki 和 Liskov 的 Viewstamped Replication</a>。但是 Raft 有几个新的特性：</p><ul><li>强领导者（Strong Leader）：Raft 使用一种比其他算法更强的领导形式。例如，日志条目只从领导者发送向其他服务器。这样就简化了对日志复制的管理，使得 Raft 更易于理解。</li><li>领导选取（Leader Selection）：Raft 使用随机定时器来选取领导者。这种方式仅仅是在所有算法都需要实现的心跳机制上增加了一点变化，它使得在解决冲突时更简单和快速。</li><li>成员变化（Membership Change）：Raft 为了调整集群中成员关系使用了新的联合一致性（joint consensus）的方法，这种方法中大多数不同配置的机器在转换关系的时候会交迭（overlap）。这使得在配置改变的时候，集群能够继续操作。</li></ul><p>我们认为，Raft 在教学方面和实际实现方面比 Paxos 和其他算法更出众。它比其他算法更简单、更容易理解；它能满足一个实际系统的需求；它拥有许多开源的实现并且被许多公司所使用；它的安全特性已经被证明；并且它的效率和其他算法相比也具有竞争力。</p><p>这篇论文剩下的部分会讲如下内容：复制状态机（replicated state machine）问题（第2节），讨论 Paxos 的优缺点（第3节），讨论我们用的为了达到提升理解性的方法（第4节），陈述 Raft 一致性算法（第5~8节），评价 Raft 算法（第9节），对相关工作的讨论（第10节）。</p><h3 id="复制状态机（Replicated-State-Machine）"><a href="#复制状态机（Replicated-State-Machine）" class="headerlink" title="复制状态机（Replicated State Machine）"></a>复制状态机（Replicated State Machine）</h3><p>一致性算法是在复制状态机的背景下提出来的。在这个方法中，在一组服务器的状态机产生同样的状态的副本因此即使有一些服务器崩溃了这组服务器也还能继续执行。复制状态机在分布式系统中被用于解决许多有关容错的问题。例如，GFS，HDFS还有 RAMCloud 这些大规模的系统都是用一个单独的集群领导者，使用一个单独的复制状态机来进行领导选取和存储配置信息来应对领导者的崩溃。使用复制状态机的例子有 Chubby 和 ZooKeeper。</p><p><img src="http://wx4.sinaimg.cn/mw690/0065glrAgy1ffuf551fuxj30gt08vdh4.jpg" alt="Alt text" title="图-1"><br>复制状态机的架构。一致性算法管理来自客户端状态命令的复制日志。状态机处理的日志中的命令的顺序都是一致的，因此会得到相同的执行结果。</p><p>如图-1所示，复制状态机是通过复制日志来实现的。每一台服务器保存着一份日志，日志中包含一系列的命令，状态机会按顺序执行这些命令。因为每一台计算机的状态机都是确定的，所以每个状态机的状态都是相同的，执行的命令是相同的，最后的执行结果也就是一样的了。</p><p>如何保证复制日志一致就是一致性算法的工作了。在一台服务器上，一致性模块接受客户端的命令并且把命令加入到它的日志中。它和其他服务器上的一致性模块进行通信来确保每一个日志最终包含相同序列的请求，即使有一些服务器宕机了。一旦这些命令被正确的复制了，每一个服务器的状态机都会按同样的顺序去执行它们，然后将结果返回给客户端。最终，这些服务器看起来就像一台可靠的状态机。</p><p>应用于实际系统的一致性算法一般有以下特性：</p><ul><li>确保安全性（从来不会返回一个错误的结果），即使在所有的非拜占庭（Non-Byzantine）情况下，包括网络延迟、分区、丢包、冗余和乱序的情况下。</li><li>高可用性，只要集群中的大部分机器都能运行，可以互相通信并且可以和客户端通信，这个集群就可用。因此，一般来说，一个拥有 5 台机器的集群可以容忍其中的 2 台的失败（fail）。服务器停止工作了我们就认为它失败（fail）了，没准一会当它们拥有稳定的存储时就能从中恢复过来，重新加入到集群中。</li><li>不依赖时序保证一致性，时钟错误和极端情况下的消息延迟在最坏的情况下才会引起可用性问题。</li><li>通常情况下，一条命令能够尽可能快的在大多数节点对一轮远程调用作出相应时完成，一少部分慢的机器不会影响系统的整体性能。</li></ul><h3 id="Paxos-算法的不足"><a href="#Paxos-算法的不足" class="headerlink" title="Paxos 算法的不足"></a>Paxos 算法的不足</h3><p>在过去的10年中，Leslie Lamport 的 Paxos 算法几乎已经成为了一致性算法的代名词：它是授课中最常见的算法，同时也是许多一致性算法实现的起点。Paxos 首先定义了一个能够达成单一决策一致的协议，例如一个单一复制日志条目（single replicated log entry）。我们把这个子集叫做单一决策 Paxos（single-decree Paxos）。之后 Paxos通过组合多个这种协议来完成一系列的决策，例如一个日志（multi-Paxos）。Paxos 确保安全性和活跃性（liveness），并且它支持集群成员的变更。它的正确性已经被证明，通常情况下也很高效。</p><p>不幸的是，Paxos 有两个致命的缺点。第一个是 Paxos 太难以理解。它的完整的解释晦涩难懂；很少有人能完全理解，只有少数人成功的读懂了它。并且大家做了许多努力来用一些简单的术语来描述它。尽管这些解释都关注于单一决策子集问题，但仍具有挑战性。在 NSDI 2012 会议上的一次非正式调查显示，我们发现大家对 Paxos 都感到不满意，其中甚至包括一些有经验的研究员。我们自己也曾深陷其中，我们在读过几篇简化它的文章并且设计了我们自己的算法之后才完全理解了 Paxos，而整个过程花费了将近一年的时间。</p><p>我们假定 Paxos 的晦涩来源于它将单决策子集作为它的基础。单决策（Single-decree）Paxos 是晦涩且微妙的：它被划分为两个没有简单直观解释的阶段，并且难以独立理解。正因为如此，它不能很直观的让我们知道为什么单一决策协议能够工作。为多决策 Paxos 设计的规则又添加了额外的复杂性和精巧性。我们相信多决策问题能够分解为其它更直观的方式。</p><p>Paxos 的第二个缺点是它难以在实际环境中实现。其中一个原因是，对于多决策 Paxos （multi-Paxos） ，大家还没有一个一致同意的算法。Lamport 的描述大部分都是有关于单决策 Paxos （single-decree Paxos）；他仅仅描述了实现多决策的可能的方法，缺少许多细节。有许多实现 Paxos 和优化 Paxos 的尝试，但是他们都和 Lamport 的描述有些出入。例如，Chubby 实现的是一个类似 Paxos 的算法，但是在许多情况下的细节没有公开。</p><p>另外，Paxos 的结构也是不容易在一个实际系统中进行实现的，这是单决策问题分解带来的又一个问题。例如，从许多日志条目中选出条目然后把它们融合到一个序列化的日志中并没有带来什么好处，它仅仅增加了复杂性。围绕着日志来设计一个系统是更简单、更高效的：新日志按照严格的顺序添加到日志中去。另一个问题是，Paxos 使用对等的点对点的实现作为它的核心（尽管它最终提出了一种弱领导者的形式来优化性能）。这种方法在只有一个决策被制定的情况下才显得有效，但是很少有现实中的系统使用它。如果要做许多的决策，选择一个领导人，由领带人来协调是更简单有效的方法。</p><p>因此，在实际的系统应用中和 Paxos 算法都相差很大。所有开始于 Paxos 的实现都会遇到很多问题，然后由此衍生出了许多与 Paxos 有很大不同的架构。这是既费时又容易出错的，并且理解 Paxos 的难度又非常大。Paxos 算法在它正确性的理论证明上是很好的，但是在实现上的价值就远远不足了。来自 Chubby 的实现的一条评论就能够说明：</p><blockquote><p>Paxos 算法的描述与实际实现之间存在巨大的鸿沟…最终的系统往往建立在一个没有被证明的算法之上。</p></blockquote><p>正因为存在这些问题，我们认为 Paxos 不仅对于系统的构建者来说不友好，同时也不利于教学。鉴于一致性算法对于大规模软件系统的重要性，我们决定试着来设计一种另外的比 Paxos 更好的一致性算法。Raft 就是这样的一个算法。</p><h3 id="易于理解的设计"><a href="#易于理解的设计" class="headerlink" title="易于理解的设计"></a>易于理解的设计</h3><p>设计 Raft 的目标有如下几个：</p><ul><li>它必须提供一个完整的、实际的基础来进行系统构建，为的是减少开发者的工作；</li><li>它必须在所有情况下都能保证安全可用；</li><li>它对于常规操作必须高效；</li><li>最重要的目标是：易于理解，它必须使得大多数人能够很容易的理解；</li><li>另外，它必须能让开发者有一个直观的认识，这样才能使系统构建者们去对它进行扩展。</li></ul><p>在设计 Raft 的过程中，我们不得不在许多种方法中做出选择。当面临这种情况时，我们通常会权衡可理解性：每种方法的可理解性是如何的？（例如，它的状态空间有多复杂？它是不是有很细微的含义？）它的可读性如何？读者能不能轻易地理解这个方法和它的含义？</p><p>我们意识到对这种可理解性的分析具有高度的主观性；尽管如此，我们使用了两种适用的方式。第一种是众所周知的问题分解：我们尽可能将问题分解成为若干个可解决的、可被理解的小问题。例如，在 Raft 中，我们把问题分解成为了<code>领导选取（leader election）</code>、<code>日志复制（log replication）</code>、<code>安全（safety）</code>和<code>成员变化（membership changes）</code>。</p><p>我们采用的第二个方法是通过减少需要考虑的状态的数量将状态空间简化，这能够使得整个系统更加一致并且尽可能消除不确定性。特别地，日志之间不允许出现空洞，并且 Raft 限制了限制了日志不一致的可能性。尽管在大多数情况下，我们都都在试图消除不确定性，但是有时候有些情况下，不确定性使得算法更易理解。尤其是，随机化方法使得不确定性增加，但是它减少了状态空间。我们使用随机化来简化了 Raft 中的领导选取算法。</p><h3 id="Raft-一致性算法"><a href="#Raft-一致性算法" class="headerlink" title="Raft 一致性算法"></a>Raft 一致性算法</h3><p>Raft 是一种用来管理第 2 章中提到的复制日志的算法。表-2 为了方便参考是一个算法的总结版本，表-3 列举了算法中的关键性质；表格中的这些元素将会在这一章剩下的部分中分别进行讨论。</p><p><strong>状态</strong>：</p><p>在所有服务器上持久存在的：（在响应远程过程调用 RPC 之前稳定存储的）</p><table><thead><tr><th style="text-align:center">名称</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:center">currentTerm</td><td style="text-align:left">服务器最后知道的任期号（从0开始递增）</td></tr><tr><td style="text-align:center">votedFor</td><td style="text-align:left">在当前任期内收到选票的候选人 id（如果没有就为 null）</td></tr><tr><td style="text-align:center">log[]</td><td style="text-align:left">日志条目；每个条目包含状态机的要执行命令和从领导人处收到时的任期号</td></tr></tbody></table><p>在所有服务器上不稳定存在的：</p><table><thead><tr><th style="text-align:center">名称</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:center">commitIndex</td><td style="text-align:left">已知的被提交的最大日志条目的索引值（从0开始递增）</td></tr><tr><td style="text-align:center">lastApplied</td><td style="text-align:left">被状态机执行的最大日志条目的索引值（从0开始递增）</td></tr></tbody></table><p>在领导人服务器上不稳定存在的：（在选举之后初始化的）</p><table><thead><tr><th style="text-align:center">名称</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:center">nextIndex[]</td><td style="text-align:left">对于每一个服务器，记录需要发给它的下一个日志条目的索引（初始化为领导人上一条日志的索引值+1）</td></tr><tr><td style="text-align:center">matchIndex[]</td><td style="text-align:left">对于每一个服务器，记录已经复制到该服务器的日志的最高索引值（从0开始递增）</td></tr></tbody></table><p><strong>附加日志远程过程调用 （AppendEntries RPC）</strong></p><p>由领导人来调用复制日志（5.3节）；也会用作heartbeat</p><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:center">term</td><td style="text-align:left">领导人的任期号</td></tr><tr><td style="text-align:center">leaderId</td><td style="text-align:left">领导人的 id，为了其他服务器能重定向到客户端</td></tr><tr><td style="text-align:center">prevLogIndex</td><td style="text-align:left">最新日志之前的日志的索引值</td></tr><tr><td style="text-align:center">prevLogTerm</td><td style="text-align:left">最新日志之前的日志的领导人任期号</td></tr><tr><td style="text-align:center">entries[]</td><td style="text-align:left">将要存储的日志条目（表示 heartbeat 时为空，有时会为了效率发送超过一条）</td></tr><tr><td style="text-align:center">leaderCommit</td><td style="text-align:left">领导人提交的日志条目索引值</td></tr></tbody></table><table><thead><tr><th style="text-align:center">返回值</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:center">term</td><td style="text-align:left">当前的任期号，用于领导人更新自己的任期号</td></tr><tr><td style="text-align:center">success</td><td style="text-align:left">如果其它服务器包含能够匹配上 prevLogIndex 和 prevLogTerm 的日志时为真</td></tr></tbody></table><p><strong>接受者需要实现</strong>：</p><ol><li>如果 term &lt; currentTerm返回 false（5.1节）</li><li>如果在prevLogIndex处的日志的任期号与prevLogTerm不匹配时，返回 false（5.3节）</li><li>如果一条已经存在的日志与新的冲突（index 相同但是任期号 term 不同），则删除已经存在的日志和它之后所有的日志（5.3节）</li><li>添加任何在已有的日志中不存在的条目</li><li>如果leaderCommit &gt; commitIndex，将commitIndex设置为leaderCommit和最新日志条目索引号中较小的一个</li></ol><p><strong>投票请求 RPC（RequestVote RPC）</strong></p><p>由候选人发起收集选票（5.2节）</p><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:center">term</td><td style="text-align:left">候选人的任期号</td></tr><tr><td style="text-align:center">candidateId</td><td style="text-align:left">请求投票的候选人 id</td></tr><tr><td style="text-align:center">lastLogIndex</td><td style="text-align:left">候选人最新日志条目的索引值</td></tr><tr><td style="text-align:center">lastLogTerm</td><td style="text-align:left">候选人最新日志条目对应的任期号</td></tr></tbody></table><table><thead><tr><th style="text-align:center">返回值</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:center">term</td><td style="text-align:left">目前的任期号，用于候选人更新自己</td></tr><tr><td style="text-align:center">voteGranted</td><td style="text-align:left">如果候选人收到选票为 true</td></tr></tbody></table><p><strong>接受者需要实现</strong>：</p><ol><li>如果term &lt; currentTerm返回 false（5.1节）</li><li>如果votedFor为空或者与candidateId相同，并且候选人的日志和自己的日志一样新，则给该候选人投票（5.2节 和 5.4节）</li></ol><p><strong>服务器需要遵守的规则</strong>：</p><p>所有服务器：</p><ul><li>如果commitIndex &gt; lastApplied，lastApplied自增，将log[lastApplied]应用到状态机（5.3节）</li><li>如果 RPC 的请求或者响应中包含一个 term T 大于 currentTerm，则currentTerm赋值为 T，并切换状态为追随者（Follower）（5.1节）</li></ul><p>追随者（followers）: 5.2节</p><ul><li>响应来自候选人和领导人的 RPC</li><li>如果在超过选取领导人时间之前没有收到来自当前领导人的AppendEntries RPC或者没有收到候选人的投票请求，则自己转换状态为候选人</li></ul><p>候选人：5.2节</p><ul><li>转变为选举人之后开始选举：<ul><li>currentTerm自增</li><li>给自己投票</li><li>重置选举计时器</li><li>向其他服务器发送RequestVote RPC</li></ul></li><li>如果收到了来自大多数服务器的投票：成为领导人</li><li>如果收到了来自新领导人的AppendEntries RPC（heartbeat）：转换状态为追随者</li><li>如果选举超时：开始新一轮的选举</li></ul><p>领导人：</p><ul><li>一旦成为领导人：向其他所有服务器发送空的AppendEntries RPC（heartbeat）;在空闲时间重复发送以防止选举超时（5.2节）</li><li>如果收到来自客户端的请求：向本地日志增加条目，在该条目应用到状态机后响应客户端（5.3节）</li><li>对于一个追随者来说，如果上一次收到的日志索引大于将要收到的日志索引（nextIndex）：通过AppendEntries RPC将 nextIndex 之后的所有日志条目发送出去</li><li>如果发送成功：将该追随者的 nextIndex和matchIndex更新</li><li>如果由于日志不一致导致AppendEntries RPC失败：nextIndex递减并且重新发送（5.3节）</li><li>如果存在一个满足N &gt; commitIndex和matchIndex[i] &gt;= N并且log[N].term == currentTerm的 N，则将commitIndex赋值为 N</li></ul><table><thead><tr><th style="text-align:center">性质</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:center">选举安全原则（Election Safety）</td><td style="text-align:left">一个任期（term）内最多允许有一个领导人被选上（5.2节）</td></tr><tr><td style="text-align:center">领导人只增加原则（Leader Append-Only）</td><td style="text-align:left">领导人永远不会覆盖或者删除自己的日志，它只会增加条目</td></tr><tr><td style="text-align:center">日志匹配原则（Log Matching）</td><td style="text-align:left">如果两个日志在相同的索引位置上的日志条目的任期号相同，那么我们就认为这个日志从头到这个索引位置之间的条目完全相同（5.3 节）</td></tr><tr><td style="text-align:center">领导人完全原则（Leader Completeness)</td><td style="text-align:left">如果一个日志条目在一个给定任期内被提交，那么这个条目一定会出现在所有任期号更大的领导人中</td></tr><tr><td style="text-align:center">状态机安全原则（State Machine Safety）</td><td style="text-align:left">如果一个服务器已经将给定索引位置的日志条目应用到状态机中，则所有其他服务器不会在该索引位置应用不同的条目（5.4.3节）</td></tr></tbody></table><p>Raft 通过首先选出一个领导人来实现一致性，然后给予领导人完全管理复制日志（replicated log）的责任。领导人接收来自客户端的日志条目，并把它们复制到其他的服务器上，领带人还要告诉服务器们什么时候将日志条目应用到它们的状态机是安全的。通过选出领导人能够简化复制日志的管理工作。例如，领导人能够决定将新的日志条目放到哪，而并不需要和其他的服务器商议，数据流被简化成从领导人流向其他服务器。如果领导人宕机或者和其他服务器失去连接，就可以选取下一个领导人。</p><p>通过选出领导人，Raft 将一致性问题分解成为三个相对独立的子问题：</p><ul><li><code>领导人选取（Leader election）</code>： 在一个领导人宕机之后必须要选取一个新的领导人（5.2节）</li><li><code>日志复制（Log replication）</code>： 领导人必须从客户端接收日志然后复制到集群中的其他服务器，并且强制要求其他服务器的日志保持和自己相同</li><li><code>安全性（Safety）</code>： Raft 的关键的安全特性是 表-3 中提到的状态机安全原则（State Machine Safety）:如果一个服务器已经将给定索引位置的日志条目应用到状态机中，则所有其他服务器不会在该索引位置应用不同的条目。5.4节阐述了 Raft 是如何保证这条原则的，解决方案涉及到一个对于选举机制另外的限制，这一部分会在 5.2节 中说明。</li></ul><p>在说明了一致性算法之后，本章会讨论有关可用性（availability）的问题和系统中时序（timing）的问题。</p><h4 id="Raft-基础"><a href="#Raft-基础" class="headerlink" title="Raft 基础"></a>Raft 基础</h4><p>一个 Raft 集群包括若干服务器；对于一个典型的 5 服务器集群，该集群能够容忍 2 台机器不能正常工作，而整个系统保持正常。在任意的时间，每一个服务器一定会处于以下三种状态中的一个：领导人、候选人、追随者。在正常情况下，只有一个服务器是领导人，剩下的服务器是追随者。追随者们是被动的：他们不会发送任何请求，只是响应来自领导人和候选人的请求。领导人来处理所有来自客户端的请求（如果一个客户端与追随者进行通信，追随者会将信息发送给领导人）。候选人是用来选取一个新的领导人的，这一部分会在 5.2节 进行阐释。图-4 阐述了这些状态，和它们之间的转换；它们的转换会在下边进行讨论。</p><p><img src="http://wx2.sinaimg.cn/mw690/0065glrAgy1ffuf59ioqdj30hn07x0tq.jpg" alt="Alt text" title="图-4"><br>图-4：服务器的状态。追随者只响应其他服务器的请求。如果追随者没有收到任何消息，它会成为一个候选人并且开始一次选举。收到大多数服务器投票的候选人会成为新的领导人。领导人在它们宕机之前会一直保持领导人的状态。</p><p><img src="http://wx1.sinaimg.cn/mw690/0065glrAgy1ffuf5ctkekj30ef05o0t3.jpg" alt="Alt text" title="图-5"><br>图-5：时间被分为一个个的任期（term），每一个任期的开始都是领导人选举。在成功选举之后，一个领导人会在任期内管理整个集群。如果选举失败，该任期就会因为没有领带人而结束。这个转变会在不同的时间的不同服务器上观察到。</p><p>如图-5 所示，Raft 算法将时间划分成为任意不同长度的任期（term）。任期用连续的数字进行表示。每一个任期的开始都是一次选举（election），就像 5.2节 所描述的那样，一个或多个候选人会试图成为领导人。如果一个候选人赢得了选举，它就会在该任期的剩余时间担任领导人。在某些情况下，选票会被瓜分，有可能没有选出领导人，那么，将会开始另一个任期，并且立刻开始下一次选举。Raft 算法保证在给定的一个任期最少要有一个领导人。</p><p>不同的服务器可能会在任期内观察到多次不同的状态转换，在某些情况下，一台服务器可能看不到一次选举或者一个完整的任期。任期在 Raft 中充当逻辑时钟的角色，并且它们允许服务器检测过期的信息，比如过时的领导人。每一台服务器都存储着一个当前任期的数字，这个数字会单调的增加。当服务器之间进行通信时，会互相交换当前任期号；如果一台服务器的当前任期号比其它服务器的小，则更新为较大的任期号。如果一个候选人或者领导人意识到它的任期号过时了，它会立刻转换为追随者状态。如果一台服务器收到的请求的任期号是过时的，那么它会拒绝此次请求。</p><p>Raft 中的服务器通过远程过程调用（RPC）来通信，基本的 Raft 一致性算法仅需要 2 种 RPC。RequestVote RPC 是候选人在选举过程中触发的（5.2节），AppendEntries RPC 是领导人触发的，为的是复制日志条目和提供一种心跳（heartbeat）机制（5.3节）。第7章加入了第三种 RPC 来在各个服务器之间传输快照（snapshot）。如果服务器没有及时收到 RPC 的响应，它们会重试，并且它们能够并行的发出 RPC 来获得最好的性能。</p><h4 id="领导人选取"><a href="#领导人选取" class="headerlink" title="领导人选取"></a>领导人选取</h4><p>Raft 使用一种心跳机制（heartbeat）来触发领导人的选取。当服务器启动时，它们会初始化为追随者。一太服务器会一直保持追随者的状态只要它们能够收到来自领导人或者候选人的有效 RPC。领导人会向所有追随者周期性发送心跳（heartbeat，不带有任何日志条目的 AppendEntries RPC）来保证它们的领导人地位。如果一个追随者在一个周期内没有收到心跳信息，就叫做选举超时（election timeout）,然后它就会假定没有可用的领导人并且开始一次选举来选出一个新的领导人。</p><p>为了开始选举，一个追随者会自增它的当前任期并且转换状态为候选人。然后，它会给自己投票并且给集群中的其他服务器发送 RequestVote RPC。一个候选人会一直处于该状态，直到下列三种情形之一发生：</p><p>它赢得了选举；</p><ul><li>另一台服务器赢得了选举；</li><li>一段时间后没有任何一台服务器赢得了选举</li><li>这些情形会在下面的章节中分别讨论。</li></ul><p>一个候选人如果在一个任期内收到了来自集群中大多数服务器的投票就会赢得选举。在一个任期内，一台服务器最多能给一个候选人投票，按照先到先服务原则（first-come-first-served）（注意：在 5.4节 针对投票添加了一个额外的限制）。大多数原则使得在一个任期内最多有一个候选人能赢得选举（表-3 中提到的选举安全原则）。一旦有一个候选人赢得了选举，它就会成为领导人。然后它会像其他服务器发送心跳信息来建立自己的领导地位并且组织新的选举。</p><p>当一个候选人等待别人的选票时，它有可能会收到来自其他服务器发来的声明其为领导人的 AppendEntries RPC。如果这个领导人的任期（包含在它的 RPC 中）比当前候选人的当前任期要大，则候选人认为该领导人合法，并且转换自己的状态为追随者。如果在这个 RPC 中的任期小于候选人的当前任期，则候选人会拒绝此次 RPC， 继续保持候选人状态。</p><p>第三种情形是一个候选人既没有赢得选举也没有输掉选举：如果许多追随者在同一时刻都成为了候选人，选票会被分散，可能没有候选人能获得大多数的选票。当这种情形发生时，每一个候选人都会超时，并且通过自增任期号和发起另一轮 RequestVote RPC 来开始新的选举。然而，如果没有其它手段来分配选票的话，这种情形可能会无限的重复下去。</p><p>Raft 使用随机的选举超时时间来确保第三种情形很少发生，并且能够快速解决。为了防止在一开始是选票就被瓜分，选举超时时间是在一个固定的间隔内随机选出来的（例如，150~300ms）。这种机制使得在大多数情况下只有一个服务器会率先超时，它会在其它服务器超时之前赢得选举并且向其它服务器发送心跳信息。同样的机制被用于选票一开始被瓜分的情况下。每一个候选人在开始一次选举的时候会重置一个随机的选举超时时间，在超时进行下一次选举之前一直等待。这能够减小在新的选举中一开始选票就被瓜分的可能性。9.3节 展示了这种方法能够快速的选出一个领导人。</p><p>选举是一个理解性引导我们设计替代算法的一个例子。最开始时，我们计划使用一种排名系统：给每一个候选人分配一个唯一的排名，用于在竞争的候选人之中选择领导人。如果一个候选人发现了另一个比它排名高的候选人，那么它会回到追随者的状态，这样排名高的候选人会很容易地赢得选举。但是我们发现这种方法在可用性方面有一点问题（一个低排名的服务器在高排名的服务器宕机后，需要等待超时才能再次成为候选人，但是如果它这么做的太快，它能重置选举领带人的过程）。我们对这个算法做了多次调整，但是每次调整后都会出现一些新的问题。最终我们认为随机重试的方法是更明确并且更易于理解的。</p><h4 id="日志复制"><a href="#日志复制" class="headerlink" title="日志复制"></a>日志复制</h4><p>一旦选出了领导人，它就开始接收客户端的请求。每一个客户端请求都包含一条需要被复制状态机（replicated state machine）执行的命令。领导人把这条命令作为新的日志条目加入到它的日志中去，然后并行的向其他服务器发起 AppendEntries RPC ，要求其它服务器复制这个条目。当这个条目被安全的复制之后（下面的部分会详细阐述），领导人会将这个条目应用到它的状态机中并且会向客户端返回执行结果。如果追随者崩溃了或者运行缓慢或者是网络丢包了，领导人会无限的重试 AppendEntries RPC（甚至在它向客户端响应之后）知道所有的追随者最终存储了所有的日志条目。</p><p><img src="http://wx2.sinaimg.cn/mw690/0065glrAgy1ffuf5h1x1yj30hl0d7mz7.jpg" alt="Alt text" title="图-6"><br>图-6：日志由有序编号的日志条目组成。每个日志条目包含它被创建时的任期号（每个方块中的数字），并且包含用于状态机执行的命令。如果一个条目能够被状态机安全执行，就被认为可以提交了。<br>日志就像 图-6 所示那样组织的。每个日志条目存储着一条被状态机执行的命令和当这条日志条目被领导人接收时的任期号。日志条目中的任期号用来检测在不同服务器上日志的不一致性，并且能确保 图-3 中的一些特性。每个日志条目也包含一个整数索引来表示它在日志中的位置。</p><p>领导人决定什么时候将日志条目应用到状态机是安全的；这种条目被称为可被提交（commited）。Raft 保证可被提交（commited）的日志条目是持久化的并且最终会被所有可用的状态机执行。一旦被领导人创建的条目已经复制到了大多数的服务器上，这个条目就称为可被提交的（例如，图-6中的7号条目）。领导人日志中之前的条目都是可被提交的（commited），包括由之前的领导人创建的条目。5.4节将会讨论当领导人更替之后这条规则的应用问题的细节，并且也讨论了这种提交方式是安全的。领导人跟踪记录它所知道的被提交条目的最大索引值，并且这个索引值会包含在之后的 AppendEntries RPC 中（包括心跳 heartbeat 中），为的是让其他服务器都知道这条条目已经提交。一旦一个追随者知道了一个日志条目已经被提交，它会将该条目应用至本地的状态机（按照日志顺序）。</p><p>我们设计了 Raft 日志机制来保证不同服务器上日志的一致性。这样做不仅简化了系统的行为使得它更可预测，并且也是保证安全性不可或缺的一部分。Raft 保证以下特性，并且也保证了 表-3 中的日志匹配原则（Log Matching Property）:</p><ul><li>如果在不同日志中的两个条目有着相同的索引和任期号，则它们所存储的命令是相同的。</li><li>如果在不同日志中的两个条目有着相同的索引和任期号，则它们之间的所有条目都是完全一样的。</li></ul><p>第一条特性源于领导人在一个任期里在给定的一个日志索引位置最多创建一条日志条目，同时该条目在日志中的位置也从来不会改变。第二条特性源于 AppendEntries 的一个简单的一致性检查。当发送一个 AppendEntries RPC 时，领导人会把新日志条目紧接着之前的条目的索引位置和任期号都包含在里面。如果追随者没有在它的日志中找到相同索引和任期号的日志，它就会拒绝新的日志条目。这个一致性检查就像一个归纳步骤：一开始空的日志的状态一定是满足日志匹配原则的，一致性检查保证了当日志添加时的日志匹配原则。因此，只要 AppendEntries 返回成功的时候，领导人就知道追随者们的日志和它的是一致的了。</p><p><img src="http://wx2.sinaimg.cn/mw690/0065glrAgy1ffuf5kf7pfj30gf0bamz4.jpg" alt="Alt text" title="图-7"><br>图-7：当最上边的领导人掌权之后，追随者日志可能有以下情况（a~f）。一个格子表示一个日志条目；格子中的数字是它的任期。一个追随者可能会丢失一些条目（a, b）；可能多出来一些未提交的条目（c, d）；或者两种情况都有（e, f）。例如，场景 f 在如下情况下就会发生：如果一台服务器在任期2时是领导人并且往它的日志中添加了一些条目，然后在将它们提交之前就宕机了，之后它很快重启了，成为了任期3的领导人，又往它的日志中添加了一些条目，然后在任期2和任期3中的条目提交之前它又宕机了并且几个任期内都一直处于宕机状态。</p><p>在一般情况下，领导人和追随者们的日志保持一致，因此 AppendEntries 一致性检查通常不会失败。然而，领导人的崩溃会导致日志不一致（旧的领导人可能没有完全复制完日志中的所有条目）。这些不一致会导致一系列领导人和追随者崩溃。图-7 阐述了一些追随者可能和新的领导人日志不同的情况。一个追随者可能会丢失掉领导人上的一些条目，也有可能包含一些领导人没有的条目，也有可能两者都会发生。丢失的或者多出来的条目可能会持续多个任期。</p><p>在 Raft 算法中，领导人通过强制追随者们复制它的日志来处理日志的不一致。这就意味着，在追随者上的冲突日志会被领导者的日志覆盖。5.4节会说明当添加了一个额外的限制之后这是安全的。</p><p>为了使得追随者的日志同自己的一致，领导人需要找到追随者同它的日志一致的地方，然后删除追随者在该位置之后的条目，然后将自己在该位置之后的条目发送给追随者。这些操作都在 AppendEntries RPC 进行一致性检查时完成。领导人给每一个追随者维护了一个nextIndex，它表示领导人将要发送给该追随者的下一条日志条目的索引。当一个领导人开始掌权时，它会将nextIndex初始化为它的最新的日志条目索引数+1（图-7 中的 11）。如果一个追随者的日志和领导者的不一致，AppendEntries 一致性检查会在下一次 AppendEntries RPC 时返回失败。在失败之后，领导人会将nextIndex递减然后重试 AppendEntries RPC。最终nextIndex会达到一个领导人和追随者日志一致的地方。这时，AppendEntries 会返回成功，追随者中冲突的日志条目都被移除了，并且添加所缺少的上了领导人的日志条目。一旦 AppendEntries 返回成功，追随者和领导人的日志就一致了，这样的状态会保持到该任期结束。</p><p>如果需要的话，算法还可以进行优化来减少 AppendEntries RPC 失败的次数。例如，当拒绝了一个 AppendEntries 请求，追随者可以记录下冲突日志条目的任期号和自己存储那个任期的最早的索引。通过这些信息，领导人能够直接递减nextIndex跨过那个任期内所有的冲突条目；这样的话，一个冲突的任期需要一次 AppendEntries RPC，而不是每一个冲突条目需要一次 AppendEntries RPC。在实践中，我们怀疑这种优化是否是必要的，因为AppendEntries 一致性检查很少失败并且也不太可能出现大量的日志条目不一致的情况。</p><p>通过这种机制，一个领导人在掌权时不需要采取另外特殊的方式来恢复日志的一致性。它只需要使用一些常规的操作，通过响应 AppendEntries 一致性检查的失败能使得日志自动的趋于一致。一个领导人从来不会覆盖或者删除自己的日志（表-3 中的领导人只增加原则）。</p><p>这个日志复制机制展示了在第2章中阐述的所希望的一致性特性：Raft 能够接受，复制并且应用新的日志条目只要大部分的服务器是正常的。在通常情况下，一条新的日志条目可以在一轮 RPC 内完成在集群的大多数服务器上的复制；并且一个速度很慢的追随者并不会影响整体的性能。</p><h4 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h4><p>之前的章节中讨论了 Raft 算法是如何进行领导选取和复制日志的。然而，到目前为止这个机制还不能保证每一个状态机能按照相同的顺序执行同样的指令。例如，当领导人提交了若干日志条目的同时一个追随者可能宕机了，之后它又被选为了领导人然后用新的日志条目覆盖掉了旧的那些，最后，不同的状态机可能执行不同的命令序列。</p><p>这一节通过在领带人选取部分加入了一个限制来完善了 Raft 算法。这个限制能够保证对于固定的任期，任何的领导人都拥有之前任期提交的全部日志条目（表-3 中的领导人完全原则）。有了这一限制，日志提交的规则就更清晰了。最后，我们提出了对于领导人完全原则的简单证明并且展示了它是如何修正复制状态机的行为的。</p><h5 id="选举限制"><a href="#选举限制" class="headerlink" title="选举限制"></a>选举限制</h5><p>在所有的以领导人为基础的一致性算法中，领导人最终必须要存储全部已经提交的日志条目。在一些一致性算法中，例如：Viewstamped Replication，即使一开始没有包含全部已提交的条目也可以被选为领导人。这些算法都有一些另外的机制来保证找到丢失的条目并将它们传输给新的领导人，这个过程要么在选举过程中完成，要么在选举之后立即开始。不幸的是，这种方式大大增加了复杂性。Raft 使用了一种更简单的方式来保证在新的领导人开始选举的时候在之前任期的所有已提交的日志条目都会出现在上边，而不需要将这些条目传送给领导人。这就意味着日志条目只有一个流向：从领导人流向追随者。领导人永远不会覆盖已经存在的日志条目。</p><p>Raft 使用投票的方式来阻止没有包含全部日志条目的服务器赢得选举。一个候选人为了赢得选举必须要和集群中的大多数进行通信，这就意味着每一条已经提交的日志条目最少在其中一台服务器上出现。如果候选人的日志至少和大多数服务器上的日志一样新（up-to-date，这个概念会在下边有详细介绍），那么它一定包含有全部的已经提交的日志条目。RequestVote RPC 实现了这个限制：这个 RPC（远程过程调用）包括候选人的日志信息，如果它自己的日志比候选人的日志要新，那么它会拒绝候选人的投票请求。</p><p>Raft 通过比较日志中最后一个条目的索引和任期号来决定两个日志哪一个更新。如果两个日志的任期号不同，任期号大的更新；如果任期号相同，更长的日志更新。</p><h5 id="提交之前任期的日志条目"><a href="#提交之前任期的日志条目" class="headerlink" title="提交之前任期的日志条目"></a>提交之前任期的日志条目</h5><p><img src="http://wx1.sinaimg.cn/mw690/0065glrAgy1ffuf6yhbarj30ih08o3zy.jpg" alt="Alt text" title="图-8"><br>图-8：如图的时间序列说明了为什么领导人不能通过之前任期的日志条目判断它的提交状态。（a）中的 S1 是领导人并且部分复制了索引2上的日志条目。（b）中 S1 崩溃了；S5 通过 S3，S4 和自己的选票赢得了选举，并且在索引2上接收了另一条日志条目。（c）中 S5 崩溃了，S1 重启了，通过 S2，S3 和自己的选票赢得了选举，并且继续索引2处的复制，这时任期2的日志条目已经在大部分服务器上完成了复制，但是还并没有提交。如果在（d）时刻 S1 崩溃了，S5 会通过 S2，S3，S4 的选票成为领导人，然后用它自己在任期3的日志条目覆盖掉其他服务器的日志条目。然而，如果在崩溃之前，S1 在它的当前任期在大多数服务器上复制了一条日志条目，就像在（e）中那样，那么这条条目就会被提交（S5就不会赢得选举）。在这时，之前的日志条目就会正常被提交。<br>正如 5.3节 中描述的那样，只要一个日志条目被存在了在多数的服务器上，领导人就知道当前任期就可以提交该条目了。如果领导人在提交之前就崩溃了，之后的领导人会试着继续完成对日志的复制。然而，领导人并不能断定存储在大多数服务器上的日志条目一定在之前的任期中被提交了。<br>图-8 说明了一种情况，一条存储在了大多数服务器上的日志条目仍然被新上任的领导人覆盖了。</p><p>为了消除 图-8 中描述的问题，Raft 从来不会通过计算复制的数目来提交之前人气的日志条目。只有领导人当前任期的日志条目才能通过计算数目来进行提交。一旦当前任期的日志条目以这种方式被提交，那么由于日志匹配原则（Log Matching Property），之前的日志条目也都会被间接的提交。在某些情况下，领导人可以安全的知道一个老的日志条目是否已经被提交（例如，通过观察该条目是否存储到所有服务器上），但是 Raft 为了简化问题使用了一种更加保守的方法。</p><p>因为当领导人从之前任期复制日志条目时日志条目保留了它们最开始的任期号，所以这使得 Raft 在提交规则中增加了额外的复杂性。在其他的一致性算法中，如果一个新的领导人要从之前的任期中复制日志条目，它必须要使用当前的新任期号。Raft 的方法使得判断日志更加容易，因为它们全程都保持着同样的任期号。另外，和其它的一致性算法相比，Raft 算法中的新领导人会发送更少的之前任期的日志条目（其他算法必须要发送冗余的日志条目并且在它们被提交之前来重新排序）。</p><h5 id="安全性论证"><a href="#安全性论证" class="headerlink" title="安全性论证"></a>安全性论证</h5><p><img src="http://wx3.sinaimg.cn/mw690/0065glrAgy1ffuf71tcy4j30d3075wf9.jpg" alt="Alt text" title="图-9"><br>图-9：如果 S1（任期 T 的领导人）在它的任期提交了一条日志条目，并且 S5 在之后的任期 U 成为了领导人，那么最少会有一台服务器（S3）接收了这条日志条目并且会给 S5 投票。</p><p>给出了完整的 Raft 算法，现在我们能够更精确的论证领导人完全原则（Leader Completeness)（这基于 9.2节 提出的安全性证明）。我们假定领导人完全原则是不成立的，然后推导出矛盾。假定任期 T 的领导人 leaderT在它的任期提交了一个日志条目，但是这条日志条目并没有存储在之后的任期中的领导人上。我们设大于 T 的最小的任期 U 的领导人（leaderU） 没有存储这条日志条目。</p><ol><li>在 leaderU 选举时一定没有那条被提交的日志条目（领导人从来不会删除或者覆盖日志条目）。</li><li>leaderT 复制了这个条目到集群的大多数的服务器上。因此，只是有一台服务器（投票者）即接收了来自 leaderT 的日志条目并且给 leaderU 投票，就像 图-9 中所示那样。这个投票者是产生矛盾的关键。</li><li>投票者必须在给 leaderU 投票之前接收来自 leaderT 的日志条目；否则它会拒绝来自 leaderT 的 AppendEntries 请求（它的当前任期会比 T 要大）。</li><li>投票者会在它给 leaderU 投票时存储那个条目，因为任何中间的领导人都保有该条目（基于假设），领导人从来不会移除这个条目，并且追随者也只会在和领导人冲突时才会移除日志条目。</li><li>投票者给 leaderU 投票了，所以 leaderU 的日志必须和投票者的一样新。这就导致了一个矛盾。</li><li>首先，如果投票者和 leaderU 最后一条日志条目的任期号相同，那么 leaderU 的日志一定和投票者的一样长，因此它的日志包含全部投票者的日志条目。这是矛盾的，因为在假设中投票者和 leaderU 包含的已提交条目是不同的。</li><li>除此之外， leaderU 的最后一条日志的任期号一定比投票者的大。另外，它也比 T 要大，因为投票者的最后一条日志条目的任期号最小也要是 T（它包含了所有任期 T 提交的日志条目）。创建 leaderU 最后一条日志条目的上一任领导人必须包含已经提交的日志条目（基于假设）。那么，根据日志匹配原则（Log Matching），leaderU 也一定包含那条提交的日志条目，这也是矛盾的。</li><li>这时就完成了矛盾推导。因此，所有比任期 T 大的领导人一定包含所有在任期 T 提交的日志条目。</li><li>日志匹配原则（Log Matching）保证了未来的领导人也会包含被间接提交的日志条目，就像 图-8 中（d）时刻索引为2的条目。</li></ol><p>通过给出了 领导人完全原则（Leader Completeness)，我们能够证明 表-3 中的状态机安全原则（State Machine Safety），状态机安全原则（State Machine Safety）讲的是如果一台服务器将给定索引上的日志条目应用到了它自己的状态机上，其它服务器的同一索引位置不可能应用的是其它条目。在一个服务器应用一条日志条目到它自己的状态机中时，它的日志必须和领导人的日志在该条目和之前的条目上相同，并且已经被提交。现在我们来考虑在任何一个服务器应用一个指定索引位置的日志的最小任期；日志完全特性（Log Completeness Property）保证拥有更高任期号的领导人会存储相同的日志条目，所以之后的任期里应用某个索引位置的日志条目也会是相同的值。因此，状态机安全特性是成立的。</p><p>最后，Raft 算法需要服务器按照日志中索引位置顺序应用日志条目。和状态机安全特性结合起来看，这就意味着所有的服务器会应用相同的日志序列集到自己的状态机中，并且是按照相同的顺序。</p><h4 id="追随者和候选人崩溃"><a href="#追随者和候选人崩溃" class="headerlink" title="追随者和候选人崩溃"></a>追随者和候选人崩溃</h4><p>截止到目前，我们只讨论了领导人崩溃的问题。追随者和候选人崩溃的问题解决起来要比领导人崩溃要简单得多，这两者崩溃的处理方式是一样的。如果一个追随者或者候选人崩溃了，那么之后的发送给它的 RequestVote RPC 和 AppendEntries RPC 会失败。Raft 通过无限的重试来处理这些失败；如果崩溃的服务器重启了，RPC 就会成功完成。如果一个服务器在收到了 RPC 之后但是在响应之前崩溃了，那么它会在重启之后再次收到同一个 RPC。因为 Raft 中的 RPC 都是幂等的，因此不会有什么问题。例如，如果一个追随者收到了一个已经包含在它的日志中的 AppendEntries 请求，它会忽视这个新的请求。</p><h4 id="时序和可用性"><a href="#时序和可用性" class="headerlink" title="时序和可用性"></a>时序和可用性</h4><p>我们对于 Raft 的要求之一就是安全性不依赖于时序（timing）：系统不能仅仅因为一些事件发生的比预想的快一些或慢一些就产生错误。然而，可用性（系统可以及时响应客户端的特性）不可避免的要依赖时序。例如，如果消息交换在服务器崩溃时花费更多的时间，候选人不会等待太长的时间来赢得选举；没有一个稳定的领导人，Raft 将无法工作。</p><p>领导人选取是 Raft 中对时序要求最关键的地方。Raft 会选出并且保持一个稳定的领导人只有系统满足下列时序要求（timing requirement）：</p><p><code>broadcastTime &lt;&lt; electionTimeout &lt;&lt; MTBF</code></p><p>在这个不等式中，broadcastTime指的是一台服务器并行的向集群中的其他服务器发送 RPC 并且收到它们的响应的平均时间；electionTimeout指的就是在 5.2节 描述的选举超时时间；MTBF指的是单个服务器发生故障的间隔时间的平均数。broadcastTime应该比electionTimeout小一个数量级，为的是使领导人能够持续发送心跳信息（heartbeat）来阻止追随者们开始选举；根据已经给出的随机化选举超时时间方法，这个不等式也使得瓜分选票的情况变成不可能。electionTimeout也要比MTBF小几个数量级，为的是使得系统稳定运行。当领导人崩溃时，整个大约会在electionTimeout的时间内不可用；我们希望这种情况仅占全部时间的很小的一部分。</p><p>broadcastTime和MTBF是由系统决定的性质，但是electionTimeout是我们必须做出选择的。Raft 的 RPC 需要接收方将信息持久化的保存到稳定存储中去，所以广播时间大约是 0.5 毫秒到 20 毫秒，这取决于存储的技术。因此，electionTimeout一般在 10ms 到 500ms 之间。大多数的服务器的MTBF都在几个月甚至更长，很容易满足这个时序需求。</p><h3 id="集群成员变化"><a href="#集群成员变化" class="headerlink" title="集群成员变化"></a>集群成员变化</h3><p>截止到目前，我们都假定集群的配置（加入到一致性算法的服务器集合）是固定的。在实际中，我们会经常更改配置，例如，替换掉那些崩溃的机器或者更改复制级别。虽然通过关闭整个集群，升级配置文件，然后重启整个集群也可以解决这个问题，但是这回导致在更改配置的过程中，整个集群不可用。另外，如果存在需要手工操作，那么就会有操作失误的风险。为了避免这些问题，我们决定采用自动改变配置并且把这部分加入到了 Raft 一致性算法中。</p><p>为了让配置修改机制能够安全，那么在转换的过程中在任何时间点两个领导人不能再同一个任期被同时选为领导人。不幸的是，服务器集群从旧的配置直接升级到新的配置的任何方法都是不安全的，一次性自动的转换所有服务器是不可能的，所以集群可以在转换的过程中划分成两个单独的组（如 图-10 所示）。</p><p><img src="http://wx3.sinaimg.cn/mw690/0065glrAgy1ffuf74xy9vj30f00a3mxw.jpg" alt="Alt text" title="图-10"><br>图-10：从一个配置切换到另一个配置是不安全的因为不同的服务器会在不同的时间点进行切换。在这个例子中，集群数量从三台转换成五台。不幸的是，在一个时间点有两个服务器能被选举成为领导人，一个是在使用旧的配置的机器中（Cold）选出的领导人，另一个领导人是通过新的配置（Cnew）选出来的。</p><p>为了保证安全性，集群配置的调整必须使用两阶段（two-phase）方法。有许多种实现两阶段方法的实现。例如，一些系统在第一个阶段先把旧的配置设为无效使得它无法处理客户端请求，然后在第二阶段启用新的配置。在 Raft 中，集群先切换到一个过渡配置，我们称其为共同一致（joint consensus）；一旦共同一致被提交了，然后系统再切换到新的配置。共同一致是旧的配置和新的配置的组合：</p><ul><li>日志条目被复制给集群中新、老配置的所有服务器。</li><li>新、老配置的服务器都能成为领导人。</li><li>需要分别在两种配置上获得大多数的支持才能达成一致（针对选举和提交）</li></ul><p>共同一致允许独立的服务器在不影响安全性的前提下，在不同的时间进行配置转换过程。此外，共同一致可以让集群在配置转换的过程中依然能够响应服务器请求。</p><p><img src="http://wx3.sinaimg.cn/mw690/0065glrAgy1ffuf781rfkj30gq088aas.jpg" alt="Alt text" title="图-11"><br>图-11：集群配置变更的时间线。虚线表示的是已经被创建但是还没提交的配置条目，实线表示的是最新提交的配置条目。领导人首先在它的日志中创建 Cold,new配置条目并且将它提交到Cold,new（使用旧配置的大部分服务器和使用新配置的大部分服务器）。然后创建它创建Cnew配置条目并且将它提交到使用新配置的大部分机器上。这样就不存在Cold和Cnew能够分别同时做出决定的时刻。</p><p>集群配置在复制日志中用特殊的日志条目来存储和通信；图-11 展示了配置变更的过程。当一个领导人接收到一个改变配置 Cold 为 Cnew 的请求，它会为了共同一致以前面描述的日志条目和副本的形式将配置存储起来（图中的 Cold,new）。一旦一个服务器将新的配置日志条目增加到它的日志中，它就会用这个配置来做出未来所有的决定（服务器总是使用最新的配置，无论它是否已经被提交）。这意味着领导人要使用 Cold,new 的规则来决定日志条目 Cold,new 什么时候需要被提交。如果领导人崩溃了，被选出来的新领导人可能是使用 Cold 配置也可能是 Cold,new 配置，这取决于赢得选举的候选人是否已经接收到了 Cold,new 配置。在任何情况下， Cnew 配置在这一时期都不会单方面的做出决定。</p><p>一旦 Cold,new 被提交，那么无论是 Cold 还是 Cnew，在没有经过他人批准的情况下都不可能做出决定，并且领导人完全特性（Leader Completeness Property）保证了只有拥有 Cold,new 日志条目的服务器才有可能被选举为领导人。这个时候，领导人创建一条关于 Cnew 配置的日志条目并复制给集群就是安全的了。另外，每个服务器在收到新的配置的时候就会立即生效。当新的配置在 Cnew 的规则下被提交，旧的配置就变得无关紧要，同时不使用新的配置的服务器就可以被关闭了。如 图-11，Cold 和 Cnew 没有任何机会同时做出单方面的决定；这就保证了安全性。</p><p>针对重新配置提出了三个问题。第一个问题是一开始的时候新的服务器可能没有任何日志条目。如果它们在这个状态下加入到集群中，那么它们需要一段时间来更新追赶，在这个阶段它们还不能提交新的日志条目。为了避免这种可用性的间隔时间，Raft 在配置更新的时候使用了一种额外的阶段，在这个阶段，新的服务器以没有投票权的身份加入到集群中来（领导人复制日志给他们，但是不把它们考虑到大多数中）。一旦新的服务器追赶上了集群中的其它机器，重新配置可以像上面描述的一样处理。</p><p>第二个问题是，集群的领导人可能不是新配置的一员。在这种情况下，领导人就会在提交了 Cnew 日志之后退位（回到跟随者状态）。这意味着有这样的一段时间，领导人管理着集群，但是不包括自己；它复制日志但是不把它自己看作是大多数之一。当 Cnew 被提交时，会发生领导人过渡，因为这时是新的配置可以独立工作的最早的时间点（总是能够在 Cnew 配置下选出新的领导人）。在此之前，可能只能从 Cold 中选出领导人。</p><p>第三个问题是，移除不在 Cnew 中的服务器可能会扰乱集群。这些服务器将不会再接收到心跳（heartbeat），所以当选举超时时，它们就会进行新的选举过程。它们会发送带有新的任期号的 RequestVote RPC，这样会导致当前的领导人回退成跟随者状态。新的领导人最终会被选出来，但是被移除的服务器将会再次超时，然后这个过程会再次重复，导致整体可用性大幅降低。</p><p>为了避免这个问题，当服务器确认当前领导人存在时，服务器会忽略 RequestVote RPC。特别的，当服务器在当前最小选举超时时间内收到一个 RequestVote RPC，它不会更新当前的任期号或者投出选票。这不会影响正常的选举，每个服务器在开始一次选举之前，至少等待一个最小选举超时时间。然而，这有利于避免被移除的服务器扰乱：如果领导人能够发送心跳给集群，那么它就不会被更大的任期号废除。</p><h3 id="日志压缩"><a href="#日志压缩" class="headerlink" title="日志压缩"></a>日志压缩</h3><p>Raft 产生的日志在持续的正常操作中不断增长，但是在实际的系统中，它不会无限的增长下去。随着日志的不断增长，它会占据越来越多的空间并且花费更多的时间重置。如果没有一个机制使得它能够废弃在日志中不断累积的过时的信息就会引起可用性问题。</p><p>快照（snapshot）是最简单的压缩方式。在快照中，全部的当前系统状态都被写入到快照中，存储到持久化的存储中，然后在那个时刻之前的全部日志都可以被丢弃。在 Chubby 和 ZooKeeper 中都使用了快照技术，这一章的剩下的部分会介绍 Raft 中使用的快照技术。</p><p>增量压缩（incremental approaches）的方法，例如日志清理（log cleaning）或者日志结构合并树（log-structured merge trees），都是可行的。这些方法每次只对一小部分数据进行操作，这样就分散了压缩的负载压力。首先，他们先选择一个已经积累的大量已经被删除或者被覆盖对象的区域，然后重写那个区域还活跃的对象，之后释放那个区域。和简单操作整个数据集合的快照相比，需要增加复杂的机制来实现。状态机可以使用和快照相同的接口来实现 LSM tree ，但是日志清除方法就需要修改 Raft 了。</p><p><img src="http://wx1.sinaimg.cn/mw690/0065glrAgy1ffuf7bia1bj30g70aeabe.jpg" alt="Alt text" title="图-12"><br>图-12：一个服务器用新的快照替换了从 1 到 5 的条目，快照值存储了当前的状态。快照中包含了最后的索引位置和任期号。<br>图-12 展示了 Raft 中快照的基础思想。每个服务器独立的创建快照，只包括已经被提交的日志。主要的工作包括将状态机的状态写入到快照中。Raft 也将一些少量的元数据包含到快照中：最后被包含的索引（last included index）指的是被快照取代的最后的条目在日志中的索引值（状态机最后应用的日志），最后被包含的任期（last included term）指的是该条目的任期号。保留这些数据是为了支持快照前的第一个条目的附加日志请求时的一致性检查，因为这个条目需要最后的索引值和任期号。为了支持集群成员更新（第 6 章），快照中也将最后的一次配置作为最后一个条目存下来。一旦服务器完成一次快照，他就可以删除最后索引位置之前的所有日志和快照了。</p><p>尽管通常服务器都是独立的创建快照，但是领导人必须偶尔的发送快照给一些落后的跟随者。这通常发生在当领导人已经丢弃了下一条需要发送给跟随者的日志条目的时候。幸运的是这种情况不是常规操作：一个与领导人保持同步的跟随者通常都会有这个条目。然而一个运行非常缓慢的跟随者或者新加入集群的服务器（第 6 章）将不会有这个条目。这时让这个跟随者更新到最新的状态的方式就是通过网络把快照发送给它们。</p><ul><li>安装快照 RPC（InstallSnapshot RPC）</li></ul><p>在领导人发送快照给跟随者时使用调用。领导人总是按顺序发送。</p><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:center">term</td><td style="text-align:left">领导人的任期</td></tr><tr><td style="text-align:center">leaderId</td><td style="text-align:left">为了追随者能重定向到客户端</td></tr><tr><td style="text-align:center">lastIncludedIndex</td><td style="text-align:left">快照中包含的最后日志条目的索引值</td></tr><tr><td style="text-align:center">offset</td><td style="text-align:left">分块在快照中的偏移量</td></tr><tr><td style="text-align:center">data[]</td><td style="text-align:left">快照块的原始数据</td></tr><tr><td style="text-align:center">done</td><td style="text-align:left">如果是最后一块数据则为真</td></tr></tbody></table><table><thead><tr><th style="text-align:center">返回值</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:center">term</td><td style="text-align:left">currentTerm，用于领导人更新自己</td></tr></tbody></table><p><strong>接受者需要实现</strong>：</p><ul><li>如果term &lt; currentTerm立刻回复</li><li>如果是第一个分块（offset 为 0）则创建新的快照</li><li>在指定的偏移量写入数据</li><li>如果 done为 false，则回复并继续等待之后的数据</li><li>保存快照文件，丢弃所有存在的或者部分有着更小索引号的快照</li><li>如果现存的日志拥有相同的最后任期号和索引值，则后面的数据继续保留并且回复</li><li>丢弃全部日志</li><li>能够使用快照来恢复状态机（并且装载快照中的集群配置）</li></ul><p>在这种情况下领导人使用一种叫做安装快照（InstallSnapshot）的新的 RPC 来发送快照给太落后的跟随者；见 表-13。当跟随者通过这种 RPC 接收到快照时，它必须自己决定对于已经存在的日志该如何处理。通常快照会包含没有在接收者日志中存在的信息。在这种情况下，跟随者直接丢弃它所有的日志；这些会被快照所取代，但是可能会和没有提交的日志产生冲突。如果接收到的快照是自己日志的前面部分（由于网络重传或者错误），那么被快照包含的条目将会被全部删除，但是快照之后的条目必须是正确的和并且被保留下来。</p><p>这种快照的方式背离了 Raft 的强领导人原则（strong leader principle），因为跟随者可以在不知道领导人情况下创建快照。但是我们认为这种背离是值得的。领导人的存在，是为了解决在达成一致性的时候的冲突，但是在创建快照的时候，一致性已经达成，这时不存在冲突了，所以没有领导人也是可以的。数据依然是从领导人传给跟随者，只是跟随者可以重新组织它们的数据了。</p><p>我们考虑过一种替代的基于领导人的快照方案，即只有领导人创建快照，然后发送给所有的跟随者。但是这样做有两个缺点。第一，发送快照会浪费网络带宽并且延缓了快照处理的时间。每个跟随者都已经拥有了所有产生快照需要的信息，而且很显然，自己从本地的状态中创建快照比通过网络接收别人发来的要经济。第二，领导人的实现会更加复杂。例如，领导人需要发送快照的同时并行的将新的日志条目发送给跟随者，这样才不会阻塞新的客户端请求。</p><p>还有两个问题影响了快照的性能。首先，服务器必须决定什么时候应该创建快照。如果快照创建的过于频繁，那么就会浪费大量的磁盘带宽和其他资源；如果创建快照频率太低，它就要承受耗尽存储容量的风险，同时也增加了从日志重建的时间。一个简单的策略就是当日志大小达到一个固定大小的时候就创建一次快照。如果这个阈值设置的显著大于期望的快照的大小，那么快照对磁盘压力的影响就会很小了。</p><p>第二个影响性能的问题就是写入快照需要花费显著的一段时间，并且我们还不希望影响到正常操作。解决方案是通过写时复制（copy-on-write）的技术，这样新的更新就可以被接收而不影响到快照。例如，具有函数式数据结构的状态机天然支持这样的功能。另外，操作系统的写时复制技术的支持（如 Linux 上的 fork）可以被用来创建完整的状态机的内存快照（我们的实现就是这样的）。</p><h3 id="客户端交互"><a href="#客户端交互" class="headerlink" title="客户端交互"></a>客户端交互</h3><p>这一节将介绍客户端是如何和 Raft 进行交互的，包括客户端是如何发现领导人的和 Raft 是如何支持线性化语义（linearizable semantics）的。这些问题对于所有基于一致性的系统都存在，并且 Raft 的解决方案和其他的也差不多。</p><p>Raft 中的客户端将所有请求发送给领导人。当客户端启动的时候，它会随机挑选一个服务器进行通信。如果客户端第一次挑选的服务器不是领导人，那么那个服务器会拒绝客户端的请求并且提供它最近接收到的领导人的信息（附加条目请求包含了领导人的网络地址）。如果领导人已经崩溃了，那么客户端的请求就会超时；客户端之后会再次重试随机挑选服务器的过程。</p><p>我们 Raft 的目标是要实现线性化语义（linearizable semantics）（每一次操作立即执行，在它调用和收到回复之间只执行一次）。但是，如上述所说，Raft 是可以多次执行同一条命令的：例如，如果领导人在提交了这条日志之后，但是在响应客户端之前崩溃了，那么客户端会和新的领导人重试这条指令，导致这条命令就被再次执行了。解决方案就是客户端对于每一条指令都赋予一个唯一的序列号。然后，状态机跟踪每条指令最新的序列号和相应的响应。如果接收到一条指令，它的序列号已经被执行了，那么就立即返回结果，而不重新执行指令。</p><p>只读（read-only）的操作可以直接处理而不需要记录日志。但是，在不增加任何限制的情况下，这么做可能会冒着返回过期数据(stale data)的风险，因为领导人响应客户端请求时可能已经被新的领导人作废了，但是它还不知道。线性化的读操作必须不能返回过期数据，Raft 需要使用两个额外的措施在不使用日志的情况下保证这一点。首先，领导人必须有关于被提交日志的最新信息。领导人完全原则（Leader Completeness Property）保证了领导人一定拥有所有已经被提交的日志条目，但是在它任期开始的时候，它可能不知道哪些是已经被提交的。为了知道这些信息，它需要在它的任期里提交一条日志条目。Raft 中通过领导人在任期开始的时候提交一个空白的没有任何操作的日志条目到日志中去来进行实现。第二，领导人在处理只读的请求之前必须检查自己是否已经被废除了（如果一个更新的领导人被选举出来，它自己的信息就已经过期了）。Raft 中通过让领导人在响应只读请求之前，先和集群中的大多数节点交换一次心跳（heartbeat）信息来处理这个问题。另外，领导人可以依赖心跳机制来实现一种租约的机制，但是这种方法依赖时序来保证安全性（它假设时间误差是有界的）。</p><h3 id="实现和评价"><a href="#实现和评价" class="headerlink" title="实现和评价"></a>实现和评价</h3><p>我们已经为 RAMCloud 实现了 Raft 算法作为存储配置信息的复制状态机的一部分，并且帮助 RAMCloud 协调故障转移。这个 Raft 实现包含大约 2000 行 C++ 代码，其中不包括测试、注释和空行。这些代码是开源的。同时也有大约 25 个其他独立的第三方的基于这篇论文草稿的开源实现，针对不同的开发场景。同时，很多公司已经部署了基于 Raft 的系统。</p><p>这一章会从三个方面来评估 Raft 算法：可理解性、正确性和性能。</p><h3 id="相关工作"><a href="#相关工作" class="headerlink" title="相关工作"></a>相关工作</h3><p>已经有很多关于一致性算法的工作被发表出来，其中很多都可以归到下面的类别中：</p><ul><li>Lamport 关于 Paxos 的原始描述，和尝试描述的更清晰的论文。</li><li>关于 Paxos 的更详尽的描述，补充遗漏的细节并修改算法，使得可以提供更加容易的实现基础。</li><li>实现一致性算法的系统，例如 Chubby，ZooKeeper 和 Spanner。对于 Chubby 和 Spanner 的算法并没有公开发表其技术细节，尽管他们都声称是基于 Paxos 的。ZooKeeper 的算法细节已经发表，但是和 Paxos 有着很大的差别。</li><li>Paxos 可以应用的性能优化。</li><li>Oki 和 Liskov 的 Viewstamped Replication（VR），一种和 Paxos 差不多的替代算法。原始的算法描述和分布式传输协议耦合在了一起，但是核心的一致性算法在最近的更新里被分离了出来。VR 使用了一种基于领导人的方法，和 Raft 有很多相似之处。</li></ul><p>Raft 和 Paxos 最大的不同之处就在于 Raft 的强领导特性：Raft 使用领导人选举作为一致性协议里必不可少的部分，并且将尽可能多的功能集中到了领导人身上。这样就可以使得算法更加容易理解。例如，在 Paxos 中，领导人选举和基本的一致性协议是正交的：领导人选举仅仅是性能优化的手段，而且不是一致性所必须要求的。但是，这样就增加了多余的机制：Paxos 同时包含了针对基本一致性要求的两阶段提交协议和针对领导人选举的独立的机制。相比较而言，Raft 就直接将领导人选举纳入到一致性算法中，并作为两阶段一致性的第一步。这样就减少了很多机制。</p><p>像 Raft 一样，VR 和 ZooKeeper 也是基于领导人的，因此他们也拥有一些 Raft 的优点。但是，Raft 比 VR 和 ZooKeeper 拥有更少的机制因为 Raft 尽可能的减少了非领导人的功能。例如，Raft 中日志条目都遵循着从领导人发送给其他人这一个方向：附加条目 RPC 是向外发送的。在 VR 中，日志条目的流动是双向的（领导人可以在选举过程中接收日志）；这就导致了额外的机制和复杂性。根据 ZooKeeper 公开的资料看，它的日志条目也是双向传输的，但是它的实现更像 Raft。</p><p>和上述我们提及的其他基于一致性的日志复制算法中，Raft 的消息类型更少。例如，我们数了一下 VR 和 ZooKeeper 使用的用来基本一致性需要和成员改变的消息数（排除了日志压缩和客户端交互，因为这些都比较独立且和算法关系不大）。VR 和 ZooKeeper 都分别定义了 10 中不同的消息类型，相对的，Raft 只有 4 中消息类型（两种 RPC 请求和对应的响应）。Raft 的消息都稍微比其他算法的要信息量大，但是都很简单。另外，VR 和 ZooKeeper 都在领导人改变时传输了整个日志；所以为了能够实践中使用，额外的消息类型就很必要了。</p><p>Raft 的强领导人模型简化了整个算法，但是同时也排斥了一些性能优化的方法。例如，平等主义 Paxos （EPaxos）在某些没有领导人的情况下可以达到很高的性能。平等主义 Paxos 充分发挥了在状态机指令中的交换性。任何服务器都可以在一轮通信下就提交指令，除非其他指令同时被提出了。然而，如果指令都是并发的被提出，并且互相之间不通信沟通，那么 EPaxos 就需要额外的一轮通信。因为任何服务器都可以提交指令，所以 EPaxos 在服务器之间的负载均衡做的很好，并且很容易在 WAN 网络环境下获得很低的延迟。但是，他在 Paxos 上增加了非常明显的复杂性。</p><p>一些集群成员变换的方法已经被提出或者在其他的工作中被实现，包括 Lamport 的原始的讨论，VR 和 SMART。我们选择使用共同一致（joint consensus）的方法因为它对一致性协议的其他部分影响很小，这样我们只需要很少的一些机制就可以实现成员变换。Raft 没有采用 Lamport 的基于 α 的方法是因为它假设在没有领导人的情况下也可以达到一致性。和 VR 和 SMART 相比较，Raft 的重新配置算法可以在不限制正常请求处理的情况下进行；相比较而言，VR 需要停止所有的处理过程，SMART 引入了一个和 α 类似的方法，限制了请求处理的数量。和 VR、SMART 比较而言，Raft 的方法同时需要更少的额外机制来实现。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>算法的设计通常会把正确性，效率或者简洁作为主要的目标。尽管这些都是很有意义的目标，但是我们相信，可理解性也是一样的重要。在开发者把算法应用到实际的系统中之前，这些目标没有一个会被实现，这些都会必然的偏离发表时的形式。除非开发人员对这个算法有着很深的理解并且有着直观的感觉，否则将会对他们而言很难在实现的时候保持原有期望的特性。</p><p>在这篇论文中，我们尝试解决分布式一致性问题，但是一个广为接受但是十分令人费解的算法 Paxos 已经困扰了无数学生和开发者很多年了。我们创造了一种新的算法 Raft，显而易见的比 Paxos 要容易理解。我们同时也相信，Raft 也可以为实际的实现提供坚实的基础。把可理解性作为设计的目标改变了我们设计 Raft 的方式；这个过程是我们发现我们最终很少有技术上的重复，例如问题分解和简化状态空间。这些技术不仅提升了 Raft 的可理解性，同时也使我们坚信其正确性。</p><p>本文的版权归作者 罗远航 所有，采用 Attribution-NonCommercial 3.0 License。任何人可以进行转载、分享，但不可在未经允许的情况下用于商业用途；转载请注明出处。感谢配合！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇博客为著名的 RAFT 一致性算法论文的中文翻译，论文名为&lt;a href=&quot;https://ramcloud.atlassian.net/wiki/download/attachments/6586375/raft.pdf&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《In search of an Understandable Consensus Algorithm (Extended Version)》&lt;/a&gt;(寻找一种易于理解的一致性算法)。&lt;/p&gt;
&lt;p&gt;Raft 是一种用来管理日志复制的一致性算法。它和 Paxos 的性能和功能是一样的，但是它和 Paxos 的结构不一样；这使得 Raft 更容易理解并且更易于建立实际的系统。为了提高理解性，Raft 将一致性算法分为了几个部分，例如领导选取（leader selection），日志复制（log replication）和安全性（safety），同时它使用了更强的一致性来减少了必须需要考虑的状态。从用户学习的结果来看，Raft 比 Paxos 更容易学会。Raft 还包括了一种新的机制来使得动态改变集群成员，它使用重叠大多数（overlapping majorities）来保证安全。&lt;/p&gt;
    
    </summary>
    
      <category term="笔记" scheme="http://www.jerrylou.me/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="分布式" scheme="http://www.jerrylou.me/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
      <category term="raft" scheme="http://www.jerrylou.me/tags/raft/"/>
    
      <category term="算法" scheme="http://www.jerrylou.me/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
</feed>
